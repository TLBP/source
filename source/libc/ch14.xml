<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch14.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-File-System-Interface">
 <title>Dosya Sistemi Arayüzü</title>
 <titleabbrev>Dosyalarla çalışmak için işlevler.</titleabbrev>
 <preliminary>
  <para>This chapter describes the GNU C Library’s functions for manipulating
files.  Unlike the input and output functions (see <xref linkend="glibc-I-O-on-Streams"/>;
see <xref linkend="glibc-Low-Level-I-O"/>), these functions are concerned with operating
on the files themselves rather than on their contents.
</para>
<para>Among the facilities described in this chapter are functions for
examining or modifying directories, functions for renaming and deleting
files, and functions for examining and setting file attributes such as
access permissions and modification times.
</para>
 </preliminary>
<!--
<sect xml:id="glibc-Working-Directory">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="n" rel="next">Accessing Directories</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Working-Directory-1"></span><h3 class="section">14.1 Working Directory</title>

<span xml:id="glibc-index-current-working-directory"></span>
<span xml:id="glibc-index-working-directory"></span>
<span xml:id="glibc-index-change-working-directory"></span>
<para>Each process has associated with it a directory, called its <emphasis>current
working directory</emphasis> or simply <emphasis>working directory</emphasis>, that is used in
the resolution of relative file names (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Resolution">File Name Resolution</a>).
</para>
<para>When you log in and begin a new session, your working directory is
initially set to the home directory associated with your login account
in the system user database.  You can find any user’s home directory
using the <code>getpwuid</code> or <code>getpwnam</code> functions; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#User-Database">User Database</a>.
</para>
<para>Users can change the working directory using shell commands like
<code>cd</code>.  The functions described in this section are the primitives
used by those commands and by other programs for examining and changing
the working directory.
<span xml:id="glibc-index-cd"></span>
</para>
<para>Prototypes for these functions are declared in the header file
<filename>unistd.h</filename>.
<span xml:id="glibc-index-unistd_002eh-4"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-getcwd"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>getcwd</strong> <emphasis>(char *<var>buffer</var>, size_t <var>size</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getcwd" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <code>getcwd</code> function returns an absolute file name representing
the current working directory, storing it in the character array
<var>buffer</var> that you provide.  The <var>size</var> argument is how you tell
the system the allocation size of <var>buffer</var>.
</para>
<para>The GNU C Library version of this function also permits you to specify a
null pointer for the <var>buffer</var> argument.  Then <code>getcwd</code>
allocates a buffer automatically, as with <code>malloc</code>
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Unconstrained-Allocation">Unconstrained Allocation</a>).  If the <var>size</var> is greater than
zero, then the buffer is that large; otherwise, the buffer is as large
as necessary to hold the result.
</para>
<para>The return value is <var>buffer</var> on success and a null pointer on failure.
The following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>size</var> argument is zero and <var>buffer</var> is not a null pointer.
</para>
</dd>
<dt><span><code>ERANGE</code></span></dt>
<dd><para>The <var>size</var> argument is less than the length of the working directory
name.  You need to allocate a bigger array and try again.
</para>
</dd>
<dt><span><code>EACCES</code></span></dt>
<dd><para>Permission to read or search a component of the file name was denied.
</para></dd>
</dl>
</dd></dl>

<para>You could implement the behavior of GNU’s <code>getcwd&nbsp;(NULL,&nbsp;0)</code>
using only the standard behavior of <code>getcwd</code>:
</para>
<div class="example">
<pre class="example">char *
gnu_getcwd ()
{
  size_t size = 100;

  while (1)
    {
      char *buffer = (char *) xmalloc (size);
      if (getcwd (buffer, size) == buffer)
        return buffer;
      free (buffer);
      if (errno != ERANGE)
        return 0;
      size *= 2;
    }
}
</pre></div>

<para>See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Malloc-Examples">Examples of <code>malloc</code></a>, for information about <code>xmalloc</code>, which is
not a library function but is a customary name used in most GNU
software.
</para>
<dl class="def">
<dt xml:id="glibc-index-getwd"><span class="category">Deprecated Function: </span><span><emphasis>char *</emphasis> <strong>getwd</strong> <emphasis>(char *<var>buffer</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getwd" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap i18n
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This is similar to <code>getcwd</code>, but has no way to specify the size of
the buffer.  The GNU C Library provides <code>getwd</code> only
for backwards compatibility with BSD.
</para>
<para>The <var>buffer</var> argument should be a pointer to an array at least
<code>PATH_MAX</code> bytes long (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Limits-for-Files">Limits on File System Capacity</a>).  On GNU/Hurd systems
there is no limit to the size of a file name, so this is not
necessarily enough space to contain the directory name.  That is why
this function is deprecated.
</para></dd></dl>

<span xml:id="glibc-index-PWD"></span>
<dl class="def">
<dt xml:id="glibc-index-get_005fcurrent_005fdir_005fname"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>get_current_dir_name</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-get_005fcurrent_005fdir_005fname" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe env
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>get_current_dir_name</code> function is basically equivalent to
<code>getcwd&nbsp;(NULL,&nbsp;0)</code>, except the value of the <code>PWD</code>
environment variable is first examined, and if it does in fact
correspond to the current directory, that value is returned.  This is
a subtle difference which is visible if the path described by the
value in <code>PWD</code> is using one or more symbolic links, in which case
the value returned by <code>getcwd</code> would resolve the symbolic links
and therefore yield a different result.
</para>
<para>This function is a GNU extension.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-chdir"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>chdir</strong> <emphasis>(const char *<var>filename</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-chdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is used to set the process’s working directory to
<var>filename</var>.
</para>
<para>The normal, successful return value from <code>chdir</code> is <code>0</code>.  A
value of <code>-1</code> is returned to indicate an error.  The <code>errno</code>
error conditions defined for this function are the usual file name
syntax errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), plus <code>ENOTDIR</code> if the
file <var>filename</var> is not a directory.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-fchdir"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>fchdir</strong> <emphasis>(int <var>filedes</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-fchdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is used to set the process’s working directory to
directory associated with the file descriptor <var>filedes</var>.
</para>
<para>The normal, successful return value from <code>fchdir</code> is <code>0</code>.  A
value of <code>-1</code> is returned to indicate an error.  The following
<code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>Read permission is denied for the directory named by <code>dirname</code>.
</para>
</dd>
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>filedes</var> argument is not a valid file descriptor.
</para>
</dd>
<dt><span><code>ENOTDIR</code></span></dt>
<dd><para>The file descriptor <var>filedes</var> is not associated with a directory.
</para>
</dd>
<dt><span><code>EINTR</code></span></dt>
<dd><para>The function call was interrupt by a signal.
</para>
</dd>
<dt><span><code>EIO</code></span></dt>
<dd><para>An I/O error occurred.
</para></dd>
</dl>
</dd></dl>


<hr>
</div>
<sect xml:id="glibc-Accessing-Directories">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Working-with-Directory-Trees" accesskey="n" rel="next">Working with Directory Trees</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Working-Directory" accesskey="p" rel="prev">Working Directory</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Accessing-Directories-1"></span><h3 class="section">14.2 Accessing Directories</title>
<span xml:id="glibc-index-accessing-directories"></span>
<span xml:id="glibc-index-reading-from-a-directory"></span>
<span xml:id="glibc-index-directories_002c-accessing"></span>

<para>The facilities described in this section let you read the contents of a
directory file.  This is useful if you want your program to list all the
files in a directory, perhaps as part of a menu.
</para>
<span xml:id="glibc-index-directory-stream"></span>
<para>The <code>opendir</code> function opens a <emphasis>directory stream</emphasis> whose
elements are directory entries.  Alternatively <code>fdopendir</code> can be
used which can have advantages if the program needs to have more
control over the way the directory is opened for reading.  This
allows, for instance, to pass the <code>O_NOATIME</code> flag to
<code>open</code>.
</para>
<para>You use the <code>readdir</code> function on the directory stream to
retrieve these entries, represented as <code>struct&nbsp;dirent</code>
objects.  The name of the file for each entry is stored in the
<code>d_name</code> member of this structure.  There are obvious parallels
here to the stream facilities for ordinary files, described in
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#I_002fO-on-Streams">Input/Output on Streams</a>.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Directory-Entries" accesskey="1">Format of a Directory Entry</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Opening-a-Directory" accesskey="2">Opening a Directory Stream</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading_002fClosing-Directory" accesskey="3">Reading and Closing a Directory Stream</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister" accesskey="4">Simple Program to List a Directory</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Random-Access-Directory" accesskey="5">Random Access in a Directory Stream</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Scanning-Directory-Content" accesskey="6">Scanning the Content of a Directory</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister-Mark-II" accesskey="7">Simple Program to List a Directory, Mark II</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dlevel-Directory-Access" accesskey="8">Low-level Directory Access</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Directory-Entries">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Opening-a-Directory" accesskey="n" rel="next">Opening a Directory Stream</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Format-of-a-Directory-Entry"></span><h4 class="subsection">14.2.1 Format of a Directory Entry</title>

<span xml:id="glibc-index-dirent_002eh-1"></span>
<para>This section describes what you find in a single directory entry, as you
might obtain it from a directory stream.  All the symbols are declared
in the header file <filename>dirent.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-dirent"><span class="category">Data Type: </span><span><strong>struct dirent</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-dirent" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is a structure type used to return information about directory
entries.  It contains the following fields:
</para>
<dl compact="compact">
<dt><span><code>char d_name[]</code></span></dt>
<dd><para>This is the null-terminated file name component.  This is the only
field you can count on in all POSIX systems.
</para>
</dd>
<dt><span><code>ino_t d_fileno</code></span></dt>
<dd><para>This is the file serial number.  For BSD compatibility, you can also
refer to this member as <code>d_ino</code>.  On GNU/Linux and GNU/Hurd systems and most POSIX
systems, for most files this the same as the <code>st_ino</code> member that
<code>stat</code> will return for the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes">File Attributes</a>.
</para>
</dd>
<dt><span><code>unsigned char d_namlen</code></span></dt>
<dd><para>This is the length of the file name, not including the terminating
null character.  Its type is <code>unsigned char</code> because that is the
integer type of the appropriate size.  This member is a BSD extension.
The symbol <code>_DIRENT_HAVE_D_NAMLEN</code> is defined if this member is
available.
</para>
</dd>
<dt><span><code>unsigned char d_type</code></span></dt>
<dd><para>This is the type of the file, possibly unknown.  The following constants
are defined for its value:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-DT_005fUNKNOWN"><span><code>DT_UNKNOWN</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fUNKNOWN" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The type is unknown.  Only some filesystems have full support to
return the type of the file, others might always return this value.
</para>
</dd>
<dt xml:id="glibc-index-DT_005fREG"><span><code>DT_REG</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fREG" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A regular file.
</para>
</dd>
<dt xml:id="glibc-index-DT_005fDIR"><span><code>DT_DIR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fDIR" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A directory.
</para>
</dd>
<dt xml:id="glibc-index-DT_005fFIFO"><span><code>DT_FIFO</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fFIFO" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A named pipe, or FIFO.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#FIFO-Special-Files">FIFO Special Files</a>.
</para>
</dd>
<dt xml:id="glibc-index-DT_005fSOCK"><span><code>DT_SOCK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fSOCK" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A local-domain socket.  </para>
</dd>
<dt xml:id="glibc-index-DT_005fCHR"><span><code>DT_CHR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fCHR" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A character device.
</para>
</dd>
<dt xml:id="glibc-index-DT_005fBLK"><span><code>DT_BLK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fBLK" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A block device.
</para>
</dd>
<dt xml:id="glibc-index-DT_005fLNK"><span><code>DT_LNK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DT_005fLNK" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>A symbolic link.
</para></dd>
</dl>

<para>This member is a BSD extension.  The symbol <code>_DIRENT_HAVE_D_TYPE</code>
is defined if this member is available.  On systems where it is used, it
corresponds to the file type bits in the <code>st_mode</code> member of
<code>struct stat</code>.  If the value cannot be determined the member
value is DT_UNKNOWN.  These two macros convert between <code>d_type</code>
values and <code>st_mode</code> values:
</para>
<dl class="def">
<dt xml:id="glibc-index-IFTODT"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>IFTODT</strong> <emphasis>(mode_t <var>mode</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-IFTODT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This returns the <code>d_type</code> value corresponding to <var>mode</var>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-DTTOIF"><span class="category">Function: </span><span><emphasis>mode_t</emphasis> <strong>DTTOIF</strong> <emphasis>(int <var>dtype</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DTTOIF" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This returns the <code>st_mode</code> value corresponding to <var>dtype</var>.
</para></dd></dl>
</dd>
</dl>

<para>This structure may contain additional members in the future.  Their
availability is always announced in the compilation environment by a
macro named <code>_DIRENT_HAVE_D_<var>xxx</var></code> where <var>xxx</var> is replaced
by the name of the new member.  For instance, the member <code>d_reclen</code>
available on some systems is announced through the macro
<code>_DIRENT_HAVE_D_RECLEN</code>.
</para>
<para>When a file has multiple names, each name has its own directory entry.
The only way you can tell that the directory entries belong to a
single file is that they have the same value for the <code>d_fileno</code>
field.
</para>
<para>File attributes such as size, modification times etc., are part of the
file itself, not of any particular directory entry.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes">File Attributes</a>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Opening-a-Directory">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading_002fClosing-Directory" accesskey="n" rel="next">Reading and Closing a Directory Stream</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Directory-Entries" accesskey="p" rel="prev">Format of a Directory Entry</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Opening-a-Directory-Stream"></span><h4 class="subsection">14.2.2 Opening a Directory Stream</title>

<span xml:id="glibc-index-dirent_002eh-2"></span>
<para>This section describes how to open a directory stream.  All the symbols
are declared in the header file <filename>dirent.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-DIR"><span class="category">Data Type: </span><span><strong>DIR</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-DIR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>DIR</code> data type represents a directory stream.
</para></dd></dl>

<para>You shouldn’t ever allocate objects of the <code>struct dirent</code> or
<code>DIR</code> data types, since the directory access functions do that for
you.  Instead, you refer to these objects using the pointers returned by
the following functions.
</para>
<para>Directory streams are a high-level interface.  On Linux, alternative
interfaces for accessing directories using file descriptors are
available.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dlevel-Directory-Access">Low-level Directory Access</a>.
</para>
<dl class="def">
<dt xml:id="glibc-index-opendir"><span class="category">Function: </span><span><emphasis>DIR *</emphasis> <strong>opendir</strong> <emphasis>(const char *<var>dirname</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-opendir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>opendir</code> function opens and returns a directory stream for
reading the directory whose file name is <var>dirname</var>.  The stream has
type <code>DIR *</code>.
</para>
<para>If unsuccessful, <code>opendir</code> returns a null pointer.  In addition to
the usual file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the
following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>Read permission is denied for the directory named by <code>dirname</code>.
</para>
</dd>
<dt><span><code>EMFILE</code></span></dt>
<dd><para>The process has too many files open.
</para>
</dd>
<dt><span><code>ENFILE</code></span></dt>
<dd><para>The entire system, or perhaps the file system which contains the
directory, cannot support any additional open files at the moment.
(This problem cannot happen on GNU/Hurd systems.)
</para>
</dd>
<dt><span><code>ENOMEM</code></span></dt>
<dd><para>Not enough memory available.
</para></dd>
</dl>

<para>The <code>DIR</code> type is typically implemented using a file descriptor,
and the <code>opendir</code> function in terms of the <code>open</code> function.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dLevel-I_002fO">Low-Level Input/Output</a>.  Directory streams and the underlying
file descriptors are closed on <code>exec</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Executing-a-File">Executing a File</a>).
</para></dd></dl>

<para>The directory which is opened for reading by <code>opendir</code> is
identified by the name.  In some situations this is not sufficient.
Or the way <code>opendir</code> implicitly creates a file descriptor for the
directory is not the way a program might want it.  In these cases an
alternative interface can be used.
</para>
<dl class="def">
<dt xml:id="glibc-index-fdopendir"><span class="category">Function: </span><span><emphasis>DIR *</emphasis> <strong>fdopendir</strong> <emphasis>(int <var>fd</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-fdopendir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>fdopendir</code> function works just like <code>opendir</code> but
instead of taking a file name and opening a file descriptor for the
directory the caller is required to provide a file descriptor.  This
file descriptor is then used in subsequent uses of the returned
directory stream object.
</para>
<para>The caller must make sure the file descriptor is associated with a
directory and it allows reading.
</para>
<para>If the <code>fdopendir</code> call returns successfully the file descriptor
is now under the control of the system.  It can be used in the same
way the descriptor implicitly created by <code>opendir</code> can be used
but the program must not close the descriptor.
</para>
<para>In case the function is unsuccessful it returns a null pointer and the
file descriptor remains to be usable by the program.  The following
<code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para>The file descriptor is not valid.
</para>
</dd>
<dt><span><code>ENOTDIR</code></span></dt>
<dd><para>The file descriptor is not associated with a directory.
</para>
</dd>
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The descriptor does not allow reading the directory content.
</para>
</dd>
<dt><span><code>ENOMEM</code></span></dt>
<dd><para>Not enough memory available.
</para></dd>
</dl>
</dd></dl>

<para>In some situations it can be desirable to get hold of the file
descriptor which is created by the <code>opendir</code> call.  For instance,
to switch the current working directory to the directory just read the
<code>fchdir</code> function could be used.  Historically the <code>DIR</code> type
was exposed and programs could access the fields.  This does not happen
in the GNU C Library.  Instead a separate function is provided to allow
access.
</para>
<dl class="def">
<dt xml:id="glibc-index-dirfd"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>dirfd</strong> <emphasis>(DIR *<var>dirstream</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-dirfd" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The function <code>dirfd</code> returns the file descriptor associated with
the directory stream <var>dirstream</var>.  This descriptor can be used until
the directory is closed with <code>closedir</code>.  If the directory stream
implementation is not using file descriptors the return value is
<code>-1</code>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Reading_002fClosing-Directory">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister" accesskey="n" rel="next">Simple Program to List a Directory</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Opening-a-Directory" accesskey="p" rel="prev">Opening a Directory Stream</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Reading-and-Closing-a-Directory-Stream"></span><h4 class="subsection">14.2.3 Reading and Closing a Directory Stream</title>

<span xml:id="glibc-index-dirent_002eh-3"></span>
<para>This section describes how to read directory entries from a directory
stream, and how to close the stream when you are done with it.  All the
symbols are declared in the header file <filename>dirent.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-readdir"><span class="category">Function: </span><span><emphasis>struct dirent *</emphasis> <strong>readdir</strong> <emphasis>(DIR *<var>dirstream</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-readdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock
| AC-Unsafe lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function reads the next entry from the directory.  It normally
returns a pointer to a structure containing information about the
file.  This structure is associated with the <var>dirstream</var> handle
and can be rewritten by a subsequent call.
</para>
<para><strong>Portability Note:</strong> On some systems <code>readdir</code> may not
return entries for <filename>.</filename> and <filename>..</filename>, even though these are always
valid file names in any directory.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Resolution">File Name Resolution</a>.
</para>
<para>If there are no more entries in the directory or an error is detected,
<code>readdir</code> returns a null pointer.  The following <code>errno</code> error
conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>dirstream</var> argument is not valid.
</para></dd>
</dl>

<para>To distinguish between an end-of-directory condition or an error, you
must set <code>errno</code> to zero before calling <code>readdir</code>.  To avoid
entering an infinite loop, you should stop reading from the directory
after the first error.
</para>
<para><strong>Caution:</strong> The pointer returned by <code>readdir</code> points to
a buffer within the <code>DIR</code> object.  The data in that buffer will
be overwritten by the next call to <code>readdir</code>.  You must take care,
for instance, to copy the <code>d_name</code> string if you need it later.
</para>
<para>Because of this, it is not safe to share a <code>DIR</code> object among
multiple threads, unless you use your own locking to ensure that
no thread calls <code>readdir</code> while another thread is still using the
data from the previous call.  In the GNU C Library, it is safe to call
<code>readdir</code> from multiple threads as long as each thread uses
its own <code>DIR</code> object.  POSIX.1-2008 does not require this to
be safe, but we are not aware of any operating systems where it
does not work.
</para>
<para><code>readdir_r</code> allows you to provide your own buffer for the
<code>struct dirent</code>, but it is less portable than <code>readdir</code>, and
has problems with very long filenames (see below).  We recommend
you use <code>readdir</code>, but do not share <code>DIR</code> objects.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-readdir_005fr"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>readdir_r</strong> <emphasis>(DIR *<var>dirstream</var>, struct dirent *<var>entry</var>, struct dirent **<var>result</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-readdir_005fr" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock
| AC-Unsafe lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is a version of <code>readdir</code> which performs internal
locking.  Like <code>readdir</code> it returns the next entry from the
directory.  To prevent conflicts between simultaneously running
threads the result is stored inside the <var>entry</var> object.
</para>
<para><strong>Portability Note:</strong> <code>readdir_r</code> is deprecated.  It is
recommended to use <code>readdir</code> instead of <code>readdir_r</code> for the
following reasons:
</para>
<ul>
<li> On systems which do not define <code>NAME_MAX</code>, it may not be possible
to use <code>readdir_r</code> safely because the caller does not specify the
length of the buffer for the directory entry.

</li><li> On some systems, <code>readdir_r</code> cannot read directory entries with
very long names.  If such a name is encountered, the GNU C Library
implementation of <code>readdir_r</code> returns with an error code of
<code>ENAMETOOLONG</code> after the final directory entry has been read.  On
other systems, <code>readdir_r</code> may return successfully, but the
<code>d_name</code> member may not be NUL-terminated or may be truncated.

</li><li> POSIX-1.2008 does not guarantee that <code>readdir</code> is thread-safe,
even when access to the same <var>dirstream</var> is serialized.  But in
current implementations (including the GNU C Library), it is safe to call
<code>readdir</code> concurrently on different <var>dirstream</var>s, so there is
no need to use <code>readdir_r</code> in most multi-threaded programs.  In
the rare case that multiple threads need to read from the same
<var>dirstream</var>, it is still better to use <code>readdir</code> and external
synchronization.

</li><li> It is expected that future versions of POSIX will obsolete
<code>readdir_r</code> and mandate the level of thread safety for
<code>readdir</code> which is provided by the GNU C Library and other
implementations today.
</li></ul>

<para>Normally <code>readdir_r</code> returns zero and sets <code>*<var>result</var></code>
to <var>entry</var>.  If there are no more entries in the directory or an
error is detected, <code>readdir_r</code> sets <code>*<var>result</var></code> to a
null pointer and returns a nonzero error code, also stored in
<code>errno</code>, as described for <code>readdir</code>.
</para>
<para>It is also important to look at the definition of the <code>struct
dirent</code> type.  Simply passing a pointer to an object of this type for
the second parameter of <code>readdir_r</code> might not be enough.  Some
systems don’t define the <code>d_name</code> element sufficiently long.  In
this case the user has to provide additional space.  There must be room
for at least <code>NAME_MAX + 1</code> characters in the <code>d_name</code> array.
Code to call <code>readdir_r</code> could look like this:
</para>
<div class="example">
<pre class="example">  union
  {
    struct dirent d;
    char b[offsetof (struct dirent, d_name) + NAME_MAX + 1];
  } u;

  if (readdir_r (dir, &amp;u.d, &amp;res) == 0)
    …
</pre></div>
</dd></dl>

<para>To support large filesystems on 32-bit machines there are LFS variants
of the last two functions.
</para>
<dl class="def">
<dt xml:id="glibc-index-readdir64"><span class="category">Function: </span><span><emphasis>struct dirent64 *</emphasis> <strong>readdir64</strong> <emphasis>(DIR *<var>dirstream</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-readdir64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock
| AC-Unsafe lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>readdir64</code> function is just like the <code>readdir</code> function
except that it returns a pointer to a record of type <code>struct
dirent64</code>.  Some of the members of this data type (notably <code>d_ino</code>)
might have a different size to allow large filesystems.
</para>
<para>In all other aspects this function is equivalent to <code>readdir</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-readdir64_005fr"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>readdir64_r</strong> <emphasis>(DIR *<var>dirstream</var>, struct dirent64 *<var>entry</var>, struct dirent64 **<var>result</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-readdir64_005fr" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock
| AC-Unsafe lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The deprecated <code>readdir64_r</code> function is equivalent to the
<code>readdir_r</code> function except that it takes parameters of base type
<code>struct dirent64</code> instead of <code>struct dirent</code> in the second and
third position.  The same precautions mentioned in the documentation of
<code>readdir_r</code> also apply here.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-closedir"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>closedir</strong> <emphasis>(DIR *<var>dirstream</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-closedir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap lock/hurd
| AC-Unsafe mem fd lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function closes the directory stream <var>dirstream</var>.  It returns
<code>0</code> on success and <code>-1</code> on failure.
</para>
<para>The following <code>errno</code> error conditions are defined for this
function:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>dirstream</var> argument is not valid.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Simple-Directory-Lister">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Random-Access-Directory" accesskey="n" rel="next">Random Access in a Directory Stream</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading_002fClosing-Directory" accesskey="p" rel="prev">Reading and Closing a Directory Stream</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Simple-Program-to-List-a-Directory"></span><h4 class="subsection">14.2.4 Simple Program to List a Directory</title>

<para>Here’s a simple program that prints the names of the files in
the current working directory:
</para>
<div class="example">
<pre class="example">
</pre><pre class="example">#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;dirent.h&gt;
</pre><pre class="example">
int
main (void)
{
  DIR *dp;
  struct dirent *ep;

  dp = opendir ("./");
  if (dp != NULL)
    {
      while (ep = readdir (dp))
        puts (ep-&gt;d_name);
      (void) closedir (dp);
    }
  else
    perror ("Couldn't open the directory");

  return 0;
}
</pre></div>

<para>The order in which files appear in a directory tends to be fairly
random.  A more useful program would sort the entries (perhaps by
alphabetizing them) before printing them; see
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Scanning-Directory-Content">Scanning the Content of a Directory</a>, and <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Array-Sort-Function">Array Sort Function</a>.
</para>

<hr>
</div>
<div class="subsection" xml:id="glibc-Random-Access-Directory">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Scanning-Directory-Content" accesskey="n" rel="next">Scanning the Content of a Directory</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister" accesskey="p" rel="prev">Simple Program to List a Directory</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Random-Access-in-a-Directory-Stream"></span><h4 class="subsection">14.2.5 Random Access in a Directory Stream</title>

<span xml:id="glibc-index-dirent_002eh-4"></span>
<para>This section describes how to reread parts of a directory that you have
already read from an open directory stream.  All the symbols are
declared in the header file <filename>dirent.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-rewinddir"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>rewinddir</strong> <emphasis>(DIR *<var>dirstream</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-rewinddir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock
| AC-Unsafe lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>rewinddir</code> function is used to reinitialize the directory
stream <var>dirstream</var>, so that if you call <code>readdir</code> it
returns information about the first entry in the directory again.  This
function also notices if files have been added or removed to the
directory since it was opened with <code>opendir</code>.  (Entries for these
files might or might not be returned by <code>readdir</code> if they were
added or removed since you last called <code>opendir</code> or
<code>rewinddir</code>.)
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-telldir"><span class="category">Function: </span><span><emphasis>long int</emphasis> <strong>telldir</strong> <emphasis>(DIR *<var>dirstream</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-telldir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap/bsd lock/bsd
| AC-Unsafe mem/bsd lock/bsd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>telldir</code> function returns the file position of the directory
stream <var>dirstream</var>.  You can use this value with <code>seekdir</code> to
restore the directory stream to that position.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-seekdir"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>seekdir</strong> <emphasis>(DIR *<var>dirstream</var>, long int <var>pos</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-seekdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap/bsd lock/bsd
| AC-Unsafe mem/bsd lock/bsd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>seekdir</code> function sets the file position of the directory
stream <var>dirstream</var> to <var>pos</var>.  The value <var>pos</var> must be the
result of a previous call to <code>telldir</code> on this particular stream;
closing and reopening the directory can invalidate values returned by
<code>telldir</code>.
</para></dd></dl>


<hr>
</div>
<div class="subsection" xml:id="glibc-Scanning-Directory-Content">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister-Mark-II" accesskey="n" rel="next">Simple Program to List a Directory, Mark II</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Random-Access-Directory" accesskey="p" rel="prev">Random Access in a Directory Stream</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Scanning-the-Content-of-a-Directory"></span><h4 class="subsection">14.2.6 Scanning the Content of a Directory</title>

<para>A higher-level interface to the directory handling functions is the
<code>scandir</code> function.  With its help one can select a subset of the
entries in a directory, possibly sort them and get a list of names as
the result.
</para>
<dl class="def">
<dt xml:id="glibc-index-scandir"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>scandir</strong> <emphasis>(const char *<var>dir</var>, struct dirent ***<var>namelist</var>, int (*<var>selector</var>) (const struct dirent *), int (*<var>cmp</var>) (const struct dirent **, const struct dirent **))</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-scandir" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <code>scandir</code> function scans the contents of the directory selected
by <var>dir</var>.  The result in *<var>namelist</var> is an array of pointers to
structures of type <code>struct dirent</code> which describe all selected
directory entries and which is allocated using <code>malloc</code>.  Instead
of always getting all directory entries returned, the user supplied
function <var>selector</var> can be used to decide which entries are in the
result.  Only the entries for which <var>selector</var> returns a non-zero
value are selected.
</para>
<para>Finally the entries in *<var>namelist</var> are sorted using the
user-supplied function <var>cmp</var>.  The arguments passed to the <var>cmp</var>
function are of type <code>struct dirent **</code>, therefore one cannot
directly use the <code>strcmp</code> or <code>strcoll</code> functions; instead see
the functions <code>alphasort</code> and <code>versionsort</code> below.
</para>
<para>The return value of the function is the number of entries placed in
*<var>namelist</var>.  If it is <code>-1</code> an error occurred (either the
directory could not be opened for reading or memory allocation failed) and
the global variable <code>errno</code> contains more information on the error.
</para></dd></dl>

<para>As described above, the fourth argument to the <code>scandir</code> function
must be a pointer to a sorting function.  For the convenience of the
programmer the GNU C Library contains implementations of functions which
are very helpful for this purpose.
</para>
<dl class="def">
<dt xml:id="glibc-index-alphasort"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>alphasort</strong> <emphasis>(const struct dirent **<var>a</var>, const struct dirent **<var>b</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-alphasort" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<para>Preliminary:
| MT-Safe locale
| AS-Unsafe heap
| AC-Unsafe mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>alphasort</code> function behaves like the <code>strcoll</code> function
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#String_002fArray-Comparison">String/Array Comparison</a>).  The difference is that the arguments
are not string pointers but instead they are of type
<code>struct dirent **</code>.
</para>
<para>The return value of <code>alphasort</code> is less than, equal to, or greater
than zero depending on the order of the two entries <var>a</var> and <var>b</var>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-versionsort"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>versionsort</strong> <emphasis>(const struct dirent **<var>a</var>, const struct dirent **<var>b</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-versionsort" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe locale
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>versionsort</code> function is like <code>alphasort</code> except that it
uses the <code>strverscmp</code> function internally.
</para></dd></dl>

<para>If the filesystem supports large files we cannot use the <code>scandir</code>
anymore since the <code>dirent</code> structure might not able to contain all
the information.  The LFS provides the new type <code>struct&nbsp;dirent64</code>.  To use this we need a new function.
</para>
<dl class="def">
<dt xml:id="glibc-index-scandir64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>scandir64</strong> <emphasis>(const char *<var>dir</var>, struct dirent64 ***<var>namelist</var>, int (*<var>selector</var>) (const struct dirent64 *), int (*<var>cmp</var>) (const struct dirent64 **, const struct dirent64 **))</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-scandir64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>scandir64</code> function works like the <code>scandir</code> function
except that the directory entries it returns are described by elements
of type <code>struct&nbsp;dirent64</code>.  The function pointed to by
<var>selector</var> is again used to select the desired entries, except that
<var>selector</var> now must point to a function which takes a
<code>struct&nbsp;dirent64&nbsp;*</code> parameter.
</para>
<para>Similarly the <var>cmp</var> function should expect its two arguments to be
of type <code>struct dirent64 **</code>.
</para></dd></dl>

<para>As <var>cmp</var> is now a function of a different type, the functions
<code>alphasort</code> and <code>versionsort</code> cannot be supplied for that
argument.  Instead we provide the two replacement functions below.
</para>
<dl class="def">
<dt xml:id="glibc-index-alphasort64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>alphasort64</strong> <emphasis>(const struct dirent64 **<var>a</var>, const struct dirent **<var>b</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-alphasort64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe locale
| AS-Unsafe heap
| AC-Unsafe mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>alphasort64</code> function behaves like the <code>strcoll</code> function
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#String_002fArray-Comparison">String/Array Comparison</a>).  The difference is that the arguments
are not string pointers but instead they are of type
<code>struct dirent64 **</code>.
</para>
<para>Return value of <code>alphasort64</code> is less than, equal to, or greater
than zero depending on the order of the two entries <var>a</var> and <var>b</var>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-versionsort64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>versionsort64</strong> <emphasis>(const struct dirent64 **<var>a</var>, const struct dirent64 **<var>b</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-versionsort64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe locale
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>versionsort64</code> function is like <code>alphasort64</code>, excepted that it
uses the <code>strverscmp</code> function internally.
</para></dd></dl>

<para>It is important not to mix the use of <code>scandir</code> and the 64-bit
comparison functions or vice versa.  There are systems on which this
works but on others it will fail miserably.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Simple-Directory-Lister-Mark-II">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dlevel-Directory-Access" accesskey="n" rel="next">Low-level Directory Access</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Scanning-Directory-Content" accesskey="p" rel="prev">Scanning the Content of a Directory</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Simple-Program-to-List-a-Directory_002c-Mark-II"></span><h4 class="subsection">14.2.7 Simple Program to List a Directory, Mark II</title>

<para>Here is a revised version of the directory lister found above
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister">Simple Program to List a Directory</a>).  Using the <code>scandir</code> function we
can avoid the functions which work directly with the directory contents.
After the call the returned entries are available for direct use.
</para>
<div class="example">
<pre class="example">
</pre><pre class="example">#include &lt;stdio.h&gt;
#include &lt;dirent.h&gt;
</pre><pre class="example">
static int
one (const struct dirent *unused)
{
  return 1;
}

int
main (void)
{
  struct dirent **eps;
  int n;

  n = scandir ("./", &amp;eps, one, alphasort);
  if (n &gt;= 0)
    {
      int cnt;
      for (cnt = 0; cnt &lt; n; ++cnt)
        puts (eps[cnt]-&gt;d_name);
    }
  else
    perror ("Couldn't open the directory");

  return 0;
}
</pre></div>

<para>Note the simple selector function in this example.  Since we want to see
all directory entries we always return <code>1</code>.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Low_002dlevel-Directory-Access">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Simple-Directory-Lister-Mark-II" accesskey="p" rel="prev">Simple Program to List a Directory, Mark II</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="u" rel="up">Accessing Directories</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Low_002dlevel-Directory-Access-1"></span><h4 class="subsection">14.2.8 Low-level Directory Access</title>

<para>The stream-based directory functions are not AS-Safe and cannot be
used after <code>vfork</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.  The functions
below provide an alternative that can be used in these contexts.
</para>
<para>Directory data is obtained from a file descriptor, as created by the
<code>open</code> function, with or without the <code>O_DIRECTORY</code> flag.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Opening-and-Closing-Files">Opening and Closing Files</a>.
</para>
<dl class="def">
<dt xml:id="glibc-index-getdents64"><span class="category">Function: </span><span><emphasis>ssize_t</emphasis> <strong>getdents64</strong> <emphasis>(int <var>fd</var>, void *<var>buffer</var>, size_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getdents64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>getdents64</code> function reads at most <var>length</var> bytes of
directory entry data from the file descriptor <var>fd</var> and stores it
into the byte array starting at <var>buffer</var>.
</para>
<para>On success, the function returns the number of bytes written to the
buffer.  This number is zero if <var>fd</var> is already at the end of the
directory stream.  On error, the function returns <code>-1</code> and sets
<code>errno</code> to the appropriate error code.
</para>
<para>The data is stored as a sequence of <code>struct dirent64</code> records,
which can be traversed using the <code>d_reclen</code> member.  The buffer
should be large enough to hold the largest possible directory entry.
Note that some file systems support file names longer than
<code>NAME_MAX</code> bytes (e.g., because they support up to 255 Unicode
characters), so a buffer size of at least 1024 is recommended.
</para>
<para>This function is specific to Linux.
</para></dd></dl>


<hr>
</div>
</div>
<sect xml:id="glibc-Working-with-Directory-Trees">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Hard-Links" accesskey="n" rel="next">Hard Links</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Accessing-Directories" accesskey="p" rel="prev">Accessing Directories</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Working-with-Directory-Trees-1"></span><h3 class="section">14.3 Working with Directory Trees</title>
<span xml:id="glibc-index-directory-hierarchy"></span>
<span xml:id="glibc-index-hierarchy_002c-directory"></span>
<span xml:id="glibc-index-tree_002c-directory"></span>

<para>The functions described so far for handling the files in a directory
have allowed you to either retrieve the information bit by bit, or to
process all the files as a group (see <code>scandir</code>).  Sometimes it is
useful to process whole hierarchies of directories and their contained
files.  The X/Open specification defines two functions to do this.  The
simpler form is derived from an early definition in System&nbsp;V systems
and therefore this function is available on SVID-derived systems.  The
prototypes and required definitions can be found in the <filename>ftw.h</filename>
header.
</para>
<para>There are four functions in this family: <code>ftw</code>, <code>nftw</code> and
their 64-bit counterparts <code>ftw64</code> and <code>nftw64</code>.  These
functions take as one of their arguments a pointer to a callback
function of the appropriate type.
</para>
<dl class="def">
<dt xml:id="glibc-index-_005f_005fftw_005ffunc_005ft"><span class="category">Data Type: </span><span><strong>__ftw_func_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005f_005fftw_005ffunc_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<div class="example">
<pre class="example">int (*) (const char *, const struct stat *, int)
</pre></div>

<para>The type of callback functions given to the <code>ftw</code> function.  The
first parameter points to the file name, the second parameter to an
object of type <code>struct stat</code> which is filled in for the file named
in the first parameter.
</para>
<para>The last parameter is a flag giving more information about the current
file.  It can have the following values:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-FTW_005fF"><span><code>FTW_F</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fF" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The item is either a normal file or a file which does not fit into one
of the following categories.  This could be special files, sockets etc.
</para></dd>
<dt xml:id="glibc-index-FTW_005fD"><span><code>FTW_D</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fD" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The item is a directory.
</para></dd>
<dt xml:id="glibc-index-FTW_005fNS"><span><code>FTW_NS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fNS" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The <code>stat</code> call failed and so the information pointed to by the
second parameter is invalid.
</para></dd>
<dt xml:id="glibc-index-FTW_005fDNR"><span><code>FTW_DNR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fDNR" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The item is a directory which cannot be read.
</para></dd>
<dt xml:id="glibc-index-FTW_005fSL"><span><code>FTW_SL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fSL" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The item is a symbolic link.  Since symbolic links are normally followed
seeing this value in a <code>ftw</code> callback function means the referenced
file does not exist.  The situation for <code>nftw</code> is different.
</para>
<para>This value is only available if the program is compiled with
<code>_XOPEN_EXTENDED</code> defined before including
the first header.  The original SVID systems do not have symbolic links.
</para></dd>
</dl>

<para>If the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
type is in fact <code>__ftw64_func_t</code> since this mode changes
<code>struct stat</code> to be <code>struct stat64</code>.
</para></dd></dl>

<para>For the LFS interface and for use in the function <code>ftw64</code>, the
header <filename>ftw.h</filename> defines another function type.
</para>
<dl class="def">
<dt xml:id="glibc-index-_005f_005fftw64_005ffunc_005ft"><span class="category">Data Type: </span><span><strong>__ftw64_func_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005f_005fftw64_005ffunc_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<div class="example">
<pre class="example">int (*) (const char *, const struct stat64 *, int)
</pre></div>

<para>This type is used just like <code>__ftw_func_t</code> for the callback
function, but this time is called from <code>ftw64</code>.  The second
parameter to the function is a pointer to a variable of type
<code>struct stat64</code> which is able to represent the larger values.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-_005f_005fnftw_005ffunc_005ft"><span class="category">Data Type: </span><span><strong>__nftw_func_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005f_005fnftw_005ffunc_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<div class="example">
<pre class="example">int (*) (const char *, const struct stat *, int, struct FTW *)
</pre></div>

<para>The first three arguments are the same as for the <code>__ftw_func_t</code>
type.  However for the third argument some additional values are defined
to allow finer differentiation:
</para><dl compact="compact">
<dt xml:id="glibc-index-FTW_005fDP"><span><code>FTW_DP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fDP" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The current item is a directory and all subdirectories have already been
visited and reported.  This flag is returned instead of <code>FTW_D</code> if
the <code>FTW_DEPTH</code> flag is passed to <code>nftw</code> (see below).
</para></dd>
<dt xml:id="glibc-index-FTW_005fSLN"><span><code>FTW_SLN</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fSLN" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The current item is a stale symbolic link.  The file it points to does
not exist.
</para></dd>
</dl>

<para>The last parameter of the callback function is a pointer to a structure
with some extra information as described below.
</para>
<para>If the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
type is in fact <code>__nftw64_func_t</code> since this mode changes
<code>struct stat</code> to be <code>struct stat64</code>.
</para></dd></dl>

<para>For the LFS interface there is also a variant of this data type
available which has to be used with the <code>nftw64</code> function.
</para>
<dl class="def">
<dt xml:id="glibc-index-_005f_005fnftw64_005ffunc_005ft"><span class="category">Data Type: </span><span><strong>__nftw64_func_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005f_005fnftw64_005ffunc_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<div class="example">
<pre class="example">int (*) (const char *, const struct stat64 *, int, struct FTW *)
</pre></div>

<para>This type is used just like <code>__nftw_func_t</code> for the callback
function, but this time is called from <code>nftw64</code>.  The second
parameter to the function is this time a pointer to a variable of type
<code>struct stat64</code> which is able to represent the larger values.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-struct-FTW"><span class="category">Data Type: </span><span><strong>struct FTW</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-FTW" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The information contained in this structure helps in interpreting the
name parameter and gives some information about the current state of the
traversal of the directory hierarchy.
</para>
<dl compact="compact">
<dt><span><code>int base</code></span></dt>
<dd><para>The value is the offset into the string passed in the first parameter to
the callback function of the beginning of the file name.  The rest of
the string is the path of the file.  This information is especially
important if the <code>FTW_CHDIR</code> flag was set in calling <code>nftw</code>
since then the current directory is the one the current item is found
in.
</para></dd>
<dt><span><code>int level</code></span></dt>
<dd><para>Whilst processing, the code tracks how many directories down it has gone
to find the current file.  This nesting level starts at <em class="math">0</emphasis> for
files in the initial directory (or is zero for the initial file if a
file was passed).
</para></dd>
</dl>
</dd></dl>


<dl class="def">
<dt xml:id="glibc-index-ftw"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>ftw</strong> <emphasis>(const char *<var>filename</var>, __ftw_func_t <var>func</var>, int <var>descriptors</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ftw" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>ftw</code> function calls the callback function given in the
parameter <var>func</var> for every item which is found in the directory
specified by <var>filename</var> and all directories below.  The function
follows symbolic links if necessary but does not process an item twice.
If <var>filename</var> is not a directory then it itself is the only object
returned to the callback function.
</para>
<para>The file name passed to the callback function is constructed by taking
the <var>filename</var> parameter and appending the names of all passed
directories and then the local file name.  So the callback function can
use this parameter to access the file.  <code>ftw</code> also calls
<code>stat</code> for the file and passes that information on to the callback
function.  If this <code>stat</code> call is not successful the failure is
indicated by setting the third argument of the callback function to
<code>FTW_NS</code>.  Otherwise it is set according to the description given
in the account of <code>__ftw_func_t</code> above.
</para>
<para>The callback function is expected to return <em class="math">0</emphasis> to indicate that no
error occurred and that processing should continue.  If an error
occurred in the callback function or it wants <code>ftw</code> to return
immediately, the callback function can return a value other than
<em class="math">0</emphasis>.  This is the only correct way to stop the function.  The
program must not use <code>setjmp</code> or similar techniques to continue
from another place.  This would leave resources allocated by the
<code>ftw</code> function unfreed.
</para>
<para>The <var>descriptors</var> parameter to <code>ftw</code> specifies how many file
descriptors it is allowed to consume.  The function runs faster the more
descriptors it can use.  For each level in the directory hierarchy at
most one descriptor is used, but for very deep ones any limit on open
file descriptors for the process or the system may be exceeded.
Moreover, file descriptor limits in a multi-threaded program apply to
all the threads as a group, and therefore it is a good idea to supply a
reasonable limit to the number of open descriptors.
</para>
<para>The return value of the <code>ftw</code> function is <em class="math">0</emphasis> if all callback
function calls returned <em class="math">0</emphasis> and all actions performed by the
<code>ftw</code> succeeded.  If a function call failed (other than calling
<code>stat</code> on an item) the function returns <em class="math">-1</emphasis>.  If a callback
function returns a value other than <em class="math">0</emphasis> this value is returned as
the return value of <code>ftw</code>.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32-bit system this function is in fact <code>ftw64</code>, i.e., the LFS
interface transparently replaces the old interface.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-ftw64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>ftw64</strong> <emphasis>(const char *<var>filename</var>, __ftw64_func_t <var>func</var>, int <var>descriptors</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ftw64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>ftw</code> but it can work on filesystems
with large files.  File information is reported using a variable of type
<code>struct stat64</code> which is passed by reference to the callback
function.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32-bit system this function is available under the name <code>ftw</code> and
transparently replaces the old implementation.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-nftw"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>nftw</strong> <emphasis>(const char *<var>filename</var>, __nftw_func_t <var>func</var>, int <var>descriptors</var>, int <var>flag</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-nftw" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe cwd
| AS-Unsafe heap
| AC-Unsafe mem fd cwd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>nftw</code> function works like the <code>ftw</code> functions.  They call
the callback function <var>func</var> for all items found in the directory
<var>filename</var> and below.  At most <var>descriptors</var> file descriptors
are consumed during the <code>nftw</code> call.
</para>
<para>One difference is that the callback function is of a different type.  It
is of type <code>struct&nbsp;FTW&nbsp;*</code> and provides the callback function
with the extra information described above.
</para>
<para>A second difference is that <code>nftw</code> takes a fourth argument, which
is <em class="math">0</emphasis> or a bitwise-OR combination of any of the following values.
</para>
<dl compact="compact">
<dt xml:id="glibc-index-FTW_005fPHYS"><span><code>FTW_PHYS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fPHYS" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>While traversing the directory symbolic links are not followed.  Instead
symbolic links are reported using the <code>FTW_SL</code> value for the type
parameter to the callback function.  If the file referenced by a
symbolic link does not exist <code>FTW_SLN</code> is returned instead.
</para></dd>
<dt xml:id="glibc-index-FTW_005fMOUNT"><span><code>FTW_MOUNT</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fMOUNT" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>The callback function is only called for items which are on the same
mounted filesystem as the directory given by the <var>filename</var>
parameter to <code>nftw</code>.
</para></dd>
<dt xml:id="glibc-index-FTW_005fCHDIR"><span><code>FTW_CHDIR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fCHDIR" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>If this flag is given the current working directory is changed to the
directory of the reported object before the callback function is called.
When <code>ntfw</code> finally returns the current directory is restored to
its original value.
</para></dd>
<dt xml:id="glibc-index-FTW_005fDEPTH"><span><code>FTW_DEPTH</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fDEPTH" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>If this option is specified then all subdirectories and files within
them are processed before processing the top directory itself
(depth-first processing).  This also means the type flag given to the
callback function is <code>FTW_DP</code> and not <code>FTW_D</code>.
</para></dd>
<dt xml:id="glibc-index-FTW_005fACTIONRETVAL"><span><code>FTW_ACTIONRETVAL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FTW_005fACTIONRETVAL" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>If this option is specified then return values from callbacks
are handled differently.  If the callback returns <code>FTW_CONTINUE</code>,
walking continues normally.  <code>FTW_STOP</code> means walking stops
and <code>FTW_STOP</code> is returned to the caller.  If <code>FTW_SKIP_SUBTREE</code>
is returned by the callback with <code>FTW_D</code> argument, the subtree
is skipped and walking continues with next sibling of the directory.
If <code>FTW_SKIP_SIBLINGS</code> is returned by the callback, all siblings
of the current entry are skipped and walking continues in its parent.
No other return values should be returned from the callbacks if
this option is set.  This option is a GNU extension.
</para></dd>
</dl>

<para>The return value is computed in the same way as for <code>ftw</code>.
<code>nftw</code> returns <em class="math">0</emphasis> if no failures occurred and all callback
functions returned <em class="math">0</emphasis>.  In case of internal errors, such as memory
problems, the return value is <em class="math">-1</emphasis> and <code>errno</code> is set
accordingly.  If the return value of a callback invocation was non-zero
then that value is returned.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32-bit system this function is in fact <code>nftw64</code>, i.e., the LFS
interface transparently replaces the old interface.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-nftw64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>nftw64</strong> <emphasis>(const char *<var>filename</var>, __nftw64_func_t <var>func</var>, int <var>descriptors</var>, int <var>flag</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-nftw64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe cwd
| AS-Unsafe heap
| AC-Unsafe mem fd cwd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>nftw</code> but it can work on filesystems
with large files.  File information is reported using a variable of type
<code>struct stat64</code> which is passed by reference to the callback
function.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32-bit system this function is available under the name <code>nftw</code> and
transparently replaces the old implementation.
</para></dd></dl>


<hr>
</div>
<sect xml:id="glibc-Hard-Links">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Symbolic-Links" accesskey="n" rel="next">Symbolic Links</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Working-with-Directory-Trees" accesskey="p" rel="prev">Working with Directory Trees</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Hard-Links-1"></span><h3 class="section">14.4 Hard Links</title>
<span xml:id="glibc-index-hard-link"></span>
<span xml:id="glibc-index-link_002c-hard"></span>
<span xml:id="glibc-index-multiple-names-for-one-file"></span>
<span xml:id="glibc-index-file-names_002c-multiple"></span>

<para>In POSIX systems, one file can have many names at the same time.  All of
the names are equally real, and no one of them is preferred to the
others.
</para>
<para>To add a name to a file, use the <code>link</code> function.  (The new name is
also called a <emphasis>hard link</emphasis> to the file.)  Creating a new link to a
file does not copy the contents of the file; it simply makes a new name
by which the file can be known, in addition to the file’s existing name
or names.
</para>
<para>One file can have names in several directories, so the organization
of the file system is not a strict hierarchy or tree.
</para>
<para>In most implementations, it is not possible to have hard links to the
same file in multiple file systems.  <code>link</code> reports an error if you
try to make a hard link to the file from another file system when this
cannot be done.
</para>
<para>The prototype for the <code>link</code> function is declared in the header
file <filename>unistd.h</filename>.
<span xml:id="glibc-index-unistd_002eh-5"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-link-1"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>link</strong> <emphasis>(const char *<var>oldname</var>, const char *<var>newname</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-link-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>link</code> function makes a new link to the existing file named by
<var>oldname</var>, under the new name <var>newname</var>.
</para>
<para>This function returns a value of <code>0</code> if it is successful and
<code>-1</code> on failure.  In addition to the usual file name errors
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>) for both <var>oldname</var> and <var>newname</var>, the
following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>You are not allowed to write to the directory in which the new link is
to be written.
</para>
</dd>
<dt><span><code>EEXIST</code></span></dt>
<dd><para>There is already a file named <var>newname</var>.  If you want to replace
this link with a new link, you must remove the old link explicitly first.
</para>
</dd>
<dt><span><code>EMLINK</code></span></dt>
<dd><para>There are already too many links to the file named by <var>oldname</var>.
(The maximum number of links to a file is <code><span class="nolinebreak">LINK_MAX</span></code>; see
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Limits-for-Files">Limits on File System Capacity</a>.)
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The file named by <var>oldname</var> doesn’t exist.  You can’t make a link to
a file that doesn’t exist.
</para>
</dd>
<dt><span><code>ENOSPC</code></span></dt>
<dd><para>The directory or file system that would contain the new link is full
and cannot be extended.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>On GNU/Linux and GNU/Hurd systems and some others, you cannot make links to
directories.
Many systems allow only privileged users to do so.  This error
is used to report the problem.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The directory containing the new link can’t be modified because it’s on
a read-only file system.
</para>
</dd>
<dt><span><code>EXDEV</code></span></dt>
<dd><para>The directory specified in <var>newname</var> is on a different file system
than the existing file.
</para>
</dd>
<dt><span><code>EIO</code></span></dt>
<dd><para>A hardware error occurred while trying to read or write the to filesystem.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-linkat"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>linkat</strong> <emphasis>(int oldfd, const char *<var>oldname</var>, int newfd, const char *<var>newname</var>, int flags)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-linkat" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <code>linkat</code> function is analogous to the <code>link</code> function,
except that it identifies its source and target using a combination of a
file descriptor (referring to a directory) and a pathname.  If a
pathnames is not absolute, it is resolved relative to the corresponding
file descriptor.  The special file descriptor <code>AT_FDCWD</code> denotes
the current directory.
</para>
<para>The <var>flags</var> argument is a combination of the following flags:
</para>
<dl compact="compact">
<dt><span><code>AT_SYMLINK_FOLLOW</code></span></dt>
<dd><para>If the source path identified by <var>oldfd</var> and <var>oldname</var> is a
symbolic link, <code>linkat</code> follows the symbolic link and creates a
link to its target.  If the flag is not set, a link for the symbolic
link itself is created; this is not supported by all file systems and
<code>linkat</code> can fail in this case.
</para>
</dd>
<dt><span><code>AT_EMPTY_PATH</code></span></dt>
<dd><para>If this flag is specified, <var>oldname</var> can be an empty string.  In
this case, a new link to the file denoted by the descriptor <var>oldfd</var>
is created, which may have been opened with <code>O_PATH</code> or
<code>O_TMPFILE</code>.  This flag is a GNU extension.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<sect xml:id="glibc-Symbolic-Links">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Deleting-Files" accesskey="n" rel="next">Deleting Files</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Hard-Links" accesskey="p" rel="prev">Hard Links</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Symbolic-Links-1"></span><h3 class="section">14.5 Symbolic Links</title>
<span xml:id="glibc-index-soft-link"></span>
<span xml:id="glibc-index-link_002c-soft"></span>
<span xml:id="glibc-index-symbolic-link"></span>
<span xml:id="glibc-index-link_002c-symbolic"></span>

<para>GNU systems support <emphasis>soft links</emphasis> or <emphasis>symbolic links</emphasis>.  This
is a kind of “file” that is essentially a pointer to another file
name.  Unlike hard links, symbolic links can be made to directories or
across file systems with no restrictions.  You can also make a symbolic
link to a name which is not the name of any file.  (Opening this link
will fail until a file by that name is created.)  Likewise, if the
symbolic link points to an existing file which is later deleted, the
symbolic link continues to point to the same file name even though the
name no longer names any file.
</para>
<para>The reason symbolic links work the way they do is that special things
happen when you try to open the link.  The <code>open</code> function realizes
you have specified the name of a link, reads the file name contained in
the link, and opens that file name instead.  The <code>stat</code> function
likewise operates on the file that the symbolic link points to, instead
of on the link itself.
</para>
<para>By contrast, other operations such as deleting or renaming the file
operate on the link itself.  The functions <code>readlink</code> and
<code>lstat</code> also refrain from following symbolic links, because their
purpose is to obtain information about the link.  <code>link</code>, the
function that makes a hard link, does too.  It makes a hard link to the
symbolic link, which one rarely wants.
</para>
<para>Some systems have, for some functions operating on files, a limit on
how many symbolic links are followed when resolving a path name.  The
limit if it exists is published in the <filename>sys/param.h</filename> header file.
</para>
<dl class="def">
<dt xml:id="glibc-index-MAXSYMLINKS"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>MAXSYMLINKS</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-MAXSYMLINKS" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<para>The macro <code>MAXSYMLINKS</code> specifies how many symlinks some function
will follow before returning <code>ELOOP</code>.  Not all functions behave the
same and this value is not the same as that returned for
<code>_SC_SYMLOOP</code> by <code>sysconf</code>.  In fact, the <code>sysconf</code>
result can indicate that there is no fixed limit although
<code>MAXSYMLINKS</code> exists and has a finite value.
</para></dd></dl>

<para>Prototypes for most of the functions listed in this section are in
<filename>unistd.h</filename>.
<span xml:id="glibc-index-unistd_002eh-6"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-symlink"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>symlink</strong> <emphasis>(const char *<var>oldname</var>, const char *<var>newname</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-symlink" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>symlink</code> function makes a symbolic link to <var>oldname</var> named
<var>newname</var>.
</para>
<para>The normal return value from <code>symlink</code> is <code>0</code>.  A return value
of <code>-1</code> indicates an error.  In addition to the usual file name
syntax errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following <code>errno</code>
error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EEXIST</code></span></dt>
<dd><para>There is already an existing file named <var>newname</var>.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file <var>newname</var> would exist on a read-only file system.
</para>
</dd>
<dt><span><code>ENOSPC</code></span></dt>
<dd><para>The directory or file system cannot be extended to make the new link.
</para>
</dd>
<dt><span><code>EIO</code></span></dt>
<dd><para>A hardware error occurred while reading or writing data on the disk.
</para>
</dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-readlink"><span class="category">Function: </span><span><emphasis>ssize_t</emphasis> <strong>readlink</strong> <emphasis>(const char *<var>filename</var>, char *<var>buffer</var>, size_t <var>size</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-readlink" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>readlink</code> function gets the value of the symbolic link
<var>filename</var>.  The file name that the link points to is copied into
<var>buffer</var>.  This file name string is <emphasis>not</emphasis> null-terminated;
<code>readlink</code> normally returns the number of characters copied.  The
<var>size</var> argument specifies the maximum number of characters to copy,
usually the allocation size of <var>buffer</var>.
</para>
<para>If the return value equals <var>size</var>, you cannot tell whether or not
there was room to return the entire name.  So make a bigger buffer and
call <code>readlink</code> again.  Here is an example:
</para>
<div class="example">
<pre class="example">char *
readlink_malloc (const char *filename)
{
  size_t size = 50;
  char *buffer = NULL;

  while (1)
    {
      buffer = xreallocarray (buffer, size, 2);
      size *= 2;
      ssize_t nchars = readlink (filename, buffer, size);
      if (nchars &lt; 0)
        {
          free (buffer);
          return NULL;
        }
      if (nchars &lt; size)
        return buffer;
    }
}
</pre></div>

<para>A value of <code>-1</code> is returned in case of error.  In addition to the
usual file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following
<code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The named file is not a symbolic link.
</para>
</dd>
<dt><span><code>EIO</code></span></dt>
<dd><para>A hardware error occurred while reading or writing data on the disk.
</para></dd>
</dl>
</dd></dl>

<para>In some situations it is desirable to resolve all the
symbolic links to get the real
name of a file where no prefix names a symbolic link which is followed
and no filename in the path is <code>.</code> or <code>..</code>.  This is for
instance desirable if files have to be compared in which case different
names can refer to the same inode.
</para>
<dl class="def">
<dt xml:id="glibc-index-canonicalize_005ffile_005fname"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>canonicalize_file_name</strong> <emphasis>(const char *<var>name</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-canonicalize_005ffile_005fname" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <code>canonicalize_file_name</code> function returns the absolute name of
the file named by <var>name</var> which contains no <code>.</code>, <code>..</code>
components nor any repeated path separators (<code>/</code>) or symlinks.  The
result is passed back as the return value of the function in a block of
memory allocated with <code>malloc</code>.  If the result is not used anymore
the memory should be freed with a call to <code>free</code>.
</para>
<para>If any of the path components are missing the function returns a NULL
pointer.  This is also what is returned if the length of the path
reaches or exceeds <code>PATH_MAX</code> characters.  In any case
<code>errno</code> is set accordingly.
</para>
<dl compact="compact">
<dt><span><code>ENAMETOOLONG</code></span></dt>
<dd><para>The resulting path is too long.  This error only occurs on systems which
have a limit on the file name length.
</para>
</dd>
<dt><span><code>EACCES</code></span></dt>
<dd><para>At least one of the path components is not readable.
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The input file name is empty.
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>At least one of the path components does not exist.
</para>
</dd>
<dt><span><code>ELOOP</code></span></dt>
<dd><para>More than <code>MAXSYMLINKS</code> many symlinks have been followed.
</para></dd>
</dl>

<para>This function is a GNU extension and is declared in <filename>stdlib.h</filename>.
</para></dd></dl>

<para>The Unix standard includes a similar function which differs from
<code>canonicalize_file_name</code> in that the user has to provide the buffer
where the result is placed in.
</para>
<dl class="def">
<dt xml:id="glibc-index-realpath"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>realpath</strong> <emphasis>(const char *restrict <var>name</var>, char *restrict <var>resolved</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-realpath" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap
| AC-Unsafe mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>A call to <code>realpath</code> where the <var>resolved</var> parameter is
<code>NULL</code> behaves exactly like <code>canonicalize_file_name</code>.  The
function allocates a buffer for the file name and returns a pointer to
it.  If <var>resolved</var> is not <code>NULL</code> it points to a buffer into
which the result is copied.  It is the callers responsibility to
allocate a buffer which is large enough.  On systems which define
<code>PATH_MAX</code> this means the buffer must be large enough for a
pathname of this size.  For systems without limitations on the pathname
length the requirement cannot be met and programs should not call
<code>realpath</code> with anything but <code>NULL</code> for the second parameter.
</para>
<para>One other difference is that the buffer <var>resolved</var> (if nonzero) will
contain the part of the path component which does not exist or is not
readable if the function returns <code>NULL</code> and <code>errno</code> is set to
<code>EACCES</code> or <code>ENOENT</code>.
</para>
<para>This function is declared in <filename>stdlib.h</filename>.
</para></dd></dl>

<para>The advantage of using this function is that it is more widely
available.  The drawback is that it reports failures for long paths on
systems which have no limits on the file name length.
</para>
<hr>
</div>
<sect xml:id="glibc-Deleting-Files">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Renaming-Files" accesskey="n" rel="next">Renaming Files</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Symbolic-Links" accesskey="p" rel="prev">Symbolic Links</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Deleting-Files-1"></span><h3 class="section">14.6 Deleting Files</title>
<span xml:id="glibc-index-deleting-a-file"></span>
<span xml:id="glibc-index-removing-a-file"></span>
<span xml:id="glibc-index-unlinking-a-file"></span>

<para>You can delete a file with <code>unlink</code> or <code>remove</code>.
</para>
<para>Deletion actually deletes a file name.  If this is the file’s only name,
then the file is deleted as well.  If the file has other remaining names
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Hard-Links">Hard Links</a>), it remains accessible under those names.
</para>
<dl class="def">
<dt xml:id="glibc-index-unlink"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>unlink</strong> <emphasis>(const char *<var>filename</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-unlink" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>unlink</code> function deletes the file name <var>filename</var>.  If
this is a file’s sole name, the file itself is also deleted.  (Actually,
if any process has the file open when this happens, deletion is
postponed until all processes have closed the file.)
</para>
<span xml:id="glibc-index-unistd_002eh-7"></span>
<para>The function <code>unlink</code> is declared in the header file <filename>unistd.h</filename>.
</para>
<para>This function returns <code>0</code> on successful completion, and <code>-1</code>
on error.  In addition to the usual file name errors
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following <code>errno</code> error conditions are
defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>Write permission is denied for the directory from which the file is to be
removed, or the directory has the sticky bit set and you do not own the file.
</para>
</dd>
<dt><span><code>EBUSY</code></span></dt>
<dd><para>This error indicates that the file is being used by the system in such a
way that it can’t be unlinked.  For example, you might see this error if
the file name specifies the root directory or a mount point for a file
system.
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The file name to be deleted doesn’t exist.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>On some systems <code>unlink</code> cannot be used to delete the name of a
directory, or at least can only be used this way by a privileged user.
To avoid such problems, use <code>rmdir</code> to delete directories.  (On
GNU/Linux and GNU/Hurd systems <code>unlink</code> can never delete the name of a directory.)
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The directory containing the file name to be deleted is on a read-only
file system and can’t be modified.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-rmdir"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>rmdir</strong> <emphasis>(const char *<var>filename</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-rmdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<span xml:id="glibc-index-directories_002c-deleting"></span>
<span xml:id="glibc-index-deleting-a-directory"></span>
<para>The <code>rmdir</code> function deletes a directory.  The directory must be
empty before it can be removed; in other words, it can only contain
entries for <filename>.</filename> and <filename>..</filename>.
</para>
<para>In most other respects, <code>rmdir</code> behaves like <code>unlink</code>.  There
are two additional <code>errno</code> error conditions defined for
<code>rmdir</code>:
</para>
<dl compact="compact">
<dt><span><code>ENOTEMPTY</code></span></dt>
<dt><span><code>EEXIST</code></span></dt>
<dd><para>The directory to be deleted is not empty.
</para></dd>
</dl>

<para>These two error codes are synonymous; some systems use one, and some use
the other.  GNU/Linux and GNU/Hurd systems always use <code>ENOTEMPTY</code>.
</para>
<para>The prototype for this function is declared in the header file
<filename>unistd.h</filename>.
<span xml:id="glibc-index-unistd_002eh-8"></span>
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-remove"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>remove</strong> <emphasis>(const char *<var>filename</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-remove" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This is the &isoc; function to remove a file.  It works like
<code>unlink</code> for files and like <code>rmdir</code> for directories.
<code>remove</code> is declared in <filename>stdio.h</filename>.
<span xml:id="glibc-index-stdio_002eh-16"></span>
</para></dd></dl>

<hr>
</div>
<sect xml:id="glibc-Renaming-Files">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Creating-Directories" accesskey="n" rel="next">Creating Directories</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Deleting-Files" accesskey="p" rel="prev">Deleting Files</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Renaming-Files-1"></span><h3 class="section">14.7 Renaming Files</title>

<para>The <code>rename</code> function is used to change a file’s name.
</para>
<span xml:id="glibc-index-renaming-a-file"></span>
<dl class="def">
<dt xml:id="glibc-index-rename"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>rename</strong> <emphasis>(const char *<var>oldname</var>, const char *<var>newname</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-rename" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>rename</code> function renames the file <var>oldname</var> to
<var>newname</var>.  The file formerly accessible under the name
<var>oldname</var> is afterwards accessible as <var>newname</var> instead.  (If
the file had any other names aside from <var>oldname</var>, it continues to
have those names.)
</para>
<para>The directory containing the name <var>newname</var> must be on the same file
system as the directory containing the name <var>oldname</var>.
</para>
<para>One special case for <code>rename</code> is when <var>oldname</var> and
<var>newname</var> are two names for the same file.  The consistent way to
handle this case is to delete <var>oldname</var>.  However, in this case
POSIX requires that <code>rename</code> do nothing and report success—which
is inconsistent.  We don’t know what your operating system will do.
</para>
<para>If <var>oldname</var> is not a directory, then any existing file named
<var>newname</var> is removed during the renaming operation.  However, if
<var>newname</var> is the name of a directory, <code>rename</code> fails in this
case.
</para>
<para>If <var>oldname</var> is a directory, then either <var>newname</var> must not
exist or it must name a directory that is empty.  In the latter case,
the existing directory named <var>newname</var> is deleted first.  The name
<var>newname</var> must not specify a subdirectory of the directory
<code>oldname</code> which is being renamed.
</para>
<para>One useful feature of <code>rename</code> is that the meaning of <var>newname</var>
changes “atomically” from any previously existing file by that name to
its new meaning (i.e., the file that was called <var>oldname</var>).  There is
no instant at which <var>newname</var> is non-existent “in between” the old
meaning and the new meaning.  If there is a system crash during the
operation, it is possible for both names to still exist; but
<var>newname</var> will always be intact if it exists at all.
</para>
<para>If <code>rename</code> fails, it returns <code>-1</code>.  In addition to the usual
file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following
<code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>One of the directories containing <var>newname</var> or <var>oldname</var>
refuses write permission; or <var>newname</var> and <var>oldname</var> are
directories and write permission is refused for one of them.
</para>
</dd>
<dt><span><code>EBUSY</code></span></dt>
<dd><para>A directory named by <var>oldname</var> or <var>newname</var> is being used by
the system in a way that prevents the renaming from working.  This includes
directories that are mount points for filesystems, and directories
that are the current working directories of processes.
</para>
</dd>
<dt><span><code>ENOTEMPTY</code></span></dt>
<dt><span><code>EEXIST</code></span></dt>
<dd><para>The directory <var>newname</var> isn’t empty.  GNU/Linux and GNU/Hurd systems always return
<code>ENOTEMPTY</code> for this, but some other systems return <code>EEXIST</code>.
</para>
</dd>
<dt><span><code>EINVAL</code></span></dt>
<dd><para><var>oldname</var> is a directory that contains <var>newname</var>.
</para>
</dd>
<dt><span><code>EISDIR</code></span></dt>
<dd><para><var>newname</var> is a directory but the <var>oldname</var> isn’t.
</para>
</dd>
<dt><span><code>EMLINK</code></span></dt>
<dd><para>The parent directory of <var>newname</var> would have too many links
(entries).
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The file <var>oldname</var> doesn’t exist.
</para>
</dd>
<dt><span><code>ENOSPC</code></span></dt>
<dd><para>The directory that would contain <var>newname</var> has no room for another
entry, and there is no space left in the file system to expand it.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The operation would involve writing to a directory on a read-only file
system.
</para>
</dd>
<dt><span><code>EXDEV</code></span></dt>
<dd><para>The two file names <var>newname</var> and <var>oldname</var> are on different
file systems.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<sect xml:id="glibc-Creating-Directories">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="n" rel="next">File Attributes</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Renaming-Files" accesskey="p" rel="prev">Renaming Files</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Creating-Directories-1"></span><h3 class="section">14.8 Creating Directories</title>
<span xml:id="glibc-index-creating-a-directory"></span>
<span xml:id="glibc-index-directories_002c-creating"></span>

<span xml:id="glibc-index-mkdir-1"></span>
<para>Directories are created with the <code>mkdir</code> function.  (There is also
a shell command <code>mkdir</code> which does the same thing.)
</para>
<dl class="def">
<dt xml:id="glibc-index-mkdir"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>mkdir</strong> <emphasis>(const char *<var>filename</var>, mode_t <var>mode</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-mkdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>mkdir</code> function creates a new, empty directory with name
<var>filename</var>.
</para>
<para>The argument <var>mode</var> specifies the file permissions for the new
directory file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits">The Mode Bits for Access Permission</a>, for more information about
this.
</para>
<para>A return value of <code>0</code> indicates successful completion, and
<code>-1</code> indicates failure.  In addition to the usual file name syntax
errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following <code>errno</code> error
conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>Write permission is denied for the parent directory in which the new
directory is to be added.
</para>
</dd>
<dt><span><code>EEXIST</code></span></dt>
<dd><para>A file named <var>filename</var> already exists.
</para>
</dd>
<dt><span><code>EMLINK</code></span></dt>
<dd><para>The parent directory has too many links (entries).
</para>
<para>Well-designed file systems never report this error, because they permit
more links than your disk could possibly hold.  However, you must still
take account of the possibility of this error, as it could result from
network access to a file system on another machine.
</para>
</dd>
<dt><span><code>ENOSPC</code></span></dt>
<dd><para>The file system doesn’t have enough room to create the new directory.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The parent directory of the directory being created is on a read-only
file system and cannot be modified.
</para></dd>
</dl>

<para>To use this function, your program should include the header file
<filename>sys/stat.h</filename>.
<span xml:id="glibc-index-sys_002fstat_002eh-1"></span>
</para></dd></dl>

<hr>
</div>
<sect xml:id="glibc-File-Attributes">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Making-Special-Files" accesskey="n" rel="next">Making Special Files</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Creating-Directories" accesskey="p" rel="prev">Creating Directories</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-File-Attributes-1"></span><h3 class="section">14.9 File Attributes</title>

<span xml:id="glibc-index-ls"></span>
<para>When you issue an ‘<filename>ls -l</filename>’ shell command on a file, it gives you
information about the size of the file, who owns it, when it was last
modified, etc.  These are called the <emphasis>file attributes</emphasis>, and are
associated with the file itself and not a particular one of its names.
</para>
<para>This section contains information about how you can inquire about and
modify the attributes of a file.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Attribute-Meanings" accesskey="1">The meaning of the File Attributes</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading-Attributes" accesskey="2">Reading the Attributes of a File</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type" accesskey="3">Testing the Type of a File</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner" accesskey="4">File Owner</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits" accesskey="5">The Mode Bits for Access Permission</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Access-Permission" accesskey="6">How Your Access to a File is Decided</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-Permissions" accesskey="7">Assigning File Permissions</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Access" accesskey="8">Testing Permission to Access a File</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times" accesskey="9">File Times</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Size">File Size</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Storage-Allocation">Storage Allocation</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Attribute-Meanings">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading-Attributes" accesskey="n" rel="next">Reading the Attributes of a File</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-The-meaning-of-the-File-Attributes"></span><h4 class="subsection">14.9.1 The meaning of the File Attributes</title>
<span xml:id="glibc-index-status-of-a-file"></span>
<span xml:id="glibc-index-attributes-of-a-file"></span>
<span xml:id="glibc-index-file-attributes"></span>

<para>When you read the attributes of a file, they come back in a structure
called <code>struct stat</code>.  This section describes the names of the
attributes, their data types, and what they mean.  For the functions
to read the attributes of a file, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading-Attributes">Reading the Attributes of a File</a>.
</para>
<para>The header file <filename>sys/stat.h</filename> declares all the symbols defined
in this section.
<span xml:id="glibc-index-sys_002fstat_002eh-2"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-stat"><span class="category">Data Type: </span><span><strong>struct stat</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-stat" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>stat</code> structure type is used to return information about the
attributes of a file.  It contains at least the following members:
</para>
<dl compact="compact">
<dt><span><code>mode_t st_mode</code></span></dt>
<dd><para>Specifies the mode of the file.  This includes file type information
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type">Testing the Type of a File</a>) and the file permission bits
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits">The Mode Bits for Access Permission</a>).
</para>
</dd>
<dt><span><code>ino_t st_ino</code></span></dt>
<dd><para>The file serial number, which distinguishes this file from all other
files on the same device.
</para>
</dd>
<dt><span><code>dev_t st_dev</code></span></dt>
<dd><para>Identifies the device containing the file.  The <code>st_ino</code> and
<code>st_dev</code>, taken together, uniquely identify the file.  The
<code>st_dev</code> value is not necessarily consistent across reboots or
system crashes, however.
</para>
</dd>
<dt><span><code>nlink_t st_nlink</code></span></dt>
<dd><para>The number of hard links to the file.  This count keeps track of how
many directories have entries for this file.  If the count is ever
decremented to zero, then the file itself is discarded as soon as no
process still holds it open.  Symbolic links are not counted in the
total.
</para>
</dd>
<dt><span><code>uid_t st_uid</code></span></dt>
<dd><para>The user ID of the file’s owner.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner">File Owner</a>.
</para>
</dd>
<dt><span><code>gid_t st_gid</code></span></dt>
<dd><para>The group ID of the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner">File Owner</a>.
</para>
</dd>
<dt><span><code>off_t st_size</code></span></dt>
<dd><para>This specifies the size of a regular file in bytes.  For files that are
really devices this field isn’t usually meaningful.  For symbolic links
this specifies the length of the file name the link refers to.
</para>
</dd>
<dt><span><code>time_t st_atime</code></span></dt>
<dd><para>This is the last access time for the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>unsigned long int st_atime_usec</code></span></dt>
<dd><para>This is the fractional part of the last access time for the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>time_t st_mtime</code></span></dt>
<dd><para>This is the time of the last modification to the contents of the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>unsigned long int st_mtime_usec</code></span></dt>
<dd><para>This is the fractional part of the time of the last modification to the
contents of the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>time_t st_ctime</code></span></dt>
<dd><para>This is the time of the last modification to the attributes of the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>unsigned long int st_ctime_usec</code></span></dt>
<dd><para>This is the fractional part of the time of the last modification to the
attributes of the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>blkcnt_t st_blocks</code></span></dt>
<dd><para>This is the amount of disk space that the file occupies, measured in
units of 512-byte blocks.
</para>
<para>The number of disk blocks is not strictly proportional to the size of
the file, for two reasons: the file system may use some blocks for
internal record keeping; and the file may be sparse—it may have
“holes” which contain zeros but do not actually take up space on the
disk.
</para>
<para>You can tell (approximately) whether a file is sparse by comparing this
value with <code>st_size</code>, like this:
</para>
<div class="example">
<pre class="example">(st.st_blocks * 512 &lt; st.st_size)
</pre></div>

<para>This test is not perfect because a file that is just slightly sparse
might not be detected as sparse at all.  For practical applications,
this is not a problem.
</para>
</dd>
<dt><span><code>unsigned int st_blksize</code></span></dt>
<dd><para>The optimal block size for reading or writing this file, in bytes.  You
might use this size for allocating the buffer space for reading or
writing the file.  (This is unrelated to <code>st_blocks</code>.)
</para></dd>
</dl>
</dd></dl>

<para>The extensions for the Large File Support (LFS) require, even on 32-bit
machines, types which can handle file sizes up to 2^63.
Therefore a new definition of <code>struct stat</code> is necessary.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-stat64"><span class="category">Data Type: </span><span><strong>struct stat64</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-stat64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The members of this type are the same and have the same names as those
in <code>struct stat</code>.  The only difference is that the members
<code>st_ino</code>, <code>st_size</code>, and <code>st_blocks</code> have a different
type to support larger values.
</para>
<dl compact="compact">
<dt><span><code>mode_t st_mode</code></span></dt>
<dd><para>Specifies the mode of the file.  This includes file type information
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type">Testing the Type of a File</a>) and the file permission bits
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits">The Mode Bits for Access Permission</a>).
</para>
</dd>
<dt><span><code>ino64_t st_ino</code></span></dt>
<dd><para>The file serial number, which distinguishes this file from all other
files on the same device.
</para>
</dd>
<dt><span><code>dev_t st_dev</code></span></dt>
<dd><para>Identifies the device containing the file.  The <code>st_ino</code> and
<code>st_dev</code>, taken together, uniquely identify the file.  The
<code>st_dev</code> value is not necessarily consistent across reboots or
system crashes, however.
</para>
</dd>
<dt><span><code>nlink_t st_nlink</code></span></dt>
<dd><para>The number of hard links to the file.  This count keeps track of how
many directories have entries for this file.  If the count is ever
decremented to zero, then the file itself is discarded as soon as no
process still holds it open.  Symbolic links are not counted in the
total.
</para>
</dd>
<dt><span><code>uid_t st_uid</code></span></dt>
<dd><para>The user ID of the file’s owner.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner">File Owner</a>.
</para>
</dd>
<dt><span><code>gid_t st_gid</code></span></dt>
<dd><para>The group ID of the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner">File Owner</a>.
</para>
</dd>
<dt><span><code>off64_t st_size</code></span></dt>
<dd><para>This specifies the size of a regular file in bytes.  For files that are
really devices this field isn’t usually meaningful.  For symbolic links
this specifies the length of the file name the link refers to.
</para>
</dd>
<dt><span><code>time_t st_atime</code></span></dt>
<dd><para>This is the last access time for the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>unsigned long int st_atime_usec</code></span></dt>
<dd><para>This is the fractional part of the last access time for the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>time_t st_mtime</code></span></dt>
<dd><para>This is the time of the last modification to the contents of the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>unsigned long int st_mtime_usec</code></span></dt>
<dd><para>This is the fractional part of the time of the last modification to the
contents of the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>time_t st_ctime</code></span></dt>
<dd><para>This is the time of the last modification to the attributes of the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>unsigned long int st_ctime_usec</code></span></dt>
<dd><para>This is the fractional part of the time of the last modification to the
attributes of the file.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times">File Times</a>.
</para>
</dd>
<dt><span><code>blkcnt64_t st_blocks</code></span></dt>
<dd><para>This is the amount of disk space that the file occupies, measured in
units of 512-byte blocks.
</para>
</dd>
<dt><span><code>unsigned int st_blksize</code></span></dt>
<dd><para>The optimal block size for reading of writing this file, in bytes.  You
might use this size for allocating the buffer space for reading of
writing the file.  (This is unrelated to <code>st_blocks</code>.)
</para></dd>
</dl>
</dd></dl>

<para>Some of the file attributes have special data type names which exist
specifically for those attributes.  (They are all aliases for well-known
integer types that you know and love.)  These typedef names are defined
in the header file <filename>sys/types.h</filename> as well as in <filename>sys/stat.h</filename>.
Here is a list of them.
</para>
<dl class="def">
<dt xml:id="glibc-index-mode_005ft"><span class="category">Data Type: </span><span><strong>mode_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-mode_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an integer data type used to represent file modes.  In
the GNU C Library, this is an unsigned type no narrower than <code>unsigned
int</code>.
</para></dd></dl>

<span xml:id="glibc-index-inode-number"></span>
<dl class="def">
<dt xml:id="glibc-index-ino_005ft"><span class="category">Data Type: </span><span><strong>ino_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ino_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an unsigned integer type used to represent file serial numbers.
(In Unix jargon, these are sometimes called <emphasis>inode numbers</emphasis>.)
In the GNU C Library, this type is no narrower than <code>unsigned int</code>.
</para>
<para>If the source is compiled with <code>_FILE_OFFSET_BITS == 64</code> this type
is transparently replaced by <code>ino64_t</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-ino64_005ft"><span class="category">Data Type: </span><span><strong>ino64_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ino64_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an unsigned integer type used to represent file serial numbers
for the use in LFS.  In the GNU C Library, this type is no narrower than
<code>unsigned int</code>.
</para>
<para>When compiling with <code>_FILE_OFFSET_BITS == 64</code> this type is
available under the name <code>ino_t</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-dev_005ft"><span class="category">Data Type: </span><span><strong>dev_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-dev_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an arithmetic data type used to represent file device numbers.
In the GNU C Library, this is an integer type no narrower than <code>int</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-nlink_005ft"><span class="category">Data Type: </span><span><strong>nlink_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-nlink_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an integer type used to represent file link counts.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-blkcnt_005ft"><span class="category">Data Type: </span><span><strong>blkcnt_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-blkcnt_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is a signed integer type used to represent block counts.
In the GNU C Library, this type is no narrower than <code>int</code>.
</para>
<para>If the source is compiled with <code>_FILE_OFFSET_BITS == 64</code> this type
is transparently replaced by <code>blkcnt64_t</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-blkcnt64_005ft"><span class="category">Data Type: </span><span><strong>blkcnt64_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-blkcnt64_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is a signed integer type used to represent block counts for the
use in LFS.  In the GNU C Library, this type is no narrower than <code>int</code>.
</para>
<para>When compiling with <code>_FILE_OFFSET_BITS == 64</code> this type is
available under the name <code>blkcnt_t</code>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Reading-Attributes">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type" accesskey="n" rel="next">Testing the Type of a File</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Attribute-Meanings" accesskey="p" rel="prev">The meaning of the File Attributes</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Reading-the-Attributes-of-a-File"></span><h4 class="subsection">14.9.2 Reading the Attributes of a File</title>

<para>To examine the attributes of files, use the functions <code>stat</code>,
<code>fstat</code> and <code>lstat</code>.  They return the attribute information in
a <code>struct stat</code> object.  All three functions are declared in the
header file <filename>sys/stat.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-stat"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>stat</strong> <emphasis>(const char *<var>filename</var>, struct stat *<var>buf</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-stat" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>stat</code> function returns information about the attributes of the
file named by <var>filename</var> in the structure pointed to by <var>buf</var>.
</para>
<para>If <var>filename</var> is the name of a symbolic link, the attributes you get
describe the file that the link points to.  If the link points to a
nonexistent file name, then <code>stat</code> fails reporting a nonexistent
file.
</para>
<para>The return value is <code>0</code> if the operation is successful, or
<code>-1</code> on failure.  In addition to the usual file name errors
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>, the following <code>errno</code> error conditions
are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The file named by <var>filename</var> doesn’t exist.
</para></dd>
</dl>

<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
function is in fact <code>stat64</code> since the LFS interface transparently
replaces the normal implementation.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-stat64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>stat64</strong> <emphasis>(const char *<var>filename</var>, struct stat64 *<var>buf</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-stat64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>stat</code> but it is also able to work on
files larger than 2^31 bytes on 32-bit systems.  To be able to do
this the result is stored in a variable of type <code>struct stat64</code> to
which <var>buf</var> must point.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
function is available under the name <code>stat</code> and so transparently
replaces the interface for small files on 32-bit machines.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-fstat"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>fstat</strong> <emphasis>(int <var>filedes</var>, struct stat *<var>buf</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-fstat" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>fstat</code> function is like <code>stat</code>, except that it takes an
open file descriptor as an argument instead of a file name.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dLevel-I_002fO">Low-Level Input/Output</a>.
</para>
<para>Like <code>stat</code>, <code>fstat</code> returns <code>0</code> on success and <code>-1</code>
on failure.  The following <code>errno</code> error conditions are defined for
<code>fstat</code>:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>filedes</var> argument is not a valid file descriptor.
</para></dd>
</dl>

<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
function is in fact <code>fstat64</code> since the LFS interface transparently
replaces the normal implementation.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-fstat64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>fstat64</strong> <emphasis>(int <var>filedes</var>, struct stat64 *<var>buf</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-fstat64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>fstat</code> but is able to work on large
files on 32-bit platforms.  For large files the file descriptor
<var>filedes</var> should be obtained by <code>open64</code> or <code>creat64</code>.
The <var>buf</var> pointer points to a variable of type <code>struct stat64</code>
which is able to represent the larger values.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
function is available under the name <code>fstat</code> and so transparently
replaces the interface for small files on 32-bit machines.
</para></dd></dl>


<dl class="def">
<dt xml:id="glibc-index-lstat"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>lstat</strong> <emphasis>(const char *<var>filename</var>, struct stat *<var>buf</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-lstat" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>lstat</code> function is like <code>stat</code>, except that it does not
follow symbolic links.  If <var>filename</var> is the name of a symbolic
link, <code>lstat</code> returns information about the link itself; otherwise
<code>lstat</code> works like <code>stat</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Symbolic-Links">Symbolic Links</a>.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
function is in fact <code>lstat64</code> since the LFS interface transparently
replaces the normal implementation.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-lstat64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>lstat64</strong> <emphasis>(const char *<var>filename</var>, struct stat64 *<var>buf</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-lstat64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>lstat</code> but it is also able to work on
files larger than 2^31 bytes on 32-bit systems.  To be able to do
this the result is stored in a variable of type <code>struct stat64</code> to
which <var>buf</var> must point.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> this
function is available under the name <code>lstat</code> and so transparently
replaces the interface for small files on 32-bit machines.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Testing-File-Type">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner" accesskey="n" rel="next">File Owner</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Reading-Attributes" accesskey="p" rel="prev">Reading the Attributes of a File</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Testing-the-Type-of-a-File"></span><h4 class="subsection">14.9.3 Testing the Type of a File</title>

<para>The <emphasis>file mode</emphasis>, stored in the <code>st_mode</code> field of the file
attributes, contains two kinds of information: the file type code, and
the access permission bits.  This section discusses only the type code,
which you can use to tell whether the file is a directory, socket,
symbolic link, and so on.  For details about access permissions see
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits">The Mode Bits for Access Permission</a>.
</para>
<para>There are two ways you can access the file type information in a file
mode.  Firstly, for each file type there is a <emphasis>predicate macro</emphasis>
which examines a given file mode and returns whether it is of that type
or not.  Secondly, you can mask out the rest of the file mode to leave
just the file type code, and compare this against constants for each of
the supported file types.
</para>
<para>All of the symbols listed in this section are defined in the header file
<filename>sys/stat.h</filename>.
<span xml:id="glibc-index-sys_002fstat_002eh-3"></span>
</para>
<para>The following predicate macros test the type of a file, given the value
<var>m</var> which is the <code>st_mode</code> field returned by <code>stat</code> on
that file:
</para>
<dl class="def">
<dt xml:id="glibc-index-S_005fISDIR"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISDIR</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISDIR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a directory.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fISCHR"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISCHR</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISCHR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a character special file (a
device like a terminal).
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fISBLK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISBLK</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISBLK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a block special file (a device
like a disk).
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fISREG"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISREG</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISREG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a regular file.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fISFIFO"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISFIFO</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISFIFO" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a FIFO special file, or a
pipe.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Pipes-and-FIFOs">Pipes and FIFOs</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fISLNK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISLNK</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISLNK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a symbolic link.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Symbolic-Links">Symbolic Links</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fISSOCK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_ISSOCK</strong> <emphasis>(mode_t <var>m</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISSOCK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns non-zero if the file is a socket.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sockets">Sockets</a>.
</para></dd></dl>

<para>An alternate non-POSIX method of testing the file type is supported for
compatibility with BSD.  The mode can be bitwise AND-ed with
<code>S_IFMT</code> to extract the file type code, and compared to the
appropriate constant.  For example,
</para>
<div class="example">
<pre class="example">S_ISCHR (<var>mode</var>)
</pre></div>

<para>is equivalent to:
</para>
<div class="example">
<pre class="example">((<var>mode</var> &amp; S_IFMT) == S_IFCHR)
</pre></div>

<dl class="def">
<dt xml:id="glibc-index-S_005fIFMT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_IFMT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFMT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is a bit mask used to extract the file type code from a mode value.
</para></dd></dl>

<para>These are the symbolic names for the different file type codes:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-S_005fIFDIR"><span><code>S_IFDIR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFDIR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a directory file.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIFCHR"><span><code>S_IFCHR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFCHR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a character-oriented device file.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIFBLK"><span><code>S_IFBLK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFBLK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a block-oriented device file.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIFREG"><span><code>S_IFREG</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFREG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a regular file.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIFLNK"><span><code>S_IFLNK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFLNK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a symbolic link.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIFSOCK"><span><code>S_IFSOCK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFSOCK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a socket.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIFIFO"><span><code>S_IFIFO</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIFIFO" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the file type constant of a FIFO or pipe.
</para></dd>
</dl>

<para>The POSIX.1b standard introduced a few more objects which possibly can
be implemented as objects in the filesystem.  These are message queues,
semaphores, and shared memory objects.  To allow differentiating these
objects from other files the POSIX standard introduced three new test
macros.  But unlike the other macros they do not take the value of the
<code>st_mode</code> field as the parameter.  Instead they expect a pointer to
the whole <code>struct stat</code> structure.
</para>
<dl class="def">
<dt xml:id="glibc-index-S_005fTYPEISMQ"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_TYPEISMQ</strong> <emphasis>(struct stat *<var>s</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fTYPEISMQ" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>If the system implements POSIX message queues as distinct objects and the
file is a message queue object, this macro returns a non-zero value.
In all other cases the result is zero.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fTYPEISSEM"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_TYPEISSEM</strong> <emphasis>(struct stat *<var>s</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fTYPEISSEM" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>If the system implements POSIX semaphores as distinct objects and the
file is a semaphore object, this macro returns a non-zero value.
In all other cases the result is zero.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-S_005fTYPEISSHM"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>S_TYPEISSHM</strong> <emphasis>(struct stat *<var>s</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fTYPEISSHM" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>If the system implements POSIX shared memory objects as distinct objects
and the file is a shared memory object, this macro returns a non-zero
value.  In all other cases the result is zero.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-File-Owner">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits" accesskey="n" rel="next">The Mode Bits for Access Permission</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type" accesskey="p" rel="prev">Testing the Type of a File</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-File-Owner-1"></span><h4 class="subsection">14.9.4 File Owner</title>
<span xml:id="glibc-index-file-owner"></span>
<span xml:id="glibc-index-owner-of-a-file"></span>
<span xml:id="glibc-index-group-owner-of-a-file"></span>

<para>Every file has an <emphasis>owner</emphasis> which is one of the registered user names
defined on the system.  Each file also has a <emphasis>group</emphasis> which is one of
the defined groups.  The file owner can often be useful for showing you
who edited the file (especially when you edit with GNU Emacs), but its
main purpose is for access control.
</para>
<para>The file owner and group play a role in determining access because the
file has one set of access permission bits for the owner, another set
that applies to users who belong to the file’s group, and a third set of
bits that applies to everyone else.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Access-Permission">How Your Access to a File is Decided</a>, for the
details of how access is decided based on this data.
</para>
<para>When a file is created, its owner is set to the effective user ID of the
process that creates it (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Persona">The Persona of a Process</a>).  The file’s group ID
may be set to either the effective group ID of the process, or the group
ID of the directory that contains the file, depending on the system
where the file is stored.  When you access a remote file system, it
behaves according to its own rules, not according to the system your
program is running on.  Thus, your program must be prepared to encounter
either kind of behavior no matter what kind of system you run it on.
</para>
<span xml:id="glibc-index-chown-1"></span>
<span xml:id="glibc-index-chgrp"></span>
<para>You can change the owner and/or group owner of an existing file using
the <code>chown</code> function.  This is the primitive for the <code>chown</code>
and <code>chgrp</code> shell commands.
</para>
<span xml:id="glibc-index-unistd_002eh-9"></span>
<para>The prototype for this function is declared in <filename>unistd.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-chown"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>chown</strong> <emphasis>(const char *<var>filename</var>, uid_t <var>owner</var>, gid_t <var>group</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-chown" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>chown</code> function changes the owner of the file <var>filename</var> to
<var>owner</var>, and its group owner to <var>group</var>.
</para>
<para>Changing the owner of the file on certain systems clears the set-user-ID
and set-group-ID permission bits.  (This is because those bits may not
be appropriate for the new owner.)  Other file permission bits are not
changed.
</para>
<para>The return value is <code>0</code> on success and <code>-1</code> on failure.
In addition to the usual file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>),
the following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EPERM</code></span></dt>
<dd><para>This process lacks permission to make the requested change.
</para>
<para>Only privileged users or the file’s owner can change the file’s group.
On most file systems, only privileged users can change the file owner;
some file systems allow you to change the owner if you are currently the
owner.  When you access a remote file system, the behavior you encounter
is determined by the system that actually holds the file, not by the
system your program is running on.
</para>
<para>See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Options-for-Files">Optional Features in File Support</a>, for information about the
<code>_POSIX_CHOWN_RESTRICTED</code> macro.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file is on a read-only file system.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-fchown"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>fchown</strong> <emphasis>(int <var>filedes</var>, uid_t <var>owner</var>, gid_t <var>group</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-fchown" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This is like <code>chown</code>, except that it changes the owner of the open
file with descriptor <var>filedes</var>.
</para>
<para>The return value from <code>fchown</code> is <code>0</code> on success and <code>-1</code>
on failure.  The following <code>errno</code> error codes are defined for this
function:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>filedes</var> argument is not a valid file descriptor.
</para>
</dd>
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>filedes</var> argument corresponds to a pipe or socket, not an ordinary
file.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>This process lacks permission to make the requested change.  For details
see <code>chmod</code> above.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file resides on a read-only file system.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Permission-Bits">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Access-Permission" accesskey="n" rel="next">How Your Access to a File is Decided</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Owner" accesskey="p" rel="prev">File Owner</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-The-Mode-Bits-for-Access-Permission"></span><h4 class="subsection">14.9.5 The Mode Bits for Access Permission</title>

<para>The <emphasis>file mode</emphasis>, stored in the <code>st_mode</code> field of the file
attributes, contains two kinds of information: the file type code, and
the access permission bits.  This section discusses only the access
permission bits, which control who can read or write the file.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type">Testing the Type of a File</a>, for information about the file type code.
</para>
<para>All of the symbols listed in this section are defined in the header file
<filename>sys/stat.h</filename>.
<span xml:id="glibc-index-sys_002fstat_002eh-4"></span>
</para>
<span xml:id="glibc-index-file-permission-bits"></span>
<para>These symbolic constants are defined for the file mode bits that control
access permission for the file:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-S_005fIRUSR"><span><code>S_IRUSR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIRUSR" class="copiable-anchor"> ¶</a></span></dt>
<dt xml:id="glibc-index-S_005fIREAD"><span><code>S_IREAD</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIREAD" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<para>Read permission bit for the owner of the file.  On many systems this bit
is 0400.  <code>S_IREAD</code> is an obsolete synonym provided for BSD
compatibility.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIWUSR"><span><code>S_IWUSR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIWUSR" class="copiable-anchor"> ¶</a></span></dt>
<dt xml:id="glibc-index-S_005fIWRITE"><span><code>S_IWRITE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIWRITE" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<para>Write permission bit for the owner of the file.  Usually 0200.
<code><span class="nolinebreak">S_IWRITE</span></code> is an obsolete synonym provided for BSD compatibility.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIXUSR"><span><code>S_IXUSR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIXUSR" class="copiable-anchor"> ¶</a></span></dt>
<dt xml:id="glibc-index-S_005fIEXEC"><span><code>S_IEXEC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIEXEC" class="copiable-anchor"> ¶</a></span></dt>
<dd>

<para>Execute (for ordinary files) or search (for directories) permission bit
for the owner of the file.  Usually 0100.  <code>S_IEXEC</code> is an obsolete
synonym provided for BSD compatibility.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIRWXU"><span><code>S_IRWXU</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIRWXU" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is equivalent to ‘<filename>(S_IRUSR | S_IWUSR | S_IXUSR)</filename>’.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIRGRP"><span><code>S_IRGRP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIRGRP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Read permission bit for the group owner of the file.  Usually 040.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIWGRP"><span><code>S_IWGRP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIWGRP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Write permission bit for the group owner of the file.  Usually 020.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIXGRP"><span><code>S_IXGRP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIXGRP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Execute or search permission bit for the group owner of the file.
Usually 010.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIRWXG"><span><code>S_IRWXG</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIRWXG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is equivalent to ‘<filename>(S_IRGRP | S_IWGRP | S_IXGRP)</filename>’.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIROTH"><span><code>S_IROTH</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIROTH" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Read permission bit for other users.  Usually 04.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIWOTH"><span><code>S_IWOTH</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIWOTH" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Write permission bit for other users.  Usually 02.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIXOTH"><span><code>S_IXOTH</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIXOTH" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Execute or search permission bit for other users.  Usually 01.
</para>
</dd>
<dt xml:id="glibc-index-S_005fIRWXO"><span><code>S_IRWXO</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fIRWXO" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is equivalent to ‘<filename>(S_IROTH | S_IWOTH | S_IXOTH)</filename>’.
</para>
</dd>
<dt xml:id="glibc-index-S_005fISUID"><span><code>S_ISUID</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISUID" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the set-user-ID on execute bit, usually 04000.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#How-Change-Persona">How an Application Can Change Persona</a>.
</para>
</dd>
<dt xml:id="glibc-index-S_005fISGID"><span><code>S_ISGID</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISGID" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the set-group-ID on execute bit, usually 02000.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#How-Change-Persona">How an Application Can Change Persona</a>.
</para>
<span xml:id="glibc-index-sticky-bit"></span>
</dd>
<dt xml:id="glibc-index-S_005fISVTX"><span><code>S_ISVTX</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-S_005fISVTX" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the <emphasis>sticky</emphasis> bit, usually 01000.
</para>
<para>For a directory it gives permission to delete a file in that directory
only if you own that file.  Ordinarily, a user can either delete all the
files in a directory or cannot delete any of them (based on whether the
user has write permission for the directory).  The same restriction
applies—you must have both write permission for the directory and own
the file you want to delete.  The one exception is that the owner of the
directory can delete any file in the directory, no matter who owns it
(provided the owner has given himself write permission for the
directory).  This is commonly used for the <filename>/tmp</filename> directory, where
anyone may create files but not delete files created by other users.
</para>
<para>Originally the sticky bit on an executable file modified the swapping
policies of the system.  Normally, when a program terminated, its pages
in core were immediately freed and reused.  If the sticky bit was set on
the executable file, the system kept the pages in core for a while as if
the program were still running.  This was advantageous for a program
likely to be run many times in succession.  This usage is obsolete in
modern systems.  When a program terminates, its pages always remain in
core as long as there is no shortage of memory in the system.  When the
program is next run, its pages will still be in core if no shortage
arose since the last run.
</para>
<para>On some modern systems where the sticky bit has no useful meaning for an
executable file, you cannot set the bit at all for a non-directory.
If you try, <code>chmod</code> fails with <code>EFTYPE</code>;
see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-Permissions">Assigning File Permissions</a>.
</para>
<para>Some systems (particularly SunOS) have yet another use for the sticky
bit.  If the sticky bit is set on a file that is <emphasis>not</emphasis> executable,
it means the opposite: never cache the pages of this file at all.  The
main use of this is for the files on an NFS server machine which are
used as the swap area of diskless client machines.  The idea is that the
pages of the file will be cached in the client’s memory, so it is a
waste of the server’s memory to cache them a second time.  With this
usage the sticky bit also implies that the filesystem may fail to record
the file’s modification time onto disk reliably (the idea being that
no-one cares for a swap file).
</para>
<para>This bit is only available on BSD systems (and those derived from
them).  Therefore one has to use the <code>_GNU_SOURCE</code> feature select
macro, or not define any feature test macros, to get the definition
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Feature-Test-Macros">Feature Test Macros</a>).
</para></dd>
</dl>

<para>The actual bit values of the symbols are listed in the table above
so you can decode file mode values when debugging your programs.
These bit values are correct for most systems, but they are not
guaranteed.
</para>
<para><strong>Warning:</strong> Writing explicit numbers for file permissions is bad
practice.  Not only is it not portable, it also requires everyone who
reads your program to remember what the bits mean.  To make your program
clean use the symbolic names.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Access-Permission">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-Permissions" accesskey="n" rel="next">Assigning File Permissions</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits" accesskey="p" rel="prev">The Mode Bits for Access Permission</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-How-Your-Access-to-a-File-is-Decided"></span><h4 class="subsection">14.9.6 How Your Access to a File is Decided</title>
<span xml:id="glibc-index-permission-to-access-a-file"></span>
<span xml:id="glibc-index-access-permission-for-a-file"></span>
<span xml:id="glibc-index-file-access-permission"></span>

<para>Recall that the operating system normally decides access permission for
a file based on the effective user and group IDs of the process and its
supplementary group IDs, together with the file’s owner, group and
permission bits.  These concepts are discussed in detail in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Persona">The Persona of a Process</a>.
</para>
<para>If the effective user ID of the process matches the owner user ID of the
file, then permissions for read, write, and execute/search are
controlled by the corresponding “user” (or “owner”) bits.  Likewise,
if any of the effective group ID or supplementary group IDs of the
process matches the group owner ID of the file, then permissions are
controlled by the “group” bits.  Otherwise, permissions are controlled
by the “other” bits.
</para>
<para>Privileged users, like ‘<filename>root</filename>’, can access any file regardless of
its permission bits.  As a special case, for a file to be executable
even by a privileged user, at least one of its execute bits must be set.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Setting-Permissions">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Access" accesskey="n" rel="next">Testing Permission to Access a File</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Access-Permission" accesskey="p" rel="prev">How Your Access to a File is Decided</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Assigning-File-Permissions"></span><h4 class="subsection">14.9.7 Assigning File Permissions</title>

<span xml:id="glibc-index-file-creation-mask"></span>
<span xml:id="glibc-index-umask"></span>
<para>The primitive functions for creating files (for example, <code>open</code> or
<code>mkdir</code>) take a <var>mode</var> argument, which specifies the file
permissions to give the newly created file.  This mode is modified by
the process’s <emphasis>file creation mask</emphasis>, or <emphasis>umask</emphasis>, before it is
used.
</para>
<para>The bits that are set in the file creation mask identify permissions
that are always to be disabled for newly created files.  For example, if
you set all the “other” access bits in the mask, then newly created
files are not accessible at all to processes in the “other” category,
even if the <var>mode</var> argument passed to the create function would
permit such access.  In other words, the file creation mask is the
complement of the ordinary access permissions you want to grant.
</para>
<para>Programs that create files typically specify a <var>mode</var> argument that
includes all the permissions that make sense for the particular file.
For an ordinary file, this is typically read and write permission for
all classes of users.  These permissions are then restricted as
specified by the individual user’s own file creation mask.
</para>
<span xml:id="glibc-index-chmod"></span>
<para>To change the permission of an existing file given its name, call
<code>chmod</code>.  This function uses the specified permission bits and
ignores the file creation mask.
</para>
<span xml:id="glibc-index-umask-2"></span>
<para>In normal use, the file creation mask is initialized by the user’s login
shell (using the <code>umask</code> shell command), and inherited by all
subprocesses.  Application programs normally don’t need to worry about
the file creation mask.  It will automatically do what it is supposed to
do.
</para>
<para>When your program needs to create a file and bypass the umask for its
access permissions, the easiest way to do this is to use <code>fchmod</code>
after opening the file, rather than changing the umask.  In fact,
changing the umask is usually done only by shells.  They use the
<code>umask</code> function.
</para>
<para>The functions in this section are declared in <filename>sys/stat.h</filename>.
<span xml:id="glibc-index-sys_002fstat_002eh-5"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-umask-1"><span class="category">Function: </span><span><emphasis>mode_t</emphasis> <strong>umask</strong> <emphasis>(mode_t <var>mask</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-umask-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>umask</code> function sets the file creation mask of the current
process to <var>mask</var>, and returns the previous value of the file
creation mask.
</para>
<para>Here is an example showing how to read the mask with <code>umask</code>
without changing it permanently:
</para>
<div class="example">
<pre class="example">mode_t
read_umask (void)
{
  mode_t mask = umask (0);
  umask (mask);
  return mask;
}
</pre></div>

<para>However, on GNU/Hurd systems it is better to use <code>getumask</code> if
you just want to read the mask value, because it is reentrant.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-getumask"><span class="category">Function: </span><span><emphasis>mode_t</emphasis> <strong>getumask</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getumask" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>Return the current value of the file creation mask for the current
process.  This function is a GNU extension and is only available on
GNU/Hurd systems.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-chmod-1"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>chmod</strong> <emphasis>(const char *<var>filename</var>, mode_t <var>mode</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-chmod-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>chmod</code> function sets the access permission bits for the file
named by <var>filename</var> to <var>mode</var>.
</para>
<para>If <var>filename</var> is a symbolic link, <code>chmod</code> changes the
permissions of the file pointed to by the link, not those of the link
itself.
</para>
<para>This function returns <code>0</code> if successful and <code>-1</code> if not.  In
addition to the usual file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following <code>errno</code> error conditions are defined for
this function:
</para>
<dl compact="compact">
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The named file doesn’t exist.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>This process does not have permission to change the access permissions
of this file.  Only the file’s owner (as judged by the effective user ID
of the process) or a privileged user can change them.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file resides on a read-only file system.
</para>
</dd>
<dt><span><code>EFTYPE</code></span></dt>
<dd><para><var>mode</var> has the <code>S_ISVTX</code> bit (the “sticky bit”) set,
and the named file is not a directory.  Some systems do not allow setting the
sticky bit on non-directory files, and some do (and only some of those
assign a useful meaning to the bit for non-directory files).
</para>
<para>You only get <code>EFTYPE</code> on systems where the sticky bit has no useful
meaning for non-directory files, so it is always safe to just clear the
bit in <var>mode</var> and call <code>chmod</code> again.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-Bits">The Mode Bits for Access Permission</a>,
for full details on the sticky bit.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-fchmod"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>fchmod</strong> <emphasis>(int <var>filedes</var>, mode_t <var>mode</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-fchmod" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This is like <code>chmod</code>, except that it changes the permissions of the
currently open file given by <var>filedes</var>.
</para>
<para>The return value from <code>fchmod</code> is <code>0</code> on success and <code>-1</code>
on failure.  The following <code>errno</code> error codes are defined for this
function:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>filedes</var> argument is not a valid file descriptor.
</para>
</dd>
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>filedes</var> argument corresponds to a pipe or socket, or something
else that doesn’t really have access permissions.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>This process does not have permission to change the access permissions
of this file.  Only the file’s owner (as judged by the effective user ID
of the process) or a privileged user can change them.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file resides on a read-only file system.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Testing-File-Access">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times" accesskey="n" rel="next">File Times</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-Permissions" accesskey="p" rel="prev">Assigning File Permissions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Testing-Permission-to-Access-a-File"></span><h4 class="subsection">14.9.8 Testing Permission to Access a File</title>
<span xml:id="glibc-index-testing-access-permission"></span>
<span xml:id="glibc-index-access_002c-testing-for"></span>
<span xml:id="glibc-index-setuid-programs-and-file-access"></span>

<para>In some situations it is desirable to allow programs to access files or
devices even if this is not possible with the permissions granted to the
user.  One possible solution is to set the setuid-bit of the program
file.  If such a program is started the <emphasis>effective</emphasis> user ID of the
process is changed to that of the owner of the program file.  So to
allow write access to files like <filename>/etc/passwd</filename>, which normally can
be written only by the super-user, the modifying program will have to be
owned by <code>root</code> and the setuid-bit must be set.
</para>
<para>But besides the files the program is intended to change the user should
not be allowed to access any file to which s/he would not have access
anyway.  The program therefore must explicitly check whether <emphasis>the
user</emphasis> would have the necessary access to a file, before it reads or
writes the file.
</para>
<para>To do this, use the function <code>access</code>, which checks for access
permission based on the process’s <emphasis>real</emphasis> user ID rather than the
effective user ID.  (The setuid feature does not alter the real user ID,
so it reflects the user who actually ran the program.)
</para>
<para>There is another way you could check this access, which is easy to
describe, but very hard to use.  This is to examine the file mode bits
and mimic the system’s own access computation.  This method is
undesirable because many systems have additional access control
features; your program cannot portably mimic them, and you would not
want to try to keep track of the diverse features that different systems
have.  Using <code>access</code> is simple and automatically does whatever is
appropriate for the system you are using.
</para>
<para><code>access</code> is <emphasis>only</emphasis> appropriate to use in setuid programs.
A non-setuid program will always use the effective ID rather than the
real ID.
</para>
<span xml:id="glibc-index-unistd_002eh-10"></span>
<para>The symbols in this section are declared in <filename>unistd.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-access"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>access</strong> <emphasis>(const char *<var>filename</var>, int <var>how</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-access" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>access</code> function checks to see whether the file named by
<var>filename</var> can be accessed in the way specified by the <var>how</var>
argument.  The <var>how</var> argument either can be the bitwise OR of the
flags <code>R_OK</code>, <code>W_OK</code>, <code>X_OK</code>, or the existence test
<code>F_OK</code>.
</para>
<para>This function uses the <emphasis>real</emphasis> user and group IDs of the calling
process, rather than the <emphasis>effective</emphasis> IDs, to check for access
permission.  As a result, if you use the function from a <code>setuid</code>
or <code>setgid</code> program (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#How-Change-Persona">How an Application Can Change Persona</a>), it gives
information relative to the user who actually ran the program.
</para>
<para>The return value is <code>0</code> if the access is permitted, and <code>-1</code>
otherwise.  (In other words, treated as a predicate function,
<code>access</code> returns true if the requested access is <emphasis>denied</emphasis>.)
</para>
<para>In addition to the usual file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following <code>errno</code> error conditions are defined for
this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>The access specified by <var>how</var> is denied.
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The file doesn’t exist.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>Write permission was requested for a file on a read-only file system.
</para></dd>
</dl>
</dd></dl>

<para>These macros are defined in the header file <filename>unistd.h</filename> for use
as the <var>how</var> argument to the <code>access</code> function.  The values
are integer constants.
<span xml:id="glibc-index-unistd_002eh-11"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-R_005fOK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>R_OK</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-R_005fOK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Flag meaning test for read permission.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-W_005fOK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>W_OK</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-W_005fOK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Flag meaning test for write permission.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-X_005fOK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>X_OK</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-X_005fOK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Flag meaning test for execute/search permission.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-F_005fOK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>F_OK</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-F_005fOK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Flag meaning test for existence of the file.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-File-Times">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Size" accesskey="n" rel="next">File Size</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Access" accesskey="p" rel="prev">Testing Permission to Access a File</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-File-Times-1"></span><h4 class="subsection">14.9.9 File Times</title>

<span xml:id="glibc-index-file-access-time"></span>
<span xml:id="glibc-index-file-modification-time"></span>
<span xml:id="glibc-index-file-attribute-modification-time"></span>
<para>Each file has three time stamps associated with it:  its access time,
its modification time, and its attribute modification time.  These
correspond to the <code>st_atime</code>, <code>st_mtime</code>, and <code>st_ctime</code>
members of the <code>stat</code> structure; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes">File Attributes</a>.
</para>
<para>All of these times are represented in calendar time format, as
<code>time_t</code> objects.  This data type is defined in <filename>time.h</filename>.
For more information about representation and manipulation of time
values, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Calendar-Time">Calendar Time</a>.
<span xml:id="glibc-index-time_002eh"></span>
</para>
<para>Reading from a file updates its access time attribute, and writing
updates its modification time.  When a file is created, all three
time stamps for that file are set to the current time.  In addition, the
attribute change time and modification time fields of the directory that
contains the new entry are updated.
</para>
<para>Adding a new name for a file with the <code>link</code> function updates the
attribute change time field of the file being linked, and both the
attribute change time and modification time fields of the directory
containing the new name.  These same fields are affected if a file name
is deleted with <code>unlink</code>, <code>remove</code> or <code>rmdir</code>.  Renaming
a file with <code>rename</code> affects only the attribute change time and
modification time fields of the two parent directories involved, and not
the times for the file being renamed.
</para>
<para>Changing the attributes of a file (for example, with <code>chmod</code>)
updates its attribute change time field.
</para>
<para>You can also change some of the time stamps of a file explicitly using
the <code>utime</code> function—all except the attribute change time.  You
need to include the header file <filename>utime.h</filename> to use this facility.
<span xml:id="glibc-index-utime_002eh"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-utimbuf"><span class="category">Data Type: </span><span><strong>struct utimbuf</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-utimbuf" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>utimbuf</code> structure is used with the <code>utime</code> function to
specify new access and modification times for a file.  It contains the
following members:
</para>
<dl compact="compact">
<dt><span><code>time_t actime</code></span></dt>
<dd><para>This is the access time for the file.
</para>
</dd>
<dt><span><code>time_t modtime</code></span></dt>
<dd><para>This is the modification time for the file.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-utime"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>utime</strong> <emphasis>(const char *<var>filename</var>, const struct utimbuf *<var>times</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-utime" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is used to modify the file times associated with the file
named <var>filename</var>.
</para>
<para>If <var>times</var> is a null pointer, then the access and modification times
of the file are set to the current time.  Otherwise, they are set to the
values from the <code>actime</code> and <code>modtime</code> members (respectively)
of the <code>utimbuf</code> structure pointed to by <var>times</var>.
</para>
<para>The attribute modification time for the file is set to the current time
in either case (since changing the time stamps is itself a modification
of the file attributes).
</para>
<para>The <code>utime</code> function returns <code>0</code> if successful and <code>-1</code>
on failure.  In addition to the usual file name errors
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the following <code>errno</code> error conditions
are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>There is a permission problem in the case where a null pointer was
passed as the <var>times</var> argument.  In order to update the time stamp on
the file, you must either be the owner of the file, have write
permission for the file, or be a privileged user.
</para>
</dd>
<dt><span><code>ENOENT</code></span></dt>
<dd><para>The file doesn’t exist.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>If the <var>times</var> argument is not a null pointer, you must either be
the owner of the file or be a privileged user.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file lives on a read-only file system.
</para></dd>
</dl>
</dd></dl>

<para>Each of the three time stamps has a corresponding microsecond part,
which extends its resolution.  These fields are called
<code>st_atime_usec</code>, <code>st_mtime_usec</code>, and <code>st_ctime_usec</code>;
each has a value between 0 and 999,999, which indicates the time in
microseconds.  They correspond to the <code>tv_usec</code> field of a
<code>timeval</code> structure; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Time-Types">Time Types</a>.
</para>
<para>The <code>utimes</code> function is like <code>utime</code>, but also lets you specify
the fractional part of the file times.  The prototype for this function is
in the header file <filename>sys/time.h</filename>.
<span xml:id="glibc-index-sys_002ftime_002eh"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-utimes"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>utimes</strong> <emphasis>(const char *<var>filename</var>, const struct timeval <var>tvp</var><tt>[2]</tt>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-utimes" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function sets the file access and modification times of the file
<var>filename</var>.  The new file access time is specified by
<code><var>tvp</var>[0]</code>, and the new modification time by
<code><var>tvp</var>[1]</code>.  Similar to <code>utime</code>, if <var>tvp</var> is a null
pointer then the access and modification times of the file are set to
the current time.  This function comes from BSD.
</para>
<para>The return values and error conditions are the same as for the <code>utime</code>
function.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-lutimes"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>lutimes</strong> <emphasis>(const char *<var>filename</var>, const struct timeval <var>tvp</var><tt>[2]</tt>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-lutimes" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is like <code>utimes</code>, except that it does not follow
symbolic links.  If <var>filename</var> is the name of a symbolic link,
<code>lutimes</code> sets the file access and modification times of the
symbolic link special file itself (as seen by <code>lstat</code>;
see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Symbolic-Links">Symbolic Links</a>) while <code>utimes</code> sets the file access and
modification times of the file the symbolic link refers to.  This
function comes from FreeBSD, and is not available on all platforms (if
not available, it will fail with <code>ENOSYS</code>).
</para>
<para>The return values and error conditions are the same as for the <code>utime</code>
function.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-futimes"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>futimes</strong> <emphasis>(int <var>fd</var>, const struct timeval <var>tvp</var><tt>[2]</tt>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-futimes" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is like <code>utimes</code>, except that it takes an open file
descriptor as an argument instead of a file name.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dLevel-I_002fO">Low-Level Input/Output</a>.  This function comes from FreeBSD, and is not available on all
platforms (if not available, it will fail with <code>ENOSYS</code>).
</para>
<para>Like <code>utimes</code>, <code>futimes</code> returns <code>0</code> on success and <code>-1</code>
on failure.  The following <code>errno</code> error conditions are defined for
<code>futimes</code>:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>There is a permission problem in the case where a null pointer was
passed as the <var>times</var> argument.  In order to update the time stamp on
the file, you must either be the owner of the file, have write
permission for the file, or be a privileged user.
</para>
</dd>
<dt><span><code>EBADF</code></span></dt>
<dd><para>The <var>filedes</var> argument is not a valid file descriptor.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>If the <var>times</var> argument is not a null pointer, you must either be
the owner of the file or be a privileged user.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The file lives on a read-only file system.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-File-Size">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Storage-Allocation" accesskey="n" rel="next">Storage Allocation</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Times" accesskey="p" rel="prev">File Times</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-File-Size-1"></span><h4 class="subsection">14.9.10 File Size</title>

<para>Normally file sizes are maintained automatically.  A file begins with a
size of <em class="math">0</emphasis> and is automatically extended when data is written past
its end.  It is also possible to empty a file completely by an
<code>open</code> or <code>fopen</code> call.
</para>
<para>However, sometimes it is necessary to <emphasis>reduce</emphasis> the size of a file.
This can be done with the <code>truncate</code> and <code>ftruncate</code> functions.
They were introduced in BSD Unix.  <code>ftruncate</code> was later added to
POSIX.1.
</para>
<para>Some systems allow you to extend a file (creating holes) with these
functions.  This is useful when using memory-mapped I/O
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Memory_002dmapped-I_002fO">Memory-mapped I/O</a>), where files are not automatically extended.
However, it is not portable but must be implemented if <code>mmap</code>
allows mapping of files (i.e., <code>_POSIX_MAPPED_FILES</code> is defined).
</para>
<para>Using these functions on anything other than a regular file gives
<emphasis>undefined</emphasis> results.  On many systems, such a call will appear to
succeed, without actually accomplishing anything.
</para>
<dl class="def">
<dt xml:id="glibc-index-truncate"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>truncate</strong> <emphasis>(const char *<var>filename</var>, off_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-truncate" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <code>truncate</code> function changes the size of <var>filename</var> to
<var>length</var>.  If <var>length</var> is shorter than the previous length, data
at the end will be lost.  The file must be writable by the user to
perform this operation.
</para>
<para>If <var>length</var> is longer, holes will be added to the end.  However, some
systems do not support this feature and will leave the file unchanged.
</para>
<para>When the source file is compiled with <code>_FILE_OFFSET_BITS == 64</code> the
<code>truncate</code> function is in fact <code>truncate64</code> and the type
<code>off_t</code> has 64 bits which makes it possible to handle files up to
2^63 bytes in length.
</para>
<para>The return value is <em class="math">0</emphasis> for success, or <em class="math">-1</emphasis> for an error.  In
addition to the usual file name errors, the following errors may occur:
</para>
<dl compact="compact">
<dt><span><code>EACCES</code></span></dt>
<dd><para>The file is a directory or not writable.
</para>
</dd>
<dt><span><code>EINVAL</code></span></dt>
<dd><para><var>length</var> is negative.
</para>
</dd>
<dt><span><code>EFBIG</code></span></dt>
<dd><para>The operation would extend the file beyond the limits of the operating system.
</para>
</dd>
<dt><span><code>EIO</code></span></dt>
<dd><para>A hardware I/O error occurred.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>The file is "append-only" or "immutable".
</para>
</dd>
<dt><span><code>EINTR</code></span></dt>
<dd><para>The operation was interrupted by a signal.
</para>
</dd>
</dl>

</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-truncate64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>truncate64</strong> <emphasis>(const char *<var>name</var>, off64_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-truncate64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to the <code>truncate</code> function.  The
difference is that the <var>length</var> argument is 64 bits wide even on 32
bits machines, which allows the handling of files with sizes up to
2^63 bytes.
</para>
<para>When the source file is compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32 bits machine this function is actually available under the name
<code>truncate</code> and so transparently replaces the 32 bits interface.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-ftruncate"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>ftruncate</strong> <emphasis>(int <var>fd</var>, off_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ftruncate" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>This is like <code>truncate</code>, but it works on a file descriptor <var>fd</var>
for an opened file instead of a file name to identify the object.  The
file must be opened for writing to successfully carry out the operation.
</para>
<para>The POSIX standard leaves it implementation defined what happens if the
specified new <var>length</var> of the file is bigger than the original size.
The <code>ftruncate</code> function might simply leave the file alone and do
nothing or it can increase the size to the desired size.  In this later
case the extended area should be zero-filled.  So using <code>ftruncate</code>
is no reliable way to increase the file size but if it is possible it is
probably the fastest way.  The function also operates on POSIX shared
memory segments if these are implemented by the system.
</para>
<para><code>ftruncate</code> is especially useful in combination with <code>mmap</code>.
Since the mapped region must have a fixed size one cannot enlarge the
file by writing something beyond the last mapped page.  Instead one has
to enlarge the file itself and then remap the file with the new size.
The example below shows how this works.
</para>
<para>When the source file is compiled with <code>_FILE_OFFSET_BITS == 64</code> the
<code>ftruncate</code> function is in fact <code>ftruncate64</code> and the type
<code>off_t</code> has 64 bits which makes it possible to handle files up to
2^63 bytes in length.
</para>
<para>The return value is <em class="math">0</emphasis> for success, or <em class="math">-1</emphasis> for an error.  The
following errors may occur:
</para>
<dl compact="compact">
<dt><span><code>EBADF</code></span></dt>
<dd><para><var>fd</var> does not correspond to an open file.
</para>
</dd>
<dt><span><code>EACCES</code></span></dt>
<dd><para><var>fd</var> is a directory or not open for writing.
</para>
</dd>
<dt><span><code>EINVAL</code></span></dt>
<dd><para><var>length</var> is negative.
</para>
</dd>
<dt><span><code>EFBIG</code></span></dt>
<dd><para>The operation would extend the file beyond the limits of the operating system.
</para>
</dd>
<dt><span><code>EIO</code></span></dt>
<dd><para>A hardware I/O error occurred.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>The file is "append-only" or "immutable".
</para>
</dd>
<dt><span><code>EINTR</code></span></dt>
<dd><para>The operation was interrupted by a signal.
</para>

</dd>
</dl>

</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-ftruncate64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>ftruncate64</strong> <emphasis>(int <var>id</var>, off64_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ftruncate64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to the <code>ftruncate</code> function.  The
difference is that the <var>length</var> argument is 64 bits wide even on 32
bits machines which allows the handling of files with sizes up to
2^63 bytes.
</para>
<para>When the source file is compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32 bits machine this function is actually available under the name
<code>ftruncate</code> and so transparently replaces the 32 bits interface.
</para></dd></dl>

<para>As announced here is a little example of how to use <code>ftruncate</code> in
combination with <code>mmap</code>:
</para>
<div class="example">
<pre class="example">int fd;
void *start;
size_t len;

int
add (off_t at, void *block, size_t size)
{
  if (at + size &gt; len)
    {
      /* Resize the file and remap.  */
      size_t ps = sysconf (_SC_PAGESIZE);
      size_t ns = (at + size + ps - 1) &amp; ~(ps - 1);
      void *np;
      if (ftruncate (fd, ns) &lt; 0)
        return -1;
      np = mmap (NULL, ns, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
      if (np == MAP_FAILED)
        return -1;
      start = np;
      len = ns;
    }
  memcpy ((char *) start + at, block, size);
  return 0;
}
</pre></div>

<para>The function <code>add</code> writes a block of memory at an arbitrary
position in the file.  If the current size of the file is too small it
is extended.  Note that it is extended by a whole number of pages.  This
is a requirement of <code>mmap</code>.  The program has to keep track of the
real size, and when it has finished a final <code>ftruncate</code> call should
set the real size of the file.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Storage-Allocation">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Size" accesskey="p" rel="prev">File Size</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="u" rel="up">File Attributes</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Storage-Allocation-1"></span><h4 class="subsection">14.9.11 Storage Allocation</title>
<span xml:id="glibc-index-allocating-file-storage"></span>
<span xml:id="glibc-index-file-allocation"></span>
<span xml:id="glibc-index-storage-allocating"></span>

<span xml:id="glibc-index-file-fragmentation"></span>
<span xml:id="glibc-index-fragmentation-of-files"></span>
<span xml:id="glibc-index-sparse-files-1"></span>
<span xml:id="glibc-index-files_002c-sparse"></span>
<para>Most file systems support allocating large files in a non-contiguous
fashion: the file is split into <emphasis>fragments</emphasis> which are allocated
sequentially, but the fragments themselves can be scattered across the
disk.  File systems generally try to avoid such fragmentation because it
decreases performance, but if a file gradually increases in size, there
might be no other option than to fragment it.  In addition, many file
systems support <emphasis>sparse files</emphasis> with <emphasis>holes</emphasis>: regions of null
bytes for which no backing storage has been allocated by the file
system.  When the holes are finally overwritten with data, fragmentation
can occur as well.
</para>
<para>Explicit allocation of storage for yet-unwritten parts of the file can
help the system to avoid fragmentation.  Additionally, if storage
pre-allocation fails, it is possible to report the out-of-disk error
early, often without filling up the entire disk.  However, due to
deduplication, copy-on-write semantics, and file compression, such
pre-allocation may not reliably prevent the out-of-disk-space error from
occurring later.  Checking for write errors is still required, and
writes to memory-mapped regions created with <code>mmap</code> can still
result in <code>SIGBUS</code>.
</para>
<dl class="def">
<dt xml:id="glibc-index-posix_005ffallocate"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>posix_fallocate</strong> <emphasis>(int <var>fd</var>, off_t <var>offset</var>, off_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-posix_005ffallocate" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>Allocate backing store for the region of <var>length</var> bytes starting at
byte <var>offset</var> in the file for the descriptor <var>fd</var>.  The file
length is increased to ‘<filename><var>length</var> + <var>offset</var></filename>’ if necessary.
</para>
<para><var>fd</var> must be a regular file opened for writing, or <code>EBADF</code> is
returned.  If there is insufficient disk space to fulfill the allocation
request, <code>ENOSPC</code> is returned.
</para>
<para><strong>Note:</strong> If <code>fallocate</code> is not available (because the file
system does not support it), <code>posix_fallocate</code> is emulated, which
has the following drawbacks:
</para>
<ul>
<li> It is very inefficient because all file system blocks in the requested
range need to be examined (even if they have been allocated before) and
potentially rewritten.  In contrast, with proper <code>fallocate</code>
support (see below), the file system can examine the internal file
allocation data structures and eliminate holes directly, maybe even
using unwritten extents (which are pre-allocated but uninitialized on
disk).

</li><li> There is a race condition if another thread or process modifies the
underlying file in the to-be-allocated area.  Non-null bytes could be
overwritten with null bytes.

</li><li> If <var>fd</var> has been opened with the <code>O_WRONLY</code> flag, the function
will fail with an <code>errno</code> value of <code>EBADF</code>.

</li><li> If <var>fd</var> has been opened with the <code>O_APPEND</code> flag, the function
will fail with an <code>errno</code> value of <code>EBADF</code>.

</li><li> If <var>length</var> is zero, <code>ftruncate</code> is used to increase the file
size as requested, without allocating file system blocks.  There is a
race condition which means that <code>ftruncate</code> can accidentally
truncate the file if it has been extended concurrently.
</li></ul>

<para>On Linux, if an application does not benefit from emulation or if the
emulation is harmful due to its inherent race conditions, the
application can use the Linux-specific <code>fallocate</code> function, with a
zero flag argument.  For the <code>fallocate</code> function, the GNU C Library does
not perform allocation emulation if the file system does not support
allocation.  Instead, an <code>EOPNOTSUPP</code> is returned to the caller.
</para>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-posix_005ffallocate64"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>posix_fallocate64</strong> <emphasis>(int <var>fd</var>, off64_t <var>offset</var>, off64_t <var>length</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-posix_005ffallocate64" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>This function is a variant of <code>posix_fallocate64</code> which accepts
64-bit file offsets on all platforms.
</para>
</dd></dl>

<hr>
</div>
</div>
<sect xml:id="glibc-Making-Special-Files">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Temporary-Files" accesskey="n" rel="next">Temporary Files</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Attributes" accesskey="p" rel="prev">File Attributes</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Making-Special-Files-1"></span><h3 class="section">14.10 Making Special Files</title>
<span xml:id="glibc-index-creating-special-files"></span>
<span xml:id="glibc-index-special-files"></span>

<para>The <code>mknod</code> function is the primitive for making special files,
such as files that correspond to devices.  The GNU C Library includes
this function for compatibility with BSD.
</para>
<para>The prototype for <code>mknod</code> is declared in <filename>sys/stat.h</filename>.
<span xml:id="glibc-index-sys_002fstat_002eh-6"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-mknod"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>mknod</strong> <emphasis>(const char *<var>filename</var>, mode_t <var>mode</var>, dev_t <var>dev</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-mknod" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>mknod</code> function makes a special file with name <var>filename</var>.
The <var>mode</var> specifies the mode of the file, and may include the various
special file bits, such as <code>S_IFCHR</code> (for a character special file)
or <code>S_IFBLK</code> (for a block special file).  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-File-Type">Testing the Type of a File</a>.
</para>
<para>The <var>dev</var> argument specifies which device the special file refers to.
Its exact interpretation depends on the kind of special file being created.
</para>
<para>The return value is <code>0</code> on success and <code>-1</code> on error.  In addition
to the usual file name errors (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-Name-Errors">File Name Errors</a>), the
following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EPERM</code></span></dt>
<dd><para>The calling process is not privileged.  Only the superuser can create
special files.
</para>
</dd>
<dt><span><code>ENOSPC</code></span></dt>
<dd><para>The directory or file system that would contain the new file is full
and cannot be extended.
</para>
</dd>
<dt><span><code>EROFS</code></span></dt>
<dd><para>The directory containing the new file can’t be modified because it’s on
a read-only file system.
</para>
</dd>
<dt><span><code>EEXIST</code></span></dt>
<dd><para>There is already a file named <var>filename</var>.  If you want to replace
this file, you must remove the old file explicitly first.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<sect xml:id="glibc-Temporary-Files">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Making-Special-Files" accesskey="p" rel="prev">Making Special Files</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#File-System-Interface" accesskey="u" rel="up">File System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Temporary-Files-1"></span><h3 class="section">14.11 Temporary Files</title>

<para>If you need to use a temporary file in your program, you can use the
<code>tmpfile</code> function to open it.  Or you can use the <code>tmpnam</code>
(better: <code>tmpnam_r</code>) function to provide a name for a temporary
file and then you can open it in the usual way with <code>fopen</code>.
</para>
<para>The <code>tempnam</code> function is like <code>tmpnam</code> but lets you choose
what directory temporary files will go in, and something about what
their file names will look like.  Important for multi-threaded programs
is that <code>tempnam</code> is reentrant, while <code>tmpnam</code> is not since it
returns a pointer to a static buffer.
</para>
<para>These facilities are declared in the header file <filename>stdio.h</filename>.
<span xml:id="glibc-index-stdio_002eh-17"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-tmpfile"><span class="category">Function: </span><span><emphasis>FILE *</emphasis> <strong>tmpfile</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tmpfile" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap lock
| AC-Unsafe mem fd lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function creates a temporary binary file for update mode, as if by
calling <code>fopen</code> with mode <code>"wb+"</code>.  The file is deleted
automatically when it is closed or when the program terminates.  (On
some other &isoc; systems the file may fail to be deleted if the program
terminates abnormally).
</para>
<para>This function is reentrant.
</para>
<para>When the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> on a
32-bit system this function is in fact <code>tmpfile64</code>, i.e., the LFS
interface transparently replaces the old interface.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-tmpfile64"><span class="category">Function: </span><span><emphasis>FILE *</emphasis> <strong>tmpfile64</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tmpfile64" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap lock
| AC-Unsafe mem fd lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>tmpfile</code>, but the stream it returns a
pointer to was opened using <code>tmpfile64</code>.  Therefore this stream can
be used for files larger than 2^31 bytes on 32-bit machines.
</para>
<para>Please note that the return type is still <code>FILE *</code>.  There is no
special <code>FILE</code> type for the LFS interface.
</para>
<para>If the sources are compiled with <code>_FILE_OFFSET_BITS == 64</code> on a 32
bits machine this function is available under the name <code>tmpfile</code>
and so transparently replaces the old interface.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-tmpnam"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>tmpnam</strong> <emphasis>(char *<var>result</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tmpnam" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:tmpnam/!result
| AS-Unsafe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function constructs and returns a valid file name that does not
refer to any existing file.  If the <var>result</var> argument is a null
pointer, the return value is a pointer to an internal static string,
which might be modified by subsequent calls and therefore makes this
function non-reentrant.  Otherwise, the <var>result</var> argument should be
a pointer to an array of at least <code>L_tmpnam</code> characters, and the
result is written into that array.
</para>
<para>It is possible for <code>tmpnam</code> to fail if you call it too many times
without removing previously-created files.  This is because the limited
length of the temporary file names gives room for only a finite number
of different names.  If <code>tmpnam</code> fails it returns a null pointer.
</para>
<para><strong>Warning:</strong> Between the time the pathname is constructed and the
file is created another process might have created a file with the same
name using <code>tmpnam</code>, leading to a possible security hole.  The
implementation generates names which can hardly be predicted, but when
opening the file you should use the <code>O_EXCL</code> flag.  Using
<code>tmpfile</code> or <code>mkstemp</code> is a safe way to avoid this problem.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-tmpnam_005fr"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>tmpnam_r</strong> <emphasis>(char *<var>result</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tmpnam_005fr" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is nearly identical to the <code>tmpnam</code> function, except
that if <var>result</var> is a null pointer it returns a null pointer.
</para>
<para>This guarantees reentrancy because the non-reentrant situation of
<code>tmpnam</code> cannot happen here.
</para>
<para><strong>Warning</strong>: This function has the same security problems as
<code>tmpnam</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-L_005ftmpnam"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>L_tmpnam</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-L_005ftmpnam" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The value of this macro is an integer constant expression that
represents the minimum size of a string large enough to hold a file name
generated by the <code>tmpnam</code> function.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-TMP_005fMAX"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>TMP_MAX</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-TMP_005fMAX" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The macro <code>TMP_MAX</code> is a lower bound for how many temporary names
you can create with <code>tmpnam</code>.  You can rely on being able to call
<code>tmpnam</code> at least this many times before it might fail saying you
have made too many temporary file names.
</para>
<para>With the GNU C Library, you can create a very large number of temporary
file names.  If you actually created the files, you would probably run
out of disk space before you ran out of names.  Some other systems have
a fixed, small limit on the number of temporary files.  The limit is
never less than <code>25</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-tempnam"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>tempnam</strong> <emphasis>(const char *<var>dir</var>, const char *<var>prefix</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tempnam" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe env
| AS-Unsafe heap
| AC-Unsafe mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function generates a unique temporary file name.  If <var>prefix</var>
is not a null pointer, up to five characters of this string are used as
a prefix for the file name.  The return value is a string newly
allocated with <code>malloc</code>, so you should release its storage with
<code>free</code> when it is no longer needed.
</para>
<para>Because the string is dynamically allocated this function is reentrant.
</para>
<para>The directory prefix for the temporary file name is determined by
testing each of the following in sequence.  The directory must exist and
be writable.
</para>
<ul>
<li> The environment variable <code>TMPDIR</code>, if it is defined.  For security
reasons this only happens if the program is not SUID or SGID enabled.

</li><li> The <var>dir</var> argument, if it is not a null pointer.

</li><li> The value of the <code>P_tmpdir</code> macro.

</li><li> The directory <filename>/tmp</filename>.
</li></ul>

<para>This function is defined for SVID compatibility.
</para>
<para><strong>Warning:</strong> Between the time the pathname is constructed and the
file is created another process might have created a file with the same
name using <code>tempnam</code>, leading to a possible security hole.  The
implementation generates names which can hardly be predicted, but when
opening the file you should use the <code>O_EXCL</code> flag.  Using
<code>tmpfile</code> or <code>mkstemp</code> is a safe way to avoid this problem.
</para></dd></dl>
<span xml:id="glibc-index-TMPDIR-environment-variable"></span>

<dl class="def">
<dt xml:id="glibc-index-P_005ftmpdir"><span class="category">SVID Macro: </span><span><emphasis>char *</emphasis> <strong>P_tmpdir</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-P_005ftmpdir" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This macro is the name of the default directory for temporary files.
</para></dd></dl>

<para>Older Unix systems did not have the functions just described.  Instead
they used <code>mktemp</code> and <code>mkstemp</code>.  Both of these functions
work by modifying a file name template string you pass.  The last six
characters of this string must be ‘<filename>XXXXXX</filename>’.  These six ‘<filename>X</filename>’s
are replaced with six characters which make the whole string a unique
file name.  Usually the template string is something like
‘<filename>/tmp/<var>prefix</var>XXXXXX</filename>’, and each program uses a unique <var>prefix</var>.
</para>
<para><strong>NB:</strong> Because <code>mktemp</code> and <code>mkstemp</code> modify the
template string, you <emphasis>must not</emphasis> pass string constants to them.
String constants are normally in read-only storage, so your program
would crash when <code>mktemp</code> or <code>mkstemp</code> tried to modify the
string.  These functions are declared in the header file <filename>stdlib.h</filename>.
<span xml:id="glibc-index-stdlib_002eh-10"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-mktemp"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>mktemp</strong> <emphasis>(char *<var>template</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-mktemp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>mktemp</code> function generates a unique file name by modifying
<var>template</var> as described above.  If successful, it returns
<var>template</var> as modified.  If <code>mktemp</code> cannot find a unique file
name, it makes <var>template</var> an empty string and returns that.  If
<var>template</var> does not end with ‘<filename>XXXXXX</filename>’, <code>mktemp</code> returns a
null pointer.
</para>
<para><strong>Warning:</strong> Between the time the pathname is constructed and the
file is created another process might have created a file with the same
name using <code>mktemp</code>, leading to a possible security hole.  The
implementation generates names which can hardly be predicted, but when
opening the file you should use the <code>O_EXCL</code> flag.  Using
<code>mkstemp</code> is a safe way to avoid this problem.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-mkstemp"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>mkstemp</strong> <emphasis>(char *<var>template</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-mkstemp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>mkstemp</code> function generates a unique file name just as
<code>mktemp</code> does, but it also opens the file for you with <code>open</code>
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Opening-and-Closing-Files">Opening and Closing Files</a>).  If successful, it modifies
<var>template</var> in place and returns a file descriptor for that file open
for reading and writing.  If <code>mkstemp</code> cannot create a
uniquely-named file, it returns <code>-1</code>.  If <var>template</var> does not
end with ‘<filename>XXXXXX</filename>’, <code>mkstemp</code> returns <code>-1</code> and does not
modify <var>template</var>.
</para>
<para>The file is opened using mode <code>0600</code>.  If the file is meant to be
used by other users this mode must be changed explicitly.
</para></dd></dl>

<para>Unlike <code>mktemp</code>, <code>mkstemp</code> is actually guaranteed to create a
unique file that cannot possibly clash with any other program trying to
create a temporary file.  This is because it works by calling
<code>open</code> with the <code>O_EXCL</code> flag, which says you want to create a
new file and get an error if the file already exists.
</para>
<dl class="def">
<dt xml:id="glibc-index-mkdtemp"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>mkdtemp</strong> <emphasis>(char *<var>template</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-mkdtemp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>mkdtemp</code> function creates a directory with a unique name.  If
it succeeds, it overwrites <var>template</var> with the name of the
directory, and returns <var>template</var>.  As with <code>mktemp</code> and
<code>mkstemp</code>, <var>template</var> should be a string ending with
‘<filename>XXXXXX</filename>’.
</para>
<para>If <code>mkdtemp</code> cannot create an uniquely named directory, it returns
<code>NULL</code> and sets <code>errno</code> appropriately.  If <var>template</var> does
not end with ‘<filename>XXXXXX</filename>’, <code>mkdtemp</code> returns <code>NULL</code> and does
not modify <var>template</var>.  <code>errno</code> will be set to <code>EINVAL</code> in
this case.
</para>
<para>The directory is created using mode <code>0700</code>.
</para></dd></dl>

<para>The directory created by <code>mkdtemp</code> cannot clash with temporary
files or directories created by other users.  This is because directory
creation always works like <code>open</code> with <code>O_EXCL</code>.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Creating-Directories">Creating Directories</a>.
</para>
<para>The <code>mkdtemp</code> function comes from OpenBSD.
</para>
<hr>
</div>
</div-->
</part>
