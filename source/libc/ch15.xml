<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch15.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-Pipes-and-FIFOs">
 <title>Ardışık Süreçler</title>
 <titleabbrev>Süreçler arası basit bir iletişim düzeneği.</titleabbrev>
 <partintro>
  <?dbhtml stop-chunking?>
  <para>
   <dicterm><english>pipe</english><turkish>ardışık süreç akımı</turkish></dicterm>
   <dicterm><english>FIFO</english><turkish>ardışık süreç dosyası</turkish></dicterm>
   <indexterm linkend="glibc-cp"><primary>ardışık süreçler</primary></indexterm>
   <wordasword>Ardışık süreçler</wordasword> süreçler arasında iletişim için bir düzenektir; bir süreç tarafından ardışık süreçlerin ilkine aktarılan veri ardından  gelen süreç tarafından okunabilir. Veri ilk giren, ilk çıkar sırasıyla ele alınır. Düzeneğin bir adı yoktur; bir kullanımlık oluşturulur ve her iki uç, düzeneği oluşturan süreç tarafından erişilebilir olmalıdır.
  </para>
  <para>
   <indexterm linkend="glibc-cp"><primary>ardışık süreç dosyası</primary></indexterm>
   <wordasword>Ardışık süreç dosyaları</wordasword> ardışık süreçlerin bir veya birden fazla ismi olan türüdür. Süreçler tarafından üzerinden iletişim kurmak için bir <emphasis>ardışık süreç dosyası</emphasis> olarak adı belirtilerek açılabilir.
  </para>
  <para>
   İster akım ister dosya olsun, ardışık sürecin her iki ucu aynı anda açılmalıdır. Herhangi bir sürecin üzerine yazmadığı (belki hepsi ardışık süreci kapatmış veya çıkmış olabilir) böyle bir ardışık süreçten okuma yapılıyorsa, okuma sonucunda <varname>EOF</varname> döner. Üzerinde okuma işlemi olmayan ardışık sürece  yazmak hata olarak ele alınır ve bir <varname>SIGPIPE</varname> sinyali üretilir. Sinyal işleniyor ya da engelleniyorsa akım <varname>EPIPE</varname> hata koduyla başarısız olur.
  </para>
  <para>
   İster akım ister dosya olsun, ardışık süreçte konumlamaya izin verilmez. Okuma ve yazma işlemleri sırayla gerçekleşir; başından okunur ve sonuna yazılır.
  </para>

  <sect1 xml:id="glibc-Creating-a-Pipe">
   <title>Ardışık Süreç Akımının Oluşturulması</title>
   <titleabbrev>Ardışık süreç akımının <code>pipe</code> işleviyle oluşturulması.</titleabbrev>
   <para>
    <indexterm linkend="glibc-cp"><primary>ardışık süreç akımı</primary><secondary> açılması</secondary></indexterm>
    <indexterm linkend="glibc-cp"><primary>süreçler arası iletişim</primary><secondary>ardışık süreç akımı</secondary></indexterm>
    Ardışık süreçlere özel akımı oluşturmak için en ilkel işlev <function>pipe</function> işlevidir. İşlev akımın okuma ve yazma uçlarının her ikisini de oluşturur.  Tek bir sürecin kendisiyle konuşması için pek kullanışlı değildir. Genelde kullanım şekli, bir sürecin bir veya daha fazla <link linkend="glibc-Creating-a-Process">alt sürece çatallanmadan</link> önce akımı oluşturmasıdır.  Bundan sonra akım üst ve alt süreç arasında veya iki alt süreç arasında iletişim için kullanılır.
   </para>
   <para>
    <indexterm linkend="glibc-pg"><primary>unistd.h</primary></indexterm>
    <function>pipe</function> işlevi &unistd.h; başlık dosyasında bildirilmiştir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-pipe"><primary>pipe</primary></indexterm>
    <indexterm linkend="glibc-cp-pipe"><primary>ardışık süreç dosyası</primary><secondary>oluşturulması</secondary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>pipe</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter><code>[2]</code></csparam>
    </csproto>
    <header>&unistd.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe; &fd;</concept>
    </conceptlist>
    <para>
     <code>pipe</code> işlevi ardışık süreç akımını oluşturup okuma ve yazma uçları için dosya tanıtıcılarını (sırasıyla) dizinin <parameter>filedes</parameter><code>[0]</code> ve <parameter>filedes</parameter><code>[1]</code> elemanlarına yerleştirir.
    </para>
    <para>
     Girdi ucunun önce geldiğini hatırlamanın en kolay yolu dosya tanıtıcı <code>0</code>'ın standart girdi ve dosya tanıtıcı <code>1</code>'in standart çıktı olmasıdır.
    </para>
    <para>
     Başarı durumunda  <code>pipe</code> işlevi, <code>0</code> değerini döndürür.  Başarısızlık halinde ise <code>-1</code> döndürülür.  Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EMFILE</code></term>
      <listitem>
       <para>
        Sürecin çok sayıda açık dosyası var.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>ENFILE</code></term>
      <listitem>
       <para>
        Sistemde çok sayıda açık dosya var. <varname>ENFILE</varname> hatası GNU sisteminde hiçbir zaman oluşmaz.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <example>
    <para>
     Burada basit bir ardışık süreç akımı oluşturma yazılımı yer almaktadır. Bu yazılım <function>fork</function> işlevini (<xref linkend="glibc-Creating-a-Process"/>) alt süreç oluşturmak için kullanmıştır. Üst süreç veriyi ardışık süreç akımına yazar, alt süreç okur.
    </para>
    <screen>#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* <replaceable>Akımdan karakterleri oku.</replaceable> */

void
read_from_pipe (int file)
{
  FILE *stream;
  int c;
  stream = fdopen (file, "r");
  while ((c = fgetc (stream)) != EOF)
    putchar (c);
  fclose (stream);
}

/* <replaceable>Akıma bir şeyler yaz.</replaceable> */

void
write_to_pipe (int file)
{
  FILE *stream;
  stream = fdopen (file, "w");
  fprintf (stream, "Merhaba!\n");
  fprintf (stream, "Elveda!\n");
  fclose (stream);
}

int
main (void)
{
  pid_t pid;
  int mypipe[2];

  /* <replaceable>Akımı oluştur.</replaceable> */
  if (pipe (mypipe))
    {
      fprintf (stderr, "Ardışık süreç başarısız oldu.\n");
      return EXIT_FAILURE;
    }

  /* <replaceable>Alt süreç oluştur.</replaceable> */
  pid = fork ();
  if (pid == (pid_t) 0)
    {
      /* <replaceable>Alt süreç. Önce diğer ucu kapat.</replaceable> */
      close (mypipe[1]);
      read_from_pipe (mypipe[0]);
      return EXIT_SUCCESS;
    }
  else if (pid &lt; (pid_t) 0)
    {
      /* <replaceable>Alt süreç oluşturulamadı.</replaceable> */
      fprintf (stderr, "Çatallama başarısız oldu.\n");
      return EXIT_FAILURE;
    }
  else
    {
      /* <replaceable>Üst süreç. Önce diğer ucu kapat.</replaceable> */
      close (mypipe[0]);
      write_to_pipe (mypipe[1]);
      return EXIT_SUCCESS;
    }
}
</screen>
   </example>
  </sect1>

  <sect1 xml:id="glibc-Pipe-to-a-Subprocess">
   <title>Alt Süreçle Veri Alışverişi</title>
   <titleabbrev>Alt süreçle iletişim için ardışık süreç kullanımı.</titleabbrev>
   <para>
    <indexterm linkend="glibc-cp"><primary>ardışık süreç akımı</primary><secondary>alt sürece veri aktarımı</secondary></indexterm>
    <indexterm linkend="glibc-cp"><primary>alt sürece veri aktarımı</primary><secondary>ardışık süreçlerden</secondary></indexterm>
    <indexterm linkend="glibc-cp"><primary>alt süreç üzerinden G/Ç süzme</primary></indexterm>
    Ardışık süreçlerin genel kullanım şekli alt süreç olarak çalışan bir yazılım ile veri alışverişidir. Bunu yapmanın bir yolu  <function>pipe</function> (akımı oluşturmak için), <function>fork</function> (alt süreç oluşturmak için), <function>dup2</function> (bir alt süreci ardışık süreç akımı için standart girdi veya çıktı kanalı olmaya zorlamak için) ve <function>exec</function> (yeni bir yazılımı çalıştırmak için) birleşimini kullanmaktır.  Ya da, bunlar yerine <function>popen</function> ve <function>pclose</function> işlevlerini kullanmaktır.
   </para>
   <para>
    <function>popen</function> ve <function>pclose</function> kullanmanın yararı arayüzünün daha basit ve kullanımının kolay oluşudur. Ancak düşük seviyeli işlevleri doğrudan kullanma esnekliği yoktur.
   </para>

   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-popen"><primary>popen</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-popen"><primary>ardışık süreç akımı</primary><secondary>açılması</secondary></indexterm>
    <csproto type="işlev">
     <csname><ptr>FILE</ptr><function>popen</function></csname>
     <csparam><ptr>const&#160;char</ptr><parameter>command</parameter></csparam>
     <csparam><ptr>const&#160;char</ptr><parameter>mode</parameter></csparam>
    </csproto>
    <header>&stdio.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&asunsafe; &heap; &corrupt;</concept>
     <concept>&acunsafe; &corrupt; &lock; &fd; &mem;</concept>
    </conceptlist>
    <para>
     <code>popen</code> işlevi <function>system</function> işlevleriyle yakından ilgilidir;  bkz. <xref linkend="glibc-Running-a-Command"/>. <parameter>command</parameter> kabuk komutunu alt süreç olarak çalıştırır.  Fakat, komutun bitmesini beklemek yerine, alt süreçten bir ardışık süreç oluşturur ve ardışık süreçle ilişkili akımı döndürür.
    </para>
    <para>
     <parameter>mode</parameter> bağımsız değişkeninde <code>"r"</code> belirtilirse, alt sürecin standart çıktı kanalındaki veriyi almak için akımdan okuma yapılabilir. Alt süreç, standart girdi kanalını üst süreçten miras alır.
    </para>
    <para>
     Benzer şekilde, <parameter>mode</parameter> bağımsız değişkeninde <code>"w"</code> belirtilirse, alt sürecin standart girdi kanalına veri göndermek için akıma yazılabilir. Alt süreç, standart çıktı kanalını üst süreçten alır.
    </para>
    <para>
     Hata durumunda <code>popen</code> boş gösterici ile döner. Bu ardışık süreç veya akım oluşturulamadığında, alt süreç çatallanamadığında ya da yazılım çalıştırılamadığında ortaya çıkabilir.
    </para>
   </csynopsis>

   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-pclose"><primary>pclose</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-pclose"><primary>ardışık süreç akımı</primary><secondary>kapatılması</secondary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>pclose</function></csname>
     <csparam><ptr>FILE</ptr><parameter>stream</parameter></csparam>
    </csproto>
    <header>&stdio.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&asunsafe; &heap; &plugin; &corrupt; &lock;</concept>
     <concept>&acunsafe; &corrupt; &lock; &fd; &mem;</concept>
    </conceptlist>
    <para>
     <code>pclose</code> işlevi <function>popen</function> tarafından oluşturulan <parameter>stream</parameter> ardışık süreç akımını kapatmak için kullanılır. <function>system</function> işlevinin yaptığı gibi, alt sürecin sonlanmasını bekler ve onun durum değerini döndürür.
    </para>
   </csynopsis>
   <example>
    <para>
     Burada <function>popen</function> ve <function>pclose</function> işlevlerinin, çıktıyı <uri xl:href="man1-more"/> sayfalama yazılımı gibi başka bir yazılımla süzmek için nasıl kullanıldığını gösteren bir örneğe yer verilmiştir.
    </para>
    <screen>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void
write_data (FILE * stream)
{
  int i;
  for (i = 0; i &lt; 100; i++)
    fprintf (stream, "%d\n", i);
  if (ferror (stream))
    {
      fprintf (stderr, "Akıma çıktılama başarısız oldu.\n");
      exit (EXIT_FAILURE);
    }
}

int
main (void)
{
  FILE *output;

  output = popen ("more", "w");
  if (!output)
    {
      fprintf (stderr,
               "ya bağımsız değişken yanlış ya da dosya sayısı fazla.\n");
      return EXIT_FAILURE;
    }
  write_data (output);
  if (pclose (output) != 0)
    {
      fprintf (stderr,
               "Artık yürütülemiyor veya başka bir hata var.\n");
    }
  return EXIT_SUCCESS;
}
</screen>
   </example>
  </sect1>

  <sect1 xml:id="glibc-FIFO-Special-Files">
   <title>Ardışık Süreç Dosyaları</title>
   <titleabbrev>Ardışık süreç dosyasının oluşturulması.</titleabbrev>
   <para>
    <indexterm linkend="glibc-cp"><primary>ardışık süreç dosyası</primary><secondary>oluşturulması</secondary></indexterm>
    <indexterm linkend="glibc-cp"><primary>süreçler arası iletişim</primary><secondary>ardışık süreç dosyası</secondary></indexterm>
    Bir ardışık süreç dosyasının ardışık süreç akımından farkı oluşturulma şeklidir. İsimsiz bir iletişim kanalı olmak yerine, ardışık süreç dosyası, dosya sistemine <function>mkfifo</function> işlevi çağrılarak sokulur.
   </para>
   <para>
    Herhangi bir süreç, ardışık süreç dosyasını bir kere bu şekilde oluşturduktan sonra, sıradan bir dosya gibi, onu okuma veya yazma için açabilir. Fakat, üzerinde her hangi bir girdi veya çıktı işlemi yapmadan önce her iki ucun da eş zamanlı açılması gerekir. Ardışık süreç dosyasının okumak için açılması, normalde başka bir süreç aynı ardışık süreç dosyasını yazmak için açana engellenir (ya da tam tersi).
   </para>
   <para>
    <function>mkfifo</function> işlevi &sys-stat.h; başlık dosyasında bildirilmiştir.
    <indexterm linkend="glibc-pg"><primary>sys/stat.h</primary></indexterm>
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-mkfifo"><primary>mkfifo</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-mkfifo"><primary>ardışık süreç dosyası</primary><secondary>oluşturulması</secondary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>mkfifo</function></csname>
     <csparam><ptr>const&#160;char</ptr><parameter>filename</parameter></csparam>
     <csparam><type>mode_t</type><parameter>mode</parameter></csparam>
    </csproto>
    <header>&sys-stat.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>mkfifo</code> işlevi <parameter>filename</parameter> adında bir ardışık süreç dosyası oluşturur. <parameter>mode</parameter> bağımsız değişkeni dosyanın izinlerini belirlemek için kullanılır; bkz. <xref linkend="glibc-Setting-Permissions"/>.
    </para>
    <para>
     <code>mkfifo</code> işlevinin normal hatasız dönüş değeri <code>0</code>'dır. Hata durumunda, <code>-1</code> döner.  Bildik <link linkend="glibc-File-Name-Errors">dosya ismi hatalarına</link> ek olarak, aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>EEXIST</literal></term>
      <listitem>
       <para>
        Bu isimde dosya zaten var.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ENOSPC</literal></term>
      <listitem>
       <para>
        Dizin veya dosya sistemi genişletilemez.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>EROFS</literal></term>
      <listitem>
       <para>
        Dosyayı içeren dizin salt-okunur bir dosya sisteminde.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
  </sect1>

  <sect1 xml:id="glibc-Pipe-Atomicity">
   <title>Ardışık Süreçlerin G/Ç Bölünmezliği</title>
   <titleabbrev>Ardışık Süreçlerin G/Ç işlemleri ne zaman bütündür.</titleabbrev>
   <para>
    Yazılan verinin miktarı <varname>PIPE_BUF</varname> değerinden büyük olmadığı sürece ardışık süreçlerden okuma ve yazma işlemi <wordasword>bölünmez</wordasword> bir işlemdir. Bu veri aktarımının anlık bir birim olarak göründüğü anlamına gelir, bu nedenle sistemdeki hiçbir şey tamamlanmış halini gözlemleyemez. Bölünmez G/Ç hemen başlayamayabilir (tampon alanı veya veri için beklemesi gerekebilir), fakat başladıktan hemen sonra biter.
   </para>
   <para>
    Büyük miktarda veri okumak veya yazmak bölünmez olmayabilir; örneğin, dosya tanıtıcısını paylaşan diğer süreçlerin çıktı verisi araya serpiştirilmiş olabilir.
    Aynı zamanda, bir kere <varname>PIPE_BUF</varname> karakter yazılınca, okuma yapılıncaya kadar başka yazımlar durdurulur.
   </para>
   <para>
    <varname>PIPE_BUF</varname> hakkında daha fazla bilgi <xref linkend="glibc-Limits-for-Files"/> bölümünde bulunmaktadır.
   </para>
  </sect1>
 </partintro>
</part>
