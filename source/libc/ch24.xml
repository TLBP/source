<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch24.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-Signal-Handling">
  <title>Sinyal İşleme</title>
  <titleabbrev>Sinyaller nasıl gönderilir, engellenir, işlenir.</titleabbrev>
 <preliminary>

<!--span xml:id="glibc-index-signal-1"></span-->
<para>A <emphasis>signal</emphasis> is a software interrupt delivered to a process.  The
operating system uses signals to report exceptional situations to an
executing program.  Some signals report errors such as references to
invalid memory addresses; others report asynchronous events, such as
disconnection of a phone line.
</para>
<para>The GNU C Library defines a variety of signal types, each for a
particular kind of event.  Some kinds of events make it inadvisable or
impossible for the program to proceed as usual, and the corresponding
signals normally abort the program.  Other kinds of signals that report
harmless events are ignored by default.
</para>
<para>If you anticipate an event that causes signals, you can define a handler
function and tell the operating system to run it when that particular
type of signal arrives.
</para>
<para>Finally, one process can send a signal to another process; this allows a
parent process to abort a child, or two related processes to communicate
and synchronize.
</para>
 </preliminary><!--
<sect xml:id="glibc-Concepts-of-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="n" rel="next">Standard Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Basic-Concepts-of-Signals"></span><h3 class="section">24.1 Basic Concepts of Signals</title>

<para>This section explains basic concepts of how signals are generated, what
happens after a signal is delivered, and how programs can handle
signals.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Kinds-of-Signals" accesskey="1">Some Kinds of Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Generation" accesskey="2">Concepts of Signal Generation</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Delivery-of-Signal" accesskey="3">How Signals Are Delivered</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Kinds-of-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Generation" accesskey="n" rel="next">Concepts of Signal Generation</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concepts-of-Signals" accesskey="u" rel="up">Basic Concepts of Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Some-Kinds-of-Signals"></span><h4 class="subsection">24.1.1 Some Kinds of Signals</title>

<para>A signal reports the occurrence of an exceptional event.  These are some
of the events that can cause (or <emphasis>generate</emphasis>, or <emphasis>raise</emphasis>) a
signal:
</para>
<ul>
<li> A program error such as dividing by zero or issuing an address outside
the valid range.

</li><li> A user request to interrupt or terminate the program.  Most environments
are set up to let a user suspend the program by typing <kbd>C-z</kbd>, or
terminate it with <kbd>C-c</kbd>.  Whatever key sequence is used, the
operating system sends the proper signal to interrupt the process.

</li><li> The termination of a child process.

</li><li> Expiration of a timer or alarm.

</li><li> A call to <code>kill</code> or <code>raise</code> by the same process.

</li><li> A call to <code>kill</code> from another process.  Signals are a limited but
useful form of interprocess communication.

</li><li> An attempt to perform an I/O operation that cannot be done.  Examples
are reading from a pipe that has no writer (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Pipes-and-FIFOs">Pipes and FIFOs</a>),
and reading or writing to a terminal in certain situations (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control">Job Control</a>).
</li></ul>

<para>Each of these kinds of events (excepting explicit calls to <code>kill</code>
and <code>raise</code>) generates its own particular kind of signal.  The
various kinds of signals are listed and described in detail in
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals">Standard Signals</a>.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Signal-Generation">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Delivery-of-Signal" accesskey="n" rel="next">How Signals Are Delivered</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Kinds-of-Signals" accesskey="p" rel="prev">Some Kinds of Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concepts-of-Signals" accesskey="u" rel="up">Basic Concepts of Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Concepts-of-Signal-Generation"></span><h4 class="subsection">24.1.2 Concepts of Signal Generation</title>
<span xml:id="glibc-index-generation-of-signals"></span>

<para>In general, the events that generate signals fall into three major
categories: errors, external events, and explicit requests.
</para>
<para>An error means that a program has done something invalid and cannot
continue execution.  But not all kinds of errors generate signals—in
fact, most do not.  For example, opening a nonexistent file is an error,
but it does not raise a signal; instead, <code>open</code> returns <code>-1</code>.
In general, errors that are necessarily associated with certain library
functions are reported by returning a value that indicates an error.
The errors which raise signals are those which can happen anywhere in
the program, not just in library calls.  These include division by zero
and invalid memory addresses.
</para>
<para>An external event generally has to do with I/O or other processes.
These include the arrival of input, the expiration of a timer, and the
termination of a child process.
</para>
<para>An explicit request means the use of a library function such as
<code>kill</code> whose purpose is specifically to generate a signal.
</para>
<para>Signals may be generated <emphasis>synchronously</emphasis> or <emphasis>asynchronously</emphasis>.  A
synchronous signal pertains to a specific action in the program, and is
delivered (unless blocked) during that action.  Most errors generate
signals synchronously, and so do explicit requests by a process to
generate a signal for that same process.  On some machines, certain
kinds of hardware errors (usually floating-point exceptions) are not
reported completely synchronously, but may arrive a few instructions
later.
</para>
<para>Asynchronous signals are generated by events outside the control of the
process that receives them.  These signals arrive at unpredictable times
during execution.  External events generate signals asynchronously, and
so do explicit requests that apply to some other process.
</para>
<para>A given type of signal is either typically synchronous or typically
asynchronous.  For example, signals for errors are typically synchronous
because errors generate signals synchronously.  But any type of signal
can be generated synchronously or asynchronously with an explicit
request.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Delivery-of-Signal">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Generation" accesskey="p" rel="prev">Concepts of Signal Generation</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concepts-of-Signals" accesskey="u" rel="up">Basic Concepts of Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-How-Signals-Are-Delivered"></span><h4 class="subsection">24.1.3 How Signals Are Delivered</title>
<span xml:id="glibc-index-delivery-of-signals"></span>
<span xml:id="glibc-index-pending-signals"></span>
<span xml:id="glibc-index-blocked-signals"></span>

<para>When a signal is generated, it becomes <emphasis>pending</emphasis>.  Normally it
remains pending for just a short period of time and then is
<emphasis>delivered</emphasis> to the process that was signaled.  However, if that kind
of signal is currently <emphasis>blocked</emphasis>, it may remain pending
indefinitely—until signals of that kind are <emphasis>unblocked</emphasis>.  Once
unblocked, it will be delivered immediately.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals">Blocking Signals</a>.
</para>
<span xml:id="glibc-index-specified-action-_0028for-a-signal_0029"></span>
<span xml:id="glibc-index-default-action-_0028for-a-signal_0029"></span>
<span xml:id="glibc-index-signal-action"></span>
<span xml:id="glibc-index-catching-signals"></span>
<para>When the signal is delivered, whether right away or after a long delay,
the <emphasis>specified action</emphasis> for that signal is taken.  For certain
signals, such as <code>SIGKILL</code> and <code>SIGSTOP</code>, the action is fixed,
but for most signals, the program has a choice: ignore the signal,
specify a <emphasis>handler function</emphasis>, or accept the <emphasis>default action</emphasis> for
that kind of signal.  The program specifies its choice using functions
such as <code>signal</code> or <code>sigaction</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions">Specifying Signal Actions</a>).  We
sometimes say that a handler <emphasis>catches</emphasis> the signal.  While the
handler is running, that particular signal is normally blocked.
</para>
<para>If the specified action for a kind of signal is to ignore it, then any
such signal which is generated is discarded immediately.  This happens
even if the signal is also blocked at the time.  A signal discarded in
this way will never be delivered, not even if the program subsequently
specifies a different action for that kind of signal and then unblocks
it.
</para>
<para>If a signal arrives which the program has neither handled nor ignored,
its <emphasis>default action</emphasis> takes place.  Each kind of signal has its own
default action, documented below (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals">Standard Signals</a>).  For most kinds
of signals, the default action is to terminate the process.  For certain
kinds of signals that represent “harmless” events, the default action
is to do nothing.
</para>
<para>When a signal terminates a process, its parent process can determine the
cause of termination by examining the termination status code reported
by the <code>wait</code> or <code>waitpid</code> functions.  (This is discussed in
more detail in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Completion">Process Completion</a>.)  The information it can get
includes the fact that termination was due to a signal and the kind of
signal involved.  If a program you run from a shell is terminated by a
signal, the shell typically prints some kind of error message.
</para>
<para>The signals that normally represent program errors have a special
property: when one of these signals terminates the process, it also
writes a <emphasis>core dump file</emphasis> which records the state of the process at
the time of termination.  You can examine the core dump with a debugger
to investigate what caused the error.
</para>
<para>If you raise a “program error” signal by explicit request, and this
terminates the process, it makes a core dump file just as if the signal
had been due directly to an error.
</para>
<hr>
</div>
</div>
<sect xml:id="glibc-Standard-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="n" rel="next">Specifying Signal Actions</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concepts-of-Signals" accesskey="p" rel="prev">Basic Concepts of Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Standard-Signals-1"></span><h3 class="section">24.2 Standard Signals</title>
<span xml:id="glibc-index-signal-names"></span>
<span xml:id="glibc-index-names-of-signals"></span>

<span xml:id="glibc-index-signal_002eh-1"></span>
<span xml:id="glibc-index-signal-number"></span>
<para>This section lists the names for various standard kinds of signals and
describes what kind of event they mean.  Each signal name is a macro
which stands for a positive integer—the <emphasis>signal number</emphasis> for that
kind of signal.  Your programs should never make assumptions about the
numeric code for a particular kind of signal, but rather refer to them
always by the names defined here.  This is because the number for a
given kind of signal can vary from system to system, but the meanings of
the names are standardized and fairly uniform.
</para>
<para>The signal names are defined in the header file <filename>signal.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-NSIG"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>NSIG</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-NSIG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The value of this symbolic constant is the total number of signals
defined.  Since the signal numbers are allocated consecutively,
<code>NSIG</code> is also one greater than the largest defined signal number.
</para></dd></dl>


<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Error-Signals" accesskey="1">Program Error Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Signals" accesskey="2">Termination Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Alarm-Signals" accesskey="3">Alarm Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Asynchronous-I_002fO-Signals" accesskey="4">Asynchronous I/O Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control-Signals" accesskey="5">Job Control Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Operation-Error-Signals" accesskey="6">Operation Error Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Miscellaneous-Signals" accesskey="7">Miscellaneous Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Messages" accesskey="8">Signal Messages</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Program-Error-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Signals" accesskey="n" rel="next">Termination Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Program-Error-Signals-1"></span><h4 class="subsection">24.2.1 Program Error Signals</title>
<span xml:id="glibc-index-program-error-signals"></span>

<para>The following signals are generated when a serious program error is
detected by the operating system or the computer itself.  In general,
all of these signals are indications that your program is seriously
broken in some way, and there’s usually no way to continue the
computation which encountered the error.
</para>
<para>Some programs handle program error signals in order to tidy up before
terminating; for example, programs that turn off echoing of terminal
input should handle program error signals in order to turn echoing back
on.  The handler should end by specifying the default action for the
signal that happened and then reraising it; this will cause the program
to terminate with that signal, as if it had not had a handler.
(See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-in-Handler">Handlers That Terminate the Process</a>.)
</para>
<para>Termination is the sensible ultimate outcome from a program error in
most programs.  However, programming systems such as Lisp that can load
compiled user programs might need to keep executing even if a user
program incurs an error.  These programs have handlers which use
<code>longjmp</code> to return control to the command level.
</para>
<para>The default action for all of these signals is to cause the process to
terminate.  If you block or ignore these signals or establish handlers
for them that return normally, your program will probably break horribly
when such signals happen, unless they are generated by <code>raise</code> or
<code>kill</code> instead of a real error.
</para>
<span xml:id="glibc-index-COREFILE"></span>
<para>When one of these program error signals terminates a process, it also
writes a <emphasis>core dump file</emphasis> which records the state of the process at
the time of termination.  The core dump file is named <filename>core</filename> and is
written in whichever directory is current in the process at the time.
(On GNU/Hurd systems, you can specify the file name for core dumps with
the environment variable <code>COREFILE</code>.)  The purpose of core dump
files is so that you can examine them with a debugger to investigate
what caused the error.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGFPE"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGFPE</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGFPE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>SIGFPE</code> signal reports a fatal arithmetic error.  Although the
name is derived from “floating-point exception”, this signal actually
covers all arithmetic errors, including division by zero and overflow.
If a program stores integer data in a location which is then used in a
floating-point operation, this often causes an “invalid operation”
exception, because the processor cannot recognize the data as a
floating-point number.
<span xml:id="glibc-index-exception-1"></span>
<span xml:id="glibc-index-floating_002dpoint-exception"></span>
</para>
<para>Actual floating-point exceptions are a complicated subject because there
are many types of exceptions with subtly different meanings, and the
<code>SIGFPE</code> signal doesn’t distinguish between them.  The <cite>IEEE
Standard for Binary Floating-Point Arithmetic (ANSI/IEEE Std 754-1985
and ANSI/IEEE Std 854-1987)</cite>
defines various floating-point exceptions and requires conforming
computer systems to report their occurrences.  However, this standard
does not specify how the exceptions are reported, or what kinds of
handling and control the operating system can offer to the programmer.
</para></dd></dl>

<para>BSD systems provide the <code>SIGFPE</code> handler with an extra argument
that distinguishes various causes of the exception.  In order to access
this argument, you must define the handler to accept two arguments,
which means you must cast it to a one-argument function type in order to
establish the handler.  The GNU C Library does provide this extra
argument, but the value is meaningful only on operating systems that
provide the information (BSD systems and GNU systems).
</para>
<dl compact="compact">
<dt xml:id="glibc-index-FPE_005fINTOVF_005fTRAP"><span><code>FPE_INTOVF_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fINTOVF_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Integer overflow (impossible in a C program unless you enable overflow
trapping in a hardware-specific fashion).
</para></dd>
<dt xml:id="glibc-index-FPE_005fINTDIV_005fTRAP"><span><code>FPE_INTDIV_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fINTDIV_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Integer division by zero.
</para></dd>
<dt xml:id="glibc-index-FPE_005fSUBRNG_005fTRAP"><span><code>FPE_SUBRNG_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fSUBRNG_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Subscript-range (something that C programs never check for).
</para></dd>
<dt xml:id="glibc-index-FPE_005fFLTOVF_005fTRAP"><span><code>FPE_FLTOVF_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fFLTOVF_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Floating overflow trap.
</para></dd>
<dt xml:id="glibc-index-FPE_005fFLTDIV_005fTRAP"><span><code>FPE_FLTDIV_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fFLTDIV_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Floating/decimal division by zero.
</para></dd>
<dt xml:id="glibc-index-FPE_005fFLTUND_005fTRAP"><span><code>FPE_FLTUND_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fFLTUND_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Floating underflow trap.  (Trapping on floating underflow is not
normally enabled.)
</para></dd>
<dt xml:id="glibc-index-FPE_005fDECOVF_005fTRAP"><span><code>FPE_DECOVF_TRAP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-FPE_005fDECOVF_005fTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Decimal overflow trap.  (Only a few machines have decimal arithmetic and
C never uses it.)
</para></dd>
</dl>

<dl class="def">
<dt xml:id="glibc-index-SIGILL"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGILL</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGILL" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The name of this signal is derived from “illegal instruction”; it
usually means your program is trying to execute garbage or a privileged
instruction.  Since the C compiler generates only valid instructions,
<code>SIGILL</code> typically indicates that the executable file is corrupted,
or that you are trying to execute data.  Some common ways of getting
into the latter situation are by passing an invalid object where a
pointer to a function was expected, or by writing past the end of an
automatic array (or similar problems with pointers to automatic
variables) and corrupting other data on the stack such as the return
address of a stack frame.
</para>
<para><code>SIGILL</code> can also be generated when the stack overflows, or when
the system has trouble running the handler for a signal.
</para></dd></dl>
<span xml:id="glibc-index-illegal-instruction"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGSEGV"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGSEGV</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGSEGV" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-segmentation-violation"></span>
<para>This signal is generated when a program tries to read or write outside
the memory that is allocated for it, or to write memory that can only be
read.  (Actually, the signals only occur when the program goes far
enough outside to be detected by the system’s memory protection
mechanism.)  The name is an abbreviation for “segmentation violation”.
</para>
<para>Common ways of getting a <code>SIGSEGV</code> condition include dereferencing
a null or uninitialized pointer, or when you use a pointer to step
through an array, but fail to check for the end of the array.  It varies
among systems whether dereferencing a null pointer generates
<code>SIGSEGV</code> or <code>SIGBUS</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGBUS"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGBUS</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGBUS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This signal is generated when an invalid pointer is dereferenced.  Like
<code>SIGSEGV</code>, this signal is typically the result of dereferencing an
uninitialized pointer.  The difference between the two is that
<code>SIGSEGV</code> indicates an invalid access to valid memory, while
<code>SIGBUS</code> indicates an access to an invalid address.  In particular,
<code>SIGBUS</code> signals often result from dereferencing a misaligned
pointer, such as referring to a four-word integer at an address not
divisible by four.  (Each kind of computer has its own requirements for
address alignment.)
</para>
<para>The name of this signal is an abbreviation for “bus error”.
</para></dd></dl>
<span xml:id="glibc-index-bus-error"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGABRT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGABRT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGABRT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-abort-signal"></span>
<para>This signal indicates an error detected by the program itself and
reported by calling <code>abort</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Aborting-a-Program">Aborting a Program</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGIOT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGIOT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGIOT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Generated by the PDP-11 “iot” instruction.  On most machines, this is
just another name for <code>SIGABRT</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGTRAP"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGTRAP</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGTRAP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Generated by the machine’s breakpoint instruction, and possibly other
trap instructions.  This signal is used by debuggers.  Your program will
probably only see <code>SIGTRAP</code> if it is somehow executing bad
instructions.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGEMT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGEMT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGEMT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Emulator trap; this results from certain unimplemented instructions
which might be emulated in software, or the operating system’s
failure to properly emulate them.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGSYS"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGSYS</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGSYS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Bad system call; that is to say, the instruction to trap to the
operating system was executed, but the code number for the system call
to perform was invalid.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Termination-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Alarm-Signals" accesskey="n" rel="next">Alarm Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Error-Signals" accesskey="p" rel="prev">Program Error Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Termination-Signals-1"></span><h4 class="subsection">24.2.2 Termination Signals</title>
<span xml:id="glibc-index-program-termination-signals"></span>

<para>These signals are all used to tell a process to terminate, in one way
or another.  They have different names because they’re used for slightly
different purposes, and programs might want to handle them differently.
</para>
<para>The reason for handling these signals is usually so your program can
tidy up as appropriate before actually terminating.  For example, you
might want to save state information, delete temporary files, or restore
the previous terminal modes.  Such a handler should end by specifying
the default action for the signal that happened and then reraising it;
this will cause the program to terminate with that signal, as if it had
not had a handler.  (See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-in-Handler">Handlers That Terminate the Process</a>.)
</para>
<para>The (obvious) default action for all of these signals is to cause the
process to terminate.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGTERM"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGTERM</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGTERM" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-termination-signal"></span>
<para>The <code>SIGTERM</code> signal is a generic signal used to cause program
termination.  Unlike <code>SIGKILL</code>, this signal can be blocked,
handled, and ignored.  It is the normal way to politely ask a program to
terminate.
</para>
<para>The shell command <code>kill</code> generates <code>SIGTERM</code> by default.
<span xml:id="glibc-index-kill-1"></span>
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGINT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGINT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGINT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-interrupt-signal"></span>
<para>The <code>SIGINT</code> (“program interrupt”) signal is sent when the user
types the INTR character (normally <kbd>C-c</kbd>).  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Special-Characters">Special Characters</a>, for information about terminal driver support for
<kbd>C-c</kbd>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGQUIT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGQUIT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGQUIT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-quit-signal"></span>
<span xml:id="glibc-index-quit-signal-1"></span>
<para>The <code>SIGQUIT</code> signal is similar to <code>SIGINT</code>, except that it’s
controlled by a different key—the QUIT character, usually
<kbd>C-\</kbd>—and produces a core dump when it terminates the process,
just like a program error signal.  You can think of this as a
program error condition “detected” by the user.
</para>
<para>See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Error-Signals">Program Error Signals</a>, for information about core dumps.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Special-Characters">Special Characters</a>, for information about terminal driver
support.
</para>
<para>Certain kinds of cleanups are best omitted in handling <code>SIGQUIT</code>.
For example, if the program creates temporary files, it should handle
the other termination requests by deleting the temporary files.  But it
is better for <code>SIGQUIT</code> not to delete them, so that the user can
examine them in conjunction with the core dump.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGKILL"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGKILL</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGKILL" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>SIGKILL</code> signal is used to cause immediate program termination.
It cannot be handled or ignored, and is therefore always fatal.  It is
also not possible to block this signal.
</para>
<para>This signal is usually generated only by explicit request.  Since it
cannot be handled, you should generate it only as a last resort, after
first trying a less drastic method such as <kbd>C-c</kbd> or <code>SIGTERM</code>.
If a process does not respond to any other termination signals, sending
it a <code>SIGKILL</code> signal will almost always cause it to go away.
</para>
<para>In fact, if <code>SIGKILL</code> fails to terminate a process, that by itself
constitutes an operating system bug which you should report.
</para>
<para>The system will generate <code>SIGKILL</code> for a process itself under some
unusual conditions where the program cannot possibly continue to run
(even to run a signal handler).
</para></dd></dl>
<span xml:id="glibc-index-kill-signal"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGHUP"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGHUP</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGHUP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-hangup-signal"></span>
<para>The <code>SIGHUP</code> (“hang-up”) signal is used to report that the user’s
terminal is disconnected, perhaps because a network or telephone
connection was broken.  For more information about this, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Control-Modes">Control Modes</a>.
</para>
<para>This signal is also used to report the termination of the controlling
process on a terminal to jobs associated with that session; this
termination effectively disconnects all processes in the session from
the controlling terminal.  For more information, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Internals">Termination Internals</a>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Alarm-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Asynchronous-I_002fO-Signals" accesskey="n" rel="next">Asynchronous I/O Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Signals" accesskey="p" rel="prev">Termination Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Alarm-Signals-1"></span><h4 class="subsection">24.2.3 Alarm Signals</title>

<para>These signals are used to indicate the expiration of timers.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-an-Alarm">Setting an Alarm</a>, for information about functions that cause
these signals to be sent.
</para>
<para>The default behavior for these signals is to cause program termination.
This default is rarely useful, but no other default would be useful;
most of the ways of using these signals would require handler functions
in any case.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGALRM"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGALRM</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGALRM" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This signal typically indicates expiration of a timer that measures real
or clock time.  It is used by the <code>alarm</code> function, for example.
</para></dd></dl>
<span xml:id="glibc-index-alarm-signal"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGVTALRM"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGVTALRM</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGVTALRM" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This signal typically indicates expiration of a timer that measures CPU
time used by the current process.  The name is an abbreviation for
“virtual time alarm”.
</para></dd></dl>
<span xml:id="glibc-index-virtual-time-alarm-signal"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGPROF"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGPROF</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGPROF" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This signal typically indicates expiration of a timer that measures
both CPU time used by the current process, and CPU time expended on
behalf of the process by the system.  Such a timer is used to implement
code profiling facilities, hence the name of this signal.
</para></dd></dl>
<span xml:id="glibc-index-profiling-alarm-signal"></span>


<hr>
</div>
<div class="subsection" xml:id="glibc-Asynchronous-I_002fO-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control-Signals" accesskey="n" rel="next">Job Control Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Alarm-Signals" accesskey="p" rel="prev">Alarm Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Asynchronous-I_002fO-Signals-1"></span><h4 class="subsection">24.2.4 Asynchronous I/O Signals</title>

<para>The signals listed in this section are used in conjunction with
asynchronous I/O facilities.  You have to take explicit action by
calling <code>fcntl</code> to enable a particular file descriptor to generate
these signals (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupt-Input">Interrupt-Driven Input</a>).  The default action for these
signals is to ignore them.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGIO"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGIO</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGIO" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-input-available-signal"></span>
<span xml:id="glibc-index-output-possible-signal"></span>
<para>This signal is sent when a file descriptor is ready to perform input
or output.
</para>
<para>On most operating systems, terminals and sockets are the only kinds of
files that can generate <code>SIGIO</code>; other kinds, including ordinary
files, never generate <code>SIGIO</code> even if you ask them to.
</para>
<para>On GNU systems <code>SIGIO</code> will always be generated properly
if you successfully set asynchronous mode with <code>fcntl</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGURG"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGURG</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGURG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-urgent-data-signal"></span>
<para>This signal is sent when “urgent” or out-of-band data arrives on a
socket.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Out_002dof_002dBand-Data">Out-of-Band Data</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGPOLL"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGPOLL</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGPOLL" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is a System V signal name, more or less similar to <code>SIGIO</code>.
It is defined only for compatibility.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Job-Control-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Operation-Error-Signals" accesskey="n" rel="next">Operation Error Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Asynchronous-I_002fO-Signals" accesskey="p" rel="prev">Asynchronous I/O Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Job-Control-Signals-1"></span><h4 class="subsection">24.2.5 Job Control Signals</title>
<span xml:id="glibc-index-job-control-signals"></span>

<para>These signals are used to support job control.  If your system
doesn’t support job control, then these macros are defined but the
signals themselves can’t be raised or handled.
</para>
<para>You should generally leave these signals alone unless you really
understand how job control works.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control">Job Control</a>.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGCHLD"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGCHLD</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGCHLD" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-child-process-signal"></span>
<para>This signal is sent to a parent process whenever one of its child
processes terminates or stops.
</para>
<para>The default action for this signal is to ignore it.  If you establish a
handler for this signal while there are child processes that have
terminated but not reported their status via <code>wait</code> or
<code>waitpid</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Completion">Process Completion</a>), whether your new handler
applies to those processes or not depends on the particular operating
system.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGCLD"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGCLD</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGCLD" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an obsolete name for <code>SIGCHLD</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGCONT"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGCONT</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGCONT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-continue-signal"></span>
<para>You can send a <code>SIGCONT</code> signal to a process to make it continue.
This signal is special—it always makes the process continue if it is
stopped, before the signal is delivered.  The default behavior is to do
nothing else.  You cannot block this signal.  You can set a handler, but
<code>SIGCONT</code> always makes the process continue regardless.
</para>
<para>Most programs have no reason to handle <code>SIGCONT</code>; they simply
resume execution without realizing they were ever stopped.  You can use
a handler for <code>SIGCONT</code> to make a program do something special when
it is stopped and continued—for example, to reprint a prompt when it
is suspended while waiting for input.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGSTOP"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGSTOP</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGSTOP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>SIGSTOP</code> signal stops the process.  It cannot be handled,
ignored, or blocked.
</para></dd></dl>
<span xml:id="glibc-index-stop-signal"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGTSTP"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGTSTP</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGTSTP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>SIGTSTP</code> signal is an interactive stop signal.  Unlike
<code>SIGSTOP</code>, this signal can be handled and ignored.
</para>
<para>Your program should handle this signal if you have a special need to
leave files or system tables in a secure state when a process is
stopped.  For example, programs that turn off echoing should handle
<code>SIGTSTP</code> so they can turn echoing back on before stopping.
</para>
<para>This signal is generated when the user types the SUSP character
(normally <kbd>C-z</kbd>).  For more information about terminal driver
support, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Special-Characters">Special Characters</a>.
</para></dd></dl>
<span xml:id="glibc-index-interactive-stop-signal"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGTTIN"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGTTIN</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGTTIN" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A process cannot read from the user’s terminal while it is running
as a background job.  When any process in a background job tries to
read from the terminal, all of the processes in the job are sent a
<code>SIGTTIN</code> signal.  The default action for this signal is to
stop the process.  For more information about how this interacts with
the terminal driver, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Access-to-the-Terminal">Access to the Controlling Terminal</a>.
</para></dd></dl>
<span xml:id="glibc-index-terminal-input-signal"></span>

<dl class="def">
<dt xml:id="glibc-index-SIGTTOU"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGTTOU</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGTTOU" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is similar to <code>SIGTTIN</code>, but is generated when a process in a
background job attempts to write to the terminal or set its modes.
Again, the default action is to stop the process.  <code>SIGTTOU</code> is
only generated for an attempt to write to the terminal if the
<code>TOSTOP</code> output mode is set; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Output-Modes">Output Modes</a>.
</para></dd></dl>
<span xml:id="glibc-index-terminal-output-signal"></span>

<para>While a process is stopped, no more signals can be delivered to it until
it is continued, except <code>SIGKILL</code> signals and (obviously)
<code>SIGCONT</code> signals.  The signals are marked as pending, but not
delivered until the process is continued.  The <code>SIGKILL</code> signal
always causes termination of the process and can’t be blocked, handled
or ignored.  You can ignore <code>SIGCONT</code>, but it always causes the
process to be continued anyway if it is stopped.  Sending a
<code>SIGCONT</code> signal to a process causes any pending stop signals for
that process to be discarded.  Likewise, any pending <code>SIGCONT</code>
signals for a process are discarded when it receives a stop signal.
</para>
<para>When a process in an orphaned process group (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Orphaned-Process-Groups">Orphaned Process Groups</a>) receives a <code>SIGTSTP</code>, <code>SIGTTIN</code>, or <code>SIGTTOU</code>
signal and does not handle it, the process does not stop.  Stopping the
process would probably not be very useful, since there is no shell
program that will notice it stop and allow the user to continue it.
What happens instead depends on the operating system you are using.
Some systems may do nothing; others may deliver another signal instead,
such as <code>SIGKILL</code> or <code>SIGHUP</code>.  On GNU/Hurd systems, the process
dies with <code>SIGKILL</code>; this avoids the problem of many stopped,
orphaned processes lying around the system.
</para>

<hr>
</div>
<div class="subsection" xml:id="glibc-Operation-Error-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Miscellaneous-Signals" accesskey="n" rel="next">Miscellaneous Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control-Signals" accesskey="p" rel="prev">Job Control Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Operation-Error-Signals-1"></span><h4 class="subsection">24.2.6 Operation Error Signals</title>

<para>These signals are used to report various errors generated by an
operation done by the program.  They do not necessarily indicate a
programming error in the program, but an error that prevents an
operating system call from completing.  The default action for all of
them is to cause the process to terminate.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGPIPE"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGPIPE</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGPIPE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-pipe-signal"></span>
<span xml:id="glibc-index-broken-pipe-signal"></span>
<para>Broken pipe.  If you use pipes or FIFOs, you have to design your
application so that one process opens the pipe for reading before
another starts writing.  If the reading process never starts, or
terminates unexpectedly, writing to the pipe or FIFO raises a
<code>SIGPIPE</code> signal.  If <code>SIGPIPE</code> is blocked, handled or
ignored, the offending call fails with <code>EPIPE</code> instead.
</para>
<para>Pipes and FIFO special files are discussed in more detail in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Pipes-and-FIFOs">Pipes and FIFOs</a>.
</para>
<para>Another cause of <code>SIGPIPE</code> is when you try to output to a socket
that isn’t connected.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sending-Data">Sending Data</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGLOST"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGLOST</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGLOST" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-lost-resource-signal"></span>
<para>Resource lost.  This signal is generated when you have an advisory lock
on an NFS file, and the NFS server reboots and forgets about your lock.
</para>
<para>On GNU/Hurd systems, <code>SIGLOST</code> is generated when any server program
dies unexpectedly.  It is usually fine to ignore the signal; whatever
call was made to the server that died just returns an error.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGXCPU"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGXCPU</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGXCPU" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>CPU time limit exceeded.  This signal is generated when the process
exceeds its soft resource limit on CPU time.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Limits-on-Resources">Limiting Resource Usage</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGXFSZ"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGXFSZ</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGXFSZ" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>File size limit exceeded.  This signal is generated when the process
attempts to extend a file so it exceeds the process’s soft resource
limit on file size.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Limits-on-Resources">Limiting Resource Usage</a>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Miscellaneous-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Messages" accesskey="n" rel="next">Signal Messages</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Operation-Error-Signals" accesskey="p" rel="prev">Operation Error Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Miscellaneous-Signals-1"></span><h4 class="subsection">24.2.7 Miscellaneous Signals</title>

<para>These signals are used for various other purposes.  In general, they
will not affect your program unless it explicitly uses them for something.
</para>
<dl class="def">
<dt xml:id="glibc-index-SIGUSR1"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGUSR1</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGUSR1" class="copiable-anchor"> ¶</a></span></dt>
<dt xml:id="glibc-index-SIGUSR2"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGUSR2</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGUSR2" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<span xml:id="glibc-index-user-signals"></span>
<para>The <code>SIGUSR1</code> and <code>SIGUSR2</code> signals are set aside for you to
use any way you want.  They’re useful for simple interprocess
communication, if you write a signal handler for them in the program
that receives the signal.
</para>
<para>There is an example showing the use of <code>SIGUSR1</code> and <code>SIGUSR2</code>
in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Another-Process">Signaling Another Process</a>.
</para>
<para>The default action is to terminate the process.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGWINCH"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGWINCH</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGWINCH" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Window size change.  This is generated on some systems (including GNU)
when the terminal driver’s record of the number of rows and columns on
the screen is changed.  The default action is to ignore it.
</para>
<para>If a program does full-screen display, it should handle <code>SIGWINCH</code>.
When the signal arrives, it should fetch the new screen size and
reformat its display accordingly.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIGINFO"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SIGINFO</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGINFO" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Information request.  On 4.4 BSD and GNU/Hurd systems, this signal is sent
to all the processes in the foreground process group of the controlling
terminal when the user types the STATUS character in canonical mode;
see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Characters">Characters that Cause Signals</a>.
</para>
<para>If the process is the leader of the process group, the default action is
to print some status information about the system and what the process
is doing.  Otherwise the default is to do nothing.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Signal-Messages">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Miscellaneous-Signals" accesskey="p" rel="prev">Miscellaneous Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="u" rel="up">Standard Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signal-Messages-1"></span><h4 class="subsection">24.2.8 Signal Messages</title>
<span xml:id="glibc-index-signal-messages"></span>

<para>We mentioned above that the shell prints a message describing the signal
that terminated a child process.  The clean way to print a message
describing a signal is to use the functions <code>strsignal</code> and
<code>psignal</code>.  These functions use a signal number to specify which
kind of signal to describe.  The signal number may come from the
termination status of a child process (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Completion">Process Completion</a>) or it
may come from a signal handler in the same process.
</para>
<dl class="def">
<dt xml:id="glibc-index-strsignal"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>strsignal</strong> <emphasis>(int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-strsignal" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:strsignal locale
| AS-Unsafe init i18n corrupt heap
| AC-Unsafe init corrupt mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function returns a pointer to a statically-allocated string
containing a message describing the signal <var>signum</var>.  You
should not modify the contents of this string; and, since it can be
rewritten on subsequent calls, you should save a copy of it if you need
to reference it later.
</para>
<span xml:id="glibc-index-string_002eh-9"></span>
<para>This function is a GNU extension, declared in the header file
<filename>string.h</filename>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-psignal"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>psignal</strong> <emphasis>(int <var>signum</var>, const char *<var>message</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-psignal" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe locale
| AS-Unsafe corrupt i18n heap
| AC-Unsafe lock corrupt mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function prints a message describing the signal <var>signum</var> to the
standard error output stream <code>stderr</code>; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Streams">Standard Streams</a>.
</para>
<para>If you call <code>psignal</code> with a <var>message</var> that is either a null
pointer or an empty string, <code>psignal</code> just prints the message
corresponding to <var>signum</var>, adding a trailing newline.
</para>
<para>If you supply a non-null <var>message</var> argument, then <code>psignal</code>
prefixes its output with this string.  It adds a colon and a space
character to separate the <var>message</var> from the string corresponding
to <var>signum</var>.
</para>
<span xml:id="glibc-index-stdio_002eh-18"></span>
<para>This function is a BSD feature, declared in the header file <filename>signal.h</filename>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigdescr_005fnp"><span class="category">Function: </span><span><emphasis>const char *</emphasis> <strong>sigdescr_np</strong> <emphasis>(int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigdescr_005fnp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function returns the message describing the signal <var>signum</var> or
<code>NULL</code> for invalid signal number (e.g "Hangup" for <code>SIGHUP</code>).
Different than <code>strsignal</code> the returned description is not translated.
The message points to a static storage whose lifetime is the whole lifetime
of the program.
</para>
<span xml:id="glibc-index-string_002eh-10"></span>
<para>This function is a GNU extension, declared in the header file <filename>string.h</filename>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigabbrev_005fnp"><span class="category">Function: </span><span><emphasis>const char *</emphasis> <strong>sigabbrev_np</strong> <emphasis>(int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigabbrev_005fnp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function returns the abbreviation describing the signal <var>signum</var> or
<code>NULL</code> for invalid signal number.  The message points to a static
storage whose lifetime is the whole lifetime of the program.
</para>
<span xml:id="glibc-index-string_002eh-11"></span>
<para>This function is a GNU extension, declared in the header file <filename>string.h</filename>.
</para></dd></dl>

<hr>
</div>
</div>
<sect xml:id="glibc-Signal-Actions">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="n" rel="next">Defining Signal Handlers</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals" accesskey="p" rel="prev">Standard Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Specifying-Signal-Actions"></span><h3 class="section">24.3 Specifying Signal Actions</title>
<span xml:id="glibc-index-signal-actions"></span>
<span xml:id="glibc-index-establishing-a-handler"></span>

<para>The simplest way to change the action for a signal is to use the
<code>signal</code> function.  You can specify a built-in action (such as to
ignore the signal), or you can <emphasis>establish a handler</emphasis>.
</para>
<para>The GNU C Library also implements the more versatile <code>sigaction</code>
facility.  This section describes both facilities and gives suggestions
on which to use when.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Basic-Signal-Handling" accesskey="1">Basic Signal Handling</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Advanced-Signal-Handling" accesskey="2">Advanced Signal Handling</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-and-Sigaction" accesskey="3">Interaction of <code>signal</code> and <code>sigaction</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sigaction-Function-Example" accesskey="4"><code>sigaction</code> Function Example</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Flags-for-Sigaction" accesskey="5">Flags for <code>sigaction</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Initial-Signal-Actions" accesskey="6">Initial Signal Actions</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Basic-Signal-Handling">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Advanced-Signal-Handling" accesskey="n" rel="next">Advanced Signal Handling</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="u" rel="up">Specifying Signal Actions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Basic-Signal-Handling-1"></span><h4 class="subsection">24.3.1 Basic Signal Handling</title>
<span xml:id="glibc-index-signal-function"></span>

<para>The <code>signal</code> function provides a simple interface for establishing
an action for a particular signal.  The function and associated macros
are declared in the header file <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-2"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-sighandler_005ft"><span class="category">Data Type: </span><span><strong>sighandler_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sighandler_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the type of signal handler functions.  Signal handlers take one
integer argument specifying the signal number, and have return type
<code>void</code>.  So, you should define handler functions like this:
</para>
<div class="example">
<pre class="example">void <var>handler</var> (int <code>signum</code>) { … }
</pre></div>

<para>The name <code>sighandler_t</code> for this data type is a GNU extension.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-signal-2"><span class="category">Function: </span><span><emphasis>sighandler_t</emphasis> <strong>signal</strong> <emphasis>(int <var>signum</var>, sighandler_t <var>action</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-signal-2" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe sigintr
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>signal</code> function establishes <var>action</var> as the action for
the signal <var>signum</var>.
</para>
<para>The first argument, <var>signum</var>, identifies the signal whose behavior
you want to control, and should be a signal number.  The proper way to
specify a signal number is with one of the symbolic signal names
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals">Standard Signals</a>)—don’t use an explicit number, because
the numerical code for a given kind of signal may vary from operating
system to operating system.
</para>
<para>The second argument, <var>action</var>, specifies the action to use for the
signal <var>signum</var>.  This can be one of the following:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-SIG_005fDFL"><span><code>SIG_DFL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIG_005fDFL" class="copiable-anchor"> ¶</a></span></dt>
<dd><span xml:id="glibc-index-default-action-for-a-signal"></span>
<para><code>SIG_DFL</code> specifies the default action for the particular signal.
The default actions for various kinds of signals are stated in
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals">Standard Signals</a>.
</para>
</dd>
<dt xml:id="glibc-index-SIG_005fIGN"><span><code>SIG_IGN</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIG_005fIGN" class="copiable-anchor"> ¶</a></span></dt>
<dd><span xml:id="glibc-index-ignore-action-for-a-signal"></span>
<para><code>SIG_IGN</code> specifies that the signal should be ignored.
</para>
<para>Your program generally should not ignore signals that represent serious
events or that are normally used to request termination.  You cannot
ignore the <code>SIGKILL</code> or <code>SIGSTOP</code> signals at all.  You can
ignore program error signals like <code>SIGSEGV</code>, but ignoring the error
won’t enable the program to continue executing meaningfully.  Ignoring
user requests such as <code>SIGINT</code>, <code>SIGQUIT</code>, and <code>SIGTSTP</code>
is unfriendly.
</para>
<para>When you do not wish signals to be delivered during a certain part of
the program, the thing to do is to block them, not ignore them.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals">Blocking Signals</a>.
</para>
</dd>
<dt><span><code><var>handler</var></code></span></dt>
<dd><para>Supply the address of a handler function in your program, to specify
running this handler as the way to deliver the signal.
</para>
<para>For more information about defining signal handler functions,
see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers">Defining Signal Handlers</a>.
</para></dd>
</dl>

<para>If you set the action for a signal to <code>SIG_IGN</code>, or if you set it
to <code>SIG_DFL</code> and the default action is to ignore that signal, then
any pending signals of that type are discarded (even if they are
blocked).  Discarding the pending signals means that they will never be
delivered, not even if you subsequently specify another action and
unblock this kind of signal.
</para>
<para>The <code>signal</code> function returns the action that was previously in
effect for the specified <var>signum</var>.  You can save this value and
restore it later by calling <code>signal</code> again.
</para>
<para>If <code>signal</code> can’t honor the request, it returns <code>SIG_ERR</code>
instead.  The following <code>errno</code> error conditions are defined for
this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>You specified an invalid <var>signum</var>; or you tried to ignore or provide
a handler for <code>SIGKILL</code> or <code>SIGSTOP</code>.
</para></dd>
</dl>
</dd></dl>

<para><strong>Compatibility Note:</strong> A problem encountered when working with the
<code>signal</code> function is that it has different semantics on BSD and
SVID systems.  The difference is that on SVID systems the signal handler
is deinstalled after signal delivery.  On BSD systems the
handler must be explicitly deinstalled.  In the GNU C Library we use the
BSD version by default.  To use the SVID version you can either use the
function <code>sysv_signal</code> (see below) or use the <code>_XOPEN_SOURCE</code>
feature select macro (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Feature-Test-Macros">Feature Test Macros</a>).  In general, use of these
functions should be avoided because of compatibility problems.  It
is better to use <code>sigaction</code> if it is available since the results
are much more reliable.
</para>
<para>Here is a simple example of setting up a handler to delete temporary
files when certain fatal signals happen:
</para>
<div class="example">
<pre class="example">#include &lt;signal.h&gt;

void
termination_handler (int signum)
{
  struct temp_file *p;

  for (p = temp_file_list; p; p = p-&gt;next)
    unlink (p-&gt;name);
}

int
main (void)
{
  …
  if (signal (SIGINT, termination_handler) == SIG_IGN)
    signal (SIGINT, SIG_IGN);
  if (signal (SIGHUP, termination_handler) == SIG_IGN)
    signal (SIGHUP, SIG_IGN);
  if (signal (SIGTERM, termination_handler) == SIG_IGN)
    signal (SIGTERM, SIG_IGN);
  …
}
</pre></div>

<para>Note that if a given signal was previously set to be ignored, this code
avoids altering that setting.  This is because non-job-control shells
often ignore certain signals when starting children, and it is important
for the children to respect this.
</para>
<para>We do not handle <code>SIGQUIT</code> or the program error signals in this
example because these are designed to provide information for debugging
(a core dump), and the temporary files may give useful information.
</para>
<dl class="def">
<dt xml:id="glibc-index-sysv_005fsignal"><span class="category">Function: </span><span><emphasis>sighandler_t</emphasis> <strong>sysv_signal</strong> <emphasis>(int <var>signum</var>, sighandler_t <var>action</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sysv_005fsignal" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sysv_signal</code> implements the behavior of the standard
<code>signal</code> function as found on SVID systems.  The difference to BSD
systems is that the handler is deinstalled after a delivery of a signal.
</para>
<para><strong>Compatibility Note:</strong> As said above for <code>signal</code>, this
function should be avoided when possible.  <code>sigaction</code> is the
preferred method.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-ssignal"><span class="category">Function: </span><span><emphasis>sighandler_t</emphasis> <strong>ssignal</strong> <emphasis>(int <var>signum</var>, sighandler_t <var>action</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ssignal" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe sigintr
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>ssignal</code> function does the same thing as <code>signal</code>; it is
provided only for compatibility with SVID.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SIG_005fERR"><span class="category">Macro: </span><span><emphasis>sighandler_t</emphasis> <strong>SIG_ERR</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIG_005fERR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The value of this macro is used as the return value from <code>signal</code>
to indicate an error.
</para></dd></dl>



<hr>
</div>
<div class="subsection" xml:id="glibc-Advanced-Signal-Handling">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-and-Sigaction" accesskey="n" rel="next">Interaction of <code>signal</code> and <code>sigaction</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Basic-Signal-Handling" accesskey="p" rel="prev">Basic Signal Handling</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="u" rel="up">Specifying Signal Actions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Advanced-Signal-Handling-1"></span><h4 class="subsection">24.3.2 Advanced Signal Handling</title>
<span xml:id="glibc-index-sigaction-function"></span>

<para>The <code>sigaction</code> function has the same basic effect as
<code>signal</code>: to specify how a signal should be handled by the process.
However, <code>sigaction</code> offers more control, at the expense of more
complexity.  In particular, <code>sigaction</code> allows you to specify
additional flags to control when the signal is generated and how the
handler is invoked.
</para>
<para>The <code>sigaction</code> function is declared in <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-3"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-sigaction"><span class="category">Data Type: </span><span><strong>struct sigaction</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-sigaction" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Structures of type <code>struct sigaction</code> are used in the
<code>sigaction</code> function to specify all the information about how to
handle a particular signal.  This structure contains at least the
following members:
</para>
<dl compact="compact">
<dt><span><code>sighandler_t sa_handler</code></span></dt>
<dd><para>This is used in the same way as the <var>action</var> argument to the
<code>signal</code> function.  The value can be <code>SIG_DFL</code>,
<code>SIG_IGN</code>, or a function pointer.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Basic-Signal-Handling">Basic Signal Handling</a>.
</para>
</dd>
<dt><span><code>sigset_t sa_mask</code></span></dt>
<dd><para>This specifies a set of signals to be blocked while the handler runs.
Blocking is explained in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-for-Handler">Blocking Signals for a Handler</a>.  Note that the
signal that was delivered is automatically blocked by default before its
handler is started; this is true regardless of the value in
<code>sa_mask</code>.  If you want that signal not to be blocked within its
handler, you must write code in the handler to unblock it.
</para>
</dd>
<dt><span><code>int sa_flags</code></span></dt>
<dd><para>This specifies various flags which can affect the behavior of
the signal.  These are described in more detail in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Flags-for-Sigaction">Flags for <code>sigaction</code></a>.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigaction"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigaction</strong> <emphasis>(int <var>signum</var>, const struct sigaction *restrict <var>action</var>, struct sigaction *restrict <var>old-action</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigaction" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <var>action</var> argument is used to set up a new action for the signal
<var>signum</var>, while the <var>old-action</var> argument is used to return
information about the action previously associated with this signal.
(In other words, <var>old-action</var> has the same purpose as the
<code>signal</code> function’s return value—you can check to see what the
old action in effect for the signal was, and restore it later if you
want.)
</para>
<para>Either <var>action</var> or <var>old-action</var> can be a null pointer.  If
<var>old-action</var> is a null pointer, this simply suppresses the return
of information about the old action.  If <var>action</var> is a null pointer,
the action associated with the signal <var>signum</var> is unchanged; this
allows you to inquire about how a signal is being handled without changing
that handling.
</para>
<para>The return value from <code>sigaction</code> is zero if it succeeds, and
<code>-1</code> on failure.  The following <code>errno</code> error conditions are
defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>signum</var> argument is not valid, or you are trying to
trap or ignore <code>SIGKILL</code> or <code>SIGSTOP</code>.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Signal-and-Sigaction">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sigaction-Function-Example" accesskey="n" rel="next"><code>sigaction</code> Function Example</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Advanced-Signal-Handling" accesskey="p" rel="prev">Advanced Signal Handling</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="u" rel="up">Specifying Signal Actions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Interaction-of-signal-and-sigaction"></span><h4 class="subsection">24.3.3 Interaction of <code>signal</code> and <code>sigaction</code></title>

<para>It’s possible to use both the <code>signal</code> and <code>sigaction</code>
functions within a single program, but you have to be careful because
they can interact in slightly strange ways.
</para>
<para>The <code>sigaction</code> function specifies more information than the
<code>signal</code> function, so the return value from <code>signal</code> cannot
express the full range of <code>sigaction</code> possibilities.  Therefore, if
you use <code>signal</code> to save and later reestablish an action, it may
not be able to reestablish properly a handler that was established with
<code>sigaction</code>.
</para>
<para>To avoid having problems as a result, always use <code>sigaction</code> to
save and restore a handler if your program uses <code>sigaction</code> at all.
Since <code>sigaction</code> is more general, it can properly save and
reestablish any action, regardless of whether it was established
originally with <code>signal</code> or <code>sigaction</code>.
</para>
<para>On some systems if you establish an action with <code>signal</code> and then
examine it with <code>sigaction</code>, the handler address that you get may
not be the same as what you specified with <code>signal</code>.  It may not
even be suitable for use as an action argument with <code>signal</code>.  But
you can rely on using it as an argument to <code>sigaction</code>.  This
problem never happens on GNU systems.
</para>
<para>So, you’re better off using one or the other of the mechanisms
consistently within a single program.
</para>
<para><strong>Portability Note:</strong> The basic <code>signal</code> function is a feature
of &isoc;, while <code>sigaction</code> is part of the POSIX.1 standard.  If
you are concerned about portability to non-POSIX systems, then you
should use the <code>signal</code> function instead.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Sigaction-Function-Example">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Flags-for-Sigaction" accesskey="n" rel="next">Flags for <code>sigaction</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-and-Sigaction" accesskey="p" rel="prev">Interaction of <code>signal</code> and <code>sigaction</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="u" rel="up">Specifying Signal Actions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-sigaction-Function-Example"></span><h4 class="subsection">24.3.4 <code>sigaction</code> Function Example</title>

<para>In <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Basic-Signal-Handling">Basic Signal Handling</a>, we gave an example of establishing a
simple handler for termination signals using <code>signal</code>.  Here is an
equivalent example using <code>sigaction</code>:
</para>
<div class="example">
<pre class="example">#include &lt;signal.h&gt;

void
termination_handler (int signum)
{
  struct temp_file *p;

  for (p = temp_file_list; p; p = p-&gt;next)
    unlink (p-&gt;name);
}

int
main (void)
{
  …
  struct sigaction new_action, old_action;

  /* <span class="roman">Set up the structure to specify the new action.</span> */
  new_action.sa_handler = termination_handler;
  sigemptyset (&amp;new_action.sa_mask);
  new_action.sa_flags = 0;

  sigaction (SIGINT, NULL, &amp;old_action);
  if (old_action.sa_handler != SIG_IGN)
    sigaction (SIGINT, &amp;new_action, NULL);
  sigaction (SIGHUP, NULL, &amp;old_action);
  if (old_action.sa_handler != SIG_IGN)
    sigaction (SIGHUP, &amp;new_action, NULL);
  sigaction (SIGTERM, NULL, &amp;old_action);
  if (old_action.sa_handler != SIG_IGN)
    sigaction (SIGTERM, &amp;new_action, NULL);
  …
}
</pre></div>

<para>The program just loads the <code>new_action</code> structure with the desired
parameters and passes it in the <code>sigaction</code> call.  The usage of
<code>sigemptyset</code> is described later; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals">Blocking Signals</a>.
</para>
<para>As in the example using <code>signal</code>, we avoid handling signals
previously set to be ignored.  Here we can avoid altering the signal
handler even momentarily, by using the feature of <code>sigaction</code> that
lets us examine the current action without specifying a new one.
</para>
<para>Here is another example.  It retrieves information about the current
action for <code>SIGINT</code> without changing that action.
</para>
<div class="example">
<pre class="example">struct sigaction query_action;

if (sigaction (SIGINT, NULL, &amp;query_action) &lt; 0)
  /* <span class="roman"><code>sigaction</code> returns -1 in case of error.</span> */
else if (query_action.sa_handler == SIG_DFL)
  /* <span class="roman"><code>SIGINT</code> is handled in the default, fatal manner.</span> */
else if (query_action.sa_handler == SIG_IGN)
  /* <span class="roman"><code>SIGINT</code> is ignored.</span> */
else
  /* <span class="roman">A programmer-defined signal handler is in effect.</span> */
</pre></div>

<hr>
</div>
<div class="subsection" xml:id="glibc-Flags-for-Sigaction">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Initial-Signal-Actions" accesskey="n" rel="next">Initial Signal Actions</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sigaction-Function-Example" accesskey="p" rel="prev"><code>sigaction</code> Function Example</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="u" rel="up">Specifying Signal Actions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Flags-for-sigaction"></span><h4 class="subsection">24.3.5 Flags for <code>sigaction</code></title>
<span xml:id="glibc-index-signal-flags"></span>
<span xml:id="glibc-index-flags-for-sigaction"></span>
<span xml:id="glibc-index-sigaction-flags"></span>

<para>The <code>sa_flags</code> member of the <code>sigaction</code> structure is a
catch-all for special features.  Most of the time, <code>SA_RESTART</code> is
a good value to use for this field.
</para>
<para>The value of <code>sa_flags</code> is interpreted as a bit mask.  Thus, you
should choose the flags you want to set, <small>OR</small> those flags together,
and store the result in the <code>sa_flags</code> member of your
<code>sigaction</code> structure.
</para>
<para>Each signal number has its own set of flags.  Each call to
<code>sigaction</code> affects one particular signal number, and the flags
that you specify apply only to that particular signal.
</para>
<para>In the GNU C Library, establishing a handler with <code>signal</code> sets all
the flags to zero except for <code>SA_RESTART</code>, whose value depends on
the settings you have made with <code>siginterrupt</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupted-Primitives">Primitives Interrupted by Signals</a>, to see what this is about.
</para>
<span xml:id="glibc-index-signal_002eh-4"></span>
<para>These macros are defined in the header file <filename>signal.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-SA_005fNOCLDSTOP"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SA_NOCLDSTOP</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SA_005fNOCLDSTOP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This flag is meaningful only for the <code>SIGCHLD</code> signal.  When the
flag is set, the system delivers the signal for a terminated child
process but not for one that is stopped.  By default, <code>SIGCHLD</code> is
delivered for both terminated children and stopped children.
</para>
<para>Setting this flag for a signal other than <code>SIGCHLD</code> has no effect.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SA_005fONSTACK"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SA_ONSTACK</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SA_005fONSTACK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If this flag is set for a particular signal number, the system uses the
signal stack when delivering that kind of signal.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Stack">Using a Separate Signal Stack</a>.
If a signal with this flag arrives and you have not set a signal stack,
the normal user stack is used instead, as if the flag had not been set.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-SA_005fRESTART"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>SA_RESTART</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SA_005fRESTART" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This flag controls what happens when a signal is delivered during
certain primitives (such as <code>open</code>, <code>read</code> or <code>write</code>),
and the signal handler returns normally.  There are two alternatives:
the library function can resume, or it can return failure with error
code <code>EINTR</code>.
</para>
<para>The choice is controlled by the <code>SA_RESTART</code> flag for the
particular kind of signal that was delivered.  If the flag is set,
returning from a handler resumes the library function.  If the flag is
clear, returning from a handler makes the function fail.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupted-Primitives">Primitives Interrupted by Signals</a>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Initial-Signal-Actions">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Flags-for-Sigaction" accesskey="p" rel="prev">Flags for <code>sigaction</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="u" rel="up">Specifying Signal Actions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Initial-Signal-Actions-1"></span><h4 class="subsection">24.3.6 Initial Signal Actions</title>
<span xml:id="glibc-index-initial-signal-actions"></span>

<para>When a new process is created (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Creating-a-Process">Creating a Process</a>), it inherits
handling of signals from its parent process.  However, when you load a
new process image using the <code>exec</code> function (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Executing-a-File">Executing a File</a>), any signals that you’ve defined your own handlers for revert to
their <code>SIG_DFL</code> handling.  (If you think about it a little, this
makes sense; the handler functions from the old program are specific to
that program, and aren’t even present in the address space of the new
program image.)  Of course, the new program can establish its own
handlers.
</para>
<para>When a program is run by a shell, the shell normally sets the initial
actions for the child process to <code>SIG_DFL</code> or <code>SIG_IGN</code>, as
appropriate.  It’s a good idea to check to make sure that the shell has
not set up an initial action of <code>SIG_IGN</code> before you establish your
own signal handlers.
</para>
<para>Here is an example of how to establish a handler for <code>SIGHUP</code>, but
not if <code>SIGHUP</code> is currently ignored:
</para>
<div class="example">
<pre class="example">…
struct sigaction temp;

sigaction (SIGHUP, NULL, &amp;temp);

if (temp.sa_handler != SIG_IGN)
  {
    temp.sa_handler = handle_sighup;
    sigemptyset (&amp;temp.sa_mask);
    sigaction (SIGHUP, &amp;temp, NULL);
  }
</pre></div>

<hr>
</div>
</div>
<sect xml:id="glibc-Defining-Handlers">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupted-Primitives" accesskey="n" rel="next">Primitives Interrupted by Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions" accesskey="p" rel="prev">Specifying Signal Actions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Defining-Signal-Handlers"></span><h3 class="section">24.4 Defining Signal Handlers</title>
<span xml:id="glibc-index-signal-handler-function"></span>

<para>This section describes how to write a signal handler function that can
be established with the <code>signal</code> or <code>sigaction</code> functions.
</para>
<para>A signal handler is just a function that you compile together with the
rest of the program.  Instead of directly invoking the function, you use
<code>signal</code> or <code>sigaction</code> to tell the operating system to call
it when a signal arrives.  This is known as <emphasis>establishing</emphasis> the
handler.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Actions">Specifying Signal Actions</a>.
</para>
<para>There are two basic strategies you can use in signal handler functions:
</para>
<ul>
<li> You can have the handler function note that the signal arrived by
tweaking some global data structures, and then return normally.

</li><li> You can have the handler function terminate the program or transfer
control to a point where it can recover from the situation that caused
the signal.
</li></ul>

<para>You need to take special care in writing handler functions because they
can be called asynchronously.  That is, a handler might be called at any
point in the program, unpredictably.  If two signals arrive during a
very short interval, one handler can run within another.  This section
describes what your handler should do, and what you should avoid.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Handler-Returns" accesskey="1">Signal Handlers that Return</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-in-Handler" accesskey="2">Handlers That Terminate the Process</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Longjmp-in-Handler" accesskey="3">Nonlocal Control Transfer in Handlers</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signals-in-Handler" accesskey="4">Signals Arriving While a Handler Runs</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Merged-Signals" accesskey="5">Signals Close Together Merge into One</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Nonreentrancy" accesskey="6">Signal Handling and Nonreentrant Functions</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access" accesskey="7">Atomic Data Access and Signal Handling</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Handler-Returns">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-in-Handler" accesskey="n" rel="next">Handlers That Terminate the Process</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signal-Handlers-that-Return"></span><h4 class="subsection">24.4.1 Signal Handlers that Return</title>

<para>Handlers which return normally are usually used for signals such as
<code>SIGALRM</code> and the I/O and interprocess communication signals.  But
a handler for <code>SIGINT</code> might also return normally after setting a
flag that tells the program to exit at a convenient time.
</para>
<para>It is not safe to return normally from the handler for a program error
signal, because the behavior of the program when the handler function
returns is not defined after a program error.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Error-Signals">Program Error Signals</a>.
</para>
<para>Handlers that return normally must modify some global variable in order
to have any effect.  Typically, the variable is one that is examined
periodically by the program during normal operation.  Its data type
should be <code>sig_atomic_t</code> for reasons described in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access">Atomic Data Access and Signal Handling</a>.
</para>
<para>Here is a simple example of such a program.  It executes the body of
the loop until it has noticed that a <code>SIGALRM</code> signal has arrived.
This technique is useful because it allows the iteration in progress
when the signal arrives to complete before the loop exits.
</para>
<div class="example">
<pre class="example">
#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* <span class="roman">This flag controls termination of the main loop.</span> */
volatile sig_atomic_t keep_going = 1;

/* <span class="roman">The signal handler just clears the flag and re-enables itself.</span> */
void
catch_alarm (int sig)
{
  keep_going = 0;
  signal (sig, catch_alarm);
}

void
do_stuff (void)
{
  puts ("Doing stuff while waiting for alarm....");
}

int
main (void)
{
  /* <span class="roman">Establish a handler for SIGALRM signals.</span> */
  signal (SIGALRM, catch_alarm);

  /* <span class="roman">Set an alarm to go off in a little while.</span> */
  alarm (2);

  /* <span class="roman">Check the flag once in a while to see when to quit.</span> */
  while (keep_going)
    do_stuff ();

  return EXIT_SUCCESS;
}
</pre></div>

<hr>
</div>
<div class="subsection" xml:id="glibc-Termination-in-Handler">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Longjmp-in-Handler" accesskey="n" rel="next">Nonlocal Control Transfer in Handlers</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Handler-Returns" accesskey="p" rel="prev">Signal Handlers that Return</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Handlers-That-Terminate-the-Process"></span><h4 class="subsection">24.4.2 Handlers That Terminate the Process</title>

<para>Handler functions that terminate the program are typically used to cause
orderly cleanup or recovery from program error signals and interactive
interrupts.
</para>
<para>The cleanest way for a handler to terminate the process is to raise the
same signal that ran the handler in the first place.  Here is how to do
this:
</para>
<div class="example">
<pre class="example">volatile sig_atomic_t fatal_error_in_progress = 0;

void
fatal_error_signal (int sig)
{
</pre><pre class="example">  /* <span class="roman">Since this handler is established for more than one kind of signal, </span>
     <span class="roman">it might still get invoked recursively by delivery of some other kind</span>
     <span class="roman">of signal.  Use a static variable to keep track of that.</span> */
  if (fatal_error_in_progress)
    raise (sig);
  fatal_error_in_progress = 1;
</pre><pre class="example">
</pre><pre class="example">  /* <span class="roman">Now do the clean up actions:</span>
     <span class="roman">- reset terminal modes</span>
     <span class="roman">- kill child processes</span>
     <span class="roman">- remove lock files</span> */
  …
</pre><pre class="example">
</pre><pre class="example">  /* <span class="roman">Now reraise the signal.  We reactivate the signal’s</span>
     <span class="roman">default handling, which is to terminate the process.</span>
     <span class="roman">We could just call <code>exit</code> or <code>abort</code>,</span>
     <span class="roman">but reraising the signal sets the return status</span>
     <span class="roman">from the process correctly.</span> */
  signal (sig, SIG_DFL);
  raise (sig);
}
</pre></div>

<hr>
</div>
<div class="subsection" xml:id="glibc-Longjmp-in-Handler">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signals-in-Handler" accesskey="n" rel="next">Signals Arriving While a Handler Runs</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-in-Handler" accesskey="p" rel="prev">Handlers That Terminate the Process</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Nonlocal-Control-Transfer-in-Handlers"></span><h4 class="subsection">24.4.3 Nonlocal Control Transfer in Handlers</title>
<span xml:id="glibc-index-non_002dlocal-exit_002c-from-signal-handler"></span>

<para>You can do a nonlocal transfer of control out of a signal handler using
the <code>setjmp</code> and <code>longjmp</code> facilities (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Non_002dLocal-Exits">Non-Local Exits</a>).
</para>
<para>When the handler does a nonlocal control transfer, the part of the
program that was running will not continue.  If this part of the program
was in the middle of updating an important data structure, the data
structure will remain inconsistent.  Since the program does not
terminate, the inconsistency is likely to be noticed later on.
</para>
<para>There are two ways to avoid this problem.  One is to block the signal
for the parts of the program that update important data structures.
Blocking the signal delays its delivery until it is unblocked, once the
critical updating is finished.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals">Blocking Signals</a>.
</para>
<para>The other way is to re-initialize the crucial data structures in the
signal handler, or to make their values consistent.
</para>
<para>Here is a rather schematic example showing the reinitialization of one
global variable.
</para>
<div class="example">
<pre class="example">#include &lt;signal.h&gt;
#include &lt;setjmp.h&gt;

jmp_buf return_to_top_level;

volatile sig_atomic_t waiting_for_input;

void
handle_sigint (int signum)
{
  /* <span class="roman">We may have been waiting for input when the signal arrived,</span>
     <span class="roman">but we are no longer waiting once we transfer control.</span> */
  waiting_for_input = 0;
  longjmp (return_to_top_level, 1);
}
</pre><pre class="example">
</pre><pre class="example">int
main (void)
{
  …
  signal (SIGINT, sigint_handler);
  …
  while (1) {
    prepare_for_command ();
    if (setjmp (return_to_top_level) == 0)
      read_and_execute_command ();
  }
}
</pre><pre class="example">
</pre><pre class="example">/* <span class="roman">Imagine this is a subroutine used by various commands.</span> */
char *
read_data ()
{
  if (input_from_terminal) {
    waiting_for_input = 1;
    …
    waiting_for_input = 0;
  } else {
    …
  }
}
</pre></div>


<hr>
</div>
<div class="subsection" xml:id="glibc-Signals-in-Handler">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Merged-Signals" accesskey="n" rel="next">Signals Close Together Merge into One</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Longjmp-in-Handler" accesskey="p" rel="prev">Nonlocal Control Transfer in Handlers</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signals-Arriving-While-a-Handler-Runs"></span><h4 class="subsection">24.4.4 Signals Arriving While a Handler Runs</title>
<span xml:id="glibc-index-race-conditions_002c-relating-to-signals"></span>

<para>What happens if another signal arrives while your signal handler
function is running?
</para>
<para>When the handler for a particular signal is invoked, that signal is
automatically blocked until the handler returns.  That means that if two
signals of the same kind arrive close together, the second one will be
held until the first has been handled.  (The handler can explicitly
unblock the signal using <code>sigprocmask</code>, if you want to allow more
signals of this type to arrive; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Signal-Mask">Process Signal Mask</a>.)
</para>
<para>However, your handler can still be interrupted by delivery of another
kind of signal.  To avoid this, you can use the <code>sa_mask</code> member of
the action structure passed to <code>sigaction</code> to explicitly specify
which signals should be blocked while the signal handler runs.  These
signals are in addition to the signal for which the handler was invoked,
and any other signals that are normally blocked by the process.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-for-Handler">Blocking Signals for a Handler</a>.
</para>
<para>When the handler returns, the set of blocked signals is restored to the
value it had before the handler ran.  So using <code>sigprocmask</code> inside
the handler only affects what signals can arrive during the execution of
the handler itself, not what signals can arrive once the handler returns.
</para>
<para><strong>Portability Note:</strong> Always use <code>sigaction</code> to establish a
handler for a signal that you expect to receive asynchronously, if you
want your program to work properly on System V Unix.  On this system,
the handling of a signal whose handler was established with
<code>signal</code> automatically sets the signal’s action back to
<code>SIG_DFL</code>, and the handler must re-establish itself each time it
runs.  This practice, while inconvenient, does work when signals cannot
arrive in succession.  However, if another signal can arrive right away,
it may arrive before the handler can re-establish itself.  Then the
second signal would receive the default handling, which could terminate
the process.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Merged-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Nonreentrancy" accesskey="n" rel="next">Signal Handling and Nonreentrant Functions</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signals-in-Handler" accesskey="p" rel="prev">Signals Arriving While a Handler Runs</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signals-Close-Together-Merge-into-One"></span><h4 class="subsection">24.4.5 Signals Close Together Merge into One</title>
<span xml:id="glibc-index-handling-multiple-signals"></span>
<span xml:id="glibc-index-successive-signals"></span>
<span xml:id="glibc-index-merging-of-signals"></span>

<para>If multiple signals of the same type are delivered to your process
before your signal handler has a chance to be invoked at all, the
handler may only be invoked once, as if only a single signal had
arrived.  In effect, the signals merge into one.  This situation can
arise when the signal is blocked, or in a multiprocessing environment
where the system is busy running some other processes while the signals
are delivered.  This means, for example, that you cannot reliably use a
signal handler to count signals.  The only distinction you can reliably
make is whether at least one signal has arrived since a given time in
the past.
</para>
<para>Here is an example of a handler for <code>SIGCHLD</code> that compensates for
the fact that the number of signals received may not equal the number of
child processes that generate them.  It assumes that the program keeps track
of all the child processes with a chain of structures as follows:
</para>
<div class="example">
<pre class="example">struct process
{
  struct process *next;
  /* <span class="roman">The process ID of this child.</span>  */
  int pid;
  /* <span class="roman">The descriptor of the pipe or pseudo terminal</span>
     <span class="roman">on which output comes from this child.</span>  */
  int input_descriptor;
  /* <span class="roman">Nonzero if this process has stopped or terminated.</span>  */
  sig_atomic_t have_status;
  /* <span class="roman">The status of this child; 0 if running,</span>
     <span class="roman">otherwise a status value from <code>waitpid</code>.</span>  */
  int status;
};

struct process *process_list;
</pre></div>

<para>This example also uses a flag to indicate whether signals have arrived
since some time in the past—whenever the program last cleared it to
zero.
</para>
<div class="example">
<pre class="example">/* <span class="roman">Nonzero means some child’s status has changed</span>
   <span class="roman">so look at <code>process_list</code> for the details.</span>  */
int process_status_change;
</pre></div>

<para>Here is the handler itself:
</para>
<div class="example">
<pre class="example">void
sigchld_handler (int signo)
{
  int old_errno = errno;

  while (1) {
    register int pid;
    int w;
    struct process *p;

    /* <span class="roman">Keep asking for a status until we get a definitive result.</span>  */
    do
      {
        errno = 0;
        pid = waitpid (WAIT_ANY, &amp;w, WNOHANG | WUNTRACED);
      }
    while (pid &lt;= 0 &amp;&amp; errno == EINTR);

    if (pid &lt;= 0) {
      /* <span class="roman">A real failure means there are no more</span>
         <span class="roman">stopped or terminated child processes, so return.</span>  */
      errno = old_errno;
      return;
    }

    /* <span class="roman">Find the process that signaled us, and record its status.</span>  */

    for (p = process_list; p; p = p-&gt;next)
      if (p-&gt;pid == pid) {
        p-&gt;status = w;
        /* <span class="roman">Indicate that the <code>status</code> field</span>
           <span class="roman">has data to look at.  We do this only after storing it.</span>  */
        p-&gt;have_status = 1;

        /* <span class="roman">If process has terminated, stop waiting for its output.</span>  */
        if (WIFSIGNALED (w) || WIFEXITED (w))
          if (p-&gt;input_descriptor)
            FD_CLR (p-&gt;input_descriptor, &amp;input_wait_mask);

        /* <span class="roman">The program should check this flag from time to time</span>
           <span class="roman">to see if there is any news in <code>process_list</code>.</span>  */
        ++process_status_change;
      }

    /* <span class="roman">Loop around to handle all the processes</span>
       <span class="roman">that have something to tell us.</span>  */
  }
}
</pre></div>

<para>Here is the proper way to check the flag <code>process_status_change</code>:
</para>
<div class="example">
<pre class="example">if (process_status_change) {
  struct process *p;
  process_status_change = 0;
  for (p = process_list; p; p = p-&gt;next)
    if (p-&gt;have_status) {
      … <span class="roman">Examine <code>p-&gt;status</code></span> …
    }
}
</pre></div>

<para>It is vital to clear the flag before examining the list; otherwise, if a
signal were delivered just before the clearing of the flag, and after
the appropriate element of the process list had been checked, the status
change would go unnoticed until the next signal arrived to set the flag
again.  You could, of course, avoid this problem by blocking the signal
while scanning the list, but it is much more elegant to guarantee
correctness by doing things in the right order.
</para>
<para>The loop which checks process status avoids examining <code>p-&gt;status</code>
until it sees that status has been validly stored.  This is to make sure
that the status cannot change in the middle of accessing it.  Once
<code>p-&gt;have_status</code> is set, it means that the child process is stopped
or terminated, and in either case, it cannot stop or terminate again
until the program has taken notice.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Usage">Atomic Usage Patterns</a>, for more
information about coping with interruptions during accesses of a
variable.
</para>
<para>Here is another way you can test whether the handler has run since the
last time you checked.  This technique uses a counter which is never
changed outside the handler.  Instead of clearing the count, the program
remembers the previous value and sees whether it has changed since the
previous check.  The advantage of this method is that different parts of
the program can check independently, each part checking whether there
has been a signal since that part last checked.
</para>
<div class="example">
<pre class="example">sig_atomic_t process_status_change;

sig_atomic_t last_process_status_change;

…
{
  sig_atomic_t prev = last_process_status_change;
  last_process_status_change = process_status_change;
  if (last_process_status_change != prev) {
    struct process *p;
    for (p = process_list; p; p = p-&gt;next)
      if (p-&gt;have_status) {
        … <span class="roman">Examine <code>p-&gt;status</code></span> …
      }
  }
}
</pre></div>

<hr>
</div>
<div class="subsection" xml:id="glibc-Nonreentrancy">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access" accesskey="n" rel="next">Atomic Data Access and Signal Handling</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Merged-Signals" accesskey="p" rel="prev">Signals Close Together Merge into One</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signal-Handling-and-Nonreentrant-Functions"></span><h4 class="subsection">24.4.6 Signal Handling and Nonreentrant Functions</title>
<span xml:id="glibc-index-restrictions-on-signal-handler-functions"></span>

<para>Handler functions usually don’t do very much.  The best practice is to
write a handler that does nothing but set an external variable that the
program checks regularly, and leave all serious work to the program.
This is best because the handler can be called asynchronously, at
unpredictable times—perhaps in the middle of a primitive function, or
even between the beginning and the end of a C operator that requires
multiple instructions.  The data structures being manipulated might
therefore be in an inconsistent state when the handler function is
invoked.  Even copying one <code>int</code> variable into another can take two
instructions on most machines.
</para>
<para>This means you have to be very careful about what you do in a signal
handler.
</para>
<ul>
<li> <span xml:id="glibc-index-volatile-declarations"></span>
If your handler needs to access any global variables from your program,
declare those variables <code>volatile</code>.  This tells the compiler that
the value of the variable might change asynchronously, and inhibits
certain optimizations that would be invalidated by such modifications.

</li><li> <span xml:id="glibc-index-reentrant-functions"></span>
If you call a function in the handler, make sure it is <emphasis>reentrant</emphasis>
with respect to signals, or else make sure that the signal cannot
interrupt a call to a related function.
</li></ul>

<para>A function can be non-reentrant if it uses memory that is not on the
stack.
</para>
<ul>
<li> If a function uses a static variable or a global variable, or a
dynamically-allocated object that it finds for itself, then it is
non-reentrant and any two calls to the function can interfere.

<para>For example, suppose that the signal handler uses <code>gethostbyname</code>.
This function returns its value in a static object, reusing the same
object each time.  If the signal happens to arrive during a call to
<code>gethostbyname</code>, or even after one (while the program is still
using the value), it will clobber the value that the program asked for.
</para>
<para>However, if the program does not use <code>gethostbyname</code> or any other
function that returns information in the same object, or if it always
blocks signals around each use, then you are safe.
</para>
<para>There are a large number of library functions that return values in a
fixed object, always reusing the same object in this fashion, and all of
them cause the same problem.  Function descriptions in this manual
always mention this behavior.
</para>
</li><li> If a function uses and modifies an object that you supply, then it is
potentially non-reentrant; two calls can interfere if they use the same
object.

<para>This case arises when you do I/O using streams.  Suppose that the
signal handler prints a message with <code>fprintf</code>.  Suppose that the
program was in the middle of an <code>fprintf</code> call using the same
stream when the signal was delivered.  Both the signal handler’s message
and the program’s data could be corrupted, because both calls operate on
the same data structure—the stream itself.
</para>
<para>However, if you know that the stream that the handler uses cannot
possibly be used by the program at a time when signals can arrive, then
you are safe.  It is no problem if the program uses some other stream.
</para>
</li><li> On most systems, <code>malloc</code> and <code>free</code> are not reentrant,
because they use a static data structure which records what memory
blocks are free.  As a result, no library functions that allocate or
free memory are reentrant.  This includes functions that allocate space
to store a result.

<para>The best way to avoid the need to allocate memory in a handler is to
allocate in advance space for signal handlers to use.
</para>
<para>The best way to avoid freeing memory in a handler is to flag or record
the objects to be freed, and have the program check from time to time
whether anything is waiting to be freed.  But this must be done with
care, because placing an object on a chain is not atomic, and if it is
interrupted by another signal handler that does the same thing, you
could “lose” one of the objects.
</para>


</li><li> Any function that modifies <code>errno</code> is non-reentrant, but you can
correct for this: in the handler, save the original value of
<code>errno</code> and restore it before returning normally.  This prevents
errors that occur within the signal handler from being confused with
errors from system calls at the point the program is interrupted to run
the handler.

<para>This technique is generally applicable; if you want to call in a handler
a function that modifies a particular object in memory, you can make
this safe by saving and restoring that object.
</para>
</li><li> Merely reading from a memory object is safe provided that you can deal
with any of the values that might appear in the object at a time when
the signal can be delivered.  Keep in mind that assignment to some data
types requires more than one instruction, which means that the handler
could run “in the middle of” an assignment to the variable if its type
is not atomic.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access">Atomic Data Access and Signal Handling</a>.

</li><li> Merely writing into a memory object is safe as long as a sudden change
in the value, at any time when the handler might run, will not disturb
anything.
</li></ul>

<hr>
</div>
<div class="subsection" xml:id="glibc-Atomic-Data-Access">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Nonreentrancy" accesskey="p" rel="prev">Signal Handling and Nonreentrant Functions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="u" rel="up">Defining Signal Handlers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Atomic-Data-Access-and-Signal-Handling"></span><h4 class="subsection">24.4.7 Atomic Data Access and Signal Handling</title>

<para>Whether the data in your application concerns atoms, or mere text, you
have to be careful about the fact that access to a single datum is not
necessarily <emphasis>atomic</emphasis>.  This means that it can take more than one
instruction to read or write a single object.  In such cases, a signal
handler might be invoked in the middle of reading or writing the object.
</para>
<para>There are three ways you can cope with this problem.  You can use data
types that are always accessed atomically; you can carefully arrange
that nothing untoward happens if an access is interrupted, or you can
block all signals around any access that had better not be interrupted
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals">Blocking Signals</a>).
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Non_002datomic-Example" accesskey="1">Problems with Non-Atomic Access</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Types" accesskey="2">Atomic Types</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Usage" accesskey="3">Atomic Usage Patterns</a></li>
</ul>
<hr>
<div class="subsubsection" xml:id="glibc-Non_002datomic-Example">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Types" accesskey="n" rel="next">Atomic Types</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access" accesskey="u" rel="up">Atomic Data Access and Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Problems-with-Non_002dAtomic-Access"></span><h4 class="subsubsection">24.4.7.1 Problems with Non-Atomic Access</title>

<para>Here is an example which shows what can happen if a signal handler runs
in the middle of modifying a variable.  (Interrupting the reading of a
variable can also lead to paradoxical results, but here we only show
writing.)
</para>
<div class="example">
<pre class="example">#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;

volatile struct two_words { int a, b; } memory;

void
handler(int signum)
{
   printf ("%d,%d\n", memory.a, memory.b);
   alarm (1);
}

</pre><pre class="example">int
main (void)
{
   static struct two_words zeros = { 0, 0 }, ones = { 1, 1 };
   signal (SIGALRM, handler);
   memory = zeros;
   alarm (1);
   while (1)
     {
       memory = zeros;
       memory = ones;
     }
}
</pre></div>

<para>This program fills <code>memory</code> with zeros, ones, zeros, ones,
alternating forever; meanwhile, once per second, the alarm signal handler
prints the current contents.  (Calling <code>printf</code> in the handler is
safe in this program because it is certainly not being called outside
the handler when the signal happens.)
</para>
<para>Clearly, this program can print a pair of zeros or a pair of ones.  But
that’s not all it can do!  On most machines, it takes several
instructions to store a new value in <code>memory</code>, and the value is
stored one word at a time.  If the signal is delivered in between these
instructions, the handler might find that <code>memory.a</code> is zero and
<code>memory.b</code> is one (or vice versa).
</para>
<para>On some machines it may be possible to store a new value in
<code>memory</code> with just one instruction that cannot be interrupted.  On
these machines, the handler will always print two zeros or two ones.
</para>
<hr>
</div>
<div class="subsubsection" xml:id="glibc-Atomic-Types">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Usage" accesskey="n" rel="next">Atomic Usage Patterns</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Non_002datomic-Example" accesskey="p" rel="prev">Problems with Non-Atomic Access</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access" accesskey="u" rel="up">Atomic Data Access and Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Atomic-Types-1"></span><h4 class="subsubsection">24.4.7.2 Atomic Types</title>

<para>To avoid uncertainty about interrupting access to a variable, you can
use a particular data type for which access is always atomic:
<code>sig_atomic_t</code>.  Reading and writing this data type is guaranteed
to happen in a single instruction, so there’s no way for a handler to
run “in the middle” of an access.
</para>
<para>The type <code>sig_atomic_t</code> is always an integer data type, but which
one it is, and how many bits it contains, may vary from machine to
machine.
</para>
<dl class="def">
<dt xml:id="glibc-index-sig_005fatomic_005ft"><span class="category">Data Type: </span><span><strong>sig_atomic_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sig_005fatomic_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is an integer data type.  Objects of this type are always accessed
atomically.
</para></dd></dl>

<para>In practice, you can assume that <code>int</code> is atomic.
You can also assume that pointer
types are atomic; that is very convenient.  Both of these assumptions
are true on all of the machines that the GNU C Library supports and on
all POSIX systems we know of.
</para>
<hr>
</div>
<div class="subsubsection" xml:id="glibc-Atomic-Usage">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Types" accesskey="p" rel="prev">Atomic Types</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access" accesskey="u" rel="up">Atomic Data Access and Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Atomic-Usage-Patterns"></span><h4 class="subsubsection">24.4.7.3 Atomic Usage Patterns</title>

<para>Certain patterns of access avoid any problem even if an access is
interrupted.  For example, a flag which is set by the handler, and
tested and cleared by the main program from time to time, is always safe
even if access actually requires two instructions.  To show that this is
so, we must consider each access that could be interrupted, and show
that there is no problem if it is interrupted.
</para>
<para>An interrupt in the middle of testing the flag is safe because either it’s
recognized to be nonzero, in which case the precise value doesn’t
matter, or it will be seen to be nonzero the next time it’s tested.
</para>
<para>An interrupt in the middle of clearing the flag is no problem because
either the value ends up zero, which is what happens if a signal comes
in just before the flag is cleared, or the value ends up nonzero, and
subsequent events occur as if the signal had come in just after the flag
was cleared.  As long as the code handles both of these cases properly,
it can also handle a signal in the middle of clearing the flag.  (This
is an example of the sort of reasoning you need to do to figure out
whether non-atomic usage is safe.)
</para>
<para>Sometimes you can ensure uninterrupted access to one object by
protecting its use with another object, perhaps one whose type
guarantees atomicity.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Merged-Signals">Signals Close Together Merge into One</a>, for an example.
</para>
<hr>
</div>
</div>
</div>
<sect xml:id="glibc-Interrupted-Primitives">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Generating-Signals" accesskey="n" rel="next">Generating Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Defining-Handlers" accesskey="p" rel="prev">Defining Signal Handlers</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Primitives-Interrupted-by-Signals"></span><h3 class="section">24.5 Primitives Interrupted by Signals</title>

<para>A signal can arrive and be handled while an I/O primitive such as
<code>open</code> or <code>read</code> is waiting for an I/O device.  If the signal
handler returns, the system faces the question: what should happen next?
</para>
<para>POSIX specifies one approach: make the primitive fail right away.  The
error code for this kind of failure is <code>EINTR</code>.  This is flexible,
but usually inconvenient.  Typically, POSIX applications that use signal
handlers must check for <code>EINTR</code> after each library function that
can return it, in order to try the call again.  Often programmers forget
to check, which is a common source of error.
</para>
<para>The GNU C Library provides a convenient way to retry a call after a
temporary failure, with the macro <code>TEMP_FAILURE_RETRY</code>:
</para>
<dl class="def">
<dt xml:id="glibc-index-TEMP_005fFAILURE_005fRETRY"><span class="category">Macro: </span><span><strong>TEMP_FAILURE_RETRY</strong> <emphasis>(<var>expression</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-TEMP_005fFAILURE_005fRETRY" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This macro evaluates <var>expression</var> once, and examines its value as
type <code>long int</code>.  If the value equals <code>-1</code>, that indicates a
failure and <code>errno</code> should be set to show what kind of failure.
If it fails and reports error code <code>EINTR</code>,
<code>TEMP_FAILURE_RETRY</code> evaluates it again, and over and over until
the result is not a temporary failure.
</para>
<para>The value returned by <code>TEMP_FAILURE_RETRY</code> is whatever value
<var>expression</var> produced.
</para></dd></dl>

<para>BSD avoids <code>EINTR</code> entirely and provides a more convenient
approach: to restart the interrupted primitive, instead of making it
fail.  If you choose this approach, you need not be concerned with
<code>EINTR</code>.
</para>
<para>You can choose either approach with the GNU C Library.  If you use
<code>sigaction</code> to establish a signal handler, you can specify how that
handler should behave.  If you specify the <code>SA_RESTART</code> flag,
return from that handler will resume a primitive; otherwise, return from
that handler will cause <code>EINTR</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Flags-for-Sigaction">Flags for <code>sigaction</code></a>.
</para>
<para>Another way to specify the choice is with the <code>siginterrupt</code>
function.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#BSD-Signal-Handling">BSD Signal Handling</a>.
</para>
<para>When you don’t specify with <code>sigaction</code> or <code>siginterrupt</code> what
a particular handler should do, it uses a default choice.  The default
choice in the GNU C Library is to make primitives fail with <code>EINTR</code>.
<span xml:id="glibc-index-EINTR_002c-and-restarting-interrupted-primitives"></span>
<span xml:id="glibc-index-restarting-interrupted-primitives"></span>
<span xml:id="glibc-index-interrupting-primitives"></span>
<span xml:id="glibc-index-primitives_002c-interrupting"></span>
</para>
<para>The description of each primitive affected by this issue
lists <code>EINTR</code> among the error codes it can return.
</para>
<para>There is one situation where resumption never happens no matter which
choice you make: when a data-transfer function such as <code>read</code> or
<code>write</code> is interrupted by a signal after transferring part of the
data.  In this case, the function returns the number of bytes already
transferred, indicating partial success.
</para>
<para>This might at first appear to cause unreliable behavior on
record-oriented devices (including datagram sockets; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Datagrams">Datagram Socket Operations</a>),
where splitting one <code>read</code> or <code>write</code> into two would read or
write two records.  Actually, there is no problem, because interruption
after a partial transfer cannot happen on such devices; they always
transfer an entire record in one burst, with no waiting once data
transfer has started.
</para>
<hr>
</div>
<sect xml:id="glibc-Generating-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="n" rel="next">Blocking Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupted-Primitives" accesskey="p" rel="prev">Primitives Interrupted by Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Generating-Signals-1"></span><h3 class="section">24.6 Generating Signals</title>
<span xml:id="glibc-index-sending-signals"></span>
<span xml:id="glibc-index-raising-signals"></span>
<span xml:id="glibc-index-signals_002c-generating"></span>

<para>Besides signals that are generated as a result of a hardware trap or
interrupt, your program can explicitly send signals to itself or to
another process.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Yourself" accesskey="1">Signaling Yourself</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Another-Process" accesskey="2">Signaling Another Process</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-for-kill" accesskey="3">Permission for using <code>kill</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Kill-Example" accesskey="4">Using <code>kill</code> for Communication</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Signaling-Yourself">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Another-Process" accesskey="n" rel="next">Signaling Another Process</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Generating-Signals" accesskey="u" rel="up">Generating Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signaling-Yourself-1"></span><h4 class="subsection">24.6.1 Signaling Yourself</title>

<para>A process can send itself a signal with the <code>raise</code> function.  This
function is declared in <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-5"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-raise"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>raise</strong> <emphasis>(int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-raise" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>raise</code> function sends the signal <var>signum</var> to the calling
process.  It returns zero if successful and a nonzero value if it fails.
About the only reason for failure would be if the value of <var>signum</var>
is invalid.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-gsignal"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>gsignal</strong> <emphasis>(int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-gsignal" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>gsignal</code> function does the same thing as <code>raise</code>; it is
provided only for compatibility with SVID.
</para></dd></dl>

<para>One convenient use for <code>raise</code> is to reproduce the default behavior
of a signal that you have trapped.  For instance, suppose a user of your
program types the SUSP character (usually <kbd>C-z</kbd>; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Special-Characters">Special Characters</a>) to send it an interactive stop signal
(<code>SIGTSTP</code>), and you want to clean up some internal data buffers
before stopping.  You might set this up like this:
</para>

<div class="example">
<pre class="example">#include &lt;signal.h&gt;

/* <span class="roman">When a stop signal arrives, set the action back to the default
   and then resend the signal after doing cleanup actions.</span> */

void
tstp_handler (int sig)
{
  signal (SIGTSTP, SIG_DFL);
  /* <span class="roman">Do cleanup actions here.</span> */
  …
  raise (SIGTSTP);
}

/* <span class="roman">When the process is continued again, restore the signal handler.</span> */

void
cont_handler (int sig)
{
  signal (SIGCONT, cont_handler);
  signal (SIGTSTP, tstp_handler);
}

</pre><pre class="example">/* <span class="roman">Enable both handlers during program initialization.</span> */

int
main (void)
{
  signal (SIGCONT, cont_handler);
  signal (SIGTSTP, tstp_handler);
  …
}
</pre></div>

<para><strong>Portability note:</strong> <code>raise</code> was invented by the &isoc;
committee.  Older systems may not support it, so using <code>kill</code> may
be more portable.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Another-Process">Signaling Another Process</a>.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Signaling-Another-Process">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-for-kill" accesskey="n" rel="next">Permission for using <code>kill</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Yourself" accesskey="p" rel="prev">Signaling Yourself</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Generating-Signals" accesskey="u" rel="up">Generating Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signaling-Another-Process-1"></span><h4 class="subsection">24.6.2 Signaling Another Process</title>

<span xml:id="glibc-index-killing-a-process"></span>
<para>The <code>kill</code> function can be used to send a signal to another process.
In spite of its name, it can be used for a lot of things other than
causing a process to terminate.  Some examples of situations where you
might want to send signals between processes are:
</para>
<ul>
<li> A parent process starts a child to perform a task—perhaps having the
child running an infinite loop—and then terminates the child when the
task is no longer needed.

</li><li> A process executes as part of a group, and needs to terminate or notify
the other processes in the group when an error or other event occurs.

</li><li> Two processes need to synchronize while working together.
</li></ul>

<para>This section assumes that you know a little bit about how processes
work.  For more information on this subject, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Processes">Processes</a>.
</para>
<para>The <code>kill</code> function is declared in <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-6"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-kill"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>kill</strong> <emphasis>(pid_t <var>pid</var>, int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-kill" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>kill</code> function sends the signal <var>signum</var> to the process
or process group specified by <var>pid</var>.  Besides the signals listed in
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Signals">Standard Signals</a>, <var>signum</var> can also have a value of zero to
check the validity of the <var>pid</var>.
</para>
<para>The <var>pid</var> specifies the process or process group to receive the
signal:
</para>
<dl compact="compact">
<dt><span><code><var>pid</var> &gt; 0</code></span></dt>
<dd><para>The process whose identifier is <var>pid</var>.  (On Linux, the signal is
sent to the entire process even if <var>pid</var> is a thread ID distinct
from the process ID.)
</para>
</dd>
<dt><span><code><var>pid</var> == 0</code></span></dt>
<dd><para>All processes in the same process group as the sender.
</para>
</dd>
<dt><span><code><var>pid</var> &lt; -1</code></span></dt>
<dd><para>The process group whose identifier is -<var>pid</var>.
</para>
</dd>
<dt><span><code><var>pid</var> == -1</code></span></dt>
<dd><para>If the process is privileged, send the signal to all processes except
for some special system processes.  Otherwise, send the signal to all
processes with the same effective user ID.
</para></dd>
</dl>

<para>A process can send a signal to itself with a call like <code>kill&nbsp;(getpid(),&nbsp;<var>signum</var>)</code>.  If <code>kill</code> is used by a process to send
a signal to itself, and the signal is not blocked, then <code>kill</code>
delivers at least one signal (which might be some other pending
unblocked signal instead of the signal <var>signum</var>) to that process
before it returns.
</para>
<para>The return value from <code>kill</code> is zero if the signal can be sent
successfully.  Otherwise, no signal is sent, and a value of <code>-1</code> is
returned.  If <var>pid</var> specifies sending a signal to several processes,
<code>kill</code> succeeds if it can send the signal to at least one of them.
There’s no way you can tell which of the processes got the signal
or whether all of them did.
</para>
<para>The following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>signum</var> argument is an invalid or unsupported number.
</para>
</dd>
<dt><span><code>EPERM</code></span></dt>
<dd><para>You do not have the privilege to send a signal to the process or any of
the processes in the process group named by <var>pid</var>.
</para>
</dd>
<dt><span><code>ESRCH</code></span></dt>
<dd><para>The <var>pid</var> argument does not refer to an existing process or group.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-tgkill"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>tgkill</strong> <emphasis>(pid_t <var>pid</var>, pid_t <var>tid</var>, int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tgkill" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>tgkill</code> function sends the signal <var>signum</var> to the thread
or process with ID <var>tid</var>, like the <code>kill</code> function, but only
if the process ID of the thread <var>tid</var> is equal to <var>pid</var>.  If
the target thread belongs to another process, the function fails with
<code>ESRCH</code>.
</para>
<para>The <code>tgkill</code> function can be used to avoid sending a signal to a
thread in the wrong process if the caller ensures that the passed
<var>pid</var> value is not reused by the kernel (for example, if it is the
process ID of the current process, as returned by <code>getpid</code>).
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-killpg"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>killpg</strong> <emphasis>(int <var>pgid</var>, int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-killpg" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This is similar to <code>kill</code>, but sends signal <var>signum</var> to the
process group <var>pgid</var>.  This function is provided for compatibility
with BSD; using <code>kill</code> to do this is more portable.
</para></dd></dl>

<para>As a simple example of <code>kill</code>, the call <code>kill&nbsp;(getpid&nbsp;(),&nbsp;<var>sig</var>)</code> has the same effect as <code>raise&nbsp;(<var>sig</var>)</code>.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Permission-for-kill">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Kill-Example" accesskey="n" rel="next">Using <code>kill</code> for Communication</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signaling-Another-Process" accesskey="p" rel="prev">Signaling Another Process</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Generating-Signals" accesskey="u" rel="up">Generating Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Permission-for-using-kill"></span><h4 class="subsection">24.6.3 Permission for using <code>kill</code></title>

<para>There are restrictions that prevent you from using <code>kill</code> to send
signals to any random process.  These are intended to prevent antisocial
behavior such as arbitrarily killing off processes belonging to another
user.  In typical use, <code>kill</code> is used to pass signals between
parent, child, and sibling processes, and in these situations you
normally do have permission to send signals.  The only common exception
is when you run a setuid program in a child process; if the program
changes its real UID as well as its effective UID, you may not have
permission to send a signal.  The <code>su</code> program does this.
</para>
<para>Whether a process has permission to send a signal to another process
is determined by the user IDs of the two processes.  This concept is
discussed in detail in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Persona">The Persona of a Process</a>.
</para>
<para>Generally, for a process to be able to send a signal to another process,
either the sending process must belong to a privileged user (like
‘<filename>root</filename>’), or the real or effective user ID of the sending process
must match the real or effective user ID of the receiving process.  If
the receiving process has changed its effective user ID from the
set-user-ID mode bit on its process image file, then the owner of the
process image file is used in place of its current effective user ID.
In some implementations, a parent process might be able to send signals
to a child process even if the user ID’s don’t match, and other
implementations might enforce other restrictions.
</para>
<para>The <code>SIGCONT</code> signal is a special case.  It can be sent if the
sender is part of the same session as the receiver, regardless of
user IDs.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Kill-Example">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Permission-for-kill" accesskey="p" rel="prev">Permission for using <code>kill</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Generating-Signals" accesskey="u" rel="up">Generating Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Using-kill-for-Communication"></span><h4 class="subsection">24.6.4 Using <code>kill</code> for Communication</title>
<span xml:id="glibc-index-interprocess-communication_002c-with-signals"></span>
<para>Here is a longer example showing how signals can be used for
interprocess communication.  This is what the <code>SIGUSR1</code> and
<code>SIGUSR2</code> signals are provided for.  Since these signals are fatal
by default, the process that is supposed to receive them must trap them
through <code>signal</code> or <code>sigaction</code>.
</para>
<para>In this example, a parent process forks a child process and then waits
for the child to complete its initialization.  The child process tells
the parent when it is ready by sending it a <code>SIGUSR1</code> signal, using
the <code>kill</code> function.
</para>
<div class="example">
<pre class="example">
</pre><pre class="example">#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
</pre><pre class="example">
/* <span class="roman">When a <code>SIGUSR1</code> signal arrives, set this variable.</span> */
volatile sig_atomic_t usr_interrupt = 0;

void
synch_signal (int sig)
{
  usr_interrupt = 1;
}

/* <span class="roman">The child process executes this function.</span> */
void
child_function (void)
{
  /* <span class="roman">Perform initialization.</span> */
  printf ("I'm here!!!  My pid is %d.\n", (int) getpid ());

  /* <span class="roman">Let parent know you’re done.</span> */
  kill (getppid (), SIGUSR1);

  /* <span class="roman">Continue with execution.</span> */
  puts ("Bye, now....");
  exit (0);
}

int
main (void)
{
  struct sigaction usr_action;
  sigset_t block_mask;
  pid_t child_id;

  /* <span class="roman">Establish the signal handler.</span> */
  sigfillset (&amp;block_mask);
  usr_action.sa_handler = synch_signal;
  usr_action.sa_mask = block_mask;
  usr_action.sa_flags = 0;
  sigaction (SIGUSR1, &amp;usr_action, NULL);

  /* <span class="roman">Create the child process.</span> */
  child_id = fork ();
  if (child_id == 0)
    child_function ();          /* <span class="roman">Does not return.</span> */

</pre><pre class="example">  /* <span class="roman">Busy wait for the child to send a signal.</span> */
  while (!usr_interrupt)
    ;
</pre><pre class="example">
  /* <span class="roman">Now continue execution.</span> */
  puts ("That's all, folks!");

  return 0;
}
</pre></div>

<para>This example uses a busy wait, which is bad, because it wastes CPU
cycles that other programs could otherwise use.  It is better to ask the
system to wait until the signal arrives.  See the example in
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal">Waiting for a Signal</a>.
</para>
<hr>
</div>
</div>
<sect xml:id="glibc-Blocking-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal" accesskey="n" rel="next">Waiting for a Signal</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Generating-Signals" accesskey="p" rel="prev">Generating Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Blocking-Signals-1"></span><h3 class="section">24.7 Blocking Signals</title>
<span xml:id="glibc-index-blocking-signals"></span>

<para>Blocking a signal means telling the operating system to hold it and
deliver it later.  Generally, a program does not block signals
indefinitely—it might as well ignore them by setting their actions to
<code>SIG_IGN</code>.  But it is useful to block signals briefly, to prevent
them from interrupting sensitive operations.  For instance:
</para>
<ul>
<li> You can use the <code>sigprocmask</code> function to block signals while you
modify global variables that are also modified by the handlers for these
signals.

</li><li> You can set <code>sa_mask</code> in your <code>sigaction</code> call to block
certain signals while a particular signal handler runs.  This way, the
signal handler can run without being interrupted itself by signals.
</li></ul>


<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Why-Block" accesskey="1">Why Blocking Signals is Useful</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Sets" accesskey="2">Signal Sets</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Signal-Mask" accesskey="3">Process Signal Mask</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-for-Delivery" accesskey="4">Blocking to Test for Delivery of a Signal</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-for-Handler" accesskey="5">Blocking Signals for a Handler</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Checking-for-Pending-Signals" accesskey="6">Checking for Pending Signals</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Remembering-a-Signal" accesskey="7">Remembering a Signal to Act On Later</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Why-Block">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Sets" accesskey="n" rel="next">Signal Sets</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Why-Blocking-Signals-is-Useful"></span><h4 class="subsection">24.7.1 Why Blocking Signals is Useful</title>

<para>Temporary blocking of signals with <code>sigprocmask</code> gives you a way to
prevent interrupts during critical parts of your code.  If signals
arrive in that part of the program, they are delivered later, after you
unblock them.
</para>
<para>One example where this is useful is for sharing data between a signal
handler and the rest of the program.  If the type of the data is not
<code>sig_atomic_t</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Atomic-Data-Access">Atomic Data Access and Signal Handling</a>), then the signal
handler could run when the rest of the program has only half finished
reading or writing the data.  This would lead to confusing consequences.
</para>
<para>To make the program reliable, you can prevent the signal handler from
running while the rest of the program is examining or modifying that
data—by blocking the appropriate signal around the parts of the
program that touch the data.
</para>
<para>Blocking signals is also necessary when you want to perform a certain
action only if a signal has not arrived.  Suppose that the handler for
the signal sets a flag of type <code>sig_atomic_t</code>; you would like to
test the flag and perform the action if the flag is not set.  This is
unreliable.  Suppose the signal is delivered immediately after you test
the flag, but before the consequent action: then the program will
perform the action even though the signal has arrived.
</para>
<para>The only way to test reliably for whether a signal has yet arrived is to
test while the signal is blocked.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Signal-Sets">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Signal-Mask" accesskey="n" rel="next">Process Signal Mask</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Why-Block" accesskey="p" rel="prev">Why Blocking Signals is Useful</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Signal-Sets-1"></span><h4 class="subsection">24.7.2 Signal Sets</title>

<para>All of the signal blocking functions use a data structure called a
<emphasis>signal set</emphasis> to specify what signals are affected.  Thus, every
activity involves two stages: creating the signal set, and then passing
it as an argument to a library function.
<span xml:id="glibc-index-signal-set"></span>
</para>
<para>These facilities are declared in the header file <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-7"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-sigset_005ft"><span class="category">Data Type: </span><span><strong>sigset_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigset_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The <code>sigset_t</code> data type is used to represent a signal set.
Internally, it may be implemented as either an integer or structure
type.
</para>
<para>For portability, use only the functions described in this section to
initialize, change, and retrieve information from <code>sigset_t</code>
objects—don’t try to manipulate them directly.
</para></dd></dl>

<para>There are two ways to initialize a signal set.  You can initially
specify it to be empty with <code>sigemptyset</code> and then add specified
signals individually.  Or you can specify it to be full with
<code>sigfillset</code> and then delete specified signals individually.
</para>
<para>You must always initialize the signal set with one of these two
functions before using it in any other way.  Don’t try to set all the
signals explicitly because the <code>sigset_t</code> object might include some
other information (like a version field) that needs to be initialized as
well.  (In addition, it’s not wise to put into your program an
assumption that the system has no signals aside from the ones you know
about.)
</para>
<dl class="def">
<dt xml:id="glibc-index-sigemptyset"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigemptyset</strong> <emphasis>(sigset_t *<var>set</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigemptyset" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function initializes the signal set <var>set</var> to exclude all of the
defined signals.  It always returns <code>0</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigfillset"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigfillset</strong> <emphasis>(sigset_t *<var>set</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigfillset" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function initializes the signal set <var>set</var> to include
all of the defined signals.  Again, the return value is <code>0</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigaddset"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigaddset</strong> <emphasis>(sigset_t *<var>set</var>, int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigaddset" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function adds the signal <var>signum</var> to the signal set <var>set</var>.
All <code>sigaddset</code> does is modify <var>set</var>; it does not block or
unblock any signals.
</para>
<para>The return value is <code>0</code> on success and <code>-1</code> on failure.
The following <code>errno</code> error condition is defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>signum</var> argument doesn’t specify a valid signal.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigdelset"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigdelset</strong> <emphasis>(sigset_t *<var>set</var>, int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigdelset" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function removes the signal <var>signum</var> from the signal set
<var>set</var>.  All <code>sigdelset</code> does is modify <var>set</var>; it does not
block or unblock any signals.  The return value and error conditions are
the same as for <code>sigaddset</code>.
</para></dd></dl>

<para>Finally, there is a function to test what signals are in a signal set:
</para>
<dl class="def">
<dt xml:id="glibc-index-sigismember"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigismember</strong> <emphasis>(const sigset_t *<var>set</var>, int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigismember" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sigismember</code> function tests whether the signal <var>signum</var> is
a member of the signal set <var>set</var>.  It returns <code>1</code> if the signal
is in the set, <code>0</code> if not, and <code>-1</code> if there is an error.
</para>
<para>The following <code>errno</code> error condition is defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>signum</var> argument doesn’t specify a valid signal.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Process-Signal-Mask">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-for-Delivery" accesskey="n" rel="next">Blocking to Test for Delivery of a Signal</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Sets" accesskey="p" rel="prev">Signal Sets</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Process-Signal-Mask-1"></span><h4 class="subsection">24.7.3 Process Signal Mask</title>
<span xml:id="glibc-index-signal-mask"></span>
<span xml:id="glibc-index-process-signal-mask"></span>

<para>The collection of signals that are currently blocked is called the
<emphasis>signal mask</emphasis>.  Each process has its own signal mask.  When you
create a new process (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Creating-a-Process">Creating a Process</a>), it inherits its
parent’s mask.  You can block or unblock signals with total flexibility
by modifying the signal mask.
</para>
<para>The prototype for the <code>sigprocmask</code> function is in <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-8"></span>
</para>
<para>Note that you must not use <code>sigprocmask</code> in multi-threaded processes,
because each thread has its own signal mask and there is no single process
signal mask.  According to POSIX, the behavior of <code>sigprocmask</code> in a
multi-threaded process is “unspecified”.
Instead, use <code>pthread_sigmask</code>.
</para>
<dl class="def">
<dt xml:id="glibc-index-sigprocmask"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigprocmask</strong> <emphasis>(int <var>how</var>, const sigset_t *restrict <var>set</var>, sigset_t *restrict <var>oldset</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigprocmask" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:sigprocmask/bsd(SIG_UNBLOCK)
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sigprocmask</code> function is used to examine or change the calling
process’s signal mask.  The <var>how</var> argument determines how the signal
mask is changed, and must be one of the following values:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-SIG_005fBLOCK"><span><code>SIG_BLOCK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIG_005fBLOCK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Block the signals in <code>set</code>—add them to the existing mask.  In
other words, the new mask is the union of the existing mask and
<var>set</var>.
</para>
</dd>
<dt xml:id="glibc-index-SIG_005fUNBLOCK"><span><code>SIG_UNBLOCK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIG_005fUNBLOCK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Unblock the signals in <var>set</var>—remove them from the existing mask.
</para>
</dd>
<dt xml:id="glibc-index-SIG_005fSETMASK"><span><code>SIG_SETMASK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIG_005fSETMASK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Use <var>set</var> for the mask; ignore the previous value of the mask.
</para></dd>
</dl>

<para>The last argument, <var>oldset</var>, is used to return information about the
old process signal mask.  If you just want to change the mask without
looking at it, pass a null pointer as the <var>oldset</var> argument.
Similarly, if you want to know what’s in the mask without changing it,
pass a null pointer for <var>set</var> (in this case the <var>how</var> argument
is not significant).  The <var>oldset</var> argument is often used to
remember the previous signal mask in order to restore it later.  (Since
the signal mask is inherited over <code>fork</code> and <code>exec</code> calls, you
can’t predict what its contents are when your program starts running.)
</para>
<para>If invoking <code>sigprocmask</code> causes any pending signals to be
unblocked, at least one of those signals is delivered to the process
before <code>sigprocmask</code> returns.  The order in which pending signals
are delivered is not specified, but you can control the order explicitly
by making multiple <code>sigprocmask</code> calls to unblock various signals
one at a time.
</para>
<para>The <code>sigprocmask</code> function returns <code>0</code> if successful, and <code>-1</code>
to indicate an error.  The following <code>errno</code> error conditions are
defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>The <var>how</var> argument is invalid.
</para></dd>
</dl>

<para>You can’t block the <code>SIGKILL</code> and <code>SIGSTOP</code> signals, but
if the signal set includes these, <code>sigprocmask</code> just ignores
them instead of returning an error status.
</para>
<para>Remember, too, that blocking program error signals such as <code>SIGFPE</code>
leads to undesirable results for signals generated by an actual program
error (as opposed to signals sent with <code>raise</code> or <code>kill</code>).
This is because your program may be too broken to be able to continue
executing to a point where the signal is unblocked again.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Error-Signals">Program Error Signals</a>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Testing-for-Delivery">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-for-Handler" accesskey="n" rel="next">Blocking Signals for a Handler</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Signal-Mask" accesskey="p" rel="prev">Process Signal Mask</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Blocking-to-Test-for-Delivery-of-a-Signal"></span><h4 class="subsection">24.7.4 Blocking to Test for Delivery of a Signal</title>

<para>Now for a simple example.  Suppose you establish a handler for
<code>SIGALRM</code> signals that sets a flag whenever a signal arrives, and
your main program checks this flag from time to time and then resets it.
You can prevent additional <code>SIGALRM</code> signals from arriving in the
meantime by wrapping the critical part of the code with calls to
<code>sigprocmask</code>, like this:
</para>
<div class="example">
<pre class="example">/* <span class="roman">This variable is set by the SIGALRM signal handler.</span> */
volatile sig_atomic_t flag = 0;

int
main (void)
{
  sigset_t block_alarm;

  …

  /* <span class="roman">Initialize the signal mask.</span> */
  sigemptyset (&amp;block_alarm);
  sigaddset (&amp;block_alarm, SIGALRM);

</pre><pre class="example">  while (1)
    {
      /* <span class="roman">Check if a signal has arrived; if so, reset the flag.</span> */
      sigprocmask (SIG_BLOCK, &amp;block_alarm, NULL);
      if (flag)
        {
          <var>actions-if-not-arrived</var>
          flag = 0;
        }
      sigprocmask (SIG_UNBLOCK, &amp;block_alarm, NULL);

      …
    }
}
</pre></div>

<hr>
</div>
<div class="subsection" xml:id="glibc-Blocking-for-Handler">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Checking-for-Pending-Signals" accesskey="n" rel="next">Checking for Pending Signals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Testing-for-Delivery" accesskey="p" rel="prev">Blocking to Test for Delivery of a Signal</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Blocking-Signals-for-a-Handler"></span><h4 class="subsection">24.7.5 Blocking Signals for a Handler</title>
<span xml:id="glibc-index-blocking-signals_002c-in-a-handler"></span>

<para>When a signal handler is invoked, you usually want it to be able to
finish without being interrupted by another signal.  From the moment the
handler starts until the moment it finishes, you must block signals that
might confuse it or corrupt its data.
</para>
<para>When a handler function is invoked on a signal, that signal is
automatically blocked (in addition to any other signals that are already
in the process’s signal mask) during the time the handler is running.
If you set up a handler for <code>SIGTSTP</code>, for instance, then the
arrival of that signal forces further <code>SIGTSTP</code> signals to wait
during the execution of the handler.
</para>
<para>However, by default, other kinds of signals are not blocked; they can
arrive during handler execution.
</para>
<para>The reliable way to block other kinds of signals during the execution of
the handler is to use the <code>sa_mask</code> member of the <code>sigaction</code>
structure.
</para>
<para>Here is an example:
</para>
<div class="example">
<pre class="example">#include &lt;signal.h&gt;
#include &lt;stddef.h&gt;

void catch_stop ();

void
install_handler (void)
{
  struct sigaction setup_action;
  sigset_t block_mask;

  sigemptyset (&amp;block_mask);
  /* <span class="roman">Block other terminal-generated signals while handler runs.</span> */
  sigaddset (&amp;block_mask, SIGINT);
  sigaddset (&amp;block_mask, SIGQUIT);
  setup_action.sa_handler = catch_stop;
  setup_action.sa_mask = block_mask;
  setup_action.sa_flags = 0;
  sigaction (SIGTSTP, &amp;setup_action, NULL);
}
</pre></div>

<para>This is more reliable than blocking the other signals explicitly in the
code for the handler.  If you block signals explicitly in the handler,
you can’t avoid at least a short interval at the beginning of the
handler where they are not yet blocked.
</para>
<para>You cannot remove signals from the process’s current mask using this
mechanism.  However, you can make calls to <code>sigprocmask</code> within
your handler to block or unblock signals as you wish.
</para>
<para>In any case, when the handler returns, the system restores the mask that
was in place before the handler was entered.  If any signals that become
unblocked by this restoration are pending, the process will receive
those signals immediately, before returning to the code that was
interrupted.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Checking-for-Pending-Signals">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Remembering-a-Signal" accesskey="n" rel="next">Remembering a Signal to Act On Later</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-for-Handler" accesskey="p" rel="prev">Blocking Signals for a Handler</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Checking-for-Pending-Signals-1"></span><h4 class="subsection">24.7.6 Checking for Pending Signals</title>
<span xml:id="glibc-index-pending-signals_002c-checking-for"></span>
<span xml:id="glibc-index-blocked-signals_002c-checking-for"></span>
<span xml:id="glibc-index-checking-for-pending-signals"></span>

<para>You can find out which signals are pending at any time by calling
<code>sigpending</code>.  This function is declared in <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-9"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-sigpending"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigpending</strong> <emphasis>(sigset_t *<var>set</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigpending" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sigpending</code> function stores information about pending signals
in <var>set</var>.  If there is a pending signal that is blocked from
delivery, then that signal is a member of the returned set.  (You can
test whether a particular signal is a member of this set using
<code>sigismember</code>; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Sets">Signal Sets</a>.)
</para>
<para>The return value is <code>0</code> if successful, and <code>-1</code> on failure.
</para></dd></dl>

<para>Testing whether a signal is pending is not often useful.  Testing when
that signal is not blocked is almost certainly bad design.
</para>
<para>Here is an example.
</para>
<div class="example">
<pre class="example">#include &lt;signal.h&gt;
#include &lt;stddef.h&gt;

sigset_t base_mask, waiting_mask;

sigemptyset (&amp;base_mask);
sigaddset (&amp;base_mask, SIGINT);
sigaddset (&amp;base_mask, SIGTSTP);

/* <span class="roman">Block user interrupts while doing other processing.</span> */
sigprocmask (SIG_SETMASK, &amp;base_mask, NULL);
…

/* <span class="roman">After a while, check to see whether any signals are pending.</span> */
sigpending (&amp;waiting_mask);
if (sigismember (&amp;waiting_mask, SIGINT)) {
  /* <span class="roman">User has tried to kill the process.</span> */
}
else if (sigismember (&amp;waiting_mask, SIGTSTP)) {
  /* <span class="roman">User has tried to stop the process.</span> */
}
</pre></div>

<para>Remember that if there is a particular signal pending for your process,
additional signals of that same type that arrive in the meantime might
be discarded.  For example, if a <code>SIGINT</code> signal is pending when
another <code>SIGINT</code> signal arrives, your program will probably only
see one of them when you unblock this signal.
</para>
<para><strong>Portability Note:</strong> The <code>sigpending</code> function is new in
POSIX.1.  Older systems have no equivalent facility.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Remembering-a-Signal">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Checking-for-Pending-Signals" accesskey="p" rel="prev">Checking for Pending Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="u" rel="up">Blocking Signals</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Remembering-a-Signal-to-Act-On-Later"></span><h4 class="subsection">24.7.7 Remembering a Signal to Act On Later</title>

<para>Instead of blocking a signal using the library facilities, you can get
almost the same results by making the handler set a flag to be tested
later, when you “unblock”.  Here is an example:
</para>
<div class="example">
<pre class="example">/* <span class="roman">If this flag is nonzero, don’t handle the signal right away.</span> */
volatile sig_atomic_t signal_pending;

/* <span class="roman">This is nonzero if a signal arrived and was not handled.</span> */
volatile sig_atomic_t defer_signal;

void
handler (int signum)
{
  if (defer_signal)
    signal_pending = signum;
  else
    … /* <span class="roman">“Really” handle the signal.</span> */
}

…

void
update_mumble (int frob)
{
  /* <span class="roman">Prevent signals from having immediate effect.</span> */
  defer_signal++;
  /* <span class="roman">Now update <code>mumble</code>, without worrying about interruption.</span> */
  mumble.a = 1;
  mumble.b = hack ();
  mumble.c = frob;
  /* <span class="roman">We have updated <code>mumble</code>.  Handle any signal that came in.</span> */
  defer_signal&#45;&#45;;
  if (defer_signal == 0 &amp;&amp; signal_pending != 0)
    raise (signal_pending);
}
</pre></div>

<para>Note how the particular signal that arrives is stored in
<code>signal_pending</code>.  That way, we can handle several types of
inconvenient signals with the same mechanism.
</para>
<para>We increment and decrement <code>defer_signal</code> so that nested critical
sections will work properly; thus, if <code>update_mumble</code> were called
with <code>signal_pending</code> already nonzero, signals would be deferred
not only within <code>update_mumble</code>, but also within the caller.  This
is also why we do not check <code>signal_pending</code> if <code>defer_signal</code>
is still nonzero.
</para>
<para>The incrementing and decrementing of <code>defer_signal</code> each require more
than one instruction; it is possible for a signal to happen in the
middle.  But that does not cause any problem.  If the signal happens
early enough to see the value from before the increment or decrement,
that is equivalent to a signal which came before the beginning of the
increment or decrement, which is a case that works properly.
</para>
<para>It is absolutely vital to decrement <code>defer_signal</code> before testing
<code>signal_pending</code>, because this avoids a subtle bug.  If we did
these things in the other order, like this,
</para>
<div class="example">
<pre class="example">  if (defer_signal == 1 &amp;&amp; signal_pending != 0)
    raise (signal_pending);
  defer_signal&#45;&#45;;
</pre></div>

<para>then a signal arriving in between the <code>if</code> statement and the decrement
would be effectively “lost” for an indefinite amount of time.  The
handler would merely set <code>defer_signal</code>, but the program having
already tested this variable, it would not test the variable again.
</para>
<span xml:id="glibc-index-timing-error-in-signal-handling"></span>
<para>Bugs like these are called <emphasis>timing errors</emphasis>.  They are especially bad
because they happen only rarely and are nearly impossible to reproduce.
You can’t expect to find them with a debugger as you would find a
reproducible bug.  So it is worth being especially careful to avoid
them.
</para>
<para>(You would not be tempted to write the code in this order, given the use
of <code>defer_signal</code> as a counter which must be tested along with
<code>signal_pending</code>.  After all, testing for zero is cleaner than
testing for one.  But if you did not use <code>defer_signal</code> as a
counter, and gave it values of zero and one only, then either order
might seem equally simple.  This is a further advantage of using a
counter for <code>defer_signal</code>: it will reduce the chance you will
write the code in the wrong order and create a subtle bug.)
</para>
<hr>
</div>
</div>
<sect xml:id="glibc-Waiting-for-a-Signal">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Stack" accesskey="n" rel="next">Using a Separate Signal Stack</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Blocking-Signals" accesskey="p" rel="prev">Blocking Signals</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Waiting-for-a-Signal-1"></span><h3 class="section">24.8 Waiting for a Signal</title>
<span xml:id="glibc-index-waiting-for-a-signal"></span>
<span xml:id="glibc-index-pause-function"></span>

<para>If your program is driven by external events, or uses signals for
synchronization, then when it has nothing to do it should probably wait
until a signal arrives.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Using-Pause" accesskey="1">Using <code>pause</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Pause-Problems" accesskey="2">Problems with <code>pause</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sigsuspend" accesskey="3">Using <code>sigsuspend</code></a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Using-Pause">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Pause-Problems" accesskey="n" rel="next">Problems with <code>pause</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal" accesskey="u" rel="up">Waiting for a Signal</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Using-pause"></span><h4 class="subsection">24.8.1 Using <code>pause</code></title>

<para>The simple way to wait until a signal arrives is to call <code>pause</code>.
Please read about its disadvantages, in the following section, before
you use it.
</para>
<dl class="def">
<dt xml:id="glibc-index-pause"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>pause</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-pause" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:sigprocmask/!bsd!linux
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>pause</code> function suspends program execution until a signal
arrives whose action is either to execute a handler function, or to
terminate the process.
</para>
<para>If the signal causes a handler function to be executed, then
<code>pause</code> returns.  This is considered an unsuccessful return (since
“successful” behavior would be to suspend the program forever), so the
return value is <code>-1</code>.  Even if you specify that other primitives
should resume when a system handler returns (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupted-Primitives">Primitives Interrupted by Signals</a>), this has no effect on <code>pause</code>; it always fails when a
signal is handled.
</para>
<para>The following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINTR</code></span></dt>
<dd><para>The function was interrupted by delivery of a signal.
</para></dd>
</dl>

<para>If the signal causes program termination, <code>pause</code> doesn’t return
(obviously).
</para>
<para>This function is a cancellation point in multithreaded programs.  This
is a problem if the thread allocates some resources (like memory, file
descriptors, semaphores or whatever) at the time <code>pause</code> is
called.  If the thread gets cancelled these resources stay allocated
until the program ends.  To avoid this calls to <code>pause</code> should be
protected using cancellation handlers.
</para>
<para>The <code>pause</code> function is declared in  <filename>unistd.h</filename>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Pause-Problems">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sigsuspend" accesskey="n" rel="next">Using <code>sigsuspend</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Using-Pause" accesskey="p" rel="prev">Using <code>pause</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal" accesskey="u" rel="up">Waiting for a Signal</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Problems-with-pause"></span><h4 class="subsection">24.8.2 Problems with <code>pause</code></title>

<para>The simplicity of <code>pause</code> can conceal serious timing errors that
can make a program hang mysteriously.
</para>
<para>It is safe to use <code>pause</code> if the real work of your program is done
by the signal handlers themselves, and the “main program” does nothing
but call <code>pause</code>.  Each time a signal is delivered, the handler
will do the next batch of work that is to be done, and then return, so
that the main loop of the program can call <code>pause</code> again.
</para>
<para>You can’t safely use <code>pause</code> to wait until one more signal arrives,
and then resume real work.  Even if you arrange for the signal handler
to cooperate by setting a flag, you still can’t use <code>pause</code>
reliably.  Here is an example of this problem:
</para>
<div class="example">
<pre class="example">/* <span class="roman"><code>usr_interrupt</code> is set by the signal handler.</span>  */
if (!usr_interrupt)
  pause ();

/* <span class="roman">Do work once the signal arrives.</span>  */
…
</pre></div>

<para>This has a bug: the signal could arrive after the variable
<code>usr_interrupt</code> is checked, but before the call to <code>pause</code>.
If no further signals arrive, the process would never wake up again.
</para>
<para>You can put an upper limit on the excess waiting by using <code>sleep</code>
in a loop, instead of using <code>pause</code>.  (See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sleeping">Sleeping</a>, for more
about <code>sleep</code>.)  Here is what this looks like:
</para>
<div class="example">
<pre class="example">/* <span class="roman"><code>usr_interrupt</code> is set by the signal handler.</span>
while (!usr_interrupt)
  sleep (1);

/* <span class="roman">Do work once the signal arrives.</span>  */
…
</pre></div>

<para>For some purposes, that is good enough.  But with a little more
complexity, you can wait reliably until a particular signal handler is
run, using <code>sigsuspend</code>.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Sigsuspend">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Pause-Problems" accesskey="p" rel="prev">Problems with <code>pause</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal" accesskey="u" rel="up">Waiting for a Signal</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Using-sigsuspend"></span><h4 class="subsection">24.8.3 Using <code>sigsuspend</code></title>

<para>The clean and reliable way to wait for a signal to arrive is to block it
and then use <code>sigsuspend</code>.  By using <code>sigsuspend</code> in a loop,
you can wait for certain kinds of signals, while letting other kinds of
signals be handled by their handlers.
</para>
<dl class="def">
<dt xml:id="glibc-index-sigsuspend"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigsuspend</strong> <emphasis>(const sigset_t *<var>set</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigsuspend" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:sigprocmask/!bsd!linux
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function replaces the process’s signal mask with <var>set</var> and then
suspends the process until a signal is delivered whose action is either
to terminate the process or invoke a signal handling function.  In other
words, the program is effectively suspended until one of the signals that
is not a member of <var>set</var> arrives.
</para>
<para>If the process is woken up by delivery of a signal that invokes a handler
function, and the handler function returns, then <code>sigsuspend</code> also
returns.
</para>
<para>The mask remains <var>set</var> only as long as <code>sigsuspend</code> is waiting.
The function <code>sigsuspend</code> always restores the previous signal mask
when it returns.
</para>
<para>The return value and error conditions are the same as for <code>pause</code>.
</para></dd></dl>

<para>With <code>sigsuspend</code>, you can replace the <code>pause</code> or <code>sleep</code>
loop in the previous section with something completely reliable:
</para>
<div class="example">
<pre class="example">sigset_t mask, oldmask;

…

/* <span class="roman">Set up the mask of signals to temporarily block.</span> */
sigemptyset (&amp;mask);
sigaddset (&amp;mask, SIGUSR1);

…

/* <span class="roman">Wait for a signal to arrive.</span> */
sigprocmask (SIG_BLOCK, &amp;mask, &amp;oldmask);
while (!usr_interrupt)
  sigsuspend (&amp;oldmask);
sigprocmask (SIG_UNBLOCK, &amp;mask, NULL);
</pre></div>

<para>This last piece of code is a little tricky.  The key point to remember
here is that when <code>sigsuspend</code> returns, it resets the process’s
signal mask to the original value, the value from before the call to
<code>sigsuspend</code>—in this case, the <code>SIGUSR1</code> signal is once
again blocked.  The second call to <code>sigprocmask</code> is
necessary to explicitly unblock this signal.
</para>
<para>One other point: you may be wondering why the <code>while</code> loop is
necessary at all, since the program is apparently only waiting for one
<code>SIGUSR1</code> signal.  The answer is that the mask passed to
<code>sigsuspend</code> permits the process to be woken up by the delivery of
other kinds of signals, as well—for example, job control signals.  If
the process is woken up by a signal that doesn’t set
<code>usr_interrupt</code>, it just suspends itself again until the “right”
kind of signal eventually arrives.
</para>
<para>This technique takes a few more lines of preparation, but that is needed
just once for each kind of wait criterion you want to use.  The code
that actually waits is just four lines.
</para>
<hr>
</div>
</div>
<sect xml:id="glibc-Signal-Stack">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#BSD-Signal-Handling" accesskey="n" rel="next">BSD Signal Handling</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal" accesskey="p" rel="prev">Waiting for a Signal</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Using-a-Separate-Signal-Stack"></span><h3 class="section">24.9 Using a Separate Signal Stack</title>

<para>A signal stack is a special area of memory to be used as the execution
stack during signal handlers.  It should be fairly large, to avoid any
danger that it will overflow in turn; the macro <code>SIGSTKSZ</code> is
defined to a canonical size for signal stacks.  You can use
<code>malloc</code> to allocate the space for the stack.  Then call
<code>sigaltstack</code> or <code>sigstack</code> to tell the system to use that
space for the signal stack.
</para>
<para>You don’t need to write signal handlers differently in order to use a
signal stack.  Switching from one stack to the other happens
automatically.  (Some non-GNU debuggers on some machines may get
confused if you examine a stack trace while a handler that uses the
signal stack is running.)
</para>
<para>There are two interfaces for telling the system to use a separate signal
stack.  <code>sigstack</code> is the older interface, which comes from 4.2
BSD.  <code>sigaltstack</code> is the newer interface, and comes from 4.4
BSD.  The <code>sigaltstack</code> interface has the advantage that it does
not require your program to know which direction the stack grows, which
depends on the specific machine and operating system.
</para>
<dl class="def">
<dt xml:id="glibc-index-stack_005ft"><span class="category">Data Type: </span><span><strong>stack_t</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-stack_005ft" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This structure describes a signal stack.  It contains the following members:
</para>
<dl compact="compact">
<dt><span><code>void *ss_sp</code></span></dt>
<dd><para>This points to the base of the signal stack.
</para>
</dd>
<dt><span><code>size_t ss_size</code></span></dt>
<dd><para>This is the size (in bytes) of the signal stack which ‘<filename>ss_sp</filename>’ points to.
You should set this to however much space you allocated for the stack.
</para>
<para>There are two macros defined in <filename>signal.h</filename> that you should use in
calculating this size:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-SIGSTKSZ"><span><code>SIGSTKSZ</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SIGSTKSZ" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>This is the canonical size for a signal stack.  It is judged to be
sufficient for normal uses.
</para>
</dd>
<dt xml:id="glibc-index-MINSIGSTKSZ"><span><code>MINSIGSTKSZ</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-MINSIGSTKSZ" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>This is the amount of signal stack space the operating system needs just
to implement signal delivery.  The size of a signal stack <strong>must</strong>
be greater than this.
</para>
<para>For most cases, just using <code>SIGSTKSZ</code> for <code>ss_size</code> is
sufficient.  But if you know how much stack space your program’s signal
handlers will need, you may want to use a different size.  In this case,
you should allocate <code>MINSIGSTKSZ</code> additional bytes for the signal
stack and increase <code>ss_size</code> accordingly.
</para></dd>
</dl>

</dd>
<dt><span><code>int ss_flags</code></span></dt>
<dd><para>This field contains the bitwise <small>OR</small> of these flags:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-SS_005fDISABLE"><span><code>SS_DISABLE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SS_005fDISABLE" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>This tells the system that it should not use the signal stack.
</para>
</dd>
<dt xml:id="glibc-index-SS_005fONSTACK"><span><code>SS_ONSTACK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-SS_005fONSTACK" class="copiable-anchor"> ¶</a></span></dt>
<dd><para>This is set by the system, and indicates that the signal stack is
currently in use.  If this bit is not set, then signals will be
delivered on the normal user stack.
</para></dd>
</dl>
</dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigaltstack"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigaltstack</strong> <emphasis>(const stack_t *restrict <var>stack</var>, stack_t *restrict <var>oldstack</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigaltstack" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sigaltstack</code> function specifies an alternate stack for use
during signal handling.  When a signal is received by the process and
its action indicates that the signal stack is used, the system arranges
a switch to the currently installed signal stack while the handler for
that signal is executed.
</para>
<para>If <var>oldstack</var> is not a null pointer, information about the currently
installed signal stack is returned in the location it points to.  If
<var>stack</var> is not a null pointer, then this is installed as the new
stack for use by signal handlers.
</para>
<para>The return value is <code>0</code> on success and <code>-1</code> on failure.  If
<code>sigaltstack</code> fails, it sets <code>errno</code> to one of these values:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></span></dt>
<dd><para>You tried to disable a stack that was in fact currently in use.
</para>
</dd>
<dt><span><code>ENOMEM</code></span></dt>
<dd><para>The size of the alternate stack was too small.
It must be greater than <code>MINSIGSTKSZ</code>.
</para></dd>
</dl>
</dd></dl>

<para>Here is the older <code>sigstack</code> interface.  You should use
<code>sigaltstack</code> instead on systems that have it.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-sigstack"><span class="category">Data Type: </span><span><strong>struct sigstack</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-sigstack" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This structure describes a signal stack.  It contains the following members:
</para>
<dl compact="compact">
<dt><span><code>void *ss_sp</code></span></dt>
<dd><para>This is the stack pointer.  If the stack grows downwards on your
machine, this should point to the top of the area you allocated.  If the
stack grows upwards, it should point to the bottom.
</para>
</dd>
<dt><span><code>int ss_onstack</code></span></dt>
<dd><para>This field is true if the process is currently using this stack.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigstack"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigstack</strong> <emphasis>(struct sigstack *<var>stack</var>, struct sigstack *<var>oldstack</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigstack" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sigstack</code> function specifies an alternate stack for use during
signal handling.  When a signal is received by the process and its
action indicates that the signal stack is used, the system arranges a
switch to the currently installed signal stack while the handler for
that signal is executed.
</para>
<para>If <var>oldstack</var> is not a null pointer, information about the currently
installed signal stack is returned in the location it points to.  If
<var>stack</var> is not a null pointer, then this is installed as the new
stack for use by signal handlers.
</para>
<para>The return value is <code>0</code> on success and <code>-1</code> on failure.
</para></dd></dl>

<hr>
</div>
<sect xml:id="glibc-BSD-Signal-Handling">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Stack" accesskey="p" rel="prev">Using a Separate Signal Stack</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling" accesskey="u" rel="up">Signal Handling</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-BSD-Signal-Handling-1"></span><h3 class="section">24.10 BSD Signal Handling</title>

<para>This section describes alternative signal handling functions derived
from BSD Unix.  These facilities were an advance, in their time; today,
they are mostly obsolete, and supported mainly for compatibility with
BSD Unix.
</para>
<para>There are many similarities between the BSD and POSIX signal handling
facilities, because the POSIX facilities were inspired by the BSD
facilities.  Besides having different names for all the functions to
avoid conflicts, the main difference between the two is that BSD Unix
represents signal masks as an <code>int</code> bit mask, rather than as a
<code>sigset_t</code> object.
</para>
<para>The BSD facilities are declared in <filename>signal.h</filename>.
<span xml:id="glibc-index-signal_002eh-10"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-siginterrupt"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>siginterrupt</strong> <emphasis>(int <var>signum</var>, int <var>failflag</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-siginterrupt" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe const:sigintr
| AS-Unsafe
| AC-Unsafe corrupt
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function specifies which approach to use when certain primitives
are interrupted by handling signal <var>signum</var>.  If <var>failflag</var> is
false, signal <var>signum</var> restarts primitives.  If <var>failflag</var> is
true, handling <var>signum</var> causes these primitives to fail with error
code <code>EINTR</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Interrupted-Primitives">Primitives Interrupted by Signals</a>.
</para>
<para>This function has been replaced by the <code>SA_RESTART</code> flag of the
<code>sigaction</code> function.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Advanced-Signal-Handling">Advanced Signal Handling</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigmask"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>sigmask</strong> <emphasis>(int <var>signum</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigmask" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This macro returns a signal mask that has the bit for signal <var>signum</var>
set.  You can bitwise-OR the results of several calls to <code>sigmask</code>
together to specify more than one signal.  For example,
</para>
<div class="example">
<pre class="example">(sigmask (SIGTSTP) | sigmask (SIGSTOP)
 | sigmask (SIGTTIN) | sigmask (SIGTTOU))
</pre></div>

<para>specifies a mask that includes all the job-control stop signals.
</para>
<para>This macro has been replaced by the <code>sigset_t</code> type and the
associated signal set manipulation functions.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Sets">Signal Sets</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigblock"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigblock</strong> <emphasis>(int <var>mask</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigblock" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is equivalent to <code>sigprocmask</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Signal-Mask">Process Signal Mask</a>) with a <var>how</var> argument of <code>SIG_BLOCK</code>: it adds the
signals specified by <var>mask</var> to the calling process’s set of blocked
signals.  The return value is the previous set of blocked signals.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigsetmask"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigsetmask</strong> <emphasis>(int <var>mask</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigsetmask" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is equivalent to <code>sigprocmask</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Signal-Mask">Process Signal Mask</a>) with a <var>how</var> argument of <code>SIG_SETMASK</code>: it sets
the calling process’s signal mask to <var>mask</var>.  The return value is
the previous set of blocked signals.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-sigpause"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>sigpause</strong> <emphasis>(int <var>mask</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sigpause" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:sigprocmask/!bsd!linux
| AS-Unsafe lock/hurd
| AC-Unsafe lock/hurd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is the equivalent of <code>sigsuspend</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-a-Signal">Waiting for a Signal</a>):  it sets the calling process’s signal mask to <var>mask</var>,
and waits for a signal to arrive.  On return the previous set of blocked
signals is restored.
</para></dd></dl>
<hr>
</div>
</div-->
</part>
