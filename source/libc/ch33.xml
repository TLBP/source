<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch33.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-Cryptographic-Functions">
  <title>Şifrelemeyle İlgili İşlevler</title>
  <titleabbrev>Parola depolama ve son derece öngörülemeyen baytlar.</titleabbrev>
 <preliminary>
  <para>
   &glibc; yalnızca birkaç özel amaçlı şifreleme işlevi içerir: parola depolama için tek yönlü aşlama işlevleri ve işletim sistemi tarafından sağlanıyorsa,şifresel rastgelelik kaynağına erişim. Genel amaçlı şifrelemeye ihtiyaç duyan uygulamalar, <link xl:href="https://www.gnu.org/software/libgcrypt/">libgcrypt</link> gibi özel bir şifreleme kütüphanesi kullanmalıdır.
  </para>
  <para>
   Birçok ülke, şifresel yazılımların ithalatına, ihracatına, bulundurulmasına veya kullanımına yasal kısıtlamalar getirmektedir. Bu kısıtlamaları kınıyoruz, ancak bu bölümdeki işlevleri kendiniz kullanmasanız bile &glibc;nin bunlara tabi olabileceği konusunda sizi uyarmalıyız. Kısıtlamalar bölgeden bölgeye ve sık sık değişir, bu nedenle bu uyarıdan daha belirgin bir tavsiye veremiyoruz.
  </para>
 </preliminary>
 <chapter xml:id="glibc-Passphrase-Storage">
  <title>Parolaların Saklanması</title>
  <titleabbrev>Parolalar için tek yönlü aşlama</titleabbrev>
  <para>
   <dicterm><english>hashing</english><turkish>aşlama</turkish></dicterm>
   <dicterm><english>hash</english><turkish>aş, aşlamak</turkish></dicterm>
   <indexterm linkend="glibc-cp"><primary>parola aşlama</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>tek yönlü aşlama</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>aşlama</primary><secondary>parola</secondary></indexterm>
   Bazen bir kullanıcının, örneğin belirli bir kullanıcı kimliği ile oturum açmak için, bir makinenin sağladığı bazı hizmetleri kullanma yetkisine sahip olduğundan emin olmak gerekir (bkz. <xref linkend="glibc-Users-and-Groups"/>). Bunu yapmanın geleneksel yolu, her kullanıcının gizli bir <wordasword>parola</wordasword> seçmesidir; daha sonra sistem, kullanıcı olduğunu iddia eden birine kullanıcının parolasının ne olduğunu sorabilir ve kişi doğru parolayı verirse, sistem uygun ayrıcalıkları verebilir. (Geleneksel olarak bunlar tek sözcüklük parolalardı, ancak günümüzde tek bir sözcüğü tahmin etmek çok kolay.)
  </para>
  <para>
   Parolaları işleyen uygulamalar, ne olursa olsun, bunları kimseye açıklamamaya özen göstermelidir. Bunları yalnızca özel ayrıcalıklarla erişilebilen bir dosyada tutmak yeterli değildir. Dosya bir hata veya yanlış yapılandırma yoluyla "sızdırılmış" olabilir ve sistem yöneticileri, herhangi bir nedenle bu dosyayı düzenlemek zorunda kalsalar bile herkesin parolasını öğrenmemelidir. Bundan kaçınmak için, parolalar saklanmadan önce <wordasword>tek yönlü işlev</wordasword> kullanılarak <wordasword>tek yönlü aş</wordasword>lara dönüştürülmelidir.
  </para>
  <para>
   Tek yönlü bir işlevi hesaplamak kolaydır, ancak tersini hesaplamanın bilinen bir yolu yoktur. Bu, sistemin parolaları aşlayarak ve sonucu saklanan aş ile karşılaştırarak kolayca sınayabileceği anlamına gelir. Ancak birisinin parola aşını keşfeden bir saldırgan, aşın karşılık geldiği parolayı ancak tahmin ederek ve deneyerek keşfedebilir. Tek yönlü işlevler, oldukça belli tahminler (sözlükteki bir sözcük parola olarak kullanılmamalıdır) dışında, bu işlemi pratik olmayacak şekilde yavaşlatmak için tasarlanmıştır.
  </para>
  <para>
   &glibc; SHA-2-512, SHA-2-256, MD5 ve DES şifreleme algoritmalarına dayalı dört tek yönlü algoritma için arayüz içerir. Yeni parolalar, SHA tabanlı algoritmalardan biriyle aş haline getirilmelidir. Diğer şifreleme algoritmaları yeni ayarlanan parolalar için çok zayıftır, ancak eski parolaları doğrulamak için hala desteklenmektedir. DES tabanlı aşlar özellikle zayıftır, çünkü girdinin ilk sekiz karakteri hariç hepsini yok sayar.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-crypt"><primary>crypt</primary></indexterm>
   <csproto type="işlev">
    <csname><ptr>char</ptr><function>crypt</function></csname>
    <csparam><ptr>const&#160;char</ptr><parameter>phrase</parameter></csparam>
    <csparam><ptr>const&#160;char</ptr><parameter>salt</parameter></csparam>
   </csproto>
   <header>&unistd.h;</header>
   <conceptlist>
    <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:crypt</code></concept>
    <concept>&asunsafe; &corrupt; &lock; &heap; &dlopen;</concept>
    <concept>&acunsafe; &lock; &mem;</concept>
   </conceptlist>
   <para>
    <code>crypt</code> işlevi, bir parola dizgesini, tümceyi, kullanıcı veritabanında depolamaya uygun tek yönlü bir aşa dönüştürür. Döndürdüğü dizge tamamen yazdırılabilir ASCII karakterlerinden oluşur. Boşluk veya ‘<code>:</code>’, ‘<code>;</code>’, ‘<code>*</code>’, ‘<code>!</code>’, ‘<code>\</code>’ karakterlerinden herhangi birini içermez.
   </para>
   <para>
    <parameter>salt</parameter> bağımsız değişkeni kullanılacak tek yönlü algoritmayı belirler ve aynı parolaya sahip olsalar bile tek yönlü algoritma çıktısının her kullanıcı için farklı olmasını sağlar. Bu, büyük bir kullanıcı veri tabanından parolaların tahmin edilmesini zorlaştırır. Saldırgan <parameter>salt</parameter> olmadan bir tahminde bulunabilir, üzerinde bir kez <code>crypt</code> çalıştırabilir ve sonucu tüm aşlarla karşılaştırabilir. <parameter>salt</parameter>, saldırganı her kullanıcı için ayrı <code>crypt</code> çağrıları yapmaya zorlar.
   </para>
   <para>
    Bir parolayı doğrulamak için, <parameter>salt</parameter> olarak önceden aşlanmış parola aktarılır. Saklamak için yeni bir parolayı aşlarken, aşağıdaki tabloya göre, bir önek artı rastgele seçilen bir dizi karakterden oluşan bir dizge içeren bir  <parameter>salt</parameter> kullanılmalıdır:
   </para>
   <informaltable>
    <tgroup cols="3" colsep='1' rowsep='1'>
     <thead>
      <row>
       <entry>Algoritma</entry>
       <entry>Önek</entry>
       <entry>Rastgele karakter</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>SHA-2-512</entry>
       <entry>‘<code>$6$</code>’</entry>
       <entry>16 karakter</entry>
      </row>
      <row>
       <entry>SHA-2-256</entry>
       <entry>‘<code>$5$</code>’</entry>
       <entry>16 karakter</entry>
      </row>
      <row>
       <entry>MD5</entry>
       <entry>‘<code>$1$</code>’</entry>
       <entry>8 karakter</entry>
      </row>
      <row>
       <entry>DES</entry>
       <entry>‘’</entry>
       <entry>2 karakter</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    Tüm durumlarda rastgele karakterler <code>./0-9A-Za-z</code> ifadesindeki karakterlerden seçilmelidir.
   </para>
   <para>
    DES dışındaki tüm aşlama algoritmalarında, parola keyfi olarak uzun olabilir ve her baytın sekiz bitinin tümü anlamlıdır. DES ile, parolanın yalnızca ilk sekiz karakteri çıktıyı etkiler ve her baytın sekizinci biti de dikkate alınmaz.
   </para>
   <para>
    <code>crypt</code> başarısız olabilir. Bazı gerçeklenimler başarısızlık durumunda <varname>NULL</varname> döndürür ve diğerleri "*" ile başlayan ve <parameter>salt</parameter> içermeyen geçersiz aşlı parola döndürür. Her iki durumda da, sorunu belirtmek için hata <varname>errno</varname> değişkenine atanır. Olası hata değerlerinden bazıları:
   </para>
   <glosslist>
    <glossentry>
     <glossterm><code>EINVAL</code></glossterm>
     <glossdef>
      <para>
       <parameter>salt</parameter> geçersiz. Desteklenen aşlama algoritmaları için ne önceden aşlanmış bir parola ne de iyi biçimlendirilmiş yeni bir tuz içeriyor.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EPERM</code></glossterm>
     <glossdef>
      <para>
       Sistem yapılandırması, <parameter>salt</parameter> tarafından seçilen aşlama işlevinin kullanımını yasaklıyor.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>ENOMEM</code></glossterm>
     <glossdef>
      <para>
       Dahili sıfırdan depolama alanı tahsis edilemedi.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <glossterm><code>ENOSYS</code></glossterm>
      <glossterm><code>EOPNOTSUPP</code></glossterm>
     </glossterm>
     <glossdef>
      <para>
       Aşlı parolalar hiç desteklenmiyor veya <parameter>salt</parameter> tarafından seçilen aşlama algoritması desteklenmiyor. &glibc; bu hata kodlarını kullanmaz ancak diğer işletim sistemlerinde bunlara rastlanabilir.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
   <para>
    <code>crypt</code> işlevi, hem dahili karalama hem de döndürdüğü dizi için duruk depolama kullanır. Aynı anda birden çok evreden <code>crypt</code> çağrısı güvenli değildir ve sonraki herhangi bir <code>crypt</code> çağrısı önceki çağrıdan dönen dizgenin üzerine yazar.
   </para>
   <para>
    <code>crypt</code> işlevi, X/Open Taşınabilirlik Kılavuzunda belirtilir ve neredeyse tüm tarihi Unix sistemlerinde bulunur. Ancak, XPG herhangi bir tek yönlü algoritma belirtmez.
   </para>
   <para>
    <code>crypt</code> işlevi &unistd.h; başlık dosyasına bildirilmiştir. &glibc; işlevi ayrıca &crypt.h; başlık dosyasında da bildirir.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-crypt_r"><primary>crypt_r</primary></indexterm>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-crypt_data"><primary sortas="crypt_data">struct&#160;crypt_data</primary></indexterm>
   <csproto type="işlev">
    <csname><ptr>char</ptr><function>crypt_r</function></csname>
    <csparam><ptr>const&#160;char</ptr><parameter>phrase</parameter></csparam>
    <csparam><ptr>const&#160;char</ptr><parameter>salt</parameter></csparam>
    <csparam><ptr>struct&#160;crypt_data</ptr><parameter>data</parameter></csparam>
   </csproto>
   <header>&crypt.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&asunsafe; &corrupt; &lock; &heap; &dlopen;</concept>
    <concept>&acunsafe; &lock; &mem;</concept>
   </conceptlist>
   <para>
    <code>crypt_r</code> işlevi evresel olarak güvenli sürümdür. Duruk depolama kullanılmaz. Döndürdüğü dizge için <parameter>data</parameter> bağımsız değişkeninin gösterdiği belleği kullanacak şekilde işlev sıfırdan yeniden tanımlanmıştır. Her evrede farklı <parameter>data</parameter> nesneleri kullanıldığından birden çok evrede güvenle kullanılabilir. Ancak, aynı <parameter>data</parameter> ile yapılan başka bir çağrı dönen dizgenin üzerine yazacaktır.
   </para>
   <para>
    <parameter>data</parameter>, çağrıcı tarafından tahsis edilen bir <type>struct&#160;crypt_data</type> nesnesine gösterici içermelidir. <type>struct&#160;crypt_data</type> yapısının tüm alanları özeldir, ancak bu nesnelerden biri ilk kez kullanılmadan önce, <function>memset</function> veya benzeri bir işlev ile sıfırlarla doldurularak ilklendirilmelidir. Bundan sonra, tekrar silmeden <code>crypt_r</code> işlevine yapılan birçok çağrı için yeniden kullanılabilir. <type>struct&#160;crypt_data</type> yapısı çok büyüktür, bu yüzden yerel bir değişken yerine <function>malloc</function> ile tahsis etmek daha iyidir. Bkz: <xref linkend="glibc-Memory-Allocation"/>.
   </para>
   <para>
    <code>crypt_r</code> işlevi GNU oluşumudur. İşlev ve <type>struct&#160;crypt_data</type> yapısı &crypt.h; başlık dosyasında bildirilmiştir.
   </para>
  </csynopsis>
  <example>
   <para>
    Aşağıdaki örnek, bir parola ilk kez girildiğinde <code>crypt</code> işlevinin nasıl kullanılacağını göstermektedir. Tuzu olabildiğince öngörülemez hale getirmek için <code>getentropy</code> işlevi kullanılmıştır. Bkz: <xref linkend="glibc-Unpredictable-Bytes"/>.
   </para>
   <screen>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;crypt.h&gt;

int
main(void)
{
  unsigned char ubytes[16];
  char tuz[20];
  const char *const saltchars =
    "./0123456789ABCDEFGHIJKLMNOPQRST"
    "UVWXYZabcdefghijklmnopqrstuvwxyz";
  char *hash;
  int i;

  /* <replaceable>işletim sisteminden 16 öngörülemez bayt al.</replaceable> */
  if (getentropy (ubytes, sizeof ubytes))
    {
      perror ("getentropy");
      return 1;
    }

  /* <replaceable>Onları tuzu oluşturmak için kullan.</replaceable> */
  tuz[0] = '$';
  tuz[1] = '5'; /* <replaceable>SHA-256</replaceable> */
  tuz[2] = '$';
  for (i = 0; i &lt; 16; i++)
    tuz[3+i] = saltchars[ubytes[i] &amp; 0x3f];
  tuz[3+i] = '\0';

  /* <replaceable>Kullanıcının parolasını oku ve aşla.</replaceable> */
  hash = crypt (getpass ("Parolanızı giriniz: "), tuz);
  if (!hash || hash[0] == '*')
    {
      perror ("crypt");
      return 1;
    }

  /* <replaceable>Sonuçları göster.</replaceable> */
  puts (hash);
  return 0;
}
</screen>
   <para>
    Aşağıdaki örnekte ise, bir parolanın nasıl doğrulanacağını gösterilmiştir. Gerçek kullanıcıların aşlanmış parolalarına bakmak özel ayrıcalıklar gerektirebileceğinden, yazılıma sabit kodlanmış bir aşa göre doğrulama yapılmıştır (bkz. <xref linkend="glibc-User-Database"/>). Ayrıca, farklı tek yönlü algoritmaların aynı parola için farklı aşlar ürettiği de gösterilmiştir.
   </para>
   <screen>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;crypt.h&gt;

/* <replaceable>‘GNU's Not Unix’ aşlı SHA-256, MD5 ve DES kullanımı.</replaceable> */
static const char hash_sha[] =
  "$5$DQ2z5NHf1jNJnChB$kV3ZTR0aUaosujPhLzR84Llo3BsspNSe4/tsp7VoEn6";
static const char hash_md5[] = "$1$A3TxDv41$rtXVTUXl2LkeSV0UU5xxs1";
static const char hash_des[] = "FgkTuF98w5DaI";

int
main(void)
{
  char *phrase;
  int status = 0;

  /* <replaceable>Parolayı iste.</replaceable> */
  phrase = getpass ("Parolanızı giriniz: ");

  /* <replaceable>Saklı aşlarla karşılaştır. ‘GNU's No’ ile
   * başlayanlar DES aşı ile, diğer ikisi yalnızca
   * ‘GNU's Not Unix>’ aşı ile eşleşir.</replaceable>
   */

  if (strcmp (crypt (phrase, hash_sha), hash_sha))
    {
      puts ("SHA: reddedildi");
      status = 1;
    }
  else
    puts ("SHA: onaylandı");

  if (strcmp (crypt (phrase, hash_md5), hash_md5))
    {
      puts ("MD5: reddedildi");
      status = 1;
    }
  else
    puts ("MD5: onaylandı");

  if (strcmp (crypt (phrase, hash_des), hash_des))
    {
      puts ("DES: reddedildi");
      status = 1;
    }
  else
    puts ("DES: onaylandı");

  return status;
}
</screen>
  </example>
 </chapter>

 <chapter xml:id="glibc-Unpredictable-Bytes">
  <title>Öngörülemez Baytların Üretimi</title>
  <titleabbrev>Şifresel rastgeleliğin sağlanması</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>rastgelelik kaynağı</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>şifresel rastgele sayı üreteci</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>belirlenimsel rastgele bit üreteci</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>rastgele sayılar</primary><secondary>şifresel</secondary></indexterm>
   <indexterm linkend="glibc-cp"><primary>ŞRSÜ</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>BRBÜ</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>ŞOGSRSÜ</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>CRNG</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>DRBG</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>CSPRNG</primary></indexterm>
   <dicterm><english>cryptographic</english><turkish>şifresel</turkish></dicterm>
   Şifresel uygulamalar genellikle düşman bir kulak misafiri için tahmin etmesi mümkün olduğu kadar zor olacak bazı rastgele verilere ihtiyaç duyar. Örneğin, şifreleme anahtarları rasgele seçilmelidir ve <function>crypt</function> tarafından kullanılan "tuz" dizileri de rasgele seçilmelidir (bkz. <xref linkend="glibc-Passphrase-Storage"/>).
  </para>
  <para>
   Bazı sözde rasgele sayı üreteçleri, şifresel uygulamalar için yeterince öngörülemeyen çıktı sağlamaz; bkz. <xref linkend="glibc-Pseudo-Random-Numbers"/>. Bu tür uygulamaların, bazen "şifresel olarak güçlü sözde rasgele sayı üreteci" (ŞOGSRSÜ - İng: CSPRNG) veya "belirlenimsel rasgele bit üreteci" (BRBÜ - İng: DRBG) olarak da adlandırılan bir "şifresel rasgele sayı üreteci" (ŞRSÜ - İng: CRNG) kullanması gerekir.
  </para>
  <para>
   Şu anda, &glibc; şifresel rasgele sayı üreteci sağlamamaktadır, ancak işletim sistemi tarafından sağlanan bir rasgelelik kaynağından rasgele verileri okuyan işlevler sağlar. Rastgelelik kaynağı özünde bir ŞRSÜ'dür, ancak aynı zamanda kendini elektronik gürültü ve saat titremesi gibi fiziksel rastgelelik kaynaklarından sürekli olarak "yeniden tohumlar". Bu, uygulamaların ürettiği rasgele sayıların her çalıştırmada farklı olmasını sağlamak için herhangi bir şey yapmasına gerek olmadığı anlamına gelir.
  </para>
  <para>
   Ancak işin püf noktası, bu işlevlerin herhangi bir çağrıda yalnızca nispeten kısa rasgele diziler üretecek olmasıdır. Genellikle bu sorun olmaz, ancak birkaç kilobayttan fazla şifresel olarak güçlü rasgele veriye ihtiyaç duyan uygulamalar bu işlevleri bir kez çağırmalı ve çıktılarını ŞRSÜ'yü tohumlamak için kullanmalıdır.
  </para>
  <para>
   Uygulamaların genelde <function>getentropy</function> kullanması gerekir. <function>getrandom</function> işlevi, engelleme davranışı üzerinde ek denetime ihtiyaç duyan düşük düzeyli uygulamalar için tasarlanmıştır.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-getentropy"><primary>getentropy</primary></indexterm>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-getentropy"><primary>rasgele veri</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>getentropy</function></csname>
    <csparam><ptr>void</ptr><parameter>buffer</parameter></csparam>
    <csparam><type>size_t</type><parameter>length</parameter></csparam>
   </csproto>
   <header>&sys-random.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    Bu işlev, <parameter>buffer</parameter> göstericisinde başlayan diziye tam olarak <parameter>length</parameter> uzunlukta rastgele veri baytları yazar. <parameter>length</parameter> 256 bayttan fazla olamaz. Başarı durumunda <code>0</code> döner. Başarısızlık durumunda, <code>-1</code> döner ve sorunu belirten kod <varname>errno</varname> değişkenine atanır. Olası hatalardan bazıları aşağıda listelenmiştir.
   </para>
   <glosslist>
    <glossentry>
     <glossterm><code>ENOSYS</code></glossterm>
     <glossdef>
      <para>
       İşletim sistemi bir rastgelelik kaynağı gerçeklemiyor veya bu şekilde erişimi desteklemiyor. (Örneğin, bu işlev tarafından kullanılan sistem çağrısı, 3.17 sürümünde Linux çekirdeğine eklenmiştir.)
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EFAULT</code></glossterm>
     <glossdef>
      <para>
       <parameter>buffer</parameter> ve <parameter>length</parameter> birlikte geçersiz bir bellek aralığı belirtiyor.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EIO</code></glossterm>
     <glossdef>
      <para>
       <dicterm><english>entropy</english><turkish>rastgele veri</turkish></dicterm>
       <parameter>length</parameter> 256'dan büyük veya çekirdek rastgele veri havuzu ciddi bir başarısızlık yaşadı.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
   <para>
    <code>getentropy</code> çağrısı, yalnızca sistem yeni başlatıldığında ve rastgelelik kaynağı henüz başlatılmadığında engellenebilir. Ancak, engellenirse, sinyaller veya evre iptali ile kesintiye uğratılamaz. Önyükleme işleminin çok erken aşamalarında çalıştırılması amaçlanan süreçlerin bunun yerine <function>getentropy</function> işlevini engellenmeyen kipte kullanması ve rastgele verilerin hiç mevcut olmamasıyla başa çıkmaya hazırlıklı olması gerekebilir.
   </para>
   <para>
    <code>getentropy</code> işlevi OpenBSD'deki benzerinden türetilmiştir.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-getrandom"><primary>getrandom</primary></indexterm>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-getrandom"><primary>rasgele veri</primary></indexterm>
   <csproto type="işlev">
    <csname><type>ssize_t</type><function>getrandom</function></csname>
    <csparam><ptr>void</ptr><parameter>buffer</parameter></csparam>
    <csparam><type>size_t</type><parameter>length</parameter></csparam>
    <csparam><type>unsigned&#160;int</type><parameter>flags</parameter></csparam>
   </csproto>
   <header>&sys-random.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    Bu işlev, <parameter>buffer</parameter> göstericisinde başlayan diziye <parameter>length</parameter> uzunlukta rastgele veri baytları yazar.
    <parameter>flags</parameter> sıfır ya da aşağıdaki sabitlerin bazılarının bitsel VEYAsı olmalıdır:
   </para>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-GRND_RANDOM"><primary>GRND_RANDOM</primary></indexterm>
    <csproto type="sabit">
     <csname><function>GRND_RANDOM</function></csname>
    </csproto>
    <para>
     Rastgelelik elde etmek için (engellenmeyen) <filename>/dev/urandom</filename>  kaynak yerine (engellenen) <filename>/dev/random</filename> kaynağı kullanılır.
    </para>
    <para>
     Bu bayrak belirtilirse, çağrının, rastgelelik kaynağı başlatıldıktan sonra bile  oldukça uzun bir süre engellenebilme olasılığı vardır. Belirtilmezse, çağrı yalnızca sistem yeni başlatıldığında ve rastgelelik kaynağı henüz ilklendirilmediğinde engellenebilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-GRND_NONBLOCK"><primary>GRND_NONBLOCK</primary></indexterm>
    <csproto type="sabit">
     <csname><function>GRND_NONBLOCK</function></csname>
    </csproto>
    <para>
     Engellemek yerine, hiçbir veri yoksa çağrıcıya hemen geri dönülür.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-GRND_INSECURE"><primary>GRND_INSECURE</primary></indexterm>
    <csproto type="sabit">
     <csname><function>GRND_INSECURE</function></csname>
    </csproto>
    <para>
     Şifresel olarak güvenli olmayabilecek rastgele veri yazılır.
    </para>
   </csynopsis>
   <para>
    <function>getentropy</function> işlevinden farklı olarak <code>getrandom</code> işlevi bir iptal noktasıdır ve engellenirse sinyallerle kesintiye uğratılabilir.
   </para>
   <para>
    <code>getrandom</code> işlevi başarı durumunda, <parameter>buffer</parameter> tamponuna yazılan ve <parameter>length</parameter> değerinden daha az uzunlukta bayt sayısı döndürebilir. Hata durumunda, <code>-1</code> döner ve sorunu belirten kod <varname>errno</varname> değişkenine atanır. Olası hatalardan bazıları aşağıda listelenmiştir.
   </para>
   <glosslist>
    <glossentry>
     <glossterm><code>ENOSYS</code></glossterm>
     <glossdef>
      <para>
       İşletim sistemi bir rastgelelik kaynağı gerçeklemiyor veya bu şekilde erişimi desteklemiyor. (Örneğin, bu işlev tarafından kullanılan sistem çağrısı, 3.17 sürümünde Linux çekirdeğine eklenmiştir.)
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EAGAIN</code></glossterm>
     <glossdef>
      <para>
       Rastgele veri mevcut değildi ve <parameter>flags</parameter> için <varname>GRND_NONBLOCK</varname> belirtildi.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EFAULT</code></glossterm>
     <glossdef>
      <para>
       <parameter>buffer</parameter> ve <parameter>length</parameter> birlikte geçersiz bir bellek aralığı belirtiyor.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EINTR</code></glossterm>
     <glossdef>
      <para>
       Sistem çağrısı kesintiye uğradı. Sistem önyüklemesi sırasında, çekirdek rasgelelik havuzu başlatılmadan önce, <parameter>flags</parameter> sıfır olsa bile bu olabilir.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm><code>EINVAL</code></glossterm>
     <glossdef>
      <para>
       <parameter>flags</parameter> geçersiz sabitler içeriyor.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </csynopsis>
 </chapter>
</part>
