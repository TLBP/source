<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: ch32.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->
<part id="glibc-Cryptographic-Functions">
  <title>Şifrelemeyle İlgili İşlevler</title>
  <titleabbrev>DES şifreleme ve parola işleme.</titleabbrev>
  <partintro><para>
Bir çok sistem üzerinde, kullanıcı kimlik denetimine gerek yoktur; örneğin, bir ağa bağlı olmayan bir iş istasyonu sanırım herhangi bir kullanıcı kimlik denetimine ihtiyaç duymaz, çünkü davetsiz bir misafirin makineyi kullanması için fiziksel erişime ihtiyacı vardır.
  </para><para>
Bazen, bir kullanıcının bir makinenin sağladığı bir servisi kullanmak için yetkili olduğundan emin olmak gerekir--örneğin, belirli bir kullanıcı kimliği ile oturum açmak (Bkz. <xref linkend="glibc-Users-and-Groups"/>). Bunu yapmanın geleneksel bir yolu her kullanıcı için gizli bir <wordasword>parola</wordasword> seçmektir; böylece sistem kullanıcı olduğunu iddia eden birine kullanıcının parolasının ne olduğunu sorabilir ve eğer kişi doğru parolayı verirse sistem uygun yetkileri verebilir.
  </para><para>
Eğer bütün parolalar sadece bir yerdeki dosyada saklanıyorsa, o zaman bu dosya çok dikkatli korunmalıdır. Bundan kaçınmak için, şifreler, dosyada saklanmadan önce, çıktısına bakılarak girdisinin ne olduğunun kolayca anlaşılamayacağı, bir <wordasword>tekyönlü işlev</wordasword>den geçirilir.
  </para><para>
GNU C kütüphanesi, FreeBSD 2.0 ile tanıdığımız bir işlev olan <command>crypt</command> işlevinin davranışı ile uyumlu bir tek yönlü işlev sağlar. Bu işlev, iki tekyönlü algoritma sağlar: biri modern BSD sistemleriyle uyumlu MD5 temelli ileti özümleme (bazıları ileti özeti der) (message-digest) algoritmasıdır, diğeri ise Unix sistemlerle uyumlu Veri Şifreleme Standardını (Data Encryption Standard - DES) temel almaktadır.
  </para><para>
Ayrıca güvenli uzak yordam çağrılarını (Secure RPC) ve normal DES şifrelemede kullanmak için bazı kütüphane işlevlerini sağlamaktadır.
  </para></partintro>
  <chapter id="glibc-Legal-Problems">
    <title>Yasal Sorunlar</title>
    <titleabbrev>Bu yazılım hapsedilmenize veya daha kötüsüne neden olabilir.</titleabbrev>
    <para>
Kanunların sürekli değişmesinden dolayı, kriptografiyi etkileyen kanunlar hakkında kesin bir inceleme yapmak mümkün değildir. Bunun yerine, bu bölüm sizi bazı üzücü noktalar hakkında uyarmaktadır; bu ülkenizin kanunlarında neleri aramanız gerektiği hakkında size yardımcı olabilir.
   </para><para>
Bazı ülkelerde kriptografi kullanmak, sahip olmak veya ithal etmek için bir ruhsata sahip olmanız gerekir. Bu ülkeler arasında Belarus, Birmanya, Hindistan, Endonezya, İsrail, Kazakistan, Pakistan, Rusya ve Suudi Arabistan vardır.
   </para><para>
Bazı ülkeler şifrelenmiş iletilerin radyo ile iletimini sınırlar; bazı telekomünikasyon taşıyıcıları kendi ağlarında şifrelenmiş iletilerin iletimini sınırlarlar.
   </para><para>
Birçok ülkenin şifreleme yazılımı için bir takım ihraç kontrolleri vardır. Wassenaar Anlaşması 33 ülke arasındaki çok taraflı bir anlaşmadır  ve bir takım şifreleme ihracını kısıtlarlar (Arjantin, Avustralya, Avusturya, Belçika, Bulgaristan, Kanada, Çek Cumhuriyeti, Danimarka, Finlandiya, Fransa, Almanya, Yunanistan, Macaristan, İrlanda, İtalya, Japonya, Lüksemburg, Hollanda, Yeni Zelanda, Norveç, Polonya, Portekiz, Kore Cumhuriyeti, Romanya, Rusya Federasyonu, Slovak Cumhuriyeti, İspanya, İsveç, İsviçre, Türkiye, Ukrayna, İngiltere ve Amerika Birleşik Devletleri). Farklı ülkeler düzenlemeyi farklı yollarla uygularlar; bazıları belli başlı "kamu alanı" yazılımlar için istisnalara izin vermezler, bazıları yazılımın ihracının somut biçimde yapılışını kısıtlar ve diğerleri önemli ek kısıtlamalar uygularlar.
   </para><para>
Bireşik Devletler'in ek kuralları vardır. Bu yazılım genelde, "şifreleme kaynak kodu"nun ihracına izin veren, "kamuya açık" ve "kaynak kodla geliştirilen bir ürünün satışı veya ticari bir üretim anlaşması için telif hakkı veya ruhsat ücreti söz konusu olmayan",
sözcükleriyle ifade edilebilen  15 CFR 740.13(e) altında ihraç edilebilir;
   </para><para>
Bu alandaki kurallar sürekli değişmektedir. Eğer burada bahsedilen süresi dolmuş bir bilgiye rastlarsanız lütfen bunu hatalar veritabanına bildiriniz. <xref linkend="glibc-Reporting-Bugs"/>.
   </para></chapter>
  <chapter id="glibc-getpass">
    <title>Parolaların Okunması</title>
    <titleabbrev>Kullanıcı parolasının sorulması.</titleabbrev>
    <para>
Parola okunacağında, onun gizli kalması için ekranda göstermekten kaçınmak gerekir. Aşağıdaki işlev bunu uygun bir şekilde yapmaktadır.
   </para><para>
<indexterm scope="glibc-fn"><primary>getpass</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-func-getpass">
<funcdef>char *<command>getpass</command></funcdef>
<paramdef>(const char *<varname>istem</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>getpass</command> kullanıcının karşısına <varname>istem</varname>'i getirir, ardından uçbirimden girilen dizgeyi ekrana yazmadan okur. Kullanıcıların dosyalara düz metin şifreleri koymamaları için, <command>/dev/tty</command> gerçek uçbirimine bağlanmaya çalışır; bağlanamazsa <command>stdin</command> ve <command>stderr</command> akımlarını kullanır. <command>getpass</command> aynı zamanda <command>ISIG</command> uçbirim özelliğini kullanarak INTR, QUIT ve SUSP karakterlerini uçbirimde iptal eder. (bkz. <xref linkend="glibc-Local-Modes"/>).
Uçbirim <command>getpass</command> öncesinde ve sonrasında temizlenir, böylece yanlış yazılan şifre karakterleri kazara görünmez.
   </para><para>
Diğer C kütüphanelerinde, <command>getpass</command> parolanın sadece ilk <command>PASS_MAX</command> baytını döndürebilir. GNU C kütüphanesinin bir sınırı yoktur, yani <command>PASS_MAX</command> tanımlanmamıştır.
   </para><para>
Bu işlevin prtotipi <filename>unistd.h</filename> içindedir.  <command>PASS_MAX</command> ise <filename>limits.h</filename> içinde tanımlanabilirdi.
   </para></funcdescr></funcsynopsis></para><para>
Bu işlemler bütün durumlara uymayabilirler. Bu durumda, kullanıcıların kendi <command>getpass</command> eşdeğerini yazmaları önerilir. Örneğin, çok basit bir uygulaması şöyle olabilir:
   </para><para>
<screen>
#include &lt;termios.h>
#include &lt;stdio.h>

ssize_t
my_getpass (char **lineptr, size_t *n, FILE *stream)
{
  struct termios old, new;
  int nread;

  /* Ekrana yazmayı kapat, eğer yapamazsan başarısız ol. */
  if (tcgetattr (fileno (stream), &amp;old) != 0)
    return -1;
  new = old;
  new.c_lflag &amp;= ~ECHO;
  if (tcsetattr (fileno (stream), TCSAFLUSH, &amp;new) != 0)
    return -1;

  /* Şifreyi oku. */
  nread = getline (lineptr, n, stream);

  /* Uçbirimi geri yükle. */
  (void) tcsetattr (fileno (stream), TCSAFLUSH, &amp;old);

  return nread;
}
</screen></para><para>
Eşdeğer uygulamamız <command>getline</command> ile aynı parametreleri alır
(bkz. <xref linkend="glibc-Line-Input"/>); kullanıcıdan istenilen biçimde bilgi isteminde bulunulabilir.
   </para></chapter>
  <chapter id="glibc-crypt">
    <title>Parolaların Şifrelenmesi</title>
    <titleabbrev>Parolalar için bir tekyönlü işlevi.</titleabbrev>
    <para>
<indexterm scope="glibc-fn"><primary>crypt</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-func-crypt">
<funcdef>char *<command>crypt</command></funcdef>
<paramdef>(const char *<varname>anahtar</varname>,
 const char *<varname>tuz</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>crypt</command> işlevi parolayı, bir <varname>anahtar</varname> dizgesi ile aşağıda ne olduğu anlatıldığı gibi bir <varname>tuz</varname> karakter dizisi olarak alır ve başka bir tuz ile başlayan yazılabilir bir ASCII dizge döndürür. İşlevin çıktısından, onu üreten <varname>anahtar</varname> değerini bulmanın en iyi yolunun <varname>anahtar</varname>'ın gerçek değerini bulana kadar <varname>anahtar</varname> için tahminde bulunmak olduğuna inanılmaktadır.
   </para><para>
<varname>tuz</varname> parametresi iki şey yapar. Öncelikle, hangi algoritmanın kullanılacağını seçer, MD5-temelli olanı mı yoksa DES-temelli olanı mı. İkinci olarak, parolaları içeren bir dosya üzerinde parola tahmin etmeye çalışan birilerine hayatı dar eder; <varname>tuz</varname> olmadan, bir davetsiz misafir <command>crypt</command> çalıştırarak ve sonucu dosyadaki parolalarla karşılaştırarak tahminde bulunabilir. <varname>tuz</varname> ile davetsiz misafir <command>crypt</command>'i her farklı tuz ile çalıştırmak zorunda kalır.
   </para><para>
MD-5 temelli algoritma için, <varname>tuz</varname> <command>$1$</command> dizgesi ile başlayan, en çok 8 karakterle devam eden  ve <command>$</command> ile ya da dizge sonu ile sonlandırılan bir dizgeden oluşmalıdır. <command>crypt</command>'in sonucu, eğer tuz bir ile bitmiyorsa <varname>tuz</varname>ı takip eden bir <command>$</command> ve bunu da izleyen <command>./0-9A-Za-z</command> alfabesinden 22 karakterle devam eder, toplamda en çok 34 karakter olabilir. <varname>anahtar</varname>'deki her karakter anlamlıdır.
   </para><para>
DES temelli algoritma için, <varname>tuz</varname>, <command>./0-9A-Za-z</command> alfabesindeki iki karakterden oluşmalıdır ve <command>crypt</command> işlevinin sonucu bu iki karakteri takip eden aynı alfabeden 11 karakterle birlikte toplam 13 karakterden oluşur. <varname>anahtar</varname> değerinin sadece ilk 8 karakteri anlamlıdır.
   </para><para>
MD5 temelli algoritmanın kullanışlı olan uzunluğu hakkında bir sınır yoktur ve daha güvenlidir. Bu nedenle DES temelliye nazaran tercih edilir.
   </para><para>
Kullanıcı parolasını ilk girdiğinde, <varname>tuz</varname> rastgele yeni bir dizge olarak ayarlanmalıdır. Bir parolayı <command>crypt</command>'in önceki çağrısının sonucu ile doğrulamak için, önceki çağrının sonucunu <varname>tuz</varname> olarak geçirin.
   </para></funcdescr></funcsynopsis></para><para>
Aşağıdaki kısa program <command>crypt</command>'in parola ilk kez girildiğinde nasıl kullanılacağına bir örnektir. Buradaki <varname>tuz</varname> üretiminin ancak kabul edilebilir olduğunu unutmayınız; bu makineler arasında eşsiz değildir ve bir çok uygulamada saldıran kişi kullanıcının parolasını ne zaman ayarladığı bilgisine erişemez.
   </para><para><screen>
#include &lt;stdio.h>
#include &lt;time.h>
#include &lt;unistd.h>
#include &lt;crypt.h>

int
main(void)
{
  unsigned long seed[2];
  char salt[] = "$1$........";
  const char *const seedchars =
    &quot;./0123456789ABCDEFGHIJKLMNOPQRST&quot;
    &quot;UVWXYZabcdefghijklmnopqrstuvwxyz&quot;;
  char *password;
  int i;

  /* (Hemen hemen) Rastgele tohum üret.
     Bundan daha iyi yapmalısınız. */
  seed[0] = time(NULL);
  seed[1] = getpid() ^ (seed[0] >> 14 &amp; 0x30000);

  /* 'tohum karakter'leri yazılabilir karakterlere dönüştür. */
  for (i = 0; i &lt; 8; i++)
    salt[3+i] = seedchars[(seed[i/5] >> (i%5)*6) &amp; 0x3f];

  /* Kullanıcı parolasını oku ve şifrele. */
  password = crypt(getpass("Parola:"), salt);

  /* Sonuçları yaz. */
  puts(password);
  return 0;
}
</screen></para><para>
Diğer yazılım bir parolanın nasıl doğrulanacağını göstermektedir. Kullanıcıya parola isteminde bulunur ve ekrana "Erişim onaylandı." basar; eğer kullanıcı <command>GNU libc manual</command> yazarsa.
   </para><para><screen>
#include &lt;stdio.h>
#include &lt;string.h>
#include &lt;unistd.h>
#include &lt;crypt.h>

int
main(void)
{
  /* "GNU libc manual" değerinin haşlaması. */
  const char *const pass = "$1$/iSaq7rB$EoUw5jJPPvAPECNaaWzMK/";

  char *result;
  int ok;

  /* Kullanıcı parolasını oku ve beklenilen parolayı
     salt olarak geçirerek şifrele. */
  result = crypt(getpass("Parola:"), pass);

  /* Sonucu sına. */
  ok = strcmp (result, pass) == 0;

  puts(ok ? "Erisim onaylandi." : "Erisim reddedildi.");
  return ok ? 0 : 1;
}
</screen></para><para>
<indexterm scope="glibc-fn"><primary>crypt_r</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-crypt_r">
<funcdef>char *<command>crypt_r</command></funcdef>
<paramdef>(const char         *<varname>anahtar</varname>,
 const char         *<varname>tuz</varname>,
 struct crypt_data * <varname>veri</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>crypt_r</command> işlevi <command>crypt</command> ile aynı şeyi yapar, fakat ek bir parametre ile işlev sonucu için yer bulundurur, bu yüzden evresel (reentrant) olabilir. <command>crypt_r</command> ilk kez çağrılmadan önce <varname>veri</varname> sıfırlarla doldurularak ilklendirilmelidir.
   </para><para>
<command>crypt_r</command> işlevi bir GNU oluşumudur.
   </para></funcdescr></funcsynopsis></para><para>
<command>crypt</command> ve <command>crypt_r</command> işlevlerinin prototipleri
<filename>crypt.h</filename> başlık dosyası içinde bulunur.
   </para></chapter>
  <chapter id="glibc-DES-Encryption">
    <title>DES Şifreleme</title>
    <titleabbrev>DES şifreleme için yordamlar.</titleabbrev>
    <para>
Veri Şifreleme Standardı (Data Encryption Standard), Ulusal Standartlar ve Teknoloji Enstitüsü (National Institute of Standards and Technology - NIST) tarafından yayınlanan ABD Hükümeti Federal Bilgi İşleme Standartları (US Government Federal Information Processing Standards - FIPS) 46-3 içinde anlatılmaktadır. DES geliştirildiği 1970lerden beri tamamen analiz edilmiştir ve yeni önemli bir kusuru bulunamamıştır.
   </para><para>
Ancak, DES sadece 56 bitlik bir anahtar kullanmaktadır (artı 8 eşlik biti), ve
1998 yapımı 200.000 Amerikan Doları değerinde bir makine 6 günde olası bütün anahtarları deneyebilmektedir; daha fazla parayla daha hızlı sonuçlar elde edilebilmektedir. Bu basit DES'i bir çok amaç için güvensiz kılmaktadır ve NIST, US hükümet sistemlerinde basit DES'in kullanım iznini kaldırmıştır.
   </para><para>
Ciddi şifreleme işlevselliği için, bu yordamlar yerine özgür şifreleme kütüphanelerinden birinin kullanılması tavsiye edilir.
   </para><para>
DES 64-bitlik bir blok ve 64-bitlik anahtar alarak 64-bitlik başka bir blok üreten, tersine çevrilebilir bir işlemdir. Genelde bitler numaralandırılır böylece en-anlamlı bit, yani her bloğun ilk biti 1 ile numaralandırılır.
   </para><para>
Bu numaralama altında, anahtarın her 8. biti (8., 16., vs.) şifreleme algoritmasında kullanılmaz. Fakat anahtar tekil eşlik bitine sahip olmalıdır; 1'den 8'e, 9'dan 16'ya, şeklinde devam eden bitler `1'in tek sayılı eş bitlerine sahip olmalıdır ve bu tamamen kullanılmayan bitleri belirtir.
   </para><para>
<indexterm scope="glibc-fn"><primary>setkey</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-setkey">
<funcdef>void <command>setkey</command></funcdef>
<paramdef>(const char *<varname>anahtar</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>setkey</command> işlevi <varname>anahtar</varname>'ın genişletilmiş bir biçimi olan bir iç veri yapısı kurar. <varname>anahtar</varname> her biti <command>char</command> içinde saklanan 64 bitlik bir dizi olarak tanımlanmıştır, ilk bit <varname>anahtar[0]</varname> ve 64. bit <varname>anahtar[63]</varname>'dür.  <varname>anahtar</varname> doğru eşlik değerine sahip olmalıdır.
   </para></funcdescr></funcsynopsis>
   </para><para>
<indexterm scope="glibc-fn"><primary>encrypt</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-encrypt">
<funcdef>void <command>encrypt</command></funcdef>
<paramdef>(char *<varname>blok</varname>,
 int   <varname>bayrak</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>encrypt</command> işlevi eğer <varname>bayrak</varname> 0 ise <varname>blok</varname>'u şifreler, aksi takdirde <command>setkey</command> ile belirtilen anahtarı kullanarak <varname>blok</varname>'u deşifre eder. Sonuç <varname>blok</varname> içinde saklanır.
   </para><para>
<command>setkey</command> gibi, <varname>blok</varname> da her biti <command>char</command> içinde saklanan 64 bitlik dizi olarak tanımlanır, fakat  <varname>blok</varname> içinde eşlik biti yoktur.
   </para></funcdescr></funcsynopsis>
   </para><para>
<indexterm scope="glibc-fn"><primary>setkey_r</primary></indexterm>
<indexterm scope="glibc-fn"><primary>encrypt_r</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-setkey_r">
<funcdef>void <command>setkey_r</command></funcdef>
<paramdef>(const char         *<varname>anahtar</varname>,
 struct crypt_data * <varname>veri</varname>)</paramdef>
</funcprototype><funcprototype role="işlev" id="glibc-encrypt_r">
<funcdef>void <command>encrypt_r</command></funcdef>
<paramdef>(char               *<varname>blok</varname>,
 int                 <varname>bayrak</varname>,
 struct crypt_data * <varname>veri</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bunlar <command>setkey</command> ve <command>encrypt</command>'in evresel (reentrant) sürümleridir.  Tek fark <varname>anahtar</varname> değerini saklayan ek parametresidir. <command>setkey_r</command> ilk kez çağrılmadan önce <varname>veri</varname> sıfırlarla doldurularak ilklendirilmelidir.
      </para><para>
<command>setkey_r</command> ve <command>encrypt_r</command> işlevleri GNU oluşumlarıdır.
<command>setkey</command>, <command>encrypt</command>, <command>setkey_r</command> ve <command>encrypt_r</command> işlevleri <filename>crypt.h</filename> içinde tanımlıdır.
   </para></funcdescr></funcsynopsis>
   </para><para>
<indexterm scope="glibc-fn"><primary>ecb_crypt</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-ecb_crypt">
<funcdef>int <command>ecb_crypt</command></funcdef>
<paramdef>(char    *<varname>anahtar</varname>,
 char    *<varname>bloklar</varname>,
 unsigned <varname>uzunluk</varname>,
 unsigned <varname>kip</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>ecb_crypt</command> işlevi DES kullanarak bir veya daha fazla blok şifreler veya şifresini çözer. Her blok bağımsız olarak şifrelenir.
   </para><para>
<varname>bloklar</varname> ve <varname>anahtar</varname> 8-bitlik bayt paketleri içinde saklanır, böylece anahtarın ilk biti <varname>anahtar[0]</varname>'in en-anlamlı biti olarak, anahtarın 63. biti <varname>anahtar[7]</varname>'nin en az anlamlı biti olarak saklanır. <varname>anahtar</varname> doğru eşlik değerine sahip olmalıdır.
   </para><para>
<varname>uzunluk</varname>, <varname>bloklar</varname> içindeki bayt sayısıdır. Bu değer 8'in katları olmalıdır (böylece bütün bloklar şifrelenebilir).
<varname>uzunluk</varname>, <command>DES_MAXDATA</command> azami bayt sayısı ile sınırlandırılmıştır.
   </para><para>
Şifrelemenin sonucu <varname>bloklar</varname> girdisi ile değiştirilir.
   </para><para>
<varname>kip</varname> parametresi aşağıdaki ikisinin bit bit VEYAlanmasıdır:
   </para><para><variablelist><varlistentry>
   <term><literal>DES_ENCRYPT</literal></term><listitem><para>
Bu sabit, <varname>kip</varname> parametresinde kullanılır ve <varname>bloklar</varname>'ın şifreleneceğini belirtir.
      </para></listitem></varlistentry><varlistentry>
      <term><literal>DES_DECRYPT</literal></term><listitem><para>
Bu sabit, <varname>kip</varname> parametresinde kullanılır ve <varname>bloklar</varname>'ın şifresinin çözüleceğini belirtir.
      </para></listitem></varlistentry><varlistentry>
      <term><literal>DES_HW</literal></term><listitem><para>
Bu sabit, <varname>kip</varname> parametresinde kullanılır ve bir donanım cihazı kullanılacak mı sorar. Eğer donanım yoksa, şifreleme gerçekleşir ancak yazılımla.
      </para></listitem></varlistentry><varlistentry>
      <term><literal>DES_SW</literal></term><listitem><para>
Bu sabit, <varname>kip</varname> parametresinde kullanılır ve donanım kullanılmayacağını belirtir.
      </para></listitem></varlistentry></variablelist>
    </para><para>
İşlev sonucu aşağıdaki değerlerden biri olur:
   </para><para><variablelist><varlistentry>
   <term><command>DESERR_NONE</command></term><listitem><para>
Şifreleme başarıldı.
      </para></listitem></varlistentry><varlistentry>
      <term><command>DESERR_NOHWDEVICE</command></term><listitem><para>
Şifreleme başarıldı, ancak donanım bulunamadı.
      </para></listitem></varlistentry><varlistentry>
      <term><command>DESERR_HWERROR</command></term><listitem><para>
Şifreleme donanım sorunu nedeniyle başarılamadı.
      </para></listitem></varlistentry><varlistentry>
      <term><command>DESERR_BADPARAM</command></term><listitem><para>
Şifreleme kötü parametre nedeniyle başarılamadı, örneğin <varname>uzunluk</varname>
8'in katı değil veya <varname>uzunluk</varname> <command>DES_MAXDATA</command> değerinden büyük.
      </para></listitem></varlistentry></variablelist>
   </para></funcdescr></funcsynopsis>
   </para><para>
<indexterm scope="glibc-fn"><primary>DES_FAILED</primary></indexterm>
<funcsynopsis><funcprototype role="makro" id="glibc-DES_FAILED">
<funcdef>int <command>DES_FAILED</command></funcdef>
<paramdef>(int <varname>hata</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bu makro eğer <command>ecb_crypt</command> veya <command>cbc_crypt</command> sonucu <varname>hata</varname> bir `başarı' sonuç koduysa 1, aksi takdirde 0 döndürür.
   </para></funcdescr></funcsynopsis>
   </para><para>
<indexterm scope="glibc-fn"><primary>cbc_crypt</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-cbc_crypt">
<funcdef>int <command>cbc_crypt</command></funcdef>
<paramdef>(char    *<varname>anahtar</varname>,
 char    *<varname>bloklar</varname>,
 unsigned <varname>uzunluk</varname>,
 unsigned <varname>kip</varname>,
 char    *<varname>yedek</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>cbc_crypt</command> işlevi Zincirleme Blok Şifreleme (Cipher Block Chaining) kipinde DES kullanarak bir veya daha fazla bloğu şifreler veya şifre çözer.
   </para><para>
CBC kipinde şifreleme için, her blok şifrelenmeden önce <varname>yedek</varname> ile XOR'lanır, ardından <varname>yedek</varname> şifreleme sonucuyla yer değiştirilir, sonra diğer blok işlenir. Şifre çözme bu işlemin tersidir.
   </para><para>
Bunun avantajı, şifrelenmeden önce aynı olan blokları şifrelendikten sonra yine aynı ama oldukça farklı yaptığı için, veri içindeki şablonları algılamanın daha zor olmasıdır.
   </para><para>
Genellikle, şifreleme başlamadan önce <varname>yedek</varname> 8 rastgele bayt ile ayarlanır. Ardından 8 rastgele bayt şifrelenen veriyle birlikte aktarılır (kendisi şifrelenmeden) ve şifre çözmek için <varname>yedek</varname> olarak geri aktarılır.
Diğer olasılık <varname>yedek</varname>'i ilk başta 8 sıfır yapmak ve ilk bloğu 8 rastgele bayt ile şifrelemektir.
   </para><para>
Aksi takdirde, bütün parametreler <command>ecb_crypt</command> için olduğu gibidir.
   </para></funcdescr></funcsynopsis>
   </para><para>
<indexterm scope="glibc-fn"><primary>des_setparity</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" id="glibc-des_setparity">
<funcdef>void <command>des_setparity</command></funcdef>
<paramdef>(char *<varname>anahtar</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>des_setparity</command> işlevi her baytın düşük bitlerini değiştirerek tek eşlik bitine sahip olmak için 8-bitlik baytlar içinde paketlenerek saklanan 64-bit <varname>anahtar</varname>'ı değiştirir,
   </para></funcdescr></funcsynopsis></para><para>
<command>ecb_crypt</command>, <command>cbc_crypt</command> ve <command>des_setparity</command> işlevleri ve onlara eşlik eden makrolar
<filename>rpc/des_crypt.h</filename> başlık dosyası içinde tanımlıdır.
   </para>
 </chapter>
</part>

