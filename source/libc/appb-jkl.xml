<?xml version="1.0" encoding="UTF-8"?>

<!-- ********************************************************************
     $Id: appb-jkl.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->
<sect1 id="glibc-Library-Summary-J"><title>J</title>
<glosslist>
<glossentry><glossterm><literal>double <command>j0</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>j0f</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>j0l</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>j1</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>j1f</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>j1l</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>jmp_buf</command></glossterm>
<glossdef><para><literal>setjmp.h</literal> (ISO):  <xref linkend="glibc-Non-Local-Details"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>jn</command> (int n, double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>jnf</command> (int n, float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>jnl</command> (int n, long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>jrand48</command> (unsigned short int <varname>xsubi</varname>[3])</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (SVID):  <xref linkend="glibc-SVID-Random"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>jrand48_r</command> (unsigned short int <varname>xsubi</varname>[3], struct drand48_data *<varname>buffer</varname>, long int *<varname>result</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-SVID-Random"/>.</para></glossdef></glossentry>
</glosslist>
</sect1>

<sect1 id="glibc-Library-Summary-K"><title>K</title>
<glosslist>
<glossentry><glossterm><literal>int <command>kill</command> (pid_t <varname>pid</varname>, int <varname>signum</varname>)</literal></glossterm>
<glossdef><para><literal>signal.h</literal> (POSIX.1):  <xref linkend="glibc-Signaling-Another-Process"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>killpg</command> (int <varname>pgid</varname>, int <varname>signum</varname>)</literal></glossterm>
<glossdef><para><literal>signal.h</literal> (BSD):  <xref linkend="glibc-Signaling-Another-Process"/>.</para></glossdef></glossentry>
</glosslist>
</sect1>

<sect1 id="glibc-Library-Summary-L"><title>L</title>
<glosslist>
<glossentry><glossterm><literal>char * <command>l64a</command> (long int <varname>n</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (XPG):  <xref linkend="glibc-Encode-Binary-Data"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>labs</command> (long int <varname>number</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LANG</command></glossterm>
<glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_ALL</command></glossterm>
<glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_COLLATE</command></glossterm>
<glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_CTYPE</command></glossterm>
<glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_MESSAGES</command></glossterm>
<glossdef><para><literal>locale.h</literal> (XOPEN):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_MONETARY</command></glossterm>
<glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_NUMERIC</command></glossterm><glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>void <command>lcong48</command> (unsigned short int <varname>param</varname>[7])</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (SVID):  <xref linkend="glibc-SVID-Random"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lcong48_r</command> (unsigned short int <varname>param</varname>[7], struct drand48_data *<varname>buffer</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-SVID-Random"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>L_ctermid</command></literal></glossterm>
<glossdef><para><literal>stdio.h</literal> (POSIX.1):  <xref linkend="glibc-Identifying-the-Terminal"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LC_TIME</command></glossterm>
<glossdef><para><literal>locale.h</literal> (ISO):  <xref linkend="glibc-Locale-Categories"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>L_cuserid</command></literal></glossterm>
<glossdef><para><literal>stdio.h</literal> (POSIX.1):  <xref linkend="glibc-Who-Logged-In"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>ldexp</command> (double <varname>value</varname>, int <varname>exponent</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Normalization-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>ldexpf</command> (float <varname>value</varname>, int <varname>exponent</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Normalization-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>ldexpl</command> (long double <varname>value</varname>, int <varname>exponent</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Normalization-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>ldiv_t <command>ldiv</command> (long int <varname>numerator</varname>, long int <varname>denominator</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Integer-Division"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>ldiv_t</command></glossterm>
<glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Integer-Division"/>.
</para></glossdef></glossentry>

<glossentry><glossterm><literal>void * <command>lfind</command> (const void *<varname>key</varname>, void *<varname>base</varname>, size_t *<varname>nmemb</varname>, size_t <varname>size</varname>, comparison_fn_t <varname>compar</varname>)</literal></glossterm><glossdef><para><literal>search.h</literal> (SVID):  <xref linkend="glibc-Array-Search-Function"/>.
</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>lgamma</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>lgammaf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>lgammaf_r</command> (float <varname>x</varname>, int *<varname>signp</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (XPG):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>lgammal</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>lgammal_r</command> (long double <varname>x</varname>, int *<varname>signp</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (XPG):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>lgamma_r</command> (double <varname>x</varname>, int *<varname>signp</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (XPG):  <xref linkend="glibc-Special-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>L_INCR</command></glossterm>
<glossdef><para><literal>sys/file.h</literal> (BSD):  <xref linkend="glibc-File-Positioning"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>LINE_MAX</command></literal></glossterm>
<glossdef><para><literal>limits.h</literal> (POSIX.2):  <xref linkend="glibc-Utility-Limits"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>link</command> (const char *<varname>oldname</varname>, const char *<varname>newname</varname>)</literal></glossterm>
<glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Hard-Links"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>LINK_MAX</command></literal></glossterm>
<glossdef><para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-Limits-for-Files"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lio_listio</command> (int <varname>mode</varname>, struct aiocb *const <varname>list</varname>[], int <varname>nent</varname>, struct sigevent *<varname>sig</varname>)</literal></glossterm>
<glossdef><para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Asynchronous-Reads-Writes"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lio_listio64</command> (int <varname>mode</varname>, struct aiocb *const <varname>list</varname>, int <varname>nent</varname>, struct sigevent *<varname>sig</varname>)</literal></glossterm>
<glossdef><para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Asynchronous-Reads-Writes"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>listen</command> (int <varname>socket</varname>, unsigned int <varname>n</varname>)</literal></glossterm>
<glossdef><para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Listening"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llabs</command> (long long int <varname>number</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>lldiv_t <command>lldiv</command> (long long int <varname>numerator</varname>, long long int <varname>denominator</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Integer-Division"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>lldiv_t</command></glossterm>
<glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Integer-Division"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llrint</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llrintf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llrintl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llround</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llroundf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long long int <command>llroundl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>struct lconv * <command>localeconv</command> (void)</literal></glossterm><glossdef><para>
<literal>locale.h</literal> (ISO):  <xref linkend="glibc-The-Lame-Way-to-Locale-Data"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>struct tm * <command>localtime</command> (const time_t *<varname>time</varname>)</literal></glossterm>
<glossdef><para><literal>time.h</literal> (ISO):  <xref linkend="glibc-Broken-down-Time"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>struct tm * <command>localtime_r</command> (const time_t *<varname>time</varname>, struct tm *<varname>resultp</varname>)</literal></glossterm>
<glossdef><para><literal>time.h</literal> (POSIX.1c):  <xref linkend="glibc-Broken-down-Time"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>log</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>log10</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>log10f</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>log10l</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>log1p</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>log1pf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>log1pl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>log2</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>log2f</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>log2l</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>double <command>logb</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>logbf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>logbl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>float <command>logf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>void <command>login</command> (const struct utmp *<varname>entry</varname>)</literal></glossterm>
<glossdef><para><literal>utmp.h</literal> (BSD):  <xref linkend="glibc-Logging-In-and-Out"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LOGIN_PROCESS</command></glossterm>
<glossdef><para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LOGIN_PROCESS</command></glossterm>
<glossdef><para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>login_tty</command> (int <varname>filedes</varname>)</literal></glossterm>
<glossdef><para><literal>utmp.h</literal> (BSD):  <xref linkend="glibc-Logging-In-and-Out"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long double <command>logl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>logout</command> (const char *<varname>ut_line</varname>)</literal></glossterm>
<glossdef><para><literal>utmp.h</literal> (BSD):  <xref linkend="glibc-Logging-In-and-Out"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>void <command>logwtmp</command> (const char *<varname>ut_line</varname>, const char *<varname>ut_name</varname>, const char *<varname>ut_host</varname>)</literal></glossterm>
<glossdef><para><literal>utmp.h</literal> (BSD):  <xref linkend="glibc-Logging-In-and-Out"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>void <command>longjmp</command> (jmp_buf <varname>state</varname>, int <varname>value</varname>)</literal></glossterm>
<glossdef><para><literal>setjmp.h</literal> (ISO):  <xref linkend="glibc-Non-Local-Details"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LONG_LONG_MAX</command></glossterm>
<glossdef><para><literal>limits.h</literal> (GNU):  <xref linkend="glibc-Range-of-Type"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LONG_LONG_MIN</command></glossterm>
<glossdef><para><literal>limits.h</literal> (GNU):  <xref linkend="glibc-Range-of-Type"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LONG_MAX</command></glossterm>
<glossdef><para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Range-of-Type"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>LONG_MIN</command></glossterm>
<glossdef><para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Range-of-Type"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lrand48</command> (void)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (SVID):  <xref linkend="glibc-SVID-Random"/>.
</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lrand48_r</command> (struct drand48_data *<varname>buffer</varname>, double *<varname>result</varname>)</literal></glossterm>
<glossdef><para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-SVID-Random"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lrint</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lrintf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lrintl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lround</command> (double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lroundf</command> (float <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>long int <command>lroundl</command> (long double <varname>x</varname>)</literal></glossterm>
<glossdef><para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>void * <command>lsearch</command> (const void *<varname>key</varname>, void *<varname>base</varname>, size_t *<varname>nmemb</varname>, size_t <varname>size</varname>, comparison_fn_t <varname>compar</varname>)</literal></glossterm>
<glossdef><para><literal>search.h</literal> (SVID):  <xref linkend="glibc-Array-Search-Function"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>off_t <command>lseek</command> (int <varname>filedes</varname>, off_t <varname>offset</varname>, int <varname>whence</varname>)</literal></glossterm>
<glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-File-Position-Primitive"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>off64_t <command>lseek64</command> (int <varname>filedes</varname>, off64_t <varname>offset</varname>, int <varname>whence</varname>)</literal></glossterm>
<glossdef><para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-File-Position-Primitive"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>L_SET</command></glossterm>
<glossdef><para><literal>sys/file.h</literal> (BSD):  <xref linkend="glibc-File-Positioning"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lstat</command> (const char *<varname>filename</varname>, struct stat *<varname>buf</varname>)</literal></glossterm>
<glossdef><para><literal>sys/stat.h</literal> (BSD):  <xref linkend="glibc-Reading-Attributes"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lstat64</command> (const char *<varname>filename</varname>, struct stat64 *<varname>buf</varname>)</literal></glossterm><glossdef><para><literal>sys/stat.h</literal> (Unix98):  <xref linkend="glibc-Reading-Attributes"/>.
</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>L_tmpnam</command></literal></glossterm>
<glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Temporary-Files"/>.</para></glossdef></glossentry>

<glossentry><glossterm><literal>int <command>lutimes</command> (const char *<varname>filename</varname>, struct timeval <varname>tvp</varname>[2])</literal></glossterm>
<glossdef><para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-File-Times"/>.</para></glossdef></glossentry>

<glossentry><glossterm><command>L_XTND</command></glossterm>
<glossdef><para><literal>sys/file.h</literal> (BSD):  <xref linkend="glibc-File-Positioning"/>.</para></glossdef></glossentry>
</glosslist>
</sect1>
