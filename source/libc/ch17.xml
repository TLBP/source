<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch17.xml,v2.36, GFDL,LGPL, NBB, 2023
     ********************************************************************
     Özel karakterlere (17.4.9) belge içinde erişilebilsin!  -->
<part xml:id="glibc-Low-Level-Terminal-Interface" userlevel="longtoc">
 <title>Düşük Seviyeli Uçbirim Arayüzü</title>
 <titleabbrev>Uçbirim aygıtının özellikleri nasıl değiştirilir.</titleabbrev>
 <preliminary>
  <para>
   Bu oylumda açıklanan işlevler uçbirim aygıtlarına özeldir. Bu işlevler kullanılarak girdilerin yansılanması engellenebilir, hat hızı ve akış denetimi gibi seri hat karakteristikleri değiştirilebilir, dosya sonu karakteri olarak kullanılacak karakter, komut satırı düzenleme, sinyal gönderimi, vb. değiştirilebilir.
  </para>
  <para>
   Bu oylumdaki işlevlerin çoğu dosya tanıtıcılarla çalışır. Dosya tanıtıcıların ne olduğu ve dosya tanıtıcısının uçbirim olarak nasıl açıldığı gibi konular <xref linkend="glibc-Low-Level-I-O"/> bölümünde bulunabilir.
  </para>
 </preliminary>
 <chapter xml:id="glibc-Is-It-a-Terminal">
  <title>Uçbirimlerin Tanımlanması</title>
  <titleabbrev>Bir dosyanın uçbirim olup olmadığının ve isminin saptanması.</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary></indexterm>
   Bu kısımda bahsedilen işlevler sadece uçbirim aygıtlarına karşılık olan dosyalarla çalışır. Bir dosyanın uçbirimle ilişkili olup olmadığı <function>isatty</function> işlevi kullanılarak öğrenilebilir.
  </para>
  <para>
   <indexterm linkend="glibc-pg"><primary>unistd.h</primary></indexterm>
   Bu kısımdaki işlevlerin prototipleri &unistd.h; başlık dosyasında bildirilmiştir.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-isatty"><primary>isatty</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>isatty</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
   </csproto>
   <header>&unistd.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    Bu işlev, <parameter>filedes</parameter> dosya tanıtıcısı uçbirimle ilişkili ise <code>1</code> ile değilse <code>0</code> ile döner.
   </para>
  </csynopsis>
  <para>
   Dosya tanıtıcı uçbirimle ilişkili ise ilişkili dosya ismi <function>ttyname</function> işlevi kullanılarak öğrenilebilir.  Ayrıca <xref linkend="glibc-Identifying-the-Terminal"/> bölümünde açıklanan <function>ctermid</function> işlevine de bakılmalıdır.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-ttyname"><primary>ttyname</primary></indexterm>
   <csproto type="işlev">
    <csname><ptr>char</ptr><function>ttyname</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
   </csproto>
   <header>&unistd.h;</header>
   <conceptlist>
    <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:ttyname</code></concept>
    <concept>&asunsafe; &heap; &lock;</concept>
    <concept>&acunsafe; &lock; &fd; &mem;</concept>
   </conceptlist>
   <para>
    <parameter>filedes</parameter> dosya tanıtıcısı uçbirimle ilişkili ise işlev uçbirim dosyasının ismini içeren duruk olarak tahsis edilmiş boş bayt sonlandırmalı dizgeye gösterici ile döner. Dosya tanıtıcısı uçbirime karşılık değilse ya da dosya ismi saptanamamışsa işlev boş gösterici ile döner.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-ttyname_r"><primary>ttyname_r</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>ttyname_r</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
    <csparam><ptr>char</ptr><parameter>buf</parameter></csparam>
    <csparam><type>size_t</type><parameter>len</parameter></csparam>
   </csproto>
   <header>&unistd.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&asunsafe; &heap;</concept>
    <concept>&acunsafe; &fd; &mem;</concept>
   </conceptlist>
   <para>
    <code>ttyname_r</code> işlevi sonucun kullanıcı tarafından belirtilen <parameter>len</parameter> uzunluktaki <parameter>buf</parameter> tamponu ile döndürülmesi dışında <function>ttyname</function> işlevi gibidir.
   </para>
   <para>
    <code>ttyname_r</code> işlevinin normal dönüş değeri sıfırdır. Aksi takdirde hatayı belirten bir hata numarası ile döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
   </para>
   <variablelist>
    <varlistentry>
     <term><code>EBADF</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> bağımsız değişkeni geçerli dosya tanıtıcısı değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ENOTTY</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> uçbirimle ilişkili değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ERANGE</code></term>
     <listitem>
      <para>
       Tampon uzunluğu olarak <parameter>len</parameter>, döndürülecek dizgeyi saklamak için çok küçük.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ENODEV</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter>, bağımlı sözde uçbirim aygıtı ilişkili, ancak bu aygıtla ilişkili dosya adı belirlenemedi. Bu bir GNU oluşumudur.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </csynopsis>
 </chapter>
 <chapter xml:id="glibc-I-O-Queues">
  <title>G/Ç Kuyrukları</title>
  <titleabbrev>Akış denetimi ve uçbirim girdi kuyruğu.</titleabbrev>
  <para>
   Bu kısımdaki işlevler uçbirim aygıtının girdi ve çıktı kuyrukları ile ilgilidir. Bu kuyruklar, <link linkend="glibc-I-O-on-Streams">G/Ç akımlarına</link> göre gerçeklenmiş tamponlamadan bağımsız olarak <emphasis>çekirdek içindeki</emphasis> bir tamponlama şeklinde gerçeklenmiştir.
  </para>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>girdi kuyruğu</secondary></indexterm>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>sürekli yazma tamponu</secondary></indexterm>
   <wordasword>Uçbirim girdi kuyruğu</wordasword> çoğunlukla kullandığı tamponun ismiyle <firstterm>sürekli yazma tamponu</firstterm> olarak da anılır. Uçbirim tarafından alınmış ancak henüz süreç tarafından okunmamış karakterleri içerir.
  </para>
  <para>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-STOPc"><primary>uçbirim karakter kodları</primary><secondary>STOP</secondary></indexterm>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-STARTc"><primary>uçbirim karakter kodları</primary><secondary>START</secondary></indexterm>
   Girdi kuyruğunun uzunluğunu <varname>MAX_INPUT</varname> ve <varname>_POSIX_MAX_INPUT</varname> sabitleri belirler; bkz. <xref  linkend="glibc-Limits-for-Files"/>.  Kuyruk uzunluğunun en azından <varname>MAX_INPUT</varname> karakterlik olacağını düşünülebilir, ancak kuyruk daha büyük olabilir ve hatta uzunluğu özdevimli olarak değişebilir. Eğer <varname>IXOFF</varname> girdi kipi biti (bkz. <xref linkend="glibc-Input-Modes"/>) atanarak akış denetimi etkinleştirilmişse, kuyruğu taşmadan korumak gerektiğinde uçbirim sürücüsü uçbirime <varname>STOP</varname> ve <varname>START</varname> karakterlerini aktarır. Aksi takdirde, girdi uçbirimin kabul edebildiğinden hızlı gelirse bir kısım girdi kaybolabilir. Kurallı kipte, bir satır sonu karakteri alınıncaya kadar girdi kuyrukta kalır, dolayısıyla çok uzun bir satır yazılırsa uçbirim girdi kuyruğu dolabilir. Bkz, <xref linkend="glibc-Canonical-or-Not"/>.
  </para>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>çıktı kuyruğu</secondary></indexterm>
   <wordasword>Uçbirim çıktı kuyruğu</wordasword> girdi kuyruğu gibidir, ancak çıktı içindir. Süreçler tarafından yazılmış fakat henüz uçbirime aktarılmamış karakterleri içerir. Eğer <varname>IXON</varname> girdi kipi biti (bkz. <xref linkend="glibc-Input-Modes"/>) atanarak akış denetimi etkinleştirilmişse, uçbirim sürücüsü, çıktı aktarımını durdurmak ve yeniden başlatmak için uçbirim tarafından gönderilen <varname>STOP</varname> ve <varname>START</varname> karakterlerine uymaya çalışır.
  </para>
  <para>
   <wordasword>Temizleme</wordasword> uçbirim girdi kuyruğundaki alınmış ancak henüz okunmamış karakterlerin iptal edilmesi anlamına gelir. Benzer olarak, uçbirim çıktı kuyruğuna yazılmış ancak henüz aktarılmamış karakterlerin iptal edilmesi anlamına da gelir.
  </para>
 </chapter>
 <chapter xml:id="glibc-Canonical-or-Not">
  <title>İki Girdi Tarzı: Kurallı ve Kuralsız</title>
  <titleabbrev>İki temel girdi işleme tarzı.</titleabbrev>
  <para>
   POSIX sistemleri iki temel girdi kipini destekler: kurallı ve kuralsız.
  </para>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>girdi işleme</secondary><tertiary>kurallı</tertiary></indexterm>
   <wordasword>Kurallı girdi işleme</wordasword> kipinde girdi, satır sonu (<code>'\n'</code>), <varname>'EOF'</varname> veya <varname>EOL</varname> karakterleri ile sonlandırılmış satırlar halinde işlenir. Kullanıcı tarafından satırın tamamı yazılana kadar hiçbir girdi okunmaz. Girdi alındıktan sonra, kaç bayt istendiğine bakılmaksızın <function>read</function> (<xref linkend="glibc-I-O-Primitives"/>) işlevi tek satırlık bir girdi ile döner.
  </para>
  <para>
   Kurallı girdi kipinde, girdi düzenleme oluşumlarını işletim sistemi sağlar: o anki metin satırı içindeki bazı karakterler metin düzenleme işlemlerini gerçekleştiren <varname>ERASE</varname> ve <varname>KILL</varname> gibi özel karakterler olarak yorumlanır. Bkz. <xref linkend="glibc-Editing-Characters"/>.
  </para>
  <para>
   Kurallı kipte tek bir satırda bulunabilecek karakterlerin sayısının üst sınırını <varname>_POSIX_MAX_CANON</varname> ve <varname>MAX_CANON</varname> sabitleri belirler. Bkz. <xref linkend="glibc-Limits-for-Files"/>.  Satır uzunluğunun en azından <varname>MAX_INPUT</varname> karakterlik olacağı düşünülebilir, ancak satır daha uzun olabilir ve hatta uzunluğu özdevimli olarak değişebilir.
  </para>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>girdi işleme</secondary><tertiary>kuralsız</tertiary></indexterm>
   <wordasword>Kuralsız girdi işleme</wordasword> kipinde karakterler satırlar halinde gruplanmaz, <varname>ERASE</varname> ve <varname>KILL</varname> gibi metin düzenleme karakterleri dikkate alınmaz. Girdinin baytlar halinde okunduğu kuralsız girdi kipi  <varname>MIN</varname> ve <varname>TIME</varname> değerleri ile denetlenir. Bkz. <xref linkend="glibc-Noncanonical-Input"/>.
  </para>
  <para>
   Çoğu uygulama kurallı girdi kipini kullanır, çünkü bu kip kullanıcıya metni satır satır düzenleyebilme imkanı verir. Uygulama tek karakterlik komutlar kabul edecekse ve kendi metin düzenleme oluşumları olacaksa kuralsız kip tercih edilir.
  </para>
  <para>
   Kurallı ve kuralsız girdi seçimi <type>struct&nbsp;termios</type> yapısının <code>c_lflag</code> üyesinde <varname>ICANON</varname> seçeneğinin kullanılmasına bağlıdır. Bkz. <xref linkend="glibc-Local-Modes"/>.
  </para>
 </chapter>
 <chapter xml:id="glibc-Terminal-Modes" userlevel="longtoc">
  <title>Uçbirim Kipleri</title>
  <titleabbrev>Uçbirimlerde G/Ç ile ilgili seçeneklere (yansılama, sinyaller, metin düzenleme) erişim ve değişiklik.</titleabbrev>
  <preliminary>
   <para>
    <indexterm linkend="glibc-pg"><primary>termios.h</primary></indexterm>
    Bu kısımda girdi ve çıktının denetiminde kullanılan çeşitli uçbirim öznitelikleri açıklanmıştır. Bu kısımdaki işlevler, veri yapıları ve simgesel sabitler &termios.h; başlık dosyasında bildirilmiştir.
   </para>
   <para>
    Uçbirim öznitelikleri ile dosya özniteliklerini birbirine karıştırılmamalıdır. Uçbirimle ilişkilendirilmiş aygıt özel dosyası <xref linkend="glibc-File-Attributes"/> bölümünde anlatılan dosya özniteliklerine sahiptir ve bunlar uçbirim aygıtının bu bölümde bahsedilecek öznitelikleri ile ilgili değildir.
   </para>
  </preliminary>
  <sect1 xml:id="glibc-Mode-Data-Types">
   <title>Uçbirim Kipi Veri Türleri</title>
   <titleabbrev><code>struct termios</code> ve diğer veri türleri.</titleabbrev>
   <para>
    <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>veri türleri</secondary></indexterm>
    Uçbirim özniteliklerinin tamamı <type>struct&nbsp;termios</type> türünde bir yapı içinde saklanır. Bu yapı, öznitelikleri okumak ve değiştirmek için <function>tcgetattr</function> ve <function>tcsetattr</function> işlevleri ile kullanılır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-termios"><primary sortas="termios">struct&nbsp;termios</primary></indexterm>
    <csproto type="veri türü">
     <csname><type>struct</type><function>termios</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Uçbirim G/Ç özniteliklerinin kaydedildiği yapıdır. Yapı en azından şu üyeleri içerir:
    </para>
    <glosslist>
     <glossentry>
      <glossterm>
       <type>tcflag_t&nbsp;</type><structfield>c_iflag</structfield>
      </glossterm>
      <glossdef>
       <para>
        Girdi kipleri ile ilgili seçenekleri belirleyen bit maskesi; bkz. <xref linkend="glibc-Input-Modes"/>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>tcflag_t&nbsp;</type><structfield>c_oflag</structfield>
      </glossterm>
      <glossdef>
       <para>
        Çıktı kipleri ile ilgili seçenekleri belirleyen bit maskesi; bkz. <xref linkend="glibc-Output-Modes"/>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>tcflag_t&nbsp;</type><structfield>c_cflag</structfield>
      </glossterm>
      <glossdef>
       <para>
        Denetim kipleri ile ilgili seçenekleri belirleyen bit maskesi; bkz. <xref linkend="glibc-Control-Modes"/>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>tcflag_t&nbsp;</type><structfield>c_lflag</structfield>
      </glossterm>
      <glossdef>
       <para>
        Yerel kipler ile ilgili seçenekleri belirleyen bit maskesi; bkz. <xref linkend="glibc-Local-Modes"/>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>cc_t&nbsp;</type><structfield>c_cc[NCCS]</structfield>
      </glossterm>
      <glossdef>
       <para>
        Çeşitli denetim işlevleri ile ilişkili karakterlerin belirtildiği dizi; bkz. <xref linkend="glibc-Special-Characters"/>.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
    <para>
     <code>struct termios</code> yapısı, ayrıca girdi ve çıktı iletim hızlarını kodlayan üyeler de içerir, fakat gösterim belirlenmemiştir. Hız değerlerinin nasıl öğrenileceği ve belirtileceği <xref linkend="glibc-Line-Speed"/> bölümünde açıklanmıştır.
    </para>
   </csynopsis>
   <para>
    <type>struct&nbsp;termios</type> yapısının üyeleri bundan sonraki bölümlerde ayrı ayrı ele alınıp açıklanacaktır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-tcflag_t"><primary>tcflag_t</primary></indexterm>
    <csproto type="veri türü">
     <csname><function>tcflag_t</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Çeşitli uçbirim seçenekleri ile ilgili bit maskeleri için kullanılan imsiz tamsayı türdür.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-cc_t"><primary>cc_t</primary></indexterm>
    <csproto type="veri türü">
     <csname><function>cc_t</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Çeşitli uçbirim denetim işlevleri ile ilgili karakterler için kullanılan imsiz tamsayı türdür.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-NCCS"><primary>NCCS</primary></indexterm>
    <csproto type="makro">
     <csname><type>int</type><function>NCCS</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     <code>c_cc</code> dizisinin eleman sayısını belirleyen makro.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Mode-Functions">
   <title>Uçbirim Kipi İşlevleri</title>
   <titleabbrev>Uçbirim özniteliklerini okumak ve ayarlamak için kullanılan işlevler.</titleabbrev>
   <csynopsis>
    <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>kip işlevleri</secondary></indexterm>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-tcgetattr"><primary>tcgetattr</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>tcgetattr</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter></csparam>
     <csparam><ptr>struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili uçbirim aygıtının özniteliklerini öğrenmek için kullanılır. Öznitelikler <parameter>termios-p</parameter> ile gösterilen yapı içinde döner.
    </para>
    <para>
     <code>tcgetattr</code> başarılıysa <code>0</code> ile, değilse bir hata oluştuğunu belirtmek üzere <code>-1</code> ile döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EBADF</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> bağımsız değişkeni geçerli dosya tanıtıcısı değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>ENOTTY</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> uçbirimle ilişkili değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-tcsetattr"><primary>tcsetattr</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>tcsetattr</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter></csparam>
     <csparam><type>int</type><parameter>when</parameter></csparam>
     <csparam><ptr>const&nbsp;struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili uçbirim aygıtının özniteliklerini ayarlamak için kullanılır.  Yeni öznitelikler <parameter>termios-p</parameter> ile gösterilen yapı içinde alınır.
    </para>
    <para>
     <parameter>when</parameter> bağımsız değişkeni kuyruklanmış girdi ve çıktının ne zaman işleme sokulacağını belirtmek için kullanılır. Şu değerlerden birini içerebilir:
    </para>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCSANOW"><primary>TCSANOW</primary></indexterm>
     <csproto type="sabit">
      <csname><function>TCSANOW</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Değişiklik hemen yapılır.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCSADRAIN"><primary>TCSADRAIN</primary></indexterm>
     <csproto type="sabit">
      <csname><function>TCSADRAIN</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Kuyruktaki tüm çıktı yazıldıktan sonra değişiklik yapılır. Bu seçenek çıktıyı etkileyen bağımsız değişkenler değiştirilirken kullanılmalıdır.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCSAFLUSH"><primary>TCSAFLUSH</primary></indexterm>
     <csproto type="sabit">
      <csname><function>TCSAFLUSH</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      <varname>TCSADRAIN</varname> gibidir, ek olarak kuyruktaki tüm girdi iptal edilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCSASOFT"><primary>TCSASOFT</primary></indexterm>
     <csproto type="sabit">
      <csname><function>TCSASOFT</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Yukarıdaki seçeneklerin her birinin eklenebileceği seçenek bitidir. Uçbirim donanımının durum değiştirmesinin yasaklanması anlamına gelir. BSD oluşumudur ve sadece BSD sistemleri ile GNU/Hurd sistemlerinde desteklenir.
     </para>
     <para>
      <code>TCSASOFT</code> kullanımı, <parameter>termios-p</parameter> ile gösterilen yapının <code>c_cflag</code> üyesine <varname>CIGNORE</varname> bitinin atanması ile tamamen aynıdır. <varname>CIGNORE</varname> ile ilgili daha fazla bilgi için bkz, <xref linkend="glibc-Control-Modes"/>.
     </para>
    </csynopsis>
    <para>
     Bu işlev kendi denetim uçbirimi ile ilgili olarak bir art alan sürecinden çağrılmışsa, kendi süreç grubundaki tüm süreçler, sürecin yazmaya çalıştığı yolla  bir <varname>SIGTTOU</varname> sinyali gönderir. Ancak, işlevi çağıran sürecin <varname>SIGTTOU</varname> sinyallerini engellemesi ya da yok sayması durumunda işlem yine yapılır ama sinyal gönderilmez. Bkz. <xref linkend="glibc-Job-Control"/>.
    </para>
    <para>
     <code>tcsetattr</code> başarılıysa <code>0</code> ile, değilse bir hata oluştuğunu belirtmek üzere <code>-1</code> ile döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EBADF</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> bağımsız değişkeni geçerli dosya tanıtıcısı değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>ENOTTY</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> uçbirimle ilişkili değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EINVAL</code></term>
      <listitem>
       <para>
        Ya <parameter>when</parameter> bağımsız değişkeni geçersiz ya da <parameter>termios-p</parameter> bağımsız değişkenindeki veride bir şeyler yanlış.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <para>
    <function>tcgetattr</function> ve <function>tcsetattr</function> işlevleri uçbirim aygıtını dosya tanıtıcısı ile belirttiği halde, öznitelikler dosya tanıtıcısının değil uçbirim aygıtının kendisine aittir. Bu, uçbirim aygıtının özniteliklerindeki değişikliklerin kalıcı olduğu anlamına gelir; eğer başka bir süreç daha sonra bu uçbirimi açarsa, süreç dosya tanıtıcısını açarken özniteliklerde belirtilen değişikliklere ilişkin hiçbir şey yapmadığı halde değişmiş öznitelikleri görecektir.
   </para>
   <para>
    Benzer şekilde, tek bir sürecin aynı uçbirim için çok sayıda veya yinelenmiş dosya tanıtıcıları varsa, uçbirim özniteliklerindeki değişiklikler tüm dosya tanıtıcılarının girdi ve çıktılarını etkiler. Yani, uçbirim tek karakter okunan, yansılama yapılmayan kipte kullanılıyorsa aynı uçbirim farklı bir dosya tanıtıcı kullanılarak satır tamponlu, yansılanan kipte açılamaz. Ama uçbirim önce istenen kipe sokulup açılabilir, iş bittikten sonra diğer kipe geçilip uçbirim bırakılabilir.
   </para>
  </sect1>
  <sect1 xml:id="glibc-Setting-Modes">
   <title>Uçbirim Kiplerinin Doğru Dürüst Belirtilmesi</title>
   <titleabbrev>Uçbirim özniteliklerinin olması gerektiği gibi ayarlanması.</titleabbrev>
   <para>
    Uçbirimin kipi değiştirileceği zaman, önce <function>tcgetattr</function> çağrısı ile uçbirim aygıtının o anki kipi öğrenilmeli, bu kip istenen özniteliklerle değiştirildikten sonra sonuç <function>tcsetattr</function> çağrısı ile uçbirime gönderilmelidir.
   </para>
   <para>
    <type>struct&nbsp;termios</type> yapısını basitçe ilklendirilip öznitelikler istendiği gibi değiştirildikten sonra <function>tcsetattr</function> işleviyle aktarılması hiç iyi bir yöntem değildir. Yazılımın yıllar sonra bu kılavuzda belgelenmemiş üyelerin desteklendiği sistemlerde çalışabileceği varsayılmalıdır. İlgilenilmeyen yapı üyelerinin değiştirilmesinden kaçınmak en iyi yöntemdir.
   </para>
   <para>
    Dahası, farklı uçbirim aygıtları farklı kip seçimleri gerektirebilir. Bu bakımdan özniteliklerin bir uçbirimden diğerine körü körüne kopyalanmasından da kaçınılmalıdır.
   </para>
   <para>
    <code>c_iflag</code>, <code>c_oflag</code> ve <code>c_cflag</code> üyelerinde olduğu gibi bir üye çok sayıda seçenek içeriyorsa üyenin değerini tamamen değiştirmek de kötü olacaktır. Bunu yapmak yerine üyeyi mevcut değerlerle başlatmalı ve ilgisiz seçeneklere dokunmadan sadece yazılım için gerekli seçenekler değiştirilmelidir.
   </para>
   <example>
    <para>
     Bu örnekte <type>struct&nbsp;termios</type> yapısındaki diğer verilere dokunmadan sadece bir seçeneğin (<varname>ISTRIP</varname>) değiştirilmesi gösterilmiştir:
    </para>
    <screen>int
set_istrip (int desc, int value)
{
  struct termios settings;
  int result;

  result = tcgetattr (desc, &amp;settings);
  if (result &lt; 0)
    {
      perror ("error in tcgetattr");
      return 0;
    }

  settings.c_iflag &amp;= ~ISTRIP;
  if (value)
    settings.c_iflag |= ISTRIP;

  result = tcsetattr (desc, TCSANOW, &amp;settings);
  if (result &lt; 0)
    {
      perror ("error in tcsetattr");
      return 0;
   }
  return 1;
}
</screen>
   </example>
  </sect1>
  <sect1 xml:id="glibc-Input-Modes">
   <title>Girdi Kipleri</title>
   <titleabbrev>Düşük seviyeli girdi alımını denetleyen seçenekler.</titleabbrev>
   <para>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-LFD"><primary>LFD</primary></indexterm>
    Bu bölümde girdi işleme ile ilgili düşük seviyeli özellikleri denetlemeye yarayan uçbirim özniteliklerinden bahsedilmiştir: eşlik hatalarının yakalanması, geçici kesme sinyalleri, akış denetimi, <varname>RET</varname> ve <varname>LFD</varname> karakterleri.
   </para>
   <para>
    Bu seçeneklerin hepsi <type>struct&nbsp;termios</type> yapısının <code>c_iflag</code> üyesindeki bitlerdir. Üye bir tamsayıdır ve bu seçenekler <command>&amp;</command>, <command>|</command> ve <command>^</command> işleçleri ile değiştirilebilir. <code>c_iflag</code> üyesinin değeri toptan değiştirilmeye çalışılmamalıdır; ilgisiz seçeneklere dokunmadan sadece gereken seçenekler değiştirilmelidir (bkz. <xref linkend="glibc-Setting-Modes"/>).
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-INPCK"><primary>uçbirim kipleri</primary><secondary>girdi eşlik sınaması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-INPCK"><primary>INPCK</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>INPCK</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, girdi eşlik sınaması etkindir. Yoksa, girdideki eşlik hataları ile ilgili hiçbir şey yapılmaz; karakterler basitçe uygulamaya aktarılır.
    </para>
    <para>
     Girdi işlemede eşlik sınaması, ilgili uçbirim donanımında eşlik üretiminin ve eşlik saptanmasının etkin olup olmamasından bağımsızdır; bkz. <xref linkend="glibc-Control-Modes"/>.  Örneğin, <code>INPCK</code> girdi kipi seçeneğini temizlenip, <varname>PARENB</varname> denetim kipi seçeneği etkileştirilip girdideki eşlik hataları yok sayılırken çıktıda hala eşlik üretilebilir.
    </para>
    <para>
     Bu bit varsa, bir eşlik hatası saptanırken <varname>IGNPAR</varname> veya <varname>PARMRK</varname> bitlerinin varlığı veya yokluğu önem kazanır. Bu bitlerin hiçbiri yoksa, eşlik hatası olan bir bayt uygulamaya <code>'\0'</code> karakteri olarak aktarılır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IGNPAR"><primary>uçbirim kipleri</primary><secondary>girdi tertip ve eşlik hataları</secondary><tertiary>yok sayılması</tertiary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IGNPAR"><primary>IGNPAR</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IGNPAR</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     <dicterm><english>framing</english><turkish>tertip (uçbirimler)</turkish></dicterm>
     <dicterm><english>parity</english><turkish>eşlik (uçbirimler)</turkish></dicterm>
     Bu bit varsa, tertip veya eşlik hataları olan baytlar yok sayılır. Bu seçenek <varname>INPCK</varname> seçeneği de etkinse işe yarar.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-PARMRK"><primary>uçbirim kipleri</primary><secondary>girdi tertip ve eşlik hataları</secondary><tertiary>baytların imlenmesi</tertiary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-PARMRK"><primary>PARMRK</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>PARMRK</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, tertip veya eşlik hataları olan baytlar yazılıma aktarılırken imlenir. Bu bit <varname>INPCK</varname>'ın varlığı ve <varname>IGNPAR</varname>'ın yokluğu durumunda anlamlıdır.
    </para>
    <para>
     Hatalı baytlar, baytlardan önce gönderilen iki baytla, <code>'\377'</code> ve <code>'\0'</code> baytları ile imlenir. Dolaysıyla, yazılım, hatalı baytı uçbirimden alırken aslında üç bayt okur.
    </para>
    <para>
     Geçerli bayt <code>'\377'</code> değerine sahipse ve <varname>ISTRIP</varname> seçeneği etkinse yazılım bu baytı bir eşlik hatasının imi olarak ele alabilir. Bunu önlemek, yani <code>'\377'</code> karakterinin kendisi olarak ele alınmasını sağlamak için bu bayt yazılıma 2 bayt olarak, <code>'\377'</code>, <code>'\377'</code> olarak aktarılmalıdır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ISTRIP"><primary>uçbirim kipleri</primary><secondary>sekizinci bitin sıyrılması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ISTRIP"><primary>ISTRIP</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ISTRIP</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, geçerli girdi baytları yedi bit uzunlukta kabul edilir; aksi takdirde, hepsi sekiz bit kabul edilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IGNBRK"><primary>uçbirim kipleri</primary><secondary>geçici kesme durumu</secondary><tertiary>yok sayılması</tertiary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IGNBRK"><primary>IGNBRK</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IGNBRK</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, geçici kesme durumları yosayılır.
    </para>
    <para>
     <firstterm>Geçici kesme durumu</firstterm>, eşzamansız seri veri iletişimi bağlamında tek bir bayttan daha uzun sıfır değerli bitler olarak tanınır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-BRKINT"><primary>uçbirim kipleri</primary><secondary>geçici kesme durumu</secondary><tertiary>sinyal gönderimi</tertiary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-BRKINT"><primary>BRKINT</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>BRKINT</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa ve <varname>IGNBRK</varname> yoksa bir geçici kesme durumu saptandığında uçbirim girdi ve çıktı kuyrukları temizlenir ve uçbirimle ilişkili ön alan süreç grubuna <varname>SIGINT</varname> sinyali gönderilir.
    </para>
    <para>
     Ne <code>BRKINT</code> ne de <varname>IGNBRK</varname> varsa ve geçici kesme durumu saptandığında <varname>PARMRK</varname> yoksa uygulamaya tek bir <code>'\0'</code> karakteri, <varname>PARMRK</varname> varsa üç karakterlik bir dizi, <code>'\377'</code>, <code>'\0'</code>, <code>'\0'</code> gönderilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IGNCR"><primary>uçbirim kipleri</primary><secondary>satır-başı karakteri</secondary><tertiary>yok sayılması</tertiary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-RET"><primary>RET</primary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IGNCR"><primary>IGNCR</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IGNCR</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa girdideki satır-başı (<command>'\r'</command>) karakterleri iptal edilir. Satır başı karakterinin iptal edilmesi <varname>RET</varname> tuşuna basıldığında hem satır-sonu hem de satır-başı karakteri gönderen uçbirimlerde yararlıdır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ICRNL"><primary>uçbirim kipleri</primary><secondary>satır-başı yerine satır-sonu gönderilmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ICRNL"><primary>ICRNL</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ICRNL</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa ve <varname>IGNCR</varname> yoksa, girdiden alınan satır-başı (<command>'\r'</command>) karakterleri uygulamaya satır-sonu (<command>'\n'</command>) karakterleri olarak aktarılır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-INLCR"><primary>uçbirim kipleri</primary><secondary>satır-sonu yerine satır-başı gönderilmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-INLCR"><primary>INLCR</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>INLCR</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, girdiden alınan satır-sonu (<command>'\n'</command>) karakterleri uygulamaya satır-başı (<command>'\r'</command>) karakterleri olarak aktarılır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IXOFF"><primary>uçbirim kipleri</primary><secondary>girdide başlat/durdur denetimi</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IXOFFSTART"><primary>uçbirim kipleri</primary><secondary>girdide başlat/durdur denetimi</secondary><tertiary>START karakteri</tertiary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IXOFFSTOP"><primary>uçbirim kipleri</primary><secondary>girdide başlat/durdur denetimi</secondary><tertiary>STOP karakteri</tertiary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-START"><primary>uçbirim karakter kodları</primary><secondary>START</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-STOP"><primary>uçbirim karakter kodları</primary><secondary>STOP</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IXOFF"><primary>IXOFF</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IXOFF</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, girdi üzerinde başlat/durdur denetimi etkinleştirilir. Başka bir deyişle, girdi uygulamanın okuyabileceğinden daha hızlı geliyorsa bilgisayar gerektiği zaman <varname>STOP</varname> ve <varname>START</varname> karakterleri gönderir. Bu fikir, gerçek uçbirim donanımının iletişimi <varname>STOP</varname> karakteri geldiğinde beklemeye alması, <varname>START</varname> karakterinde ise iletişime kaldığı yerden devam ettirmesi esasına dayanır. Bkz. <xref linkend="glibc-Start-Stop-Characters"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IXON"><primary>uçbirim kipleri</primary><secondary>çıktıda başlat/durdur denetimi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IXON"><primary>IXON</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IXON</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, çıktı üzerinde başlat/durdur denetimi etkinleştirilir. Başka bir deyişle, bilgisayar bir karakteri aldığında çıktıyı bir <varname>START</varname> karakteri alıncaya kadar bekletir. Bu durumda uygulamaya <varname>STOP</varname> ve <varname>START</varname> karakterleri kesinlikle aktarılmaz. Bu bit yoksa, <varname>STOP</varname> ve <varname>START</varname> karakterleri sıradan karakterler olarak okunabilir. Bkz. <xref linkend="glibc-Start-Stop-Characters"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IXANY"><primary>uçbirim kipleri</primary><secondary>durmuş çıktının başlatılması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IXANY"><primary>IXANY</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IXANY</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, <varname>STOP</varname> karakteri ile bekletilen çıktıyı herhangi bir girdi karakteri başlatır. Aksi takdirde bekletilen çıktılama sadece <varname>START</varname> karakteri ile sürdürülür.
    </para>
    <para>
     Bu bit BSD oluşumudur; sadece BSD sistemlerinde ve GNU/Hurd sistemlerinde desteklenir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IMAXBEL"><primary>uçbirim kipleri</primary><secondary>çanı çaldırmak</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-BEL"><primary>BEL</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-BEL"><primary>uçbirim karakter kodları</primary><secondary>BEL</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IMAXBEL"><primary>IMAXBEL</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IMAXBEL</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, uçbirim girdi tamponu dolduğunda uçbirime çanı çaldırmak için BELL karakteri (<code>007</code>) gönderilir.
    </para>
    <para>
     Bu bit BSD oluşumudur.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Output-Modes">
   <title>Çıktı Kipleri</title>
   <titleabbrev>Düşük seviyeli çıktılamayı denetleyen seçenekler.</titleabbrev>
   <para>
    Bu bölümde çıktı karakterlerinin nasıl dönüştürüleceği ve gösterilirken nasıl biçimleneceği ile ilgili seçenekler ve alanlar açıklanmıştır. Bunların tamamı <type>struct&nbsp;termios</type> yapısının <code>c_oflag</code> üyesindeki değerin içinde yer alır.
   </para>
   <para>
    Üye bir tamsayıdır ve bu seçenekler <command>&amp;</command>, <command>|</command> ve <command>^</command> işleçleri ile değiştirilebilir. <code>c_oflag</code> üyesinin değeri toptan değiştirilmemelidir; ilgisiz bitlere dokunmadan sadece ilgili bitler değiştirilmelidir (bkz. <xref linkend="glibc-Setting-Modes"/>).
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-OPOST"><primary>uçbirim kipleri</primary><secondary>çıktı verisinin işlenmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-OPOST"><primary>OPOST</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>OPOST</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, çıktı verisi ilgili uçbirim aygıtında gösterilmek üzere bir takım yollarla işlenir. Bu işlem genellikle satır-sonu ve satır-başı karakterlerinin satır-sonu (<code>'\n'</code>) karakteri ile değiştirilmesi şeklinde olur.
    </para>
    <para>
     Bu bit yoksa, karakterler oldukları gibi aktarılırlar.
    </para>
   </csynopsis>
   <para>
    Aşağıdaki üç bit sadece <varname>OPOST</varname> bitinin varlığında anlamlıdır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ONLCR"><primary>uçbirim kipleri</primary><secondary>satır-sonundan sonra satır-başı eklenmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ONLCR"><primary>ONLCR</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ONLCR</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, satır-sonu karakterlerinin önüne birer satır-başı karakteri yerleştirilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-OXTABS"><primary>uçbirim kipleri</primary><secondary>sekme karakteri eklenmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-OXTABS"><primary>OXTABS</primary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-XTABS"><primary>XTABS</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>OXTABS</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, sekme karakterleri sekizlik sütunlar oluşturacak biçimde boşluk karakteri ile değiştirilir. Bu bit yalnızca BSD ve GNU/Hurd sistemlerinde mevcuttur. GNU/Linux sistemlerinde <code>XTABS</code> olarak yer alır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ONOEOT"><primary>uçbirim kipleri</primary><secondary>hattın kesilmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ONOEOT"><primary>ONOEOT</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ONOEOT</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, çıktıdaki <keycap>C-d</keycap> (<code>004</code>) karakterleri iptal edilir. Bu karakterler çoğu çevirmeli ağ uçbiriminde hattın kesilmesine yol açar. Bu bit yalnızca BSD ve GNU/Hurd sistemlerinde mevcuttur.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Control-Modes">
   <title>Denetim Kipleri</title>
   <titleabbrev>Seri port davranışını denetleyen seçenekler.</titleabbrev>
   <para>
    Bu bölümde eşzamansız seri veri iletimi ile ilgili denetim değişkenleri olan uçbirim seçenekleri ve alanlarından bahsedilecektir. Bu seçenekler diğer uçbirim port çeşitlerinde etkisiz olabilir (örneğin, bir ağ bağlantısı olarak sözde uçbirimler). Bu seçeneklerin tamamı <type>struct&nbsp;termios</type> yapısının <code>c_cflag</code> üyesinin bitleridir.
   </para>
   <para>
    <code>c_cflag</code> üyesi bir tamsayıdır ve bu seçenekler <command>&amp;</command>, <command>|</command> ve <command>^</command> işleçleri ile değiştirilebilir. <code>c_cflag</code> üyesinin değeri toptan değiştirilmemelidir; ilgisiz bitlere dokunmadan sadece ilgili bitler değiştirilmelidir (bkz. <xref linkend="glibc-Setting-Modes"/>).
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CLOCAL"><primary>uçbirim kipleri</primary><secondary>yerel olmak</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CLOCAL1"><primary>modem durum satırları</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CLOCAL2"><primary>taşıyıcının saptanması</primary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CLOCAL"><primary>CLOCAL</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CLOCAL</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, uçbirimin "yerel olarak" bağlı olduğu ve modem durum satırlarının (örneğin, taşıyıcının saptanması) yok sayıldığı anlaşılır.
    </para>
    <para>
     Bu bit yoksa, <function>open</function> işlevi <varname>O_NONBLOCK</varname> seçeneğinin yokluğunda çağrılırsa, çoğu sistemde <function>open</function> işlevi bir modem bağlantısı sağlanıncaya kadar engellenir.
    </para>
    <para>
     Bu bit yoksa ve modem bağlantısı saptanamazsa, (eğer varsa) uçbirim için denetim süreç grubuna <varname>SIGHUP</varname> sinyali gönderilir. Bir bağlantı kesilmesinden sonraki okuma işlemleri dosya sonu durumuna, yazma işlemleri ise <varname>EIO</varname> hatasının dönmesine sebep olur. Bu durumu ortadan kaldırmak için uçbirim aygıtı kapatılıp yeniden açılmalıdır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-HUPCL"><primary>uçbirim kipleri</primary><secondary>modem bağlantı kesmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-HUPCL"><primary>HUPCL</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>HUPCL</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, açık uçbirim aygıtı olan tüm süreçler çıktığında ya da dosyalarını kapattıklarında <wordasword>modem bağlantı kesmesi</wordasword> üretilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CREAD"><primary>uçbirim kipleri</primary><secondary>girdinin okunması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CREAD"><primary>CREAD</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CREAD</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, girdi uçbirimden okunabilir. Aksi takdirde, girdi geldiği anda iptal edilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CSTOPB"><primary>uçbirim kipleri</primary><secondary>durdurma bitinin gönderilmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CSTOPB"><primary>CSTOPB</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CSTOPB</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, iki durdurma biti kullanılır. Aksi takdirde, sadece bir durdurma biti kullanılır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-PARENB"><primary>uçbirim kipleri</primary><secondary>eşlik bitinin üretimi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-PARENB"><primary>PARENB</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>PARENB</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, eşlik bitinin üretimi ve saptanması etkinleştirilir. Girdideki eşlik hatalarının nasıl ele alındığı <xref linkend="glibc-Input-Modes"/> bölümünde anlatılmıştır.
    </para>
    <para>
     Bu bit yoksa, çıktı karakterlerinde eşlik biti eklenmez ve girdi karakterlerinde eşlik bitlerinin doğruluğuna bakılmaz.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-PARODD"><primary>uçbirim kipleri</primary><secondary>tek/çift eşlik</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-PARODD"><primary>PARODD</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>PARODD</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit sadece <varname>PARENB</varname> biti varsa anlamlıdır. <code>PARODD</code> biti varsa tek eşlik kullanılır, aksi takdirde çift eşlik kullanılır.
    </para>
    <para>
     Denetim kipi seçenekleri ayrıca karakter başına bit sayısı için bir alan içerir. Bu değeri çıkarmak için <varname>CSIZE</varname> makrosu maske olarak kullanılabilir: <code>settings.c_cflag &amp; CSIZE</code>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CSIZE"><primary>uçbirim kipleri</primary><secondary>karakter başına bit sayısı maskesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CSIZE"><primary>CSIZE</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CSIZE</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Karakter başına bit sayısı için maskedir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CS5"><primary>uçbirim kipleri</primary><secondary>beş bitlik baytlar</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CS5"><primary>CS5</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CS5</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Her baytın beş bit olduğunu belirtir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CS6"><primary>uçbirim kipleri</primary><secondary>altı bitlik baytlar</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CS6"><primary>CS6</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CS6</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Her baytın altı bit olduğunu belirtir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CS7"><primary>uçbirim kipleri</primary><secondary>yedi bitlik baytlar</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CS7"><primary>CS7</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CS7</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Her baytın yedi bit olduğunu belirtir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CS8"><primary>uçbirim kipleri</primary><secondary>sekiz bitlik baytlar</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CS8"><primary>CS8</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CS8</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Her baytın sekiz bit olduğunu belirtir.
    </para>
   </csynopsis>
   <para>
    Aşağıdaki dört bit BSD oluşumudur; sadece BSD sistemlerinde ve GNU/Hurd sistemlerinde vardır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CCTS_OFLOW"><primary>uçbirim kipleri</primary><secondary>CTS teli çıktı akış denetimi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CCTS_OFLOW"><primary>CCTS_OFLOW</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CCTS_OFLOW</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, CTS teline (RS232 protokolü) göre çıktı akış denetimi etkin olur.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CRTS_IFLOW"><primary>uçbirim kipleri</primary><secondary>RTS teli girdi akış denetimi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CRTS_IFLOW"><primary>CRTS_IFLOW</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CRTS_IFLOW</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, RTS teline (RS232 protokolü) göre girdi akış denetimi etkin olur.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-MDMBUF"><primary>uçbirim kipleri</primary><secondary>taşıyıcılı çıktı akış denetimi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-MDMBUF"><primary>MDMBUF</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>MDMBUF</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, taşıyıcı bazlı çıktı akış denetimi etkin olur.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CIGNORE"><primary>uçbirim kipleri</primary><secondary>denetim kiplerinin yok sayılması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CIGNORE"><primary>CIGNORE</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>CIGNORE</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, denetim kiplerinin ve hat hızı değerlerinin tamamen yok sayıldığı anlamına gelir. Bu sadece bir <function>tcsetattr</function> çağrısı ile anlam kazanır.
    </para>
    <para>
     <function>cfgetispeed</function> ve <function>cfgetospeed</function> çağrılarından dönen hız değerleri ile <code>c_cflag</code> üyesi çağrı ile etkisiz olacaktır. <code>c_cflag</code> içindeki donanımla ilgili ayrıntılara dokunmadan diğer üyelerdeki yazılımsal kiplerin tamamı değiştirilmek istenirse <code>CIGNORE</code> faydalıdır. (Bu, <function>tcsetattr</function> ile <varname>TCSASOFT</varname> seçeneğinin atanması ile ilgilidir.)
    </para>
    <para>
     Bu bit <function>tcgetattr</function> tarafından döndürülen yapıda asla bulunmaz.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Local-Modes">
   <title>Yerel Kipler</title>
   <titleabbrev>Yüksek seviyeli girdi işlemeyi denetleyen seçenekler.</titleabbrev>
   <para>
    Bu bölümde <type>struct&nbsp;termios</type> yapısının <code>c_lflag</code>  üyesindeki seçeneklerden bahsedilecektir. Bu seçenekler genelde <xref linkend="glibc-Input-Modes"/> bölümünde bahsedilen girdi kipleri seçeneklerinden yansılama, sinyaller, kurallı ve kuralsız girdi seçimi gibi girdi işlemenin daha yüksek seviyeli işlemlerini denetler.
   </para>
   <para>
    <code>c_lflag</code> üyesi tamsayıdır ve bu seçenekler <command>&amp;</command>, <command>|</command> ve <command>^</command> işleçleri ile değiştirilebilir. <code>c_lflag</code> üyesinin değeri toptan değiştirilmemelidir; ilgisiz bitlere dokunmadan sadece ilgili bitler değiştirilmelidir (bkz. <xref linkend="glibc-Setting-Modes"/>).
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ICANON"><primary>uçbirim kipleri</primary><secondary>kurallı girdi işleme kipi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ICANON"><primary>ICANON</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ICANON</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, kurallı girdi işleme kipi etkin olur. Aksi takdirde, girdi kuralsız kipte işlenir. Bkz. <xref linkend="glibc-Canonical-or-Not"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHO"><primary>uçbirim kipleri</primary><secondary>girdi karakterlerinin uçbirime yansılanması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHO"><primary>ECHO</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHO</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, girdi karakterlerinin uçbirime yansılanması etkin olur.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHOE"><primary>uçbirim kipleri</primary><secondary>son satırın son karakterinin silinmesi</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ERASE"><primary>uçbirim karakter kodları</primary><secondary>ERASE</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHOE"><primary>ECHOE</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHOE</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, yansılama sırasında girdi, ekrandaki son satırın son karakteri <varname>ERASE</varname> karakteri tarafından silinmiş olarak gösterilir. Aksi takdirde silinen karakter yansılanıp silinerek ne yapılmış olduğu gösterilir (girdinin gösterildiği uçbirimlerde yararlıdır).
    </para>
    <para>
     Bu bit sadece gösterim sırasındaki davranışı denetler; <varname>ERASE</varname> karakterinin davranışını ve girdinin silinmesini, tamamen ilgisiz olan <code>ECHOE</code>'nin hangisi olduğuna bakılmaksızın, <varname>ICANON</varname> biti ile denetlenir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHOPRT"><primary>uçbirim kipleri</primary><secondary>son karakterin silinmesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHOPRT"><primary>ECHOPRT</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHOPRT</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit <varname>ECHOE</varname> gibidir, <varname>ERASE</varname> karakteri mekanik uçbirimdekine benzer bir yolla gösterilir. <varname>ERASE</varname> karakteri tuşlandığında silinen ilk karakterin öncesine bir <command>\</command> karakteri basılır. <varname>ERASE</varname> karakteri tekrar tuşlanırsa sonraki karakter silinir. Bunun ardından normal karakterlerden biri tuşlanırsa karakter basılmadan önce bir <command>/</command> karakteri basılır.
    </para>
    <para>
     Bu bit BSD oluşumudur ve yalnızca BSD, GNU/Linux ve GNU/Hurd sistemlerinde vardır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHOK"><primary>uçbirim kipleri</primary><secondary>satırı silmek</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-KILL"><primary>uçbirim karakter kodları</primary><secondary>KILL</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHOK"><primary>ECHOK</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHOK</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit, <varname>KILL</varname> karakteri normal olarak yansılandıktan sonra yeni satıra geçilmesini sağlayarak, <varname>KILL</varname> karakterinin özel bir gösterimini etkinleştirir. <varname>ECHOKE</varname> (aşağıda) davranışı bundan daha hoş görünür.
    </para>
    <para>
     Bu bit yoksa, <varname>KILL</varname> karakteri yokmuşçasına yansılanır. Kullanıcı sadece  <varname>KILL</varname> karakterinin önceki girdiyi sildiğini hatırlayacak, ekranda bunun belirtisi görülmeyecektir.
    </para>
    <para>
     Bu bit sadece ekrandaki davranışı denetler; <varname>KILL</varname> karakterinin tanınması ve girdinin silinmesi sadece <varname>ICANON</varname> bitinin varlığına bağlıdır, <code>ECHOK</code> bu bakımdan etkili değildir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHOKE"><primary>uçbirim kipleri</primary><secondary>satırı silip alt satıra geçmek</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHOKE"><primary>ECHOKE</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHOKE</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit <varname>ECHOK</varname> bitine benzer.  Ekrandan satırın tamamının kesilerek silinmesi ile kendini gösteren KILL karakterinin özel bir gösterimini etkinleştirir. Bu bit BSD oluşumudur ve yalnızca BSD, GNU/Linux ve GNU/Hurd sistemlerinde vardır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHONL"><primary>uçbirim kipleri</primary><secondary>satır-sonu karakterinin yansılanması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHONL"><primary>ECHONL</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHONL</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit ve <varname>ICANON</varname> biti varsa, satır-sonu (<command>'\n'</command>) karakteri <varname>ECHO</varname> biti yoksa bile yansılanır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ECHOCTL"><primary>uçbirim kipleri</primary><secondary>denetim karakterlerinin yansılanması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ECHOCTL"><primary>ECHOCTL</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ECHOCTL</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit ve <varname>ECHO</varname> biti varsa, denetim karakterlerine karşı düşen karakterler <command>^</command> ile öncelenerek yansılanır. Örneğin <keycap>ctrl+A</keycap>, <keycap>^A</keycap> olarak yansılanır. Uçbirimde denetim karakterlerinin istenmeyen etkiler oluşturmaması için kimi zaman etkileşimli girdi kipinde tercih edilir.
    </para>
    <para>
     Bu bit BSD oluşumudur ve yalnızca BSD, GNU/Linux ve GNU/Hurd sistemlerinde vardır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ISIGs"><primary>uçbirimler</primary><secondary>etkileşimli sinyaller</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ISIG"><primary>uçbirim kipleri</primary><secondary><code>INTR</code>, <code>QUIT</code> ve <code>SUSP</code> karakterlerinin yansılanması</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-INTR"><primary>uçbirim karakter kodları</primary><secondary>INTR</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-QUIT"><primary>uçbirim karakter kodları</primary><secondary>QUIT</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-SUSP"><primary>uçbirim karakter kodları</primary><secondary>SUSP</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ISIG"><primary>ISIG</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ISIG</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit <varname>INTR</varname>, <varname>QUIT</varname> ve <varname>SUSP</varname> karakterlerinin tanınması ile ilgilidir. Bu karakterlerle ilgili işlevler sadece bu bitin varlığında ilgili işlemleri yapar. Girdi kipinin kurallı veya kuralsız olması bu karakterlerin yorumlanışını etkilemez.
    </para>
    <para>
     Bu karakterlerin tanınması iptal edilirken dikkatli olunmalıdır. Yoksa uygulamalar kullanıcılar tarafından kolayca durdurulamaz. Bu bit kaldırılırsa, yazılımda bu karakterlerin gönderdiği sinyalleri gönderecek ya da çıkmayı sağlayacak bir arayüz oluşturmak gerekir. Bkz. <xref linkend="glibc-Signal-Characters"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-IEXTEN"><primary>uçbirim kipleri</primary><secondary><code>LNEXT</code> ve <code>DISCARD</code> karakterlerinin yansılanması</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-LNEXT"><primary>uçbirim karakter kodları</primary><secondary>LNEXT</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-DISCARD"><primary>uçbirim karakter kodları</primary><secondary>DISCARD</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-IEXTEN"><primary>IEXTEN</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>IEXTEN</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     POSIX.1, <code>IEXTEN</code> bitini gerçekleme ile tanımlanmış manada verir, dolayısıyla bu bitin tüm sistemlerde böyle yorumlanacağından emin olunamaz.
    </para>
    <para>
     BSD, GNU/Linux ve GNU/Hurd sistemlerinde bu bit <varname>LNEXT</varname> ve <varname>DISCARD</varname> karakterlerini etkinleştirir. Bkz. <xref linkend="glibc-Other-Special"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-NOFLSH"><primary>uçbirim kipleri</primary><secondary>G/Ç kuyruklarının temizlenmemesi</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-NOFLSH"><primary>NOFLSH</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>NOFLSH</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Normalde, <varname>INTR</varname>, <varname>QUIT</varname> ve <varname>SUSP</varname> karakterleri uçbirimin girdi ve çıktı kuyruklarının temizlenmesine sebep olur. Bu bit varsa, kuyruklar temizlenmez.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-TOSTOP"><primary>uçbirim kipleri</primary><secondary>art alan süreçlerin sinyal üretmesinin sağlanması</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TOSTOP"><primary>TOSTOP</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>TOSTOP</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa ve sistem iş denetimini destekliyorsa, <varname>SIGTTOU</varname> sinyalleri uçbirime yazmaya çalışan art alan süreçleri tarafından üretilir. Bkz. <xref linkend="glibc-Access-to-the-Terminal"/>.
    </para>
   </csynopsis>
   <para>
    Aşağıdaki bitler birer BSD oluşumudur ve bunlar sadece BSD ve GNU/Hurd sistemlerinde vardır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-ALTWERASE"><primary>uçbirim kipleri</primary><secondary>silinecek sözcüğün başlangıcının belirlenmesi</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-WERASE"><primary>uçbirim karakter kodları</primary><secondary>WERASE</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-ALTWERASE"><primary>ALTWERASE</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>ALTWERASE</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit <varname>WERASE</varname> karakterinin silme işlemini nasıl yapacağını belirler. <varname>WERASE</varname> karakteri bir sözcüğü başlangıcına kadar geriye doğru siler. Burada sorun bu başlangıcın nasıl belirleneceği ile ilgilidir.
    </para>
    <para>
     Bu bit yoksa, sözcüğün başlangıcı bir boşluk karakterinden sonra gelen ilk boşluk olmayan karakterdir. Bu bit varsa, sözcüğün başlangıcı, varsa bir abecesayısal karakter, yoksa hemen ardından bir karakter gelen bir alt çizgi karakteridir.
    </para>
    <para>
     <varname>WERASE</varname> karakteri ile ilgili daha fazla bilgi için bkz, <xref linkend="glibc-Editing-Characters"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-FLUSHO"><primary>FLUSHO</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>FLUSHO</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit <varname>DISCARD</varname> karakteri tuşlandığında konum değiştirir. Bu bit birlenirken tüm çıktı iptal edilir. Bkz. <xref linkend="glibc-Other-Special"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-NOKERNINFO"><primary>uçbirim kipleri</primary><secondary><code>STATUS</code> karakterinin iptali</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-STATUS"><primary>uçbirim karakter kodları</primary><secondary>STATUS</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-NOKERNINFO"><primary>NOKERNINFO</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>NOKERNINFO</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bitin varlığı <varname>STATUS</varname> karakterinin işlenmesini iptal eder. Bkz. <xref linkend="glibc-Other-Special"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-PENDIN"><primary>uçbirim kipleri</primary><secondary>girdi satırının yeniden basılması</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-REPRINT"><primary>uçbirim karakter kodları</primary><secondary>REPRINT</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-PENDIN"><primary>PENDIN</primary></indexterm>
    <csproto type="makro">
     <csname><type>tcflag_t</type><function>PENDIN</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     Bu bit varsa, yeniden basılacak bir girdi satırı var demektir. <varname>REPRINT</varname> karakterinin tuşlanması bu bitin birlenmesine ve yeniden basma işinin bitimine kadar bir olarak kalmasına sebep olur. Bkz. <xref linkend="glibc-Editing-Characters"/>.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Line-Speed">
   <title>Hat Hızı</title>
   <titleabbrev>Uçbirim hızı nasıl belirtilir ve saptanır.</titleabbrev>
   <para>
    <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>hat hızı</secondary></indexterm>
    Uçbirim hat hızı, bilgisayara uçbirime ne kadar hızlı okuma ve yazma yapacağını belirtmek için kullanılır.
   </para>
   <para>
    Uçbirim gerçek bir seri hatta bağlıysa, belirtilen uçbirim hızı aslında hat hızını denetler (Eğer hat hızı ile uçbirimin kendi hızı eşleşmezse iletişim gerçekleşmez). Gerçek seri portlar sadece belirli standart hızları kabul eder. Ayrıca, bazı donanımlar standart hızların tamamını desteklemeyebilir. Hızın sıfır olarak belirtilmesi bir çevirmeli ağ bağlantısının kesilmesine ve modem denetim sinyallerinin durdurulmasına sebep olur.
   </para>
   <para>
    Eğer uçbirim gerçek bir seri hat değilse (örneğin, bir ağ bağlantısı), hat hızı gerçekte iletim hızını etkilemez ama bazı uygulamalar boşluk doldurma miktarını saptayabilmek için bu değeri kullanabilecektir. En iyisi hat hızını, asıl uçbirimin asıl hızı ile eşleşen bir değer olarak belirtmektir, ancak boşluk doldurma miktarını değiştiren farklı değerler hakkında deneyimli olmak gerekir.
   </para>
   <para>
    Esas olarak her uçbirim için iki hat hızı vardır: girdi hızı ve çıktı hızı. Bunları birbirinden bağımsız olarak ayarlamak mümkünse de çoğunlukla her iki yönde de aynı hızlar kullanılır.
   </para>
   <para>
    Hız değerleri <type>struct&nbsp;termios</type> yapısında saklanır ama doğrudan yapı üzerinden erişmeye çalışılmamalıdır. Bu değerleri yapı içinde değiştirmek ya da okumak için aşağıdaki işlevler kullanılmalıdır:
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-cfgetospeed"><primary>cfgetospeed</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>cfgetospeed</function></csname>
     <csparam><ptr>const&nbsp;struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     *<parameter>termios-p</parameter> yapısında saklanan çıktı hat hızı ile döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-cfgetispeed"><primary>cfgetispeed</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>cfgetispeed</function></csname>
     <csparam><ptr>const&nbsp;struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     *<parameter>termios-p</parameter> yapısında saklanan girdi hat hızı ile döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-cfsetospeed"><primary>cfsetospeed</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>cfsetospeed</function></csname>
     <csparam><ptr>struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
     <csparam><type>speed_t</type><parameter>speed</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev <parameter>speed</parameter> hız değerini *<parameter>termios-p</parameter> yapısında çıktı hızı olarak saklar. Normal dönüş değeri sıfırdır, <code>-1</code> değeri bir hata oluştuğunu gösterir. <parameter>speed</parameter> değişkeninin hız değeri belirtmediği durumda da işlev <code>-1</code> ile döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-cfsetispeed"><primary>cfsetispeed</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>cfsetispeed</function></csname>
     <csparam><ptr>struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
     <csparam><type>speed_t</type><parameter>speed</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev <parameter>speed</parameter> hız değerini *<parameter>termios-p</parameter> yapısında girdi hızı olarak saklar. Normal dönüş değeri sıfırdır, <code>-1</code> değeri bir hata oluştuğunu gösterir. <parameter>speed</parameter> değişkeninin hız değeri belirtmediği durumda da işlev <code>-1</code> ile döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-cfsetspeed"><primary>cfsetspeed</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>cfsetspeed</function></csname>
     <csparam><ptr>struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
     <csparam><type>speed_t</type><parameter>speed</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev <parameter>speed</parameter> hız değerini *<parameter>termios-p</parameter> yapısında hem girdi ve hem de çıktı hızı olarak saklar. Normal dönüş değeri sıfırdır, <code>-1</code> değeri bir hata oluştuğunu gösterir. <parameter>speed</parameter> değişkeninin hız değeri belirtmediği durumda da işlev <code>-1</code> ile döner. Bu işlev BSD-4.4 oluşumudur.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-speed_t"><primary>speed_t</primary></indexterm>
    <csproto type="veri türü">
     <csname><function>speed_t</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     <code>speed_t</code> hat hızını göstermek için kullanılan imsiz tamsayı veri türüdür.
    </para>
   </csynopsis>
   <para>
    <function>cfsetospeed</function> ve <function>cfsetispeed</function> işlevleri hataları sadece hat hızları sistem tarafından desteklenmediğinde bildirir. Eğer hat hızları temel olarak kabul edilebilir değerlerde belirtilirse bu işlevler başarılı olur. Fakat bu işlevler belli bir donanım aygıtının bu hat hızlarını destekleyip desteklemediğine bakmaz, aslında hangi aygıtın kullanılacağı ile de ilgilenmez. <function>tcsetattr</function> işlevi ile belli bir aygıta desteklemediği bir hız belirtilirse işlev <code>-1</code> ile döner.
   </para>
   <note><title>Taşınabilirlik Bilgisi</title>
    <para>
     &glibc;nde, yukarıda bahsedilen işlevler hızları saniyede bit sayısı olarak kabul eder ve saniyede bit sayısı olarak döndürür. Diğer kütüphanelerde hızların belirli kodlarla belirtilmesi gerekir. POSIX.1 taşınabilirliği için, hat hızı aşağıdaki simgeler kullanılarak belirtilmelidir, bu simgelerin sayısal değerleri sisteme bağımlıdır fakat her isim belli bir anlama gelir: <code>B110</code> => 100 bps, <code>B300</code> => 300 bps gibi. Bu hızları taşınabilir olarak belirtmenin başka yolu yoktur. Bunlar sadece seri hatların desteklediği, sıklıkla kullanılan hızlarını belirtir.
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B0"><primary>B0</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B50"><primary>B50</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B75"><primary>B75</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B110"><primary>B110</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B134"><primary>B134</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B150"><primary>B150</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B200"><primary>B200</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B300"><primary>B300</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B600"><primary>B600</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B1200"><primary>B1200</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B1800"><primary>B1800</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B2400"><primary>B2400</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B4800"><primary>B4800</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B9600"><primary>B9600</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B19200"><primary>B19200</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B38400"><primary>B38400</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B57600"><primary>B57600</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B115200"><primary>B115200</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B230400"><primary>B230400</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-B460800"><primary>B460800</primary></indexterm>
    </para>
   </note>
   <literallayout class="monospaced">
B0      B50     B75     B110    B134
B150    B200    B300    B600    B1200
B1800   B2400   B4800   B9600   B19200
B38400  B57600  B115200 B230400 B460800
</literallayout>
   <para>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-EXTA"><primary>EXTA</primary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-EXTB"><primary>EXTB</primary></indexterm>
    BSD bunlara ek olarak iki hız simgesini takma ad olarak tanımlar: <code>EXTA</code> simgesi <code>B19200</code> için, <code>EXTB</code> simgesi de <code>B38400</code> için takma addır. Bu simgeler artık kullanılmamaktadır.
   </para>
  </sect1>
  <sect1 xml:id="glibc-Special-Characters">
   <title>Özel Karakterler</title>
   <titleabbrev>Özel etkileri olan karakterler ve değiştirilmeleri.</titleabbrev>
   <preliminary>
    <para>
     Kurallı girdi kipinde uçbirim sürücüsü çeşitli denetim işlemlerini yerine getiren bir miktar özel karakter tanır. Bunlar <varname>ERASE</varname> (<keycap>DEL</keycap> tuşu) karakterinin de dahil olduğu metin düzenleme karakterleridir. <varname>SIGINT</varname> sinyalini gönderen <varname>INTR</varname> karakteri (normalde <keycap>C-c</keycap>) ve sinyal gönderen diğer karakterler hem kurallı hem de kuralsız kipte kullanılabilir. Bu karakterlerin hepsi bu bölümde açıklanmıştır.
    </para>
    <para>
     Kullanılacak karakterler <type>struct&nbsp;termios</type> yapısının <code>c_cc</code> üyesinde belirtilir. Bu üye bir dizidir; her eleman belli bir rol için belli bir karakter belirtir. Her eleman için elemanın indisini belirten bir simgesel sabit tanımlanmıştır. Örneğin, <varname>VINTR</varname> simgesi <varname>INTR</varname> karakterini belirten elemanın indisidir; örneğin <code><replaceable>termios</replaceable>.c_cc[VINTR]</code> içinde <code>'='</code> karakteri saklanmışsa <varname>INTR</varname> karakteri <code>'='</code> karakteri olur.
    </para>
    <para>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-POSIX_VDISABLEo"><primary sortas="POSIX_VDISABLE">_POSIX_VDISABLE</primary></indexterm>
     Bazı sistemlerde, özel bir karakterin işlevi, bu rol için <code>_POSIX_VDISABLE</code> değeri belirtilerek iptal edilebilir. Bu değer herhangi bir karakter kodunun karşılığı değildir. Kullanılan işletim sisteminin <code>_POSIX_VDISABLE</code> desteği olup olmadığının belirlenmesi ile ilgili bilgiler <xref linkend="glibc-Options-for-Files"/> bölümünde bulunabilir.
    </para>
   </preliminary>
   <sect2 xml:id="glibc-Editing-Characters">
    <title>Girdi Düzenleme Karakterleri</title>
    <titleabbrev>Satırları sonlandırma, metinleri silme ve benzeri düzenleme işlemleri ile ilgili özel karakterler.</titleabbrev>
    <para>
     Bu özel karakterler sadece kurallı girdi kipinde etkindir. Bkz. <xref linkend="glibc-Canonical-or-Not"/>.
    </para>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VEOF"><primary>uçbirim karakter kodları</primary><secondary>'EOF'</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-EOFc"><primary sortas="EOF">'EOF'</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VEOF"><primary>VEOF</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VEOF</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin dosya-sonu (<code>'EOF'</code>) karakterini içeren elemanının indisidir. Karakter <code><replaceable>termios</replaceable>.c_cc[VEOF]</code> içindedir.
     </para>
     <para>
      Dosya-sonu karakteri sadece kurallı girdi kipinde tanınır. Tıpkı satır-sonu karakteri gibi bir satırı sonlandırmasına rağmen dosya-sonu karakteri dosyadaki son satırın ilk ve son karakteridir. <function>read</function> ile yapılan okumada dosya sonunu belirtmek üzere dönen karakter sayısı sıfır olur, dosya-sonu karakterinin kendisi yok sayılır.
     </para>
     <para>
      Genellikle dosya-sonu karakteri <keycap>C-d</keycap> ile elde edilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VEOL"><primary>uçbirim karakter kodları</primary><secondary>EOL</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-EOL"><primary>EOL</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VEOL"><primary>VEOL</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VEOL</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin satır-sonu (<code>EOL</code>) karakterini içeren elemanının indisidir.  Karakter <code><replaceable>termios</replaceable>.c_cc[VEOL]</code> içindedir.
     </para>
     <para>
      <code>EOL</code> karakteri sadece kurallı girdi kipinde tanınır. Tıpkı satır-sonu karakteri gibi bir satırı sonlandırmakta kullanılır. <code>EOL</code> karakteri iptal edilmez, girdi satırındaki son karakter olarak okunur.
     </para>
     <para>
      Satır sonunda <keycap>RET</keycap> tuşuna basarak <code>EOL</code> karakterini kullanmaya ihtiyaç yoktur. <varname>ICRNL</varname> seçeneğinin etkin olması yeterlidir. Aslında bu, ön tanımlı durumdur.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VEOL2"><primary>uçbirim karakter kodları</primary><secondary>EOL2</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-EOL2"><primary>EOL2</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VEOL2"><primary>VEOL2</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VEOL2</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin ikincil-satır-sonu (<code>EOL2</code>) karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VEOL2]</code> içindedir.
     </para>
     <para>
      <code>EOL2</code> karakteri <varname>EOL</varname> karakteri (yukarıda) gibidir, ama farklı bir karakterdir. Bu bir satırı sonlandırmak için iki karakter gerektiği durumda belirtilebilir. Biri <varname>EOL</varname> diğeri <code>EOL2</code> karakteri olarak belirtilebilir.
     </para>
     <para>
      <code>EOL2</code> karakteri BSD oluşumudur; sadece BSD, GNU/Linux ve GNU/Hurd sistemlerinde vardır.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VERASE"><primary>uçbirim karakter kodları</primary><secondary>ERASE</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VERASE"><primary>VERASE</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-ERASE"><primary>ERASE</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VERASE</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin silme (<code>ERASE</code>) karakterini içeren elemanının indisidir. Karakter <replaceable>termios</replaceable><code>.c_cc[VERASE]</code> içindedir.
     </para>
     <para>
      <code>ERASE</code> karakteri sadece kurallı girdi kipinde tanınır.  Kullanıcı silme karakterini tuşladığında önceki karakter silinir. (Uçbirim çok baytlı karakterler üretiyorsa girdide birden fazla bayt silinebilir.) Bu karakter satırın başına kadar silme yapan karakter olarak kullanılamaz. Karakterin kendisi girdide iptal edilir.
     </para>
     <para>
      Genellikle <code>ERASE</code> karakteri <keycap>DEL</keycap> tuşu ile elde edilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VWERASE"><primary>uçbirim karakter kodları</primary><secondary>WERASE</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-WERASE"><primary>WERASE</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VWERASE"><primary>VWERASE</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VWERASE</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin sözcük silme (<code>WERASE</code>) karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VWERASE]</code> içindedir.
     </para>
     <para>
      <code>WERASE</code> karakteri sadece kurallı girdi kipinde tanınır.  Kullanıcı bu karakteri tuşladığında önceki sözcük ve sonraki boşluklar silinir; sözcükten önceki boşluklara dokunulmaz.
     </para>
     <para>
      "Sözcük" (word) tanımı <varname>ALTWERASE</varname> kipine bağımlıdır. Bkz. <xref linkend="glibc-Local-Modes"/>.
     </para>
     <para>
      <varname>ALTWERASE</varname> kipi etkin değilse bir sözcük boşluk ve sekmeleri içeremez.
     </para>
     <para>
      <varname>ALTWERASE</varname> kipi etkinse, sözcük harfler, rakamlar ve alt çizgi karakterlerinden oluşabilir ve isteğe bağlı olarak harf, rakam veya alt çizgi olmayan bir karakterle bitebilir.
     </para>
     <para>
      Genellikle <code>WERASE</code> karakteri <keycap>C-w</keycap> tuşları ile elde edilir.
     </para>
     <para>
      Bu kararakter BSD oluşumudur.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VKILL"><primary>uçbirim karakter kodları</primary><secondary>KILL</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-KILL"><primary>KILL</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VKILL"><primary>VKILL</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VKILL</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <varname>KILL</varname> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VKILL]</code> içindedir.
     </para>
     <para>
      <code>KILL</code> (satırı-sil) karakteri sadece kurallı girdi kipinde tanınır.  Kullanıcı <code>KILL</code> karakteri tuşlandığında  etkin satırın tamamı silinir. Bu arada <code>KILL</code> karakterinin kendisi de silinir.
     </para>
     <para>
      Genellikle <code>KILL</code> karakteri <command>C-u</command> tuşları ile elde edilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VREPRINT"><primary>uçbirim karakter kodları</primary><secondary>REPRINT</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-REPRINT"><primary>REPRINT</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VREPRINT"><primary>VREPRINT</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VREPRINT</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>REPRINT</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VREPRINT]</code> içindedir.
     </para>
     <para>
      <code>REPRINT</code> karakteri sadece kurallı girdi kipinde tanınır.  O anki girdi satırının tekrarlanmasını sağlar. Bu karakteri tuşlarken bir yandan da eşzamansız çıktı geliyorsa bu karakter yazılan satırın temiz olarak yeniden görüntülenmesini sağlar.
     </para>
     <para>
      Genellikle <code>REPRINT</code> karakteri <keycap>C-r</keycap> tuşları ile elde edilir.
     </para>
     <para>
      Bu karakter BSD oluşumudur.
     </para>
    </csynopsis>
   </sect2>
   <sect2 xml:id="glibc-Signal-Characters">
    <title>Sinyal Gönderen Karakterler</title>
    <titleabbrev>Sinyallerin gönderilmesini sağlayan özel karakterler.</titleabbrev>
    <para>
     Bu özel karakterler hem kurallı hem de kuralsız girdi kipinde etkin olabilir ancak sadece <varname>ISIG</varname> seçeneği etkinse bu mümkündür (Bkz. <xref linkend="glibc-Local-Modes"/>).
    </para>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VINTR"><primary>uçbirim karakter kodları</primary><secondary>INTR</secondary></indexterm>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-INTRc"><primary>durdurma karakteri</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-INTR"><primary>INTR</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VINTR"><primary>VINTR</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VINTR</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>INTR</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VINTR]</code> içindedir.
     </para>
     <para>
      <code>INTR</code> (interrupt - kesme) karakteri, uçbirimle ilişkili ön alan işindeki tüm süreçler için <varname>SIGINT</varname> sinyalinin yayınlanmasına sebep olur. Bu arada <code>INTR</code> karakterinin kendisi silinir. Sinyaller ile ilgili daha fazla bilgi için bkz, <xref linkend="glibc-Signal-Handling"/>.
     </para>
     <para>
      Genellikle <code>INTR</code> karakteri <keycap>C-c</keycap> tuşları ile elde edilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VQUIT"><primary>uçbirim karakter kodları</primary><secondary>QUIT</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-QUIT"><primary>QUIT</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VQUIT"><primary>VQUIT</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VQUIT</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>QUIT</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VQUIT]</code> içindedir.
     </para>
     <para>
      <code>QUIT</code> (interrupt - kesme) karakteri, uçbirimle ilişkili ön alan işindeki tüm süreçler için <varname>SIGQUIT</varname> sinyalinin yayınlanmasına sebep olur. Bu arada <code>QUIT</code> karakterinin kendisi silinir. Sinyaller ile ilgili daha fazla bilgi için bkz, <xref linkend="glibc-Signal-Handling"/>.
     </para>
     <para>
      Genellikle <code>QUIT</code> karakteri <keycap>C-\</keycap> tuşları ile elde edilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VSUSP"><primary>uçbirim karakter kodları</primary><secondary>SUSP</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-SUSP"><primary>SUSP</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VSUSP"><primary>VSUSP</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VSUSP</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>SUSP</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VSUSP]</code> içindedir.
     </para>
     <para>
      <code>SUSP</code> (suspend - bekletme, askıya alma, süreci art alana atma) karakteri sadece gerçekleme <link linkend="glibc-Job-Control">iş denetimini</link> destekliyorsa tanınır. <code>SUSP</code> karakteri, uçbirimle ilişkili ön alan işindeki tüm süreçler için <varname>SIGTSTP</varname> sinyalinin yayınlanmasına sebep olur. Bu arada <code>SUSP</code> karakterinin kendisi silinir. Sinyaller ile ilgili daha fazla bilgi için bkz, <xref linkend="glibc-Signal-Handling"/>.
     </para>
     <para>
      Genellikle <code>SUSP</code> karakteri <keycap>C-z</keycap> tuşları ile elde edilir.
     </para>
    </csynopsis>
    <para>
     Çok az uygulama <varname>SUSP</varname> karakterinin normal yorumunu iptal eder. Kullanılan yazılım bunu yapıyorsa, kullanıcının işi durdurabilmesini sağlayacak düzenekleri yazılımın sağlaması gerekir. Kullanıcı bu düzeneği devreye soktuğunda yazılım sadece kendi sürecine değil, süreç grubundaki tüm süreçlere <varname>SIGTSTP</varname> sinyalini göndermelidir (Bkz. <xref linkend="glibc-Signaling-Another-Process"/>).
    </para>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VDSUSP"><primary>uçbirim karakter kodları</primary><secondary>DSUSP</secondary></indexterm>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VDSUSPc"><primary>gecikmeli bekletme karakteri</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-DSUSP"><primary>DSUSP</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VDSUSP"><primary>VDSUSP</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VDSUSP</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>DSUSP</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VDSUSP]</code> içindedir.
     </para>
     <para>
      <code>DSUSP</code> (suspend - gecikmeli bekletme, gecikmeli askıya alma, süreci gecikmeli art alana atma) karakteri sadece gerçekleme <link linkend="glibc-Job-Control">iş denetimini</link> destekliyorsa tanınır. <code>DSUSP</code> karakteri, uçbirimle ilişkili ön alan işindeki tüm süreçler için <varname>SUSP</varname> karakteri gibi <varname>SIGTSTP</varname> sinyalinin yayınlanmasına sebep olur. Ama bunu doğrudan göndererek yapmaz, yazılım karakteri bir girdi olarak okumaya çalışıyorsa bu gerçekleşir. Bütün sistemlerin iş denetimleri <code>DSUSP</code> karakterini desteklemez; sadece BSD uyumlu sistemler ile GNU/Hurd sistemlerinde desteklenir.
     </para>
     <para>
      Sinyaller ile ilgili daha fazla bilgi için bkz, <xref linkend="glibc-Signal-Handling"/>.
     </para>
     <para>
      Genellikle <code>DSUSP</code> karakteri <keycap>C-y</keycap> tuşları ile elde edilir.
     </para>
    </csynopsis>
   </sect2>
   <sect2 xml:id="glibc-Start-Stop-Characters">
    <title>Akış Denetimi için Özel Karakterler</title>
    <titleabbrev>Çıktıyı bekleten veya sürdüren özel karakterler.</titleabbrev>
    <para>
     Bu karakterler hem kurallı hem de kuralsız girdi kipinde etkili olabilir, fakat kullanımları <varname>IXON</varname> ve <varname>IXOFF</varname> seçenekleri ile denetlenir (Bkz. <xref linkend="glibc-Input-Modes"/>).
    </para>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VSTART"><primary>uçbirim karakter kodları</primary><secondary>START</secondary></indexterm>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VSTARTc"><primary>bekletmeden çıkma karakteri</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-START"><primary>VSTART</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VSTART"><primary>START</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VSTART</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>START</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VSTART]</code> içindedir.
     </para>
     <para>
      <code>START</code> karakteri <varname>IXON</varname> ve <varname>IXOFF</varname> girdi kiplerini desteklemek için kullanılır. <varname>IXON</varname> varsa, <code>START</code> karakteri alındığında çıktı bekleme durumundan çıkarılır ve <code>START</code> karakterinin kendisi iptal edilir. <varname>IXANY</varname> varsa, herhangi bir karakter alındığında çıktı bekleme durumundan çıkarılır. <varname>IXOFF</varname> varsa, <code>START</code> karakterini sistem ayrıca uçbirime de iletebilir.
     </para>
     <para>
      Genellikle <code>START</code> karakteri <keycap>C-q</keycap> tuşları ile elde edilir. Bu değer değiştirilemeyebilir; donanım ne belirtildiğine bakmaksızın <keycap>C-q</keycap> kullanmakta ısrar edebilir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VSTOP"><primary>uçbirim karakter kodları</primary><secondary>STOP</secondary></indexterm>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VSTOPc"><primary>çıktı bekletme karakteri</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-STOP"><primary>STOP</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VSTOP"><primary>VSTOP</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VSTOP</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>STOP</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VSTOP]</code> içindedir.
     </para>
     <para>
      <code>STOP</code> karakteri <varname>IXON</varname> ve <varname>IXOFF</varname> girdi kiplerini desteklemek için kullanılır. <varname>IXON</varname> varsa, bir <code>STOP</code> karakterinin alınması çıktının bekletilmesine sebep olur ve <code>STOP</code> karakteri iptal edilir. <varname>IXOFF</varname> varsa, sistem girdi kuyruğunun taşmasını önlemek için <code>STOP</code> karakterini uçbirime de iletir.
     </para>
     <para>
      Genellikle <code>START</code> karakteri <keycap>C-s</keycap> tuşları ile elde edilir. Bu değer değiştirilemeyebilir; donanım ne belirtildiğine bakmaksızın <keycap>C-s</keycap> kullanmakta ısrar edebilir.
     </para>
    </csynopsis>
   </sect2>
   <sect2 xml:id="glibc-Other-Special">
    <title>Diğer Özel Karakterler</title>
    <titleabbrev>BSD sistemlerindeki diğer özel karakterler: çıktılama ve yazdırma iptal edilebilir.</titleabbrev>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VLNEXT"><primary>uçbirim karakter kodları</primary><secondary>LNEXT</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-LNEXT"><primary>LNEXT</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VLNEXT"><primary>VLNEXT</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VLNEXT</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>LNEXT</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VLNEXT]</code> içindedir.
     </para>
     <para>
      <code>LNEXT</code> ("literal next" kısaltması) karakteri hem kurallı hem de kuralsız girdi kipinde sadece <varname>IEXTEN</varname> seçeneği etkin olduğunda anlamlıdır. Kullanıcının bu karakterden sonra tuşladığı özel karakterin özelliği kalmaz. Karakter normalde bazı düzenleme işlemlerini yapma ya da sinyal gönderme yeteneğine sahip olsa bile sıradan bir karakter olarak okunur. Bu Emacs'ın <keycap>C-q</keycap> komutuna eşdeğerdir.
     </para>
     <para>
      Genellikle <code>LNEXT</code> karakteri <keycap>C-v</keycap> ile elde edilir.
     </para>
     <para>
      Bu özel karakter sadece BSD, GNU/Linux ve GNU/Hurd sistemlerinde mevcuttur.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VDISCARD"><primary>uçbirim karakter kodları</primary><secondary>DISCARD</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-DISCARD"><primary>DISCARD</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VDISCARD"><primary>VDISCARD</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VDISCARD</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>DISCARD</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VDISCARD]</code> içindedir.
     </para>
     <para>
      <code>DISCARD</code> karakteri hem kurallı hem de kuralsız girdi kipinde sadece <varname>IEXTEN</varname> seçeneği etkin olduğunda anlamlıdır. Çıktı iptal seçeneğinin durumunu değiştirir. Seçenek varsa, tüm yazılım çıktısı iptal edilir. Seçeneğin varlığı ayrıca o an çıktı tamponundaki tüm çıktının iptal edilmesine sebep olur. Herhangi bir başka karakterin tuşlanması seçeneği sıfırlar.
     </para>
     <para>
      Bu özel karakter sadece BSD, GNU/Linux ve GNU/Hurd sistemlerinde mevcuttur.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-cp" xml:id="glibc-cp-VSTATUS"><primary>uçbirim karakter kodları</primary><secondary>STATUS</secondary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-STATUS"><primary>STATUS</primary></indexterm>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-VSTATUS"><primary>VSTATUS</primary></indexterm>
     <csproto type="makro">
      <csname><type>int</type><function>VSTATUS</function></csname>
     </csproto>
     <header>&termios.h;</header>
     <para>
      Özel denetim karakterleri dizisinin <code>STATUS</code> karakterini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VSTATUS]</code> içindedir.
     </para>
     <para>
      <code>STATUS</code> karakterinin etkisi, çalışan süreç hakkında o anki durum iletisinin basılmasıdır.
     </para>
     <para>
      <code>STATUS</code> karakteri sadece kurallı girdi kipinde ve sadece <varname>NOKERNINFO</varname> yoksa tanınır.
     </para>
     <para>
      Bu özel karakter sadece BSD ve GNU/Hurd sistemlerinde mevcuttur.
     </para>
    </csynopsis>
   </sect2>
  </sect1>
  <sect1 xml:id="glibc-Noncanonical-Input">
   <title>Kuralsız Girdi</title>
   <titleabbrev>Girdi için ne kadar bekleneceğinin denetlenmesi.</titleabbrev>
   <para>
    Kuralsız girdi kipinde <varname>ERASE</varname> ve <varname>KILL</varname> gibi metin düzenleme karakterleri yok sayılır. Kullanıcının girdiyi düzenleyebildiği sistem oluşumları kuralsız kipte iptal edilir. Sinyal gönderme ve akış denetimi hariç tüm girdi karakterleri uygulamaya oldukları gibi yazıldıkları şekilde aktarılır. Metin düzenleme ile ilgili girdilerin alınması gerekliyse bunlar yazılım içinde gerçeklenmelidir.
   </para>
   <para>
    Kuralsız kipte kaç girdinin ne kadar süre bekleneceğini denetleyen <varname>MIN</varname> ve <varname>TIME</varname> özel değişkenleri vardır. Bunlar kullanılarak girdi yapıldıkça hiç beklemeden girdiler hemen işleme sokulabilir.
   </para>
   <para>
    <varname>MIN</varname> ve <varname>TIME</varname> <type>struct&nbsp;termios</type> yapısının üyesi olan <code>c_cc</code> dizisinde saklanır. Bu dizinin her elemanı belli bir role sahiptir ve her elemana rolü ifade eden bir simgesel sabit indisi kullanılarak erişilir. <varname>MIN</varname> ve <varname>TIME</varname> için bu indisler <varname>VMIN</varname> ve <varname>VTIME</varname>'dır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-VMIN"><primary>uçbirim özel değişkenleri</primary><secondary>MIN</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-MIN"><primary>MIN</primary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-VMIN"><primary>VMIN</primary></indexterm>
    <csproto type="makro">
     <csname><type>int</type><function>VMIN</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     <code>c_cc</code> dizisinin <code>MIN</code> değerini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VMIN]</code> içindedir.
    </para>
    <para>
     <code>MIN</code> değeri sadece kuralsız girdi kipinde anlamlıdır; girdi kuyruğundan <function>read</function> ile okuma yapabilmek için en az kaç karakter gerektiğini belirleyen bir sayıdır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-VTIME"><primary>uçbirim özel değişkenleri</primary><secondary>TIME</secondary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TIME"><primary>TIME</primary></indexterm>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-VTIME"><primary>VTIME</primary></indexterm>
    <csproto type="makro">
     <csname><type>int</type><function>VTIME</function></csname>
    </csproto>
    <header>&termios.h;</header>
    <para>
     <code>c_cc</code> dizisinin <code>TIME</code> değerini içeren elemanının indisidir.  Karakter <replaceable>termios</replaceable><code>.c_cc[VTIME]</code> içindedir.
    </para>
    <para>
     <code>TIME</code> değeri sadece kuralsız girdi kipinde anlamlıdır; girdi kuyruğundan <function>read</function> ile okuma yapabilmek için ne kadar süreyle bekleme yapılacağını belirler; 0.1 saniyelik katları ifade eden bir tamsayıdır.
    </para>
   </csynopsis>
   <para>
    <varname>MIN</varname> ve <varname>TIME</varname> değerleri <function>read</function> işlevinin değer döndürmesi için gerekli koşulları oluşturur. Sıfır ve sıfırdan farklı değerler ayrıca anlamlıdır. Bu bakımdan dört olası durum vardır:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <varname>MIN</varname> ve <varname>TIME</varname>, ikisi de sıfırdan farklı olabilir.
     </para>
     <para>
      Bu durumda <varname>TIME</varname>, girdi yapılırken her girdi karakterinden sonra başka bir girdinin ne kadar süre bekleneceğini belirtir. İlk karakter alındıktan sonra <varname>MIN</varname> bayt alınıncaya kadar veya başka giriş yapılmadan <varname>TIME</varname> süresi geçene kadar <function>read</function> beklemeye devam eder.
     </para>
     <para>
      <function>read</function> ilk karakter alınıncaya kadar <varname>TIME</varname> süresi dolsa bile daima bekler, ancak kuyrukta <varname>MIN</varname> karakterden fazlası varsa işlevden istenen karakter sayısına göre <varname>MIN</varname> karakterden fazlası dönebilir.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>TIME</varname> ve <varname>MIN</varname>, ikisi de sıfır olabilir.
     </para>
     <para>
      Bu durumda <function>read</function> kuyrukta kaç karakter varsa hepsini istek sayısı uzunlukta anında döndürür. Bir girdi yoksa <function>read</function> sıfır değeriyle döner.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>MIN</varname> sıfır, <varname>TIME</varname> sıfırdan farklı olabilir.
     </para>
     <para>
      Bu durumda, <function>read</function> ilk girdi için <varname>TIME</varname> kadar süreyle bekler ve kuyrukta kaç karakter varsa hepsini istek sayısı uzunlukta anında döndürür, bir girdi yoksa <function>read</function> sıfır değeriyle döner.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>TIME</varname> sıfır, <varname>MIN</varname> sıfırdan farklı olabilir.
     </para>
     <para>
      Bu durumda <function>read</function> kuyruğa <varname>MIN</varname> bayt yazılıncaya kadar bekler ve istenen sayıda karakterle döner. Eğer kuyrukta <varname>MIN</varname> karakterden fazla karakter varsa <varname>MIN</varname> karakterden fazlası dönebilir.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    <varname>MIN</varname> için 50 belirtilmişken işlevden 10 karakter okuması istenirse ne olacak? Normalde, <function>read</function> tamponda 50 karakter birikene kadar (ya da yukarıda açıklanan kurallar neyi gerektiriyorsa) bekler ve ilk 10 karakterle döner. Kalan 40 karakter sonraki <function>read</function> çağrıları ile okunmak üzere tamponda bırakılır.
   </para>
   <note><title>Taşınabilirlik Bilgisi</title>
    <para>
     Bazı sistemlerde  <varname>MIN</varname> ve <varname>TIME</varname> alanları <varname>'EOF'</varname> ve <varname>EOL</varname> alanları ile aynıdır. <varname>MIN</varname> ve <varname>TIME</varname> değerleri sadece kuralsız kipte anlamlı iken <varname>'EOF'</varname> ve <varname>EOL</varname> sadece kurallı kipte anlamlı olduğundan bu durum çeşitli sorunlara yol açar. &glibc;nde bu alanlar ayrıdır.
    </para>
   </note>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-cfmakeraw"><primary>cfmakeraw</primary></indexterm>
    <csproto type="işlev">
     <csname><type>void</type><function>cfmakeraw</function></csname>
     <csparam><ptr>struct&nbsp;termios</ptr><parameter>termios-p</parameter></csparam>
    </csproto>
    <header>&termios.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev, uçbirimi BSD'de "ham kip" (raw mode) denilen kipe sokmak için kolay bir yol olarak kullanılır. Bu aslında kuralsız girdi kipidir ve uçbirimi çoğu işlem bakımından işlevsiz bir kanal haline getirir.
    </para>
    <para>
     İşlev tam olarak şunları yapar:
    </para>
    <screen><replaceable>termios-p</replaceable>-&gt;c_iflag &amp;= ~(IGNBRK|BRKINT|PARMRK|ISTRIP
                                |INLCR|IGNCR|ICRNL|IXON);
<replaceable>termios-p</replaceable>-&gt;c_oflag &amp;= ~OPOST;
<replaceable>termios-p</replaceable>-&gt;c_lflag &amp;= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);
<replaceable>termios-p</replaceable>-&gt;c_cflag &amp;= ~(CSIZE|PARENB);
<replaceable>termios-p</replaceable>-&gt;c_cflag |= CS8;
</screen>
   </csynopsis>
  </sect1>
 </chapter>
 <chapter xml:id="glibc-BSD-Terminal-Modes">
  <title>BSD Uçbirim Kipleri</title>
  <titleabbrev>BSD uyumlu uçbirim kipleri ile ilgili ayarlar</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>BSD kipleri</secondary></indexterm>
   Uçbirim kiplerini okumak ve belirlemek için genelde <xref linkend="glibc-Terminal-Modes"/> bölümünde açıklanan işlevler yararlıdır. Bununla birlikte, bazı sistemlerde bazı şeyleri yapabilmek için bu bölümde anlatılan ve BSD sisteminden alınmış işlevler kullanılabilir. Çoğu sistemde bu işlevler mevcut değildir. Hatta &glibc;nde bu işlevler, içlerinde Linux'un da bulunduğu çoğu çekirdek ile <varname>errno</varname> = <varname>ENOSYS</varname> hatasını vererek başarısız olacaktır.
  </para>
  <para>
   Bu bölümde bahsedilen simgeler &sgtty.h; başlık dosyasında bildirilmiştir.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-sgttyb"><primary sortas="sgttyb">struct&nbsp;sgttyb</primary></indexterm>
   <csproto type="veri türü">
    <csname><type>struct</type><function>sgttyb</function></csname>
   </csproto>
   <header>&sgtty.h;</header>
   <para>
   Bu yapı <function>gtty</function> ve <function>stty</function> işlevi için girdi ve çıktı bağımsız değişkenleri listesidir.
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <type>char&nbsp;</type><structfield>sg_ispeed</structfield>
     </glossterm>
     <glossdef>
      <para>
       Girdi için hat hızı.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>char&nbsp;</type><structfield>sg_ospeed</structfield>
     </glossterm>
     <glossdef>
      <para>
       Çıktı için hat hızı.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>char&nbsp;</type><structfield>sg_erase</structfield>
     </glossterm>
     <glossdef>
      <para>
       <varname>ERASE</varname> karakteri.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>char&nbsp;</type><structfield>sg_kill</structfield>
     </glossterm>
     <glossdef>
      <para>
       <varname>KILL</varname> karakteri.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>int&nbsp;</type><structfield>sg_flags</structfield>
     </glossterm>
     <glossdef>
      <para>
       Çeşitli seçenekler.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-gtty"><primary>gtty</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>gtty</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
    <csparam><ptr>struct&nbsp;sgttyb</ptr><parameter>attributes</parameter></csparam>
   </csproto>
   <header>&sgtty.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    Uçbirimin özniteliklerini okur.
   </para>
   <para>
    <code>gtty</code> işlevi <parameter>filedes</parameter> dosya tanıtıcısı ile açılan uçbirimin özniteliklerini *<parameter>attributes</parameter> ile gösterilen yapı içinde döndürür.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-stty"><primary>stty</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>stty</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
    <csparam><ptr>const&nbsp;struct&nbsp;sgttyb</ptr><parameter>attributes</parameter></csparam>
   </csproto>
   <header>&sgtty.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    Uçbirimin özniteliklerini değiştirir.
   </para>
   <para>
    <code>stty</code> işlevi <parameter>filedes</parameter> dosya tanıtıcısı ile açılan uçbirimi *<parameter>attributes</parameter> ile belirtilen özniteliklerle ayarlar.
   </para>
  </csynopsis>
 </chapter>
 <chapter xml:id="glibc-Line-Control">
  <title>Hat Denetim İşlevleri</title>
  <titleabbrev>Geçici kesme gönderme, uçbirim tamponunu temizleme, vb.</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>hat denetim işlevleri</secondary></indexterm>
   Bu işlevler, uçbirim aygıtı üzerinde çeşitli denetim eylemlerini gerçekleştirir. Uçbirim erişimi ile ilgili olarak, bunlar çıktıda şöyle bir şeyler yapıyor gibi ele alınır: Bir art alan süreci kendi denetim uçbirimi üzerinde bu işlevlerden birini kullandığında, normalde süreç grubundaki tüm süreçlere bir <varname>SIGTTOU</varname> sinyali gönderir. Çağıran süreç <varname>SIGTTOU</varname> sinyallerini engelliyor ya da yok sayıyorsa, bu durumda işlem yine yapılır ama sinyal gönderilmez. Bkz, <xref linkend="glibc-Job-Control"/>.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-tcsendbreak"><primary>tcsendbreak</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>tcsendbreak</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
    <csparam><type>int</type><parameter>duration</parameter></csparam>
   </csproto>
   <header>&termios.h;</header>
   <conceptlist>
    <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:tcattr(<parameter>filedes</parameter>)</code><code linkend="glibc-safety-condition">/bsd</code></concept>
    <concept>&asunsafe;</concept>
    <concept>&acunsafe; &corrupt;<code linkend="glibc-safety-condition">/bsd</code></concept>
   </conceptlist>
   <para>
    Bu işlev, <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili uçbirim üzerinde sıfır bitlerinden oluşan bir akımı ileterek geçici kesme durumu (break condition) oluşturur. Geçici kesme durumunun süresi <parameter>duration</parameter> bağımsız değişkenince denetlenir. Sıfırsa süre 0.25 ile 0.5 saniye arasında olur. Bu, sıfırdan farklı değerlerin sisteme bağlı olduğu anlamına gelir.
   </para>
   <para>
    Bu işlev, uçbirim eşzamasız seri veri portu değilse hiçbir şey yapmaz.
   </para>
   <para>
    Normalde dönüş değeri sıfırdır. Bir hata oluştuğunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
   </para>
   <variablelist>
    <varlistentry>
     <term><code>EBADF</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> bağımsız değişkeni geçerli bir dosya tanıtıcı değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ENOTTY</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> uçbirimle ilişkili değil.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-tcdrain"><primary>uçbirimler</primary><secondary>çıktı kuyruğunun boşaltılması</secondary></indexterm>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-tcdrain"><primary>tcdrain</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>tcdrain</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
   </csproto>
   <header>&termios.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    <code>tcdrain</code> işlevi kuyruktaki çıktı <parameter>filedes</parameter> uçbirimine iletilinceye kadar bekler.
   </para>
   <para>
    Bu işlev çok evreli yazılımlarda iptal noktasıdır. <code>tcdrain</code> çağrısı sırasında evre bazı özkaynakları (bellek, dosya tanıtıcı, semafor, vb.) tahsis ettiğinde bu bir sorun haline gelir. Evre tam bu anda iptal alırsa tahsisli özkaynaklar yazılım sonlanana kadar tahsisli olarak kalır. Bu tür <code>tcdrain</code> çağrılarından kaçınmak için iptal işleyiciler kullanılarak korunulmalıdır.
   </para>
   <para>
    Normalde dönüş değeri sıfırdır. Bir hata oluştuğunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
   </para>
   <variablelist>
    <varlistentry>
     <term><code>EBADF</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> geçerli dosya tanıtıcı değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ENOTTY</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> uçbirimle ilişkili değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>EINTR</code></term>
     <listitem>
      <para>
       İşlem bir sinyalle durduruldu. Bkz, <xref linkend="glibc-Interrupted-Primitives"/>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-tcflush"><primary>uçbirimler</primary><secondary>g/ç kuyruğunun temizlenmesi</secondary></indexterm>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-tcflush"><primary>tcflush</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>tcflush</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
    <csparam><type>int</type><parameter>queue</parameter></csparam>
   </csproto>
   <header>&termios.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    <code>tcflush</code> işlevi <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili uçbirimin girdi ya da çıktı kuyruğundaki veriyi temizlemek için kullanılır. <parameter>queue</parameter> bağımsız değişkeni temizlenecek kuyruğu belirtmek için kullanılır ve şu değerlerden biri olabilir:
   </para>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCIFLUSH"><primary>TCIFLUSH</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCIFLUSH</function></csname>
    </csproto>
    <para>
     Alınmış ama henüz okunmamış veri temizlenir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCOFLUSH"><primary>TCOFLUSH</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCOFLUSH</function></csname>
    </csproto>
    <para>
     Yazılmış ama henüz iletilmemiş veri temizlenir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCIOFLUSH"><primary>TCIOFLUSH</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCIOFLUSH</function></csname>
    </csproto>
    <para>
     Girdi ve çıktı kuyruklarının ikisi de temizlenir.
    </para>
   </csynopsis>
   <para>
    Normalde dönüş değeri sıfırdır. Bir hata oluştuğunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
   </para>
   <variablelist>
    <varlistentry>
     <term><code>EBADF</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> geçerli dosya tanıtıcı değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ENOTTY</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> uçbirimle ilişkili değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>EINVAL</code></term>
     <listitem>
      <para>
       <parameter>queue</parameter> bağımsız değişkeninde belirtilen değer geçersiz.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Bu işlevin ismine bakarak hatırlamak zor olacaktır, çünkü "flush" (boşaltma) işlemi normalde önceki işlev için kullanılır ve girdi ve çıktının iptal edimesi ile çelişir. <function>tcflush</function> işlevi POSIX standardında belirtildiğinden ismi değiştirilememektedir.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-tcflow"><primary>uçbirimler</primary><secondary>g/ç kuyruğunun temizlenmesi</secondary></indexterm>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-tcflow"><primary>tcflow</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>tcflow</function></csname>
    <csparam><type>int</type><parameter>filedes</parameter></csparam>
    <csparam><type>int</type><parameter>action</parameter></csparam>
   </csproto>
   <header>&termios.h;</header>
   <conceptlist>
    <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:tcattr(<parameter>filedes</parameter>)</code><code linkend="glibc-safety-condition">/bsd</code></concept>
    <concept>&asunsafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    <code>tcflow</code> işlevi <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili uçbirim üzerinde <varname>IXON</varname>/<varname>IXOFF</varname> akış denetimi ile ilgili işlemleri gerçekleştirmekte kullanılır.
   </para>
   <para>
    <parameter>action</parameter> bağımsız değişkeni gerçekleştirilecek eylemi belirtmek için kullanılır ve aşağıdaki değerlerden biri olabilir:
   </para>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCOOFF"><primary>TCOOFF</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCOOFF</function></csname>
    </csproto>
    <para>
     Çıktı iletimi beklemeye alınır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCOON"><primary>TCOON</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCOON</function></csname>
    </csproto>
    <para>
     Çıktı iletimi yeniden başlatılır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCIOFF"><primary>TCIOFF</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCIOFF</function></csname>
    </csproto>
    <para>
     <varname>STOP</varname> karakteri iletilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-TCION"><primary>TCION</primary></indexterm>
    <csproto type="sabit">
     <csname><function>TCION</function></csname>
    </csproto>
    <para>
     <varname>START</varname> karakteri iletilir.
    </para>
   </csynopsis>
   <para>
    <varname>STOP</varname> ve <varname>START</varname> karakterleri hakkında daha ayrıntılı bilgi <xref linkend="glibc-Special-Characters"/> bölümünde bulunabilir.
   </para>
   <para>
    Normalde dönüş değeri sıfırdır. Bir hata oluştuğunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
   </para>
   <variablelist>
    <varlistentry>
     <term><code>EBADF</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> geçerli dosya tanıtıcı değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>ENOTTY</code></term>
     <listitem>
      <para>
       <parameter>filedes</parameter> uçbirimle ilişkili değil.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><code>EINVAL</code></term>
     <listitem>
      <para>
       <parameter>action</parameter> bağımsız değişkeninde belirtilen değer geçersiz.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </csynopsis>
 </chapter>
 <chapter xml:id="glibc-Noncanon-Example">
  <title>Kuralsız Kip Örneği</title>
  <titleabbrev>Uçbirimden tek bir karakter nasıl okunur.</titleabbrev>
  <para>
   Bu örnekte, uçbirimden kuralsız kipte tek bir karakteri okumak için ne yapılması gerektiği gösterilmiştir:
  </para>
  <screen>#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;termios.h&gt;

/* <replaceable>Uçbirim özniteliklerini bir değişkende sakla.</replaceable> */

struct termios saved_attributes;

void
reset_input_mode (void)
{
  tcsetattr (STDIN_FILENO, TCSANOW, &amp;saved_attributes);
}

void
set_input_mode (void)
{
  struct termios tattr;
  char *name;

  /* <replaceable>stdin uçbirim olmalı.</replaceable> */
  if (!isatty (STDIN_FILENO))
    {
      fprintf (stderr, "Uçbirim değil.\n");
      exit (EXIT_FAILURE);
    }

  /* <replaceable>Uçbirim özniteliklerini daha sonra yerine koymak için sakla.</replaceable> */
  tcgetattr (STDIN_FILENO, &amp;saved_attributes);
  atexit (reset_input_mode);

  /* <replaceable>Uçbirimi kuralsız kipe sok.</replaceable> */
  tcgetattr (STDIN_FILENO, &amp;tattr);
  tattr.c_lflag &amp;= ~(ICANON|ECHO); /* <replaceable>ICANON ve ECHO temizlendi.</replaceable> */
  tattr.c_cc[VMIN] = 1;                /* <replaceable>Girdi tek karakterlik okunsun.</replaceable> */
  tattr.c_cc[VTIME] = 0;               /* <replaceable>Okuma için beklenmesin.</replaceable> */
  tcsetattr (STDIN_FILENO, TCSAFLUSH, &amp;tattr);
}

int
main (void)
{
  char c;

  set_input_mode ();

  while (1)
    {
      read (STDIN_FILENO, &amp;c, 1);
      if (c == '\004')          /* <replaceable>C-d</replaceable> */
        break;
      else
        putchar (c);
    }

  return EXIT_SUCCESS;
}
</screen>
  <para>
   Bu yazılım, bir sinyalle sonlandırıldığında ya da çıkarken özgün uçbirim kipleri eski durumuna getirilir; bu, <function>exit</function> ile çıkılırken <function>atexit</function> işlevi ile yapılır (bkz. <xref linkend="glibc-Cleanups-on-Exit"/>).
  </para>
  <para>
   Kabuğun süreç durdurulurken ve başlatılırken uçbirim kiplerini sıfırladığı varsayılmıştır; bkz, <xref linkend="glibc-Job-Control"/>.  Fakat bazı kabuklar bunu  yapmaz, bu durumda uçbirim kiplerini sıfırlamak için iş denetim sinyallerine işleyici oluşturmak gerekebilir. Örnekte bu yapılmıştır.
  </para>
 </chapter>
 <chapter xml:id="glibc-getpass">
  <title>Parolaların Okunması</title>
  <titleabbrev>Kullanıcıya parola istemi açılması.</titleabbrev>
  <para>
   Bir parolayı okurken, gizli kalmasına yardımcı olmak için ekranda görüntülenmesinden kaçınılması önerilir. Aşağıdaki işlev bunu uygun bir şekilde ele alır.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-getpass"><primary>uçbirimler</primary><secondary>parola istemi</secondary></indexterm>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-getpass"><primary>getpass</primary></indexterm>
   <csproto type="işlev">
    <csname><ptr>char</ptr><function>getpass</function></csname>
    <csparam><ptr>const&nbsp;char</ptr><parameter>prompt</parameter></csparam>
   </csproto>
   <header>&unistd.h;</header>
   <conceptlist>
    <concept>&mtunsafe; &term;</concept>
    <concept>&asunsafe; &heap; &lock; &corrupt;</concept>
    <concept>&acunsafe; &term; &lock; &corrupt;</concept>
   </conceptlist>
   <para>
    <code>getpass</code> komut istemini çıktılar, ardından uçbirimden gelen dizgeyi görüntülemeden okur. Mümkünse, kullanıcıların dosyalardaki düz metin parolaları kullanmamaları için gerçek uçbirim olan <filename>/dev/tty</filename>'ye bağlanmaya çalışır; aksi takdirde <varname>stdin</varname> ve <varname>stderr</varname> kullanır. <code>getpass</code> ayrıca <varname>ISIG</varname> uçbirim niteliğini kullanarak uçbirimdeki <varname>INTR</varname>, <varname>QUIT</varname> ve <varname>SUSP</varname> karakterlerini de devre dışı bırakır (bkz, <xref linkend="glibc-Local-Modes"/>). Uçbirim, işlevden önce ve sonra temizlenir, böylece yanlış yazılmış bir parolanın karakterleri yanlışlıkla görünmez.
   </para>
   <para>
    Diğer C kütüphanelerinde, <code>getpass</code> yalnızca parolanın ilk <varname>PASS_MAX</varname> baytını döndürebilir. &glibc;nin böyle bir sınırı yoktur, dolayısıyla <varname>PASS_MAX</varname> tanımsızdır.
   </para>
   <para>
    Bu işlev &unistd.h; başlık dosyasında bildirilmiştir. <varname>PASS_MAX</varname> ise &limits.h; başlık dosyasında tanımlanır.
   </para>
  </csynopsis>
  <para>
   Bu hassas işlemler dizisi tüm olası durumlara uygun olmayabilir. Bu durumda, yazılımcının kendi <function>getpass</function> işlevini yazması önerilir. Aşağıda çok basit bir örnek yer almaktadır:
  </para>
  <example>
   <screen>#include &lt;termios.h&gt;
#include &lt;stdio.h&gt;

ssize_t
my_getpass (char **lineptr, size_t *n, FILE *stream)
{
  struct termios old, new;
  int nread;

  /* <replaceable>yankıyı kapat, kapanmıyorsa başarısız ol.</replaceable> */
  if (tcgetattr (fileno (stream), &amp;old) != 0)
    return -1;
  new = old;
  new.c_lflag &amp;= ~ECHO;
  if (tcsetattr (fileno (stream), TCSAFLUSH, &amp;new) != 0)
    return -1;

  /* <replaceable>Parolayı oku</replaceable> */
  nread = getline (lineptr, n, stream);

  /* <replaceable>Uçbirimi eski durumuna getir.</replaceable> */
  (void) tcsetattr (fileno (stream), TCSAFLUSH, &amp;old);

  return nread;
}
</screen>
   <para>
    Örnekte <code>getline</code> aynı bağımsız değişkenleri almaktadır (bkz, <xref linkend="glibc-Line-Input"/>); yazılımcı uygun istemi göstermelidir.
   </para>
  </example>
 </chapter>
 <chapter xml:id="glibc-Pseudo-Terminals" userlevel="notoc">
  <?dbhtml stop-chunking?>
  <title>Sözde Uçbirimler</title>
  <titleabbrev>Sözde uçbirimlerin açılması.</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>sözde uçbirimler</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>uçbirimler</primary><secondary>sahte</secondary></indexterm>
   <wordasword>Sözde uçbirim</wordasword>, uçbirim gibi davranan özel bir süreçler arası iletişim kanalıdır. Kanalın bir ucu <firstterm>ana</firstterm> uç ya da <firstterm>sözde ana uçbirim aygıtı</firstterm> olarak adlandırılırken diğer uç <firstterm>yardımcı</firstterm> uç adını alır. Ana uca yazılan veri yardımcı uç tarafından sıradan bir uçbirime kullanıcı tarafından yazılmış gibi alınır ve yardımcı uca yazılan veri ana uca sıradan bir uçbirime yazılmış gibi gönderilir.
  </para>
  <para>
   Sözde uçbirimler genellikle <command>xterm</command> ve <command>emacs</command> gibi uygulamalar tarafından uçbirim benzetimi amacıyla kullanılır.
  </para>
  <sect1 xml:id="glibc-Allocation">
   <title>Sözde Uçbirimlerin Tahsisi</title>
   <para>
    <indexterm linkend="glibc-cp"><primary>sözde uçbirimler</primary><secondary>tahsis edilmesi</secondary></indexterm>
    <indexterm linkend="glibc-pg"><primary>stdlib.h</primary></indexterm>
    Bu bölümde sözde uçbirim tahsisi için kullanılan işlevlerden bahsedilecektir. Bu işlevler &stdlib.h; başlık dosyasında bildirilmiştir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-getpt"><primary>sözde uçbirimler</primary><secondary>tanıtıcı tahsisi</secondary></indexterm>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-getpt"><primary>getpt</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>getpt</function></csname>
     <csparam><void/></csparam>
    </csproto>
    <header>&stdlib.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe; &fd;</concept>
    </conceptlist>
    <para>
     <code>getpt</code>  işlevi kullanılabilir ilk sözde ana uçbirim aygıtına yeni bir dosya tanıtıcı ile döner. İşlevin normal dönüş değeri negatif olmayan bir tamsayı olarak dosya tanıtıcıdır. Bir hata oluşması durumunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>ENOENT</code></term>
      <listitem>
       <para>
        Kullanılabilir sözde ana uçbirim aygıtı yok.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Bu işlev GNU oluşumudur.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-grantpt"><primary>sözde uçbirimler</primary><secondary>yardımcının izinleri</secondary></indexterm>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-grantpt"><primary>grantpt</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>grantpt</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter></csparam>
    </csproto>
    <header>&stdlib.h;</header>
    <conceptlist>
     <concept>&mtsafe; &locale;</concept>
     <concept>&asunsafe; &dlopen; &plugin; &heap; &lock;</concept>
     <concept>&acunsafe; &corrupt; &lock; &fd; &mem;</concept>
    </conceptlist>
    <para>
     <code>grantpt</code> işlevi <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili sözde ana uçbirim aygıtının diğer ucu olan yardımcı sözde uçbirimin sahipliğini ve erişim izinlerini değiştirir. Uçbirimin sahibi, işlevi çağıran sürecin gerçek kullanıcı kimliği olur (bkz, <xref linkend="glibc-Process-Persona"/>). Erişim yetkileri ise sahibi tarafından yazılabilir/okunabilir ve sadece grubu tarafından okunabilir olarak ayarlanır.
    </para>
    <para>
     Bazı sistemlerde bu işlev özel bir <emphasis>setuid root</emphasis> yazılım çağrılarak gerçeklenir (bkz, <xref linkend="glibc-How-Change-Persona"/>). Dolayısıyla, <varname>SIGCHLD</varname> sinyali için bir sinyal işleyici oluşturulması <code>grantpt</code> çağrısı ile çelişebilir (bkz, <xref linkend="glibc-Job-Control-Signals"/>).
    </para>
    <para>
     İşlevin normal dönüş değeri sıfırdır. Bir hata oluşması durumunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EBADF</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> geçerli bir dosya tanıtıcı değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EINVAL</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> sözde uçbirim ile ilişkili değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EACCES</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> ile ilişkili olan sözde ana uçbirimin karşı ucu olan sözde yardımcı uçbirime erişilemiyor.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-unlockpt"><primary>unlockpt</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>unlockpt</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter></csparam>
    </csproto>
    <header>&stdlib.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&asunsafe; &heap;<code linkend="glibc-safety-condition">/bsd</code></concept>
     <concept>&acunsafe; &fd; &mem;</concept>
    </conceptlist>
    <para>
     <code>unlockpt</code> işlevi <parameter>filedes</parameter> dosya tanıtıcısı ile ilişkili sözde ana uçbirim aygıtının diğer ucu olan sözde yardımcı uçbirimin kilidini kaldırır. Bazı sistemlerde, sözde yardımcı uçbirim sadece kilidi kaldırıldığında açılabilir, bu nedenle taşınabilir uygulamaların sözde yardımcı uçbirimi açarken daima bir <code>unlockpt</code> çağrısı yapması gerekir.
    </para>
    <para>
     İşlevin normal dönüş değeri sıfırdır. Bir hata oluşması durumunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EBADF</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> geçerli bir dosya tanıtıcı değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EINVAL</code></term>
      <listitem>
       <para>
        <parameter>filedes</parameter> sözde ana uçbirim ile ilişkili değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-ptsname"><primary>ptsname</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>char</ptr><function>ptsname</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter></csparam>
    </csproto>
    <header>&stdlib.h;</header>
    <conceptlist>
     <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:ptsname</code></concept>
     <concept>&asunsafe; &heap;<code linkend="glibc-safety-condition">/bsd</code></concept>
     <concept>&acunsafe; &fd; &mem;</concept>
    </conceptlist>
    <para>
     <parameter>filedes</parameter> dosya tanıtıcısı sözde ana uçbirim aygıtı ile ilişkili ise, <code>ptsname</code> işlevi ilişkili sözde yardımcı uçbirim aygıtının dosya ismini, boş karakter sonlandırmalı duruk ayrılmış bir dizgeye gösterici olarak döndürür. Bu dizge daha sonraki <code>ptsname</code> çağrıları ile geçersiz kılınabilir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-ptsname_r"><primary>ptsname_r</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>ptsname_r</function></csname>
     <csparam><type>int</type><parameter>filedes</parameter></csparam>
     <csparam><ptr>char</ptr><parameter>buf</parameter></csparam>
     <csparam><ptr>size_t</ptr><parameter>len</parameter></csparam>
    </csproto>
    <header>&stdlib.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&asunsafe; &heap;<code linkend="glibc-safety-condition">/bsd</code></concept>
     <concept>&acunsafe; &fd; &mem;</concept>
    </conceptlist>
    <para>
     <code>ptsname_r</code> işlevi <function>ptsname</function> işlevine benzemekle birlikte, sonucu kullanıcı tarafından belirtilen <parameter>len</parameter> uzunluktaki <parameter>buf</parameter> içinde döndürmesi ile farklıdır.
    </para>
    <para>
     Bu işlev GNU oluşumudur.
    </para>
   </csynopsis>
   <example>
    <para>
     Bu işlevlerin genel kullanım biçimi örnekte gösterilmiştir:
    </para>
    <screen>int
open_pty_pair (int *amaster, int *aslave)
{
  int master, slave;
  char *name;

  master = getpt ();
  if (master &lt; 0)
    return 0;

  if (grantpt (master) &lt; 0 || unlockpt (master) &lt; 0)
    goto close_master;
  name = ptsname (master);
  if (name == NULL)
    goto close_master;

  slave = open (name, O_RDWR);
  if (slave == -1)
    goto close_master;

  *amaster = master;
  *aslave = slave;
  return 1;

close_slave:
  close (slave);

close_master:
  close (master);
  return 0;
}
</screen>
   </example>
  </sect1>
  <sect1 xml:id="glibc-Pseudo-Terminal-Pairs">
   <title>Sözde Uçbirim Çiftinin Açılması</title>
   <para>
    <indexterm linkend="glibc-cp"><primary>sözde uçbirimler</primary><secondary>sözde uçbirim çiftinin açılması</secondary></indexterm>
    Bu işlevler BSD'den alınmıştır, ayrı bir kütüphane olarak <filename>libutil</filename> kütüphanesinde bulunur ve &pty.h; başlık dosyasında bildirilmiştir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-openpty"><primary>openpty</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>openpty</function></csname>
     <csparam><ptr>int</ptr><parameter>amaster</parameter></csparam>
     <csparam><ptr>int</ptr><parameter>aslave</parameter></csparam>
     <csparam><ptr>char</ptr><parameter>name</parameter></csparam>
     <csparam><ptr>const&nbsp;struct&nbsp;termios</ptr><parameter>termp</parameter></csparam>
     <csparam><ptr>const&nbsp;struct&nbsp;winsize</ptr><parameter>winp</parameter></csparam>
    </csproto>
    <header>&pty.h;</header>
    <conceptlist>
     <concept>&mtsafe; &locale;</concept>
     <concept>&asunsafe; &dlopen; &plugin; &heap; &lock;</concept>
     <concept>&acunsafe; &corrupt; &lock; &fd; &mem;</concept>
    </conceptlist>
    <para>
     Bu işlev sözde uçbirim çiftini ayırdıktan sonra açar ve sözde ana uçbirimin dosya tanıtıcısını *<parameter>amaster</parameter> göstericisinde, sözde yardımcı uçbirimin dosya tanıtıcısını *<parameter>aslave</parameter> göstericisinde döndürür. <parameter>name</parameter> bağımsız değişkeni boş gösterici değilse, sözde yardımcı uçbirim aygıtının dosya ismi *<parameter>name</parameter> içinde saklanır. <varname>termp</varname> boş gösterici değilse, sözde yardımcı uçbirimin öznitelikleri <varname>termp</varname> ile gösterilen yapıdan ayarlanır (bkz. <xref linkend="glibc-Terminal-Modes"/>). Benzer şekilde, <parameter>winp</parameter> boş gösterici değilse, sözde uçbirimin ekran boyutları <parameter>winp</parameter> ile gösterilen yapıdan ayarlanır.
    </para>
    <para>
     İşlevin normal dönüş değeri sıfırdır. Bir hata oluşması durumunda <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EBADF</code></term>
      <listitem>
       <para>
        Kullanılabilir sözde uçbirim çifti yok.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <warning>
     <para>
      <code>openpty</code> işlevinin <parameter>name</parameter> bağımsız değişkeninin <varname>NULL</varname> olması <emphasis>çok tehlikelidir</emphasis>, çünkü işlev <parameter>name</parameter> dizgesinin taşmasına karşı korunmamıştır. Sözde yardımcı uçbirim aygıtının ismini bulmak için işlevdeki bağımsız değişken yerine, <function>ttyname</function> işlevinin <code>openpty</code> tarafından döndürülen *<parameter>aslave</parameter> dosya tanıtıcısı ile kullanılması gerekir.
     </para>
    </warning>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-forkpty"><primary>forkpty</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>forkpty</function></csname>
     <csparam><ptr>int</ptr><parameter>amaster</parameter></csparam>
     <csparam><ptr>char</ptr><parameter>name</parameter></csparam>
     <csparam><ptr>const&nbsp;struct&nbsp;termios</ptr><parameter>termp</parameter></csparam>
     <csparam><ptr>const&nbsp;struct&nbsp;winsize</ptr><parameter>winp</parameter></csparam>
    </csproto>
    <header>&pty.h;</header>
    <conceptlist>
     <concept>&mtsafe; &locale;</concept>
     <concept>&asunsafe; &dlopen; &plugin; &heap; &lock;</concept>
     <concept>&acunsafe; &corrupt; &lock; &fd; &mem;</concept>
    </conceptlist>
    <para>
     Bu işlev <function>openpty</function> işlevine benzer, ek olarak <link linkend="glibc-Creating-a-Process">yeni bir süreç çatallar</link> ve yeni açılan sözde yardımcı uçbirim aygıtını <link linkend="glibc-Controlling-Terminal">alt sürecin denetim uçbirimi yapar</link>.
    </para>
    <para>
     İşlem başarılı olursa hem çağıran süreç hem de alt süreç işlevin döndüğünü görür fakat işlev farklı değerlerle döner: alt süreçte <code>0</code> değeriyle dönerken, çağıran sürece alt sürecin süreç kimliğini döndürür.
    </para>
    <para>
     Sözde uçbirim çifti tahsis edilememişse ya da alt süreç oluşturulamamışsa işlev başarısız olmuş demektir, bu durumda işlev çağrıldığı sürece <code>-1</code> değerini döndürür.
    </para>
    <warning>
     <para>
      <code>forkpty</code> işlevinde de <function>openpty</function> gibi <parameter>name</parameter> bağımsız değişkeni sorunu vardır.
     </para>
    </warning>
   </csynopsis>
  </sect1>
 </chapter>
</part>
