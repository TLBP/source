<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch21.xml,v2.37, GFDL,LGPL, NBB, 2023
     ********************************************************************
  Bu kısımda kullanılan terminoloji:
calendar time: takvim zamanı
absolute time: mutlak zaman (bu ilk ikisi kılavuzda eşanlamlı)
interval: zaman aralığı
elapsed time: geçen süre
amount of time: toplam süre
period: dönem
simple calendar time: basit takvim zamanı
epoch: POSIX zamanı
broken-down time: dökümlü zaman (yıl, ay, gün, vb. dökümlenen)
CPU time: işlemci zamanı (süreçler için olan)
processor time: işlemci süresi (özkaynak olan)
-->
<part xml:id="glibc-Date-and-Time" userlevel="longtoc">
 <title>Tarih ve Zaman</title>
 <titleabbrev>Tarih ve saati öğrenmek ve biçimlemek için kullanılan işlevler.</titleabbrev>
 <preliminary>
  <para>
   Bu kısımda tarihler, saatler yani zamanla ilgili, zamanı saptamak, değiştirmek ve zaman gösterimleri arasında dönüşüm gibi işlemleri gerçekleştiren işlevlerden bahsedilecektir.
  </para>
 </preliminary>
 <chapter xml:id="glibc-Time-Basics">
  <title>Zaman Kavramları</title>
  <titleabbrev>Kavramlar ve tanımlar.</titleabbrev>
  <para>
   <dicterm><english>continuum</english><turkish>süreklilik</turkish></dicterm>
   <dicterm><english>interval</english><turkish>zaman aralığı</turkish></dicterm>
   <dicterm><english>elapsed time</english><turkish>süre</turkish></dicterm>
   <dicterm><english>amount of time</english><turkish>toplam süre</turkish></dicterm>
   <dicterm><english>CPU time</english><turkish>işlemci zamanı</turkish></dicterm>
   <dicterm><english>processor time</english><turkish>işlemci süresi</turkish></dicterm>
   <dicterm><english>broken-down time</english><turkish>dökümlü zaman</turkish></dicterm>
   <dicterm><english>broken-down time</english><turkish>yerel zaman</turkish></dicterm>
   <dicterm><english>epoch</english><turkish>an</turkish></dicterm>
   <dicterm><english>epoch</english><turkish>başlangıç anı</turkish></dicterm>
   <indexterm linkend="glibc-cp"><primary>zaman</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>mutlak zaman</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>tarih</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>zaman aralığı</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>süre</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>dönem</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>işlemci zamanı</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>işlemci süresi</primary></indexterm>
   "Time" sözcüğü ingilizcede çok fazla anlama geldiğinden teknik bir kılavuzda zamanı tartışmak zor olabilir. Bu kılavuzda, karışıklığı önlemek için titiz bir terminoloji kullanılmaktadır ve "zaman" sözcüğü bu soyut kavramdan bahsederken kullanılan tek şeydir.
  </para>
  <para>
   "Takvim zamanı" zamanın sürekliliği içinde bir noktayı ifade eder, örneğin: 4 Kasım 1990 18:02.5 UTC. Buna genellikle <wordasword>mutlak zaman</wordasword>  denir.
  </para>
  <para>
   Buna "tarih" denmemektedir, çünkü tarih mutlak zamanın doğasında vardır.
  </para>
  <para>
   Bir <wordasword>zaman aralığı</wordasword> zamanın sürekliliği içinde iki mutlak zaman arasındaki kesintisiz parçadır. Örnek: 4 Temmuz 1980 tarihinde saat 9:00 ile 10:00 arası.
  </para>
  <para>
   <wordasword>Süre</wordasword> bir aralığın uzunluğudur. Örnek: 35 dakika.
  </para>
  <para>
   <wordasword>Toplam süre</wordasword>, adı üstünde, sürelerin toplamıdır. Örnek: Parça parça okunan bir kitabın toplam okuma süresi 9 saattir, gibi.
  </para>
  <para>
   <wordasword>Dönem</wordasword> sürekli belirli aralıklarla yinelenen iki olay arasındaki süredir.
  </para>
  <para>
   <wordasword>Basit takvim zamanı</wordasword>, <wordasword>POSIX zamanı</wordasword> olarak adlandırılan gerçeklenime özgü, belli bir andan (epoch) bu yana geçen süre olarak temsil edilir. Bu temsil, iki takvim zamanı arasında geçen süreyi bulmak gibi takvim zamanları üzerinde hesaplamalar yapmak için uygundur. Basit takvim zamanı, saat diliminden bağımsızdır; bilgisayar dünyanın neresinde olursa olsun aynı anı temsil eder.
  </para>
  <para>
   POSIX, basit takvim zamanının artık-saniyeleri içermediğini söylüyor, ancak bazı (başkaca POSIX uyumlu) sistemler, basit takvim sürelerine artık saniyeleri dahil edecek şekilde yapılandırılabilir.
  </para>
  <para>
   <wordasword>Dökümlü zaman</wordasword>, Miladi takvimdeki bileşenleri tarafından temsil edilen bir takvim zamanıdır: yıl, ay, gün, saat, dakika ve saniye. Dökümlü zaman değeri, belirli bir saat dilimine göredir ve bu nedenle bazen <wordasword>yerel zaman</wordasword> olarak da adlandırılır. Döküm zamanları, insanlar için anlaması daha kolay olduğundan girdi ve çıktı için çok kullanışlıdır, ancak hesaplamalar için daha zordur.
  </para>
  <para>
   <wordasword>İşlemci zamanı</wordasword> mutlak zaman gibidir, bir farkla zamanın başlangıcı, bir sürecin işlemciyi kullanmaya başladığı andır. İşlemci zamanı bu nedenle sürece bağlıdır. Sürecin harici olayları beklerken harcadığı zamanı içermez. Sistem, her süreç tarafından kullanılan işlemci zamanını ayrı ayrı izler.
  </para>
  <para>
   <wordasword>İşlemci süresi</wordasword> ise işlemcinin kullanım süresidir.
   Herhangi bir zaman aralığında (işlemci sayısının katları olarak) ne süreyle var olabileceğine dair bir sınır olduğundan temel sistem kaynaklarından biridir.
  </para>
 </chapter>
 <chapter xml:id="glibc-Time-Types">
  <title>Zaman Veri Türleri</title>
  <titleabbrev>Zamanın gösterimi ile ilgili veri türleri</titleabbrev>
  <para>
   &isoc; ve POSIX standartları, geçen süreleri, basit takvim zamanlarını ve dökümlü süreleri temsil etmek için çeşitli veri türleri tanımlamıştır.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-clock_t"><primary>clock_t</primary></indexterm>
   <indexterm linkend="glibc-cp" xml:id="glibc-cp-clock_t"><primary>saat tıklama sayısı</primary></indexterm>
   <csproto type="veri türü">
    <csname><function>clock_t</function></csname>
   </csproto>
   <header>&time.h;</header>
   <para>
    <code>clock_t</code>, işlemci zamanını ve işlemci süresini ölçmek için kullanılır. Bir tamsayı veya kayan noktalı tür olabilir. Değerleri, geçmişteki bazı keyfi olaylardan bu yana "saat tıklama" sayısıdır. Saniyedeki saat tıklama sayısı sisteme özgüdür. Daha fazla ayrıntı için bkz, <xref linkend="glibc-Processor-And-CPU-Time"/>.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-time_t"><primary>time_t</primary></indexterm>
   <csproto type="veri türü">
    <csname><function>time_t</function></csname>
   </csproto>
   <header>&time.h;</header>
   <para>
    <code>time_t</code> basit takvim zamanını temsil etmek için kullanılan en basit veri türüdür.
   </para>
   <para>
    &isoc;'de <code>time_t</code>, tamsayı veya kayan noktalı tür olabilir ve <code>time_t</code> değerlerinin anlamını belirtmez. Kesin olarak uyumlu bir yazılımın <code>time_t</code> değerleriyle yapabileceği şeyler yalnızca şunlardır: iki basit takvim zamanını, dökümlü zamana dönüştüren işlevlere (bkz, <xref linkend="glibc-Broken-down-Time"/>) ve arada geçen süreyi almak için  <function>difftime</function> işlevine (bkz, <xref linkend="glibc-Calculating-Elapsed-Time"/>) aktarmak.
   </para>
   <para>
    POSIX uyumlu sistemlerde, <code>time_t</code> tamsayı türüdür ve değerleri, Eşgüdümlü Evrensel Zaman olarak 1 Ocak 1970 00:00:00 olan "POSIX zamanı"ndan bu yana geçen saniye sayısını temsil eder.
   </para>
   <para>
    &glibc; buna ek olarak, <code>time_t</code>'nin imli tür olduğunu ve tüm işlevlerinin, POSIX zamanından önceki zamanlar olarak yorumlanan negatif <code>time_t</code> değerlerinde doğru şekilde çalıştığını garanti eder.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-timespec"><primary sortas="timespec">struct&nbsp;timespec</primary></indexterm>
   <csproto type="veri türü">
    <csname><type>struct</type><function>timespec</function></csname>
   </csproto>
   <header>&time.h;</header>
   <para>
    <code>struct timespec</code> türü saniyenin altında çözünürlükle basit takvim zamanını veya geçen süreyi temsil eder. Aşağıdaki üyeleri içerir:
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <type>time_t&nbsp;</type><structfield>tv_sec</structfield>
     </glossterm>
     <glossdef>
      <para>
       POSIX zamanından (basit takvim zamanı için) veya başka bir başlangıç noktasından (geçen süre için) beri geçen tam saniye sayısı.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>long&nbsp;int&nbsp;</type><structfield>tv_nsec</structfield>
     </glossterm>
     <glossdef>
      <para>
       <code>tv_sec</code> üyesindeki süreden beri geçen nanosaniye sayısı.
      </para>
      <para>
       <code>struct timespec</code> değerleri &glibc; işlevleri tarafından üretildiğinde, bu alandaki değer her zaman sıfırdan büyük veya sıfıra eşit ve 1.000.000.000'dan küçük olacaktır. &glibc; işlevlerine <code>struct timespec</code> değerleri aktarıldığında, bu alandaki değerin aynı aralıkta olması gerekir.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-timeval"><primary sortas="timeval">struct&nbsp;timeval</primary></indexterm>
   <csproto type="veri türü">
    <csname><type>struct</type><function>timeval</function></csname>
   </csproto>
   <header>&sys-time.h;</header>
   <para>
    <code>struct timeval</code> türü saniyenin altında çözünürlükle basit takvim zamanını veya geçen süreyi temsil eden eski veri türüdür. <type>struct&nbsp;timespec</type> ile hemen hemen aynıdır, ancak nanosaniyelik değil mikrosaniyelik çözünürlük sağlar. Aşağıdaki üyeleri içerir:
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <type>time_t&nbsp;</type><structfield>tv_sec</structfield>
     </glossterm>
     <glossdef>
      <para>
       POSIX zamanından (basit takvim zamanı için) veya başka bir başlangıç noktasından (geçen süre için) beri geçen tam saniye sayısı.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>long&nbsp;int&nbsp;</type><structfield>tv_usec</structfield>
     </glossterm>
     <glossdef>
      <para>
       <code>tv_sec</code> üyesindeki süreden beri geçen mikrosaniye sayısı.
      </para>
      <para>
       <code>struct timespec</code> değerleri &glibc; işlevleri tarafından üretildiğinde, bu alandaki değer her zaman sıfırdan büyük veya sıfıra eşit ve 1.000.000.000'dan küçük olacaktır. &glibc; işlevlerine <code>struct timespec</code> değerleri aktarıldığında, bu alandaki değerin aynı aralıkta olması gerekir.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </csynopsis>
  <csynopsis>
   <csproto type="veri türü">
    <csname><type>struct</type><function>tm</function></csname>
   </csproto>
   <header>&time.h;</header>
   <para>
    Dökümlü zamanı temsil eden veri türüdür. Yıl, ay, gün, vb. için ayrı üyeler içerir. Ayrıntılar için bkz, <xref linkend="glibc-Broken-down-Time"/>.
   </para>
  </csynopsis>
 </chapter>
 <chapter xml:id="glibc-Calculating-Elapsed-Time">
  <title>Sürenin Hesaplanması</title>
  <titleabbrev>Süre gösterimi ile ilgili veri türleri</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>süre</primary></indexterm>
   Çoğu zaman, geçen süre iki basit takvim zamanı arasındaki fark olarak hesaplanmak istenir. &glibc; bu amaç için tek bir işlev sunar.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-difftime"><primary>difftime</primary></indexterm>
   <csproto type="işlev">
    <csname><type>double</type><function>difftime</function></csname>
    <csparam><type>time_t</type><parameter>end</parameter></csparam>
    <csparam><type>time_t</type><parameter>begin</parameter></csparam>
   </csproto>
   <header>&time.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    <code>difftime</code> işlevi <parameter>begin</parameter> ve <parameter>end</parameter> takvim zamanları arasındaki süreyi <type>double</type> türünde saniye cinsinden bir değer olarak hesaplar.
   </para>
   <para>
    POSIX uyumlu sistemlerde, ‘<code><parameter>end</parameter> - <parameter>begin</parameter></code>’ yerine ‘<code>difftime (<parameter>end</parameter>, <parameter>begin</parameter>)</code>’ kullanmanın avantajı, bitiş ve başlangıç birbirinden çok uzak olsa bile basit bir çıkarmanın taşmasına sebep olacak kadar matematiksel olarak doğru sonucu vermesidir. Bununla birlikte çift, farkın tam olarak temsil edilemeyeceği kadar birbirlerinden uzaksa, sonuç kesin olmayacaktır.
   </para>
   <para>
    Diğer sistemlerde, <type>time_t</type> değerleri, çıkarma işleminin doğrudan çalışmasını önleyecek şekilde kodlanmış olabilir ve bu durumda <code>difftime</code>, farkı hesaplamanın tek yolu olacaktır.
   </para>
  </csynopsis>
  <para>
   &glibc; <type>struct&nbsp;timeval</type> veya <type>struct&nbsp;timespec</type> türündeki iki değer arasındaki farkı hesaplamak için herhangi bir işlev sağlamaz. Bu hesaplamayı yapmak için önerilen yol elle yapmak şeklindedir ve <code>tv_sec</code> üyesinin imsiz türe sahip olduğu bazı özel işletim sistemlerinde bile işe çalışır.
  </para>
  <example>
   <screen>/* <replaceable>`struct timeval' değerleri olan X ve Y arasında
    çıkarma yap ve sonucu *result içinde sakla.
    Fark negatifse 1 ile değilse 0 ile dön.</replaceable> */

int
timeval_subtract (struct timeval *result, struct timeval *x, struct timeval *y)
{
  /* <replaceable>Elde var 1.</replaceable> */
  if (x-&gt;tv_usec &lt; y-&gt;tv_usec) {
    int nsec = (y-&gt;tv_usec - x-&gt;tv_usec) / 1000000 + 1;
    y-&gt;tv_usec -= 1000000 * nsec;
    y-&gt;tv_sec += nsec;
  }
  if (x-&gt;tv_usec - y-&gt;tv_usec &gt; 1000000) {
    int nsec = (x-&gt;tv_usec - y-&gt;tv_usec) / 1000000;
    y-&gt;tv_usec += 1000000 * nsec;
    y-&gt;tv_sec -= nsec;
  }

  /* <replaceable>Şimdi hesapla. tv_usec kesinlikle pozitif.</replaceable> */
  result-&gt;tv_sec = x-&gt;tv_sec - y-&gt;tv_sec;
  result-&gt;tv_usec = x-&gt;tv_usec - y-&gt;tv_usec;

  /* <replaceable>Sonuç negatifse 1 dönsün.</replaceable> */
  return x-&gt;tv_sec &lt; y-&gt;tv_sec;
}
</screen>
  </example>
 </chapter>
 <chapter xml:id="glibc-Processor-And-CPU-Time" userlevel="notoc">
  <?dbhtml stop-chunking?>
  <title>İşlemci Zamanı ve İşlemci Süresi</title>
  <titleabbrev>Bir yazılımın çalışması ile ilgili zaman ve süreler.</titleabbrev>
  <para>
   <indexterm linkend="glibc-cp"><primary>işlemci zamanı</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>saat tıklamaları</primary></indexterm>
   Bir yazılımı en iyilemek ya da verimliliğini ölçmek için, ne kadar işlemci zamanı kullanıldığını bilmek gerekir. Bunun için, mutlak zaman ve süreler kullanışsızdır, çünkü bir süreç işlemciyi kullanırken arada bazı G/Ç işlemlerini veya başka süreçleri bekleyebilir. Buna karşın, bu bölümdeki işlevler kullanılarak işlemci kullanımı ile ilgili bilgi alınabilir.
  </para>
  <para>
   İşlemci zamanı (bkz. <xref linkend="glibc-Time-Basics"/>), <wordasword>saat tıklama</wordasword> sayısı olarak <type>clock_t</type> türünde bir veri olup bir sürecin belli bir olaydan bu yana işlemciyi etkin olarak kullandığı toplam süreyi verir. GNU sistemlerinde bu olay, sürecin oluşturulmasıdır. Genel olarak gelişigüzel olsa da olay, herhangi bir süreç için her zaman aynı olaydır, dolayısıyla hesaplamadan önce ve sonra sürecin işlemci süresini inceleyerek bu hesaplamanın işlemcide ne kadar zaman aldığı her zaman ölçülebilir.
  </para>
  <para>
   GNU/Linux ve GNU/Hurd sistemlerinde, <type>clock_t</type> ile <type>long&nbsp;int</type> eşdeğerdir ve <varname>CLOCKS_PER_SEC</varname>  tamsayıdır. Fakat diğer sistemlerde, <type>clock_t</type> ve <varname>CLOCKS_PER_SEC</varname> birer tamsayı ya da birer kayan noktalı sayı olabilir. Önceki bölümdeki örnekte olduğu gibi, işlemci zamanı değerlerinin <type>double</type> türe dönüştürülmesi, aritmetik ve gösterim işlemlerinin düzgün olarak yapılmasını sağlarken sistemlerin olası farklı türlerdeki gösterimlerinden de etkilenmemesini sağlar.
  </para>
  <para>
   Saat tıklama sayısının, sayı türlerinin genişliklerine bağlı olarak belli bir sınırı olduğunu unutulmamalıdır. <varname>CLOCKS_PER_SEC</varname> için bir milyon atanan 32 bitlik bir sistemde bu işlev yaklaşık 72 dakikada bir aynı değeri döndürecektir.
  </para>
  <para>
   Bir sürecin kullandığı işlemci süresini incelemek ve denetlemek için de işlevler vardır, bunlar hakkında <xref linkend="glibc-Resource-Usage-And-Limitation"/> bölümünde bilgi verilmiştir.
  </para>
  <sect1 xml:id="glibc-CPU-Time">
   <title>İşlemci Zamanının Sorgulanması</title>
   <titleabbrev><code>clock</code> işlevi.</titleabbrev>
   <para>
    Bir sürecin işlemci zamanını almak için <function>clock</function> işlevi kullanılabilir. Bu işlev &time.h; başlık dosyasında bildirilmiştir.
    <indexterm linkend="glibc-pg"><primary>time.h</primary></indexterm>
   </para>
   <para>
    Genel olarak, <function>clock</function> işlevi ilgilenilen zaman aralığının başında ve sonunda çağrılır ve bu değerler birbirinden çıkarılıp sonuç <varname>CLOCKS_PER_SEC</varname> ile bölünerek işlemci süresi aşağıdaki gibi elde edilir:
   </para>
   <screen>#include &lt;time.h&gt;

clock_t once, sonra;
double kullanilan_islemci_zamani;

once = clock();
… /* <replaceable>Burada bir takım işlemler yapılacak.</replaceable> */
sonra = clock();
kullanilan_islemci_zamani = ((double) (sonra - once)) / CLOCKS_PER_SEC;
</screen>
   <para>
    Toplam süreyi hesaplarken tek bir işlemci zamanı kullanılmamalıdır. Ya yukarıdaki gibi bir çıkartma işlemi yapılmalı ya da doğrudan işlemci süresi sorgulanmalıdır. Bkz. <xref linkend="glibc-Processor-Time"/>.
   </para>
   <para>
    Farklı makineler ve işletim sistemlerinde işlemci zamanı çözünürlüğü çılgınca değişir. Bunlarda, dahili işlemci zamanı çözünürlüğü saniyenin yüzde biri ile milyonda biri arasındadır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CLOCKS_PER_SEC"><primary>CLOCKS_PER_SEC</primary></indexterm>
    <csproto type="makro">
     <csname><type>int</type><function>CLOCKS_PER_SEC</function></csname>
    </csproto>
    <header>&time.h;</header>
    <para>
     Bu makronun değeri <function>clock</function> işlevi tarafından ölçülen saniyedeki saat tıklama sayısını verir. POSIX standardı bu değerin gerçek çözünürlükten bağımsız olarak bir milyon olmasını gerektirir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-clock"><primary>clock</primary></indexterm>
    <csproto type="işlev">
     <csname><type>clock_t</type><function>clock</function></csname>
     <csparam><void/></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev çağrıldığı sürecin geçerli işlemci zamanı ile döner. İşlemci zamanı ölçülmüyorsa ya da gösterilemiyorsa, işlev <code>(clock_t)(-1)</code> ile döner.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Processor-Time">
   <title>İşlemci Süresinin Sorgulanması</title>
   <titleabbrev><code>times</code> işlevi.</titleabbrev>
   <para>
    <function>times</function> işlevi bir sürecin harcadığı işlemci süresi ile ilgili bilgileri, <link linkend="glibc-Time-Basics">işlemci zamanına</link> ek olarak <type>struct&nbsp;tms</type> cinsinden bir nesne olarak döndürür. Bu oluşum  &sys-times.h; başlık dosyasında bildirilmiştir.
    <indexterm linkend="glibc-cp"><primary>işlemci süresi</primary></indexterm>
    <indexterm linkend="glibc-cp"><primary>işlemci zamanı</primary></indexterm>
    <indexterm linkend="glibc-pg"><primary>sys/times.h</primary></indexterm>
   </para>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-tms"><primary sortas="tms">struct&nbsp;tms</primary></indexterm>
    <csproto type="veri türü">
     <csname><type>struct</type><function>tms</function></csname>
    </csproto>
    <header>&sys-times.h;</header>
    <para>
     <code>struct tms</code> türü bir sürecin harcadığı işlemci süresi ile ilgili bilgileri döndürmek için kullanılır. En azından şu üyeleri içerir:
    </para>
    <glosslist>
     <glossentry>
      <glossterm>
       <type>clock_t&nbsp;</type><structfield>tms_utime</structfield>
      </glossterm>
      <glossdef>
       <para>
        Çağrıldığı sürecin çalıştırdığı işlemci komutlarının harcadığı toplam işlemci süresidir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>clock_t&nbsp;</type><structfield>tms_stime</structfield>
      </glossterm>
      <glossdef>
       <para>
        "Sistem" tarafından süreç yararına harcanan işlemci süresidir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>clock_t&nbsp;</type><structfield>tms_cutime</structfield>
      </glossterm>
      <glossdef>
       <para>
        Çağrıldığı sürecin sonlandırılmış alt süreçlerinin harcadığı <code>tms_utime</code> ve <code>tms_cutime</code> sürelerinin toplamıdır. Sonlandırılmış alt süreçlerin durumu sürece <function>wait</function> veya <function>waitpid</function> ile bildirildiğinden (bkz. <xref linkend="glibc-Process-Completion"/>), bu değer <function>wait</function> veya <function>waitpid</function> ile bildirilmemiş süreleri içermez.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>clock_t&nbsp;</type><structfield>tms_cstime</structfield>
      </glossterm>
      <glossdef>
       <para>
        Çağrıldığı sürecin sonlandırılmış alt süreçleri yararına "sistemin" harcadığı işlemci süresini göstermesi dışında <code>tms_cutime</code> gibidir.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
    <para>
     Tüm süreler saat tıklaması cinsinden verilmiştir. İşlemci zamanının tersine, bunlar herhangi bir olaya göreli değildir. Bkz, <xref linkend="glibc-Creating-a-Process"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CLK_TCK"><primary>CLK_TCK</primary></indexterm>
    <csproto type="makro">
     <csname><type>int</type><function>CLK_TCK</function></csname>
    </csproto>
    <header>&sys-times.h;</header>
    <para>
     Saniyedeki saat tıklama sayısı için kullanılan eski isimdir. Yerine,
     <code>sysconf (_SC_CLK_TCK)</code> kullanılmalıdır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-times"><primary>times</primary></indexterm>
    <csproto type="işlev">
     <csname><type>clock_t</type><function>times</function></csname>
     <csparam><ptr>struct&#160;tms</ptr><parameter>buffer</parameter></csparam>
    </csproto>
    <header>&sys-times.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>times</code> işlevi kendisini çağıran sürecin işlemci süresi ile ilgili bilgileri <parameter>buffer</parameter> içinde saklar.
    </para>
    <para>
     İşlevin dönüş değeri, geçmişte keyfi bir noktadan (örn, sistem başlangıcından beri) bu yana saat tıklama sayısıdır. Başarısızlığı belirtmek için <code>(clock_t)(-1)</code> değerini döndürür.
    </para>
   </csynopsis>
   <note><title>Taşınabilirlik Bilgisi</title>
    <para>
     <xref linkend="glibc-CPU-Time"/> bölümünde anlatılan <function>clock</function> işlevi &isoc; standardında belirtilmiştir. GNU sisteminde işlemci zamanı <function>times</function> tarafından döndürülen yapının <code>tms_utime</code> ve <code>tms_stime</code> alanlarındaki değerlerin toplamı olarak tanımlanmıştır.
    </para>
   </note>
  </sect1>
 </chapter>
 <chapter xml:id="glibc-Calendar-Time" userlevel="longtoc">
  <title>Takvim Zamanı</title>
  <titleabbrev>"Gerçek" tarih ve zamanlarla çalışma.</titleabbrev>
  <preliminary>
   <para>
    Bu kısımda <link linkend="glibc-Time-Basics">mutlak zamanların</link> atanması, döndürülmesi ve değiştirilmesi için kullanılan işlevler açıklanmıştır.
   </para>
  </preliminary>
  <sect1 xml:id="glibc-Getting-the-Time">
   <title>Zamanın Öğrenilmesi</title>
   <titleabbrev>Zamanı öğrenmek için işlevler.</titleabbrev>
   <para>
    &glibc; geçerli takvim zamanını farklı çözünürlük seviyeleriyle almak için çeşitli işlevler sağlar.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-time"><primary>time</primary></indexterm>
    <csproto type="işlev">
     <csname><type>time_t</type><function>time</function></csname>
     <csparam><ptr>time_t</ptr><parameter>result</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Geçerli takvim zamanını öğrenmek için kullanılan en basit işlevdir. Takvim zamanını <type>time_t</type> türünde bir değer olarak döndürür; POSIX sistemlerinde, çözünürlük <code>1</code> saniyedir. Saat kullanılabilir olduğunda <function>clock_gettime</function>&nbsp;<code>(<varname>CLOCK_REALTIME_COARSE</varname>)</code>, aksi takdirde <function>clock_gettime</function>&nbsp;<code>(<varname>CLOCK_REALTIME</varname>)</code> ile aynı saati kullanır.
    </para>
    <para>
     <parameter>result</parameter> boş gösterici değilse, takvim zamanı *<parameter>result</parameter> içinde saklanır.
    </para>
    <para>
     Bu işlev başarısız olamaz.
    </para>
   </csynopsis>
   <para>
    Bazı uygulamalar, tek başına <type>time_t</type> ile mümkün olandan daha hassas zaman işleyişi gerektirir. Bazı uygulamalar ise "geçerli zaman" ile neyin kastedildiği üzerinde daha fazla denetim gerektirir. Bu uygulamalar için POSIX, çeşitli farklı saatlerden zamanı nanosaniyeye kadar hassasiyette alabilen <function>clock_gettime</function> işlevini sağlar. Saat, sistem genelinde olabilir ve zaman tüm süreçler için aynı şekilde ölçülür; ya da süreç başına veya evre başına olabilir ve zaman belirli bir süreç veya benzeri başka bir kaynak tarafından tüketilen işlemci zamanı olarak ölçülür. Her saatin kendi çözünürlüğü ve başlangıç zamanı vardır. Bir saatin çözünürlüğü <function>clock_getres</function> işlevi ile bulunabilir. Bir saatin başlangıç zamanını elde edecek işlevi yoktur; başlangıç zamanı ya sabittir ve belgelenmiştir ya da saatin mutlak zamanları ölçmek için kullanılması amaçlanmamıştır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-clockid_t"><primary>clockid_t</primary></indexterm>
    <csproto type="veri türü">
     <csname><function>clockid_t</function></csname>
    </csproto>
    <header>&time.h;</header>
    <para>
     <code>clockid_t</code> türü, birkaç sistem saatinden hangisinin kullanılmak istendiğini gösteren sabitler için kullanılır.
    </para>
   </csynopsis>
   <para>
    Bu işlev ailesini destekleyen tüm sistemler en azından şu saat sabitini tanımlayacaktır:
   </para>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CLOCK_REALTIME"><primary>CLOCK_REALTIME</primary></indexterm>
    <csproto type="makro">
     <csname><type>clockid_t</type><function>CLOCK_REALTIME</function></csname>
    </csproto>
    <header>&time.h;</header>
    <para>
     Bu saat Eşgüdümlü Evrensel Zaman olarak 1 Ocak 1970 00:00:00 olan POSIX zamanını başlangıç anı olarak kullanır. <function>time</function> ve <function>gettimeofday</function> saatlerine yakındır, ancak bunlarla uyumlu olması gerekmez.
    </para>
   </csynopsis>
   <para>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-CLOCK_MONOTONIC"><primary>monoton zaman</primary></indexterm>
    Evrensel olmayan, ancak yine de çok yaygın olan ikinci saat sabiti, monoton zamanı ölçen saat içindir. Monoton zaman, süreleri ölçmek için kullanışlıdır, çünkü bu ölçümlerin sistem saatindeki değişikliklerden etkilenmemesini garanti eder.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-vr" xml:id="glibc-vr-CLOCK_MONOTONIC"><primary>CLOCK_MONOTONIC</primary></indexterm>
    <csproto type="makro">
     <csname><type>clockid_t</type><function>CLOCK_MONOTONIC</function></csname>
    </csproto>
    <header>&time.h;</header>
    <para>
     Mutlak takvim zamanı için sistem ayarındaki süreksiz değişiklikleri göz ardı ederek, takvim zamanının ilerleyişini sürekli olarak ölçen sistem geneli saat.
    </para>
    <para>
     Bu saatin başlangıç anı, geçmişte belirsiz bir noktadır. Sistem yeniden başlatılırsa veya askıya alınırsa başlangıç anı değişebilir. Bu nedenle, <code>CLOCK_MONOTONIC</code> mutlak zamanı ölçmek için kullanılamaz, yalnızca geçen zamanı ölçmek için kullanılabilir.
    </para>
   </csynopsis>
   <para>
    Sistemler bu iki saatin dışında başka saatleri de destekleyebilir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-clock_gettime"><primary>clock_gettime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>clock_gettime</function></csname>
     <csparam><type>clockid_t</type><parameter>clock</parameter></csparam>
     <csparam><ptr>struct&#160;timespec</ptr><parameter>ts</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Geçerli zamanı <parameter>clock</parameter> tarafından tanımlanan saate göre  saniye ve nanosaniye olarak *<parameter>ts</parameter> içinde döndürür. <type>struct&#160;timespec</type> açıklaması için bkz, <xref linkend="glibc-Time-Types"/>.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EINVAL</code></term>
      <listitem>
       <para>
        <parameter>clock</parameter> ile belirtilen saat desteklenmiyor.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <para>
    <function>clock_gettime</function> işlevi, saniye ve nanosaniye olarak ölçeklenmiş zamanı bildirir, ancak her saatin gerçek çözünürlüğü bir nanosaniye hassasiyette olmayabileceği gibi tüm saatler için aynı olmayabilir. POSIX ayrıca bir saatin gerçek çözünürlüğünü bulmak için bir işlev sağlar:
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-clock_getres"><primary>clock_getres</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>clock_getres</function></csname>
     <csparam><type>clockid_t</type><parameter>clock</parameter></csparam>
     <csparam><ptr>struct&#160;timespec</ptr><parameter>res</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <parameter>clock</parameter> ile belirtilen saatin gerçek çözünürlüğünü *<parameter>res</parameter> içinde döndürür.
     </para>
     <para>
      Örneğin, <varname>CLOCK_REALTIME</varname> için saat donanımı 32,768 kHz'de salınan bir kuvars kristali kullanıyorsa, çözünürlüğü 30,518 mikrosaniye olur ve '<code>clock_getres&nbsp;(CLOCK_REALTIME,&nbsp;&amp;r)</code>' çağrısı, <code>r.tv_sec</code> alanında <code>0</code>'a ve <code>r.tv_nsec</code> alanında <code>30518</code> döndürür.
     </para>
     <para>
      Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
     </para>
     <variablelist>
      <varlistentry>
       <term><code>EINVAL</code></term>
       <listitem>
        <para>
         <parameter>clock</parameter> ile belirtilen saat desteklenmiyor.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </csynopsis>
    <para>
     Bu işlevler ve belirli saatleri tanımlayan sabitler &time.h; başlık dosyasında bildirilmiştir.
    </para>
    <note><title>Taşınabilirlik Bilgisi:</title>
     <para>
      &glibc;nin eski sürümlerini kullanan sistemler de dahil olmak üzere bazı sistemlerde, <function>clock_gettime</function> veya <function>clock_setres</function> kullanan yazılımların <code>-lrt</code> kütüphanesiyle ilintilenmesi gerekir. &glibc;nin 2.17 sürümünden itibaren buna gerek kalmamıştır.
     </para>
    </note>
    <para>
     &glibc; ayrıca, geçerli zamanı mikrosaniye çözünürlükte almak için daha eski ama hala yaygın olarak kullanılan bir işlev sağlar. Bu işlev &sys-time.h; başlık dosyasında bildirilmiştir.
    </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-gettimeofday"><primary>gettimeofday</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>gettimeofday</function></csname>
     <csparam><ptr>struct&#160;timeval</ptr><parameter>tp</parameter></csparam>
     <csparam><ptr>void</ptr><parameter>tzp</parameter></csparam>
    </csproto>
    <header>&sys-time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Geçerli takvim zamanını saniye ve mikrosaniye olarak *<parameter>tp</parameter> içinde döndürür. <type>struct&#160;timeval</type> açıklaması için bkz, <xref linkend="glibc-Time-Types"/>.  <code>gettimeofday</code> saati, <function>time</function> ve '<function>clock_gettime</function><code>&nbsp;(<varname>CLOCK_REALTIME</varname>)</code>' saatlerine yakındır, ancak onlarla uyumlu olması gerekmez.
    </para>
    <para>
     Bazı eski sistemlerde, <parameter>tzp</parameter> boş işaretçi değilse, sistem genelinde saat dilimi bilgileri *<parameter>tzp</parameter>'ye yazılırdı. Bu özellik artık kullanılmıyor ve GNU sistemlerinde desteklenmiyor. Bu bağımsız değişken artık her zaman boş gösterici olmalıdır. Bunun yerine, zaman dilimleriyle çalışmak için <xref linkend="glibc-Time-Zone-Functions"/> ve <xref linkend="glibc-Broken-down-Time"/> bölümlerinde açıklanan oluşumlar kullanılmalıdır.
    </para>
    <para>
     Bu işlev başarısız olamaz ve dönüş değeri her zaman <code>0</code>'dır.
    </para>
    <note><title>Taşınabilirlik Bilgisi:</title>
     <para>
      POSIX standardının 2008 sürümünden itibaren, bu işlevin kullanılması önerilmemektedir. &glibc; bu işlevi süresiz olarak sağlamaya devam edecektir, ancak yeni yazılımların bunun yerine <function>clock_gettime</function> işlevini kullanması gerekir.
     </para>
    </note>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Setting-and-Adjusting-the-Time">
   <title>Zamanın Değiştirilmesi ve Ayarlanması</title>
   <titleabbrev>Sistem saatini değiştiren ve ayarlayan işlevler.</titleabbrev>
   <para>
    Günümüz bilgisayarının içindeki saat donanımı oldukça güvenilirdir, ancak yine de yanlış olabilir. Bu bölümdeki işlevler, sistemin geçerli takvim zamanını belirlemek ve sistemin saniyeleri sayma hızını ayarlamak içindir. Böylece takvim zamanı doğru olacağı gibi doğru olarak kalır.
   </para>
   <para>
    Bu bölümdeki işlevleri kullanmak için özel ayrıcalıklar gerekir. Bkz, <xref linkend="glibc-Users-and-Groups"/>.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-clock_settime"><primary>clock_settime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>clock_settime</function></csname>
     <csparam><type>clockid_t</type><parameter>clock</parameter></csparam>
     <csparam><ptr>const&#160;struct&#160;timespec</ptr><parameter>ts</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <parameter>clock</parameter> ile belirtilen saati *<parameter>ts</parameter> ile belirtilen basit takvim zamanına ayarlar.
    </para>
    <para>
     Sistemin tüm saatleri değiştirilemez. Örneğin, <varname>CLOCK_REALTIME</varname> saati değiştirilebilir (uygun ayrıcalıklarla), ancak <varname>CLOCK_MONOTONIC</varname> saati değiştirilemez.
    </para>
    <para>
     Basit takvim zamanları saat diliminden bağımsız olduğu için, saat dilimi değiştiğinde (örn. bilgisayar fiziksel olarak bir bölgeden diğerine taşındığında) bu işlev kullanılmamalıdır. Bunun yerine, <xref linkend="glibc-Time-Zone-Functions"/> bölümünde açıklanan oluşumlar kullanılmalıdır.
    </para>
    <para>
     <code>clock_settime</code> işlevi saatin ileri veya geri gitmesine neden olarak çeşitli sorunlara yol açabilir. Bazı sorunlardan kaçınmak için, <varname>CLOCK_REALTIME</varname> saatinin <code>clock_settime</code> ile değiştirilmesi, zamanlayıcıların ne zaman sona ereceğini (bkz. <xref linkend="glibc-Setting-an-Alarm"/>) veya uyuyan süreçlerin ne zaman uyandırılacağını (bkz. <xref linkend="glibc-Sleeping"/>) etkilemez. Yine de, sistem çalışırken yapılan küçük değişiklikler için, bir zamandan diğerine yumuşak bir geçiş yapmak için <function>ntp_adjtime</function> (aşağıda) kullanmak daha iyidir.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EINVAL</code></term>
      <listitem>
       <para>
        <parameter>clock</parameter> ile belirtilen saat desteklenmiyor veya hiç ayarlanamıyor veya *<parameter>ts</parameter> içindeki basit takvim zamanı geçersiz (örneğin, <code>ts-&gt;tv_nsec</code> negatif veya 999.999.999'dan büyük).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EPERM</code></term>
      <listitem>
       <para>
        Süreç, <parameter>clock</parameter> ile belirtilen saati ayarlamak için gereken izinlere sahip değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <note><title>Taşınabilirlik Bilgisi:</title>
    <para>
     &glibc;nin eski sürümlerini kullanan sistemler de dahil olmak üzere bazı sistemlerde, <function>clock_settime</function> işlevini kullanan yazılımların <code>-lrt</code> kütüphanesiyle ilintilenmesi gerekir. &glibc;nin 2.17 sürümünden itibaren buna gerek kalmamıştır.
    </para>
   </note>
   <para>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-high-precision"><primary>zaman</primary><secondary>yüksek hassasiyet</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-high-accuracy"><primary>saat</primary><secondary>yüksek doğruluk</secondary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-disciplining"><primary>saat</primary><secondary>sıkı denetim</secondary></indexterm>
    <indexterm linkend="glibc-pg" xml:id="glibc-pg-ftimex"><primary>sys/timex.h</primary></indexterm>
    Uzun süre çalışır durumda kalan sistemlerde süreyi bir kez ayarlamak yeterli değildir; gerçek takvim zamanından uzaklaşmaması için saati <emphasis>sıkı denetlemek</emphasis> gerekir.
   </para>
   <para>
    <function>ntp_gettime</function> ve <function>ntp_adjtime</function> işlevleri, sistem saatini izlemek ve denetlemek etmek için bir arayüz sağlar. Örneğin, saat tıklama hızına ince ayar yapılabilir ve saat geçici olarak hızlandırılarak veya yavaşlatılarak geçerli takvim zamanında sorunsuzca küçük ayarlamalar yapılabilir.
   </para>
   <para>
    Bu işlevlerin adları ‘<code>ntp_</code>’ ile başlar çünkü bunlar, sistem saatini diğer sistemlerin saatleriyle ve/veya harici yüksek hassasiyetli saat donanımıyla eşzamanlamak için Ağ Zaman Protokolünü uygulayan uygulamalar tarafından kullanılmak amacıyla tasarlanmıştır.
   </para>
   <para>
    Bu işlevler ve kullandıkları sabitler ve yapılar, &sys-timex.h; başlık dosyasında bildirilmiştir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-ntptimeval"><primary sortas="ntptimeval">struct&nbsp;ntptimeval</primary></indexterm>
    <csproto type="veri türü">
     <csname><type>struct</type><function>ntptimeval</function></csname>
    </csproto>
    <header>&sys-timex.h;</header>
    <para>
     Bu yapı sistem saati hakkında bilgi edinmek için kullanılır. Aşağıdaki üyeleri içerir:
    </para>
    <glosslist>
     <glossentry>
      <glossterm>
       <type>struct&nbsp;timeval&nbsp;</type><structfield>time</structfield>
      </glossterm>
      <glossdef>
       <para>
        <code>gettimeofday</code> ile alınmış geçerli takvim zamanı. <type>struct&nbsp;timeval</type> türü <xref linkend="glibc-Time-Types"/> bölümünde açıklanmıştır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>maxerror</structfield>
      </glossterm>
      <glossdef>
       <para>
        Mikrosaniye cinsinden ölçülen azami hatadır. Düzenli olarak <function>ntp_adjtime</function> aracılığıyla güncellenmediği sürece, bu değer platforma özgü bazı azami değere ulaşacaktır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>esterror</structfield>
      </glossterm>
      <glossdef>
       <para>
        Mikrosaniye cinsinden ölçülen tahmini hatadır. Bu değer, sistem saatinin gerçek takvim saatinden tahmini sapmasını belirtmek için <function>ntp_adjtime</function> tarafından değiştirilebilir.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-ntp_gettime"><primary>ntp_gettime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>ntp_gettime</function></csname>
     <csparam><ptr>struct&#160;ntptimeval</ptr><parameter>tptr</parameter></csparam>
    </csproto>
    <header>&sys-timex.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>ntp_gettime</code> işlevi <parameter>tptr</parameter> ile gösterilen yapıyı günceller. Bundan sonra yapının üyeleri, çekirdekteki zamanlayıcı gerçekleniminin varsaydığı değerleri içerir. Bunlar doğru olabilir veya olmayabilir. Değilse, <function>ntp_adjtime</function> çağrısı gerekir.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-TIME_ERROR"><primary>TIME_ERROR</primary></indexterm>
    </para>
    <variablelist>
     <varlistentry>
      <term><code>TIME_ERROR</code></term>
      <listitem>
       <para>
        Hassas saat modeli şu anda doğru şekilde kurulmamıştır, bu nedenle saatin eşzamanlı olmadığı kabul edilmeli ve değerler dikkatle ele alınmalıdır.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-timex"><primary sortas="timex">struct&nbsp;timex</primary></indexterm>
    <csproto type="veri türü">
     <csname><type>struct</type><function>timex</function></csname>
    </csproto>
    <header>&sys-timex.h;</header>
    <para>
     Bu yapı, sistem saatini denetlemek ve izlemek için kullanılır. Aşağıdaki üyeleri içerir:
    </para>
    <glosslist>
     <glossentry>
      <glossterm>
       <type>unsigned&nbsp;int&nbsp;</type><structfield>modes</structfield>
      </glossterm>
      <glossdef>
       <para>
        Bu değişken, hangi değerlerin ayarlanıp ayarlanmadığını denetler. Etkili kipi belirtmek için birkaç simgesel sabitin ikil VEYAlanması gerekir. Bu sabitler <code>MOD_</code> ile başlar.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>offset</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MOD_OFFSET"><primary>MOD_OFFSET</primary></indexterm>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MAXPHASE"><primary>MAXPHASE</primary></indexterm>
        Bu değer, sistem saatinin gerçek takvim zamanından geçerli sapmasını gösterir. Değer mikrosaniye cinsinden verilir. <code>modes</code> üyesinde <code>MOD_OFFSET</code> biti varsa, bu üyeye  (ve muhtemelen bağımlı diğer üyelere) atama yapılabilir. Atanan mutlak değer <code>MAXPHASE</code> değerini aşmamalıdır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>frequency</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MOD_FREQUENCY"><primary>MOD_FREQUENCY</primary></indexterm>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MAXFREQ"><primary>MAXFREQ</primary></indexterm>
        Bu değer, gerçek takvim zamanı ile sistem saati arasındaki frekans farkını gösterir. Değer, ölçeklendirilmiş PPM (milyonda bir, %0,0001) olarak ifade edilir. Ölçeklendirme <code>1&nbsp;&lt;&lt;&nbsp;SHIFT_USEC</code>'dir. Değer, <code>MOD_FREQUENCY</code> biti ile ayarlanabilir, ancak mutlak değer <code>MAXFREQ</code> değerini aşmamalıdır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>maxerror</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MOD_MAXERROR"><primary>MOD_MAXERROR</primary></indexterm>
        Mikrosaniye cinsinden ölçülen azami hatadır. Değer <code>MOD_MAXERROR</code> biti kullanılarak ayarlanabilir. Düzenli aralıklarla <function>ntp_adjtime</function> aracılığıyla güncellenmediği sürece, bu değer istikrarlı bir şekilde artarak platforma özgü azami değere ulaşacaktır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>esterror</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MOD_ESTERROR"><primary>MOD_ESTERROR</primary></indexterm>
        Mikrosaniye cinsinden ölçülen tahmini hatadır. Değer <code>MOD_ESTERROR</code> biti kullanılarak ayarlanabilir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>status</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MOD_STATUS"><primary>MOD_STATUS</primary></indexterm>
        Bu değişken, saat düzeneğinin çeşitli durumlarını yansıtır. Önemli bitler için <code>STA_</code> ile başlayan simgesel sabitler vardır. Bu bitlerin bazıları <code>MOD_STATUS</code> biti kullanılarak güncellenebilir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>constant</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MOD_TIMECONST"><primary>MOD_TIMECONST</primary></indexterm>
        Bu değer, çekirdekte gerçeklenen PLL'nin (faz kilitli döngü) bant genişliğini veya kesinliğini temsil eder. Değer, <code>MOD_TIMECONST</code> biti kullanılarak değiştirilebilir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>precision</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu değer, sistem saatini okurken doğruluğu veya azami hatayı temsil eder. Değer mikrosaniye cinsinden ifade edilir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>tolerance</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu değer, ölçeklendirilmiş PPM (milyonda bir, %0,0001) olarak sistem saatinin azami frekans hatasını temsil eder. Bu değer, azami hatayı her saniye artırmak için kullanılır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>struct&nbsp;timeval&nbsp;</type><structfield>time</structfield>
      </glossterm>
      <glossdef>
       <para>
        Geçerli takvim zamanı.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>tick</structfield>
      </glossterm>
      <glossdef>
       <para>
        Mikrosaniye cinsinden saat tıklamaları arasındaki süre. Saat tıklaması, sistem saatinin dayandığı düzenli zamanlayıcı kesintisidir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>ppsfreq</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Sistem saatini sıkı denetlemek için PPS (saniyede darbe) sinyali kullanılabildiğinde mevcut olan birkaç isteğe bağlı değişkenden ilkidir. Değer, ölçeklendirilmiş PPM (milyonda bir, %0,0001) cinsinden ifade edilir ve sistem saati ile PPS sinyali arasındaki frekans farkını gösterir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>jitter</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu değer, PPS sinyalinin mikrosaniye cinsinden dağılımının ortancayı süzen ortalamasını ifade eder.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>shift</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-PPS_SHIFT"><primary>PPS_SHIFT</primary></indexterm>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-PPS_SHIFTMAX"><primary>PPS_SHIFTMAX</primary></indexterm>
        (salt-okunur) Bu değer, PPS kalibrasyon aralığının süresi için <code>PPS_SHIFT</code> ile <code>PPS_SHIFTMAX</code> arasında değişen ikil üstür.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>stabil</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu değer, ölçeklendirilmiş PPM (milyonda bir) olarak PPS (saniyede darbe) frekansının ortancayı yok sayan dağılımını temsil eder.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>jitcnt</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-vr" xml:id="glibc-vr-MAXTIME"><primary>MAXTIME</primary></indexterm>
        (salt-okunur) Bu sayaç, titreşimin izin verilen azami <code>MAXTIME</code> değerini aşan darbe sayısını temsil eder.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>calcnt</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu sayaç, başarılı kalibrasyon aralıklarının sayısını yansıtır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>errcnt</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu sayaç, kalibrasyon hatalarının (büyük sapmalar veya titreklik nedeniyle) sayısını yansıtır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>stbcnt</structfield>
      </glossterm>
      <glossdef>
       <para>
        (salt-okunur) Bu sayaç, kararlılığın eşiği aştığı kalibrasyon sayısını gösterir.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-ntp_adjtime"><primary>ntp_adjtime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>ntp_adjtime</function></csname>
     <csparam><ptr>struct&nbsp;timex</ptr><parameter>tptr</parameter></csparam>
    </csproto>
    <header>&sys-timex.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>ntp_adjtime</code> işlevi <parameter>tptr</parameter> ile belirtilen yapıyı geçerli değerlerle günceller.
    </para>
    <para>
     Güncelenecek üyeleri seçmek için *<parameter>tptr</parameter> yapısının <code>modes</code> üyesi kullanılır. Kullanıcı tarafından güncellenebilecek üyeler: <code>offset</code>, <code>freq</code>, <code>maxerror</code>, <code>esterror</code>, <code>status</code>, <code>constant</code>, <code>tick</code>.
    </para>
    <para>
     <code>modes = 0</code> hiçbir değişiklik yapılmadığı anlamına gelir.
    </para>
    <para>
     Yalnız ayrıcalıklı kullanıcı (root) yapıyı güncelleyebilir.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>TIME_ERROR</code></term>
      <listitem>
       <para>
        Yüksek doğruluklu saat modeli henüz düzgün şekilde kurulmamıştır, bu nedenle saatin eşzamanlı olmadığı kabul edilmeli ve değerler dikkatle ele alınmalıdır. Başka bir neden, belirtilen yeni değerlere izin verilmemesi olabilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EPERM</code></term>
      <listitem>
       <para>
        Süreç bir ayar güncellemesi belirledi, ancak ayrıcalıklı kullanıcı değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Ayrıntlar için RFC1305 (Ağ Zaman Protokolü, 3. sürüm) ve ilgili belgelere bakılabilir.
    </para>
    <note><title>Taşınabilirlik Bilgisi</title>
     <para>
      &glibc;nin ilk sürümleri bu işlevi <function>adjtimex</function> ismiyle içeriyordu.
     </para>
    </note>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-adjtime"><primary>adjtime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>int</type><function>adjtime</function></csname>
     <csparam><ptr>const&nbsp;struct&nbsp;timeval</ptr><parameter>delta</parameter></csparam>
     <csparam><ptr>struct&nbsp;timeval</ptr><parameter>olddelta</parameter></csparam>
    </csproto>
    <header>&sys-time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>ntp_adjtime</code> işlevinin bu daha basit sürümü, sistem saatini küçük bir miktar düzeltmek için kısa bir süre için hızlandırır veya yavaşlatır. Bu, <varname>CLOCK_REALTIME</varname> saati tarafından bildirilen takvim zamanında değişiklik gereksinimlerini, saatin doğru olması için daha uzun süre beklemek pahasına önler.
    </para>
    <para>
     <parameter>delta</parameter> bağımsız değişkeni, saat zamanında yapılacak göreli bir ayarlamayı belirtir. Negatif ise sistem saati bu kadar süreyi kaybedene kadar bir süre yavaşlatılır. Pozitif ise sistem saati bir süreliğine hızlanır.
    </para>
    <para>
     <parameter>olddelta</parameter> bağımsız değişkeni boş gösterici değilse, <code>adjtime</code> işlevi, henüz tamamlanmamış herhangi bir önceki zaman ayarlaması hakkında bilgi döndürür.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EPERM</code></term>
      <listitem>
       <para>
        Süreç <varname>CLOCK_REALTIME</varname> saatini ayarlamak için gereken ayrıcalıklara sahip değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <para>
    Uyumluluk için, &glibc; ayrıca sistem zamanını denetlemek için birkaç eski işlev sağlar. Yeni yazılımlar yukarıdaki işlevleri kullanmayı tercih etmelidir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-stime"><primary>stime</primary></indexterm>
    <csproto type="atıl işlev">
     <csname><type>int</type><function>stime</function></csname>
     <csparam><ptr>const&nbsp;time_t</ptr><parameter>newtime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <varname>CLOCK_REALTIME</varname> takvim zamanını *<parameter>newtime</parameter> ile belirtilen basit takvim zamanına günceller. Zamanın bir saniye doğrulukla ayarlanabilmesi dışında ‘<code>clock_settime&nbsp;(CLOCK_REALTIME)</code>’ çağrısıyla tamamen aynıdır.
    </para>
    <para>
     Bu işlev artık GNU sistemlerinde mevcut değildir, ancak çok eski Unix sistemlerinde zamanı ayarlamanın tek yolu bu olabilir, bu yüzden onu belgelenmeye devam edilmektedir. Varsa, &time.h; başlık dosyasında bildirilir.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EPERM</code></term>
      <listitem>
       <para>
        Süreç <varname>CLOCK_REALTIME</varname> saatini ayarlamak için gereken ayrıcalıklara sahip değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-adjtimex"><primary>adjtimex</primary></indexterm>
    <csproto type="atıl işlev">
     <csname><type>int</type><function>adjtimex</function></csname>
     <csparam><ptr>struct&nbsp;timex</ptr><parameter>timex</parameter></csparam>
    </csproto>
    <header>&sys-timex.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>adjtimex</code> işlevi <function>ntp_adjtime</function> işlevinin eski adıdır.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-settimeofday"><primary>settimeofday</primary></indexterm>
    <csproto type="atıl işlev">
     <csname><type>int</type><function>settimeofday</function></csname>
     <csparam><ptr>const&nbsp;struct&nbsp;timeval</ptr><parameter>tp</parameter></csparam>
     <csparam><ptr>const&nbsp;void</ptr><parameter>tzp</parameter></csparam>
    </csproto>
    <header>&sys-time.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Geçerli takvim zamanını <parameter>tp</parameter> ile belirtilen değere ayarlar.
    </para>
    <para>
     <parameter>tzp</parameter> boş gösterici ise, zamanın bir mikrosaniye doğrulukla ayarlanabilmesi dışında ‘<code>clock_settime&nbsp;(CLOCK_REALTIME)</code>’ çağrısıyla tamamen aynıdır.
    </para>
    <para>
     <parameter>tzp</parameter> boş gösterici değilse, içerdiği veri mevcut saat dilimi hakkında sistem çapında bir fikir oluşturmak için kullanılabilir. Bu özellik artık kullanılmamakta olup GNU sistemlerinde desteklenmemektedir. <parameter>tzp</parameter> her zaman boş gösterici olmalıdır. Bunun yerine, zaman dilimleriyle çalışmak için <xref linkend="glibc-Time-Zone-Functions"/> ve <xref linkend="glibc-Broken-down-Time"/> bölümlerinde açıklanan oluşumlar kullanılmalıdır.
    </para>
    <para>
     Başarı durumunda <code>0</code>, aksi takdirde <code>-1</code> döner. Aşağıdaki <varname>errno</varname> hata durumları bu işlev için tanımlanmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>EPERM</code></term>
      <listitem>
       <para>
        Süreç <varname>CLOCK_REALTIME</varname> saatini ayarlamak için gereken ayrıcalıklara sahip değil.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>EINVAL</code></term>
      <listitem>
       <para>
        Ne <parameter>tp</parameter> ne de <parameter>tzp</parameter> boş gösterici. (Tarihsel nedenlerden dolayı, aynı çağrıda geçerli zamanı ve geçerli saat dilimini ayarlamak mümkün değildir.)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>ENOSYS</code></term>
      <listitem>
       <para>
        İşletim sistemi saat dilimi bilgisinin tanımlanmasını desteklemiyor ve <parameter>tzp</parameter> boş gösterici değil.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Broken-down-Time">
   <title>Dökümlü Zaman</title>
   <titleabbrev>Yerel zamanda değişiklik yapan oluşumlar.</titleabbrev>
   <para>
    <indexterm linkend="glibc-cp"><primary>takvim zamanı</primary><secondary>dökümlü zaman</secondary></indexterm>
    Basit takvim zamanları, mutlak zamanı bir başlangıçtan beri geçen süreler olarak temsil eder. Bu, hesaplama için uygundur, ancak insanların normalde takvim zamanını düşünme biçimleriyle hiçbir ilgisi yoktur. Buna karşılık, dökümlü zaman, takvim zamanının yıl, ay, gün vb. olarak ayrılmış ikil gösterimidir. Dökümlü zaman değerleri, hesaplamalar için yararlı değildir, ancak insan tarafından okunabilir zaman bilgilerini yazdırmak için kullanışlıdır.
   </para>
   <para>
    Dökümlü zaman değeri, her zaman seçilen saat dilimiyle ilişkilidir ve ayrıca geçerli saat dilimini de gösterir.
   </para>
   <para>
    Bu bölümdeki simgeler &time.h; başlık dosyasında bildirilmiştir.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-tp" xml:id="glibc-tp-tm"><primary sortas="tm">struct&nbsp;tm</primary></indexterm>
    <csproto type="veri türü">
     <csname><type>struct</type><function>tm</function></csname>
    </csproto>
    <header>&time.h;</header>
    <para>
     Dökümlü zamanı ifade etmek için kullanılan veri türüdür. Yapı, herhangi bir sırayla görünebilen en azından aşağıdaki üyeleri içerir.
    </para>
    <glosslist>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_sec</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-cp" xml:id="glibc-cp-tm_sec"><primary>artık saniye</primary></indexterm>
        Dakikanın bitiminden beri geçen tam saniye sayısıdır (normalde <code>0</code> ila <code>59</code> aralığındadır, ancak artık saniye desteği mevcutsa artık saniyelere izin vermek için gerçek üst sınır <code>60</code> olur).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_min</structfield>
      </glossterm>
      <glossdef>
       <para>
        Saatin bitiminden beri geçen tam dakika sayısıdır (<code>0</code> ila <code>59</code> aralığında).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_hour</structfield>
      </glossterm>
      <glossdef>
       <para>
        Gece yarısından sonraki tam saatlerin sayısıdır (<code>0</code> ila <code>23</code> aralığında).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_mday</structfield>
      </glossterm>
      <glossdef>
       <para>
        Ayın sıralı günüdür (<code>1</code> ila <code>31</code> aralığında). Buna dikkat! Yapıdaki tek sıra numarası olduğundan yapının geri kalanıyla tutarsızdır.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_mon</structfield>
      </glossterm>
      <glossdef>
       <para>
        Yılın başından bu yana geçen tam takvim ayı sayısıdır (<code>0</code> ile <code>11</code> aralığında). Buna dikkat! İnsanlar genellikle yılın ayı için 0'dan değil 1'den başlayan sayıları kullanır (Ocak = 1).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_year</structfield>
      </glossterm>
      <glossdef>
       <para>
        1900'den beri tam takvim yıllarının sayısı.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_wday</structfield>
      </glossterm>
      <glossdef>
       <para>
        Pazar gününden beri geçen tam gün sayısı (<code>0</code> ila <code>6</code> aralığında)
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_yday</structfield>
      </glossterm>
      <glossdef>
       <para>
        Yılın başından beri geçen tam gün sayısı (<code>0</code> ila <code>365</code> aralığında).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>int&nbsp;</type><structfield>tm_isdst</structfield>
      </glossterm>
      <glossdef>
       <para>
        <indexterm linkend="glibc-cp" xml:id="glibc-cp-tm_isdst"><primary>yaz saati</primary></indexterm>
        Bu, Yaz Saati Uygulamasının halen yürürlükte olup olmadığını (veya olduğunu ya da olacağını) gösteren bir imdir. Yaz Saati Uygulaması etkinse değer pozitif, etkin değilse sıfır ve bilgi yoksa negatiftir.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>long&nbsp;int&nbsp;</type><structfield>tm_gmtoff</structfield>
      </glossterm>
      <glossdef>
       <para>
        Gün ışığından yararlanmak için yapılan ayarlama dahil, dökümlü zaman değerini hesaplamak için kullanılan saat dilimini açıklar; yerel saati almak için UTC'ye eklenmesi gereken saniye sayısıdır. UTC'nin doğusundaki saniye sayısı olarak da düşünülebilir. Örneğin, ABD Doğu Standart Saati için değer -5*60*60'tır. <code>tm_gmtoff</code> alanı BSD'den türetilmiştir ve &glibc; genişletmesidir; &isoc; standardına tamamen uygun ortamlarda görülmez.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <type>const&nbsp;char&nbsp;*</type><structfield>tm_zone</structfield>
      </glossterm>
      <glossdef>
       <para>
        Dökümlü zaman değerini hesaplamak için kullanılan saat diliminin adı. <code>tm_gmtoff</code> alanı gibi, bu alan da bir BSD ve &glibc; genişletmesidir; &isoc; standardına tamamen uygun ortamlarda görülmez.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-localtime"><primary>localtime</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-localtime"><primary>yerel zaman</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>struct&#160;tm</ptr><function>localtime</function></csname>
     <csparam><ptr>const&#160;time_t</ptr><parameter>time</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:tmbuf</code> &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>localtime</code> şlevi, <parameter>time</parameter> ile gösterilen basit zamanı, kullanıcının belirtdiği saat dilimine göre ifade edilen, dökümlü zaman gösterimine dönüştürür.
    </para>
    <para>
     Dönen değer, <code>ctime</code>, <code>gmtime</code> veya <code>localtime</code> işlevine yapılan sonraki çağrılar tarafından geçersiz kılınabilecek, duruk dökümlü zaman yapısına göstericidir. (Ancak başka hiçbir kütüphane işlevi bu nesnenin içeriğini değiştirmez.)
    </para>
    <para>
     <parameter>time</parameter>, dökümlü zamana dönüştürülemiyorsa boş gösterici döner; genellikle bunun nedeni, yılın <type>int</type> türüne sığamamasıdır.
    </para>
    <para>
     <code>localtime</code> çağrısı, <function>tzset</function> çağrılmış gibi geçerli saat dilimini de ayarlar. Bkz, <xref linkend="glibc-Time-Zone-Functions"/>.
    </para>
   </csynopsis>
   <para>
    <function>localtime</function> işlevinin çok evreli yazılımlarda kullanılması büyük bir sorundur. Sonuç, duruk bir tamponda döndürülür ve tüm evreler bunu  kullanır. POSIX.1c'de bu işlevin çok evreli kullanıma uygun benzeri vardır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-localtime_r"><primary>localtime_r</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>struct&#160;tm</ptr><function>localtime_r</function></csname>
     <csparam><ptr>const&#160;time_t</ptr><parameter>time</parameter></csparam>
     <csparam><ptr>struct&#160;tm</ptr><parameter>resultp</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>localtime_r</code> işlevi <function>localtime</function> işlevi gibi çalışır. Basit zaman içeren bir değişkene gösterici alır ve onu dökümlü zaman biçimine dönüştürür.
    </para>
    <para>
     Ancak sonuç duruk tampona yerleştirilmez. Bunun yerine, <parameter>resultp</parameter> ile gösterilen <type>struct&#160;tm</type> türündeki nesneye yerleştirilir.
    </para>
    <para>
     Dönüşüm başarılı olursa işlev, sonucun yazıldığı nesneye gösterici döndürür, yani, <parameter>resultp</parameter> döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-gmtime"><primary>gmtime</primary></indexterm>
    <indexterm linkend="glibc-cp" xml:id="glibc-cp-gmtime"><primary>evrensel zaman</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>struct&#160;tm</ptr><function>gmtime</function></csname>
     <csparam><ptr>const&#160;time_t</ptr><parameter>time</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:tmbuf</code> &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     Bu işlev, dökümlü zamanı bir yerel zaman dilimine değil de UTC'ye göre döndürmesi dışında <function>localtime</function> gibidir.
    </para>
   </csynopsis>
   <para>
    <function>localtime</function> işlevindeki gibi <function>gmtime</function> işlevinin de çok evreli yazılımlarda kullanılması büyük bir sorundur. Sonuç, duruk bir tamponda döndürülür ve tüm evreler bunu  kullanır. POSIX.1c'de bu işlevin çok evreli kullanıma uygun benzeri vardır.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-gmtime_r"><primary>gmtime_r</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>struct&#160;tm</ptr><function>gmtime_r</function></csname>
     <csparam><ptr>const&#160;time_t</ptr><parameter>time</parameter></csparam>
     <csparam><ptr>struct&#160;tm</ptr><parameter>resultp</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     Belirtilen zamanı tıpkı <function>gmtime</function> gibi UTC'ye göre dönüştürmesi dışında <function>localtime_r</function> işlevi gibidir.
    </para>
    <para>
     Dönüşüm başarılı olursa işlev, sonucun yazıldığı nesneye gösterici döndürür, yani, <parameter>resultp</parameter> döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-mktime"><primary>mktime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>time_t</type><function>mktime</function></csname>
     <csparam><ptr>struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>mktime</code> işlevi, dökümlü zaman yapısını basit zaman gösterimine dönüştürür. Ayrıca, dökümlü zaman yapısının içeriğini normalleştirir ve bazı bileşenleri diğerlerinin değerlerine göre doldurur.
    </para>
    <para>
     <code>mktime</code> işlevi, dökümlü zaman yapısının <code>tm_wday</code>, <code>tm_yday</code>, <code>tm_gmtoff</code>, and <code>tm_zone</code> üyelerinin belirtilen içeriklerini yok sayar. Takvim zamanını belirlemek için diğer bileşenlerin değerlerini kullanır; bu bileşenlerin normal aralıklarının dışında normalleştirilmemiş değerlere sahip olmasına izin verilir. <code>mktime</code> işlevinin yaptığı son şey, başlangıçta göz ardı edilen üyeler dahil olmak üzere, dökümlü zaman yapısının bileşenlerini ayarlamaktır.
    </para>
    <para>
     Belirtilen dökümlü zaman basit takvim zamanı olarak gösterilemiyorsa, <code>mktime</code> işlevi <code>(time_t)(-1)</code> değerini döndürür ve <parameter>brokentime</parameter> içeriğini değiştirmez.
    </para>
    <para>
     <code>mktime</code> çağrısı aynı zamanda geçerli saat dilimini sanki <function>tzset</function> çağrılmış gibi ayarlar; <code>mktime</code> bu bilgiyi, <parameter>brokentime</parameter> ile gösterilen yapının ilk <code>tm_gmtoff</code> ve <code>tm_zone</code> üyelerinin yerine kullanır. Bkz, <xref linkend="glibc-Time-Zone-Functions"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-timelocal"><primary>timelocal</primary></indexterm>
    <csproto type="işlev">
     <csname><type>time_t</type><function>timelocal</function></csname>
     <csparam><ptr>struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>timelocal</code> işlevi, işlevsel olarak <function>mktime</function> ile aynıdır, ancak daha anımsatıcı olarak adlandırılmıştır. <function>localtime</function> işlevinin tersi olduğuna dikkat edilmelidir
    </para>
    <note><title>Taşınabilirlik Bilgisi</title>
     <para>
      <function>mktime</function> aslında evrensel olarak kullanılabilirdir. <function>timelocal</function> oldukça nadirdir.
     </para>
    </note>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-timegm"><primary>timegm</primary></indexterm>
    <csproto type="işlev">
     <csname><type>time_t</type><function>timegm</function></csname>
     <csparam><ptr>struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>timegm</code> herhangi bir yerel saat dilimi ayarından bağımsız olarak girdi değerlerini her zaman UTC olarak alması dışında işlevsel olarak <function>mktime</function> ile aynıdır.
    </para>
    <para>
     <code>timegm</code>'nin <function>gmtime</function>'ın tersi olduğu unutulmamalıdır.
    </para>
    <note><title>Taşınabilirlik Bilgisi</title>
     <para>
      <indexterm linkend="glibc-vr" xml:id="glibc-vr-TZ"><primary>TZ</primary></indexterm>
      <function>mktime</function> aslında evrensel olarak kullanılabilirdir. <function>timegm</function> oldukça nadirdir. Bir UTC dökümlü zamandan basit takvim zamanına en taşınabilir dönüşüm için, <envar>TZ</envar> ortam değişkeni UTC olarak ayarlanmalı, <function>mktime</function> çağrısından sonra <envar>TZ</envar> eski değerine getirilmelidir.
     </para>
    </note>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Formatting-Calendar-Time">
   <title>Zamanın Biçimlenmesi</title>
   <titleabbrev>Zamanların dizgelere dönüştürülmesi.</titleabbrev>
   <para>
    Bu bölümdeki takvim zamanı değerlerini dizgelere dönüştürerek biçimlendirmekte kullanılan işlevlerden bahsedilecektir. Bu işlevler &time.h; başlık dosyasında bildirilmiştir.
    <indexterm linkend="glibc-pg"><primary>time.h</primary></indexterm>
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-asctime"><primary>asctime</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>char</ptr><function>asctime</function></csname>
     <csparam><ptr>const&#160;struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:asctime</code> &locale;</concept>
     <concept>&asunsafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>asctime</code> işlevi <parameter>brokentime</parameter> ile gösterilen dökümlü zaman değerini
    </para>
    <literallayout class="monospaced"><code>"Tue May 21 13:46:22 1991\n"</code>
</literallayout>
    <para>
     standart biçimine dönüştürür. Bu işlevde kullanılan gün isimlerinin kısaltmaları: <code>Sun</code>, <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thu</code>, <code>Fri</code> ve <code>Sat</code>.
    </para>
    <para>
     Ay isimlerinin kısaltmaları: <code>Jan</code>, <code>Feb</code>, <code>Mar</code>, <code>Apr</code>, <code>May</code>, <code>Jun</code>, <code>Jul</code>, <code>Aug</code>, <code>Sep</code>, <code>Oct</code>, <code>Nov</code> ve <code>Dec</code>.
    </para>
    <para>
     Dönüş değeri duruk tahsisli dizgeye göstericidir ve bu değer sonraki <code>asctime</code> veya <function>ctime</function> çağrıları ile değiştirilebilir. (Kütüphanede bu dizgenin değerini değiştiren başka işlev yoktur.)
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-asctime_r"><primary>asctime_r</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>char</ptr><function>asctime_r</function></csname>
     <csparam><ptr>const&#160;struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
     <csparam><ptr>char</ptr><parameter>buffer</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &locale;</concept>
     <concept>&assafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     Bu işlev <function>asctime</function> işlevine benzemekle birlikte, sonucu  duruk tahsisli tampona değil, <parameter>buffer</parameter> ile gösterilen tampona yazar. Bu tampon sonlandırıcı boş karakter dahil en az 26 baytlık olmalıdır.
    </para>
    <para>
     Bir hata oluşmazsa işlev sonucun yazıldığı tampona gösterici ile yani <parameter>buffer</parameter> ile döner. Aksi takdirde <varname>NULL</varname> döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-ctime"><primary>ctime</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>char</ptr><function>ctime</function></csname>
     <csparam><ptr>const&#160;time_t</ptr><parameter>time</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:tmbuf</code> &race;<code linkend="glibc-safety-identifier">:asctime</code> &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>ctime</code> işlevi bağımsız değişken olarak dökümlü zaman değeri yerine basit zaman değeri alması dışında <function>asctime</function> işlevi gibidir.
    </para>
    <literallayout class="monospaced"><code>asctime (localtime (<parameter>time</parameter>))</code>
</literallayout>
    <para>
     ile eşdeğerdir. <code>ctime</code> işlevi ayrıca, <function>tzset</function> çağrılmış gibi geçerli zaman dilimini de ayarlar. Bkz.  <xref linkend="glibc-Time-Zone-Functions"/>.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-ctime_r"><primary>ctime_r</primary></indexterm>
    <csproto type="işlev">
     <csname><ptr>char</ptr><function>ctime_r</function></csname>
     <csparam><ptr>const&#160;time_t</ptr><parameter>time</parameter></csparam>
     <csparam><ptr>char</ptr><parameter>buffer</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &heap; &lock;</concept>
     <concept>&acunsafe; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     Bu işlev <function>ctime</function> işlevine benzemekle birlikte, sonucu duruk tahsisli tampona değil, <parameter>buffer</parameter> ile gösterilen dizgeye yazar.
    </para>
    <literallayout class="monospaced"><code>({ struct tm tm; asctime_r (localtime_r (time, &amp;tm), buf); })</code>
</literallayout>
    <para>
     ile eşdeğerdir (GCC birleşik ifadeleri kullanılarak yazılmıştır; bkz, <link xl:href="https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html">Statements and Declarations in Expressions</link>). Bir hata oluşmazsa sonucun yazıldığı tampona gösterici, yani <parameter>buffer</parameter> ile döner. Aksi takdirde <varname>NULL</varname> döner.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-strftime"><primary>strftime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>size_t</type><function>strftime</function></csname>
     <csparam><ptr>char</ptr><parameter>s</parameter></csparam>
      <csparam><type>size_t</type><parameter>size</parameter></csparam>
      <csparam><ptr>const&#160;char</ptr><parameter>template</parameter></csparam>
     <csparam><ptr>const&#160;struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &corrupt; &heap; &lock; &dlopen;</concept>
     <concept>&acunsafe; &corrupt; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     Bu işlev <function>sprintf</function> işlevine benzer (bkz. <xref  linkend="glibc-Formatted-Input"/>), fakat <parameter>brokentime</parameter> içindeki tarih ve saatin basılması için <parameter>template</parameter> biçem dizgesi geçerli <link linkend="glibc-Locales">yerele</link> ve <link linkend="glibc-Time-Zone-Functions">zaman dilimine</link> özgü zaman dönüşümlerinin yapılabilmesi için özelleştirilmiştir.
    </para>
    <para>
     <parameter>template</parameter> dizgesindeki belirteç olmayan karakterler <parameter>s</parameter> çıktı dizgesine oldukları gibi kopyalanır; bu dizge çok baytlı karakterleri de içerebilir. Dönüşüm belirteçleri  <code>%</code> karakteri ile başlar ve bunu isteğe bağlı bir seçenek izler. Bu seçeneklerin hepsi GNU oluşumudur. İlk üçü sadece sayıların çıktılanması ile ilgilidir:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>_</code></term>
      <listitem>
       <para>
        Sayılar için ayrılan genişlikteki boş yerler boşlukla doldurulur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>-</code></term>
      <listitem>
       <para>
        Sayılar için ayrılan genişlikteki boş yerler hiçbir şeyle doldurulmaz.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>0</code></term>
      <listitem>
       <para>
        Sayılar için ayrılan genişlikteki boş yerlerin boşlukla doldurulması belirtilmiş olsa bile sıfırlarla doldurulur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>^</code></term>
      <listitem>
       <para>
        Çıktıda büyük harfler kullanılır, fakat bu sadece mümkün olabiliyorsa yapılır (Bkz. <xref linkend="glibc-Case-Conversion"/>).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Öntanımlı eylem sayılar için ayrılan genişliğin sıfırlarla doldurulmasıdır. Bir aralık dahilinde değişmeyen, dolayısıyla doğal bir genişliği olmayan sayılar için dolgu yapılmaz.
    </para>
    <para>
     Bundan sonra, genişlik belirtmeyi mümkün kılan isteğe bağlı bir genişlik belirtimi gelir. Bu ondalık sayı gösterimi belirtir. Çıktılanan sayının karakter sayısı belirtilen genişlikten azsa sonuç sağa yanaştırılarak yazılırken soldaki alan boşluklarla doldurulur.
    </para>
    <para>
     Seçenek ve genişlik belirtiminden sonra isteğe bağlı bir değiştirici gelebilir. Değiştiriciler ilk olarak, POSIX.2-1992 ve &isoc;99 ile standartlaştırılmıştır:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>E</code></term>
      <listitem>
       <para>
        Tarih ve saat gösterimi için yerele özgü diğer gösterim kullanılır. Bu değiştirici <code>%c</code>, <code>%C</code>, <code>%x</code>, <code>%X</code>, <code>%y</code> ve <code>%Y</code> biçim belirteçlerine uygulanır. Japon yerelinde örneğin, <code>%Ex</code> Japon İmparator'unun hüküm sürdüğü döneme göre biçimlenmiş tarih olabilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>O</code></term>
      <listitem>
       <para>
        Sayılar için yerele özgü diğer sayısal simgeler kullanılır. Bu değiştirici sadece sayısal biçim belirteçlerine uygulanır.
       </para>
       <para>
        <code>%B</code>, <code>%b</code> ve <code>%h</code> ile: Ay tam bir tarihin parçası olarak kullanıldığında uygun olan biçim yerine, ay kendi başına adlandırıldığında uygun olan ay adları için imla kurallarına uygun biçimini kullanılmalıdır. <code>%OB</code> ve <code>%Ob</code> biçimleri, yerel ayarın "diğer" ay adını kullanmak için C23'te belirtilen bir özelliktir; &glibc;, tam tarihte kullanılan biçimin varsayılan olduğunu ve ayı tek başına adlandıran biçimin diğer biçim olduğunu söylemek için bu belirtimi genişletir.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     Biçimde değiştirici desteği varsa ama yerelde başka bir gösterim yoksa değiştirici yoksayılır.
    </para>
    <para>
     Dönüşüm belirteçleri aşağıdaki biçim belirteçlerinden biri ile biter. <command>%</command> ile başlayan belirteçler ve çıktı dizgesinde nasıl yorumlandıkları liste halinde verilmiştir:
    </para>
    <variablelist>
     <varlistentry>
      <term><code>%a</code></term>
      <listitem>
       <para>
        Yerele özgü kısaltılmış gün ismi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%A</code></term>
      <listitem>
       <para>
        Yerele özgü tam gün ismi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%b</code></term>
      <listitem>
       <para>
        Ay, tam bir tarihin parçası olduğunda geçerli yerele göre kısaltılmış ay adı. Bir C23 özelliği olarak (&glibc;nde daha ayrıntılı bir belirtimle birlikte), <code>O</code> değiştiricisi (<code>%Ob</code>), ay kendi başına adlandırıldığında kullanılan yazım biçimini elde etmek için kullanılabilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%B</code></term>
      <listitem>
       <para>
        Ay, tam bir tarihin parçası olduğunda geçerli yerele göre tam ay adı. Bir C23 özelliği olarak (&glibc;nde daha ayrıntılı bir belirtimle birlikte), <code>O</code> değiştiricisi (<code>%Ob</code>), ay kendi başına adlandırıldığında kullanılan yazım biçimini elde etmek için kullanılabilir.
       </para>
       <para>
        Tüm dillerin iki farklı ay adı biçimine ihtiyaç duymadığına dikkat edilmelidir, bu nedenle <code>%B</code> ve <code>%OB</code> ile <code>%b</code> ve <code>%Ob</code> tarafından üretilen metin, yerele bağlı olarak aynı olabilir veya olmayabilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%c</code></term>
      <listitem>
       <para>
        Geçerli yerelde tercih edilen takvim zamanı gösterimi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%C</code></term>
      <listitem>
       <para>
        Yılın asırlık tam parçası. Yılın 100'e bölünmesi ile elde edilen sonucun tamsayı kısmıdır.
       </para>
       <para>
        <code>E</code> değiştirici (<code>%EC</code>) belirtilirse, bunun yerine yerel ayarın diğer takviminde yıl için dönemin adını (örn. bir çağ adı) üretir.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%d</code></term>
      <listitem>
       <para>
        <code>01</code> ile <code>31</code> arasında bir değer olarak ayın gün numarası (tek rakamlı sayıların önüne 0 konur).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%D</code></term>
      <listitem>
       <para>
        <code>%m/%d/%y</code> biçiminde tarih.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%e</code></term>
      <listitem>
       <para>
        <code>1</code> ile <code>31</code> arasında bir değer olarak ayın gün numarası (tek rakamlı sayıların önüne boşluk konur).
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%F</code></term>
      <listitem>
       <para>
        <code>%Y-%m-%d</code> biçimimde tarih. Bu biçim ISO 8601 standardında belirtilmiştir ve çok tercih edilen bir biçimdir.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.1-2001 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%g</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>99</code> arasında yılın yüzyıllık parçası olmaksızın yıl numarasıdır (örneğin, 1999 için 99, 2004 için 04). <code>%y</code> ile aynı biçim ve değerdedir, ancak ilk ve son ISO hafta numarası (bakınız <code>%V</code>) önceki ya da sonraki hangi yıla karşılıksa o yıla karşılık olan değer gösterilir.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.1-2001 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%G</code></term>
      <listitem>
       <para>
        ISO hafta numarasının karşılığı olan yıl. <code>%Y</code> ile aynı biçim ve değerdedir, ancak ilk ve son ISO hafta numarası (bakınız <code>%V</code>) önceki ya da sonraki hangi yıla karşılıksa o yıla karşılık olan değer gösterilir.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.1-2001 ve &isoc;99 tarafından standartlaştırılmıştır. Fakat GNU oluşumu olarak evvelce de vardı.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%h</code></term>
      <listitem>
       <para>
        <code>%b</code> ile aynıdır ve yerele özgü kısaltılmış ay ismidir.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%H</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>23</code> arasında bir sayısal değer olarak 24 saatlik saat gösterimi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%I</code></term>
      <listitem>
       <para>
        <code>01</code> ile <code>12</code> arasında bir sayısal değer olarak 12 saatlik saat gösterimi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%j</code></term>
      <listitem>
       <para>
        <code>001</code> ile <code>366</code> arasında yılın gün numarası.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%k</code></term>
      <listitem>
       <para>
        <code>0</code> ile <code>23</code> arasında bir sayısal değer olarak 24 saatlik saat gösterimi (tek rakamlı sayıların önüne boşluk konur).
       </para>
       <para>
        Bu biçim GNU oluşumudur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%l</code></term>
      <listitem>
       <para>
        <code>1</code> ile <code>12</code> arasında bir sayısal değer olarak 12 saatlik saat gösterimi (tek rakamlı sayıların önüne boşluk konur).
       </para>
       <para>
        Bu biçim GNU oluşumudur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%m</code></term>
      <listitem>
       <para>
        <code>01</code> ile <code>12</code> arasında ayın numarası.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%M</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>59</code> arasında dakika değeri.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%n</code></term>
      <listitem>
       <para>
        Tek bir <code>\n</code> (satır-sonu) karakteri.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%p</code></term>
      <listitem>
       <para>
        Verilen değere bağlı olarak yerele özgü <code>AM</code> veya <code>PM</code> dizgesidir. Öğleden önceki saatler için <code>AM</code> ile öğleden sonraki saatler için <code>PM</code> karşılığı olan yerele özgü dizge basılır. Bu dizgeleri desteklemeyen yerellerde <code>&quot;%p&quot;</code> boş dizgeye karşılıktır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%P</code></term>
      <listitem>
       <para>
        Verilen değere bağlı olarak yerele özgü <code>am</code> veya <code>pm</code> dizgesidir. Öğleden önceki saatler için <code>am</code> ile öğleden sonraki saatler için <code>pm</code> karşılığı olan yerele özgü dizge basılır. Bu dizgeleri desteklemeyen yerellerde <code>&quot;%p&quot;</code> boş dizgeye karşılıktır.
       </para>
       <para>
        Bu biçim GNU oluşumudur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%r</code></term>
      <listitem>
       <para>
        Yerele özgü AM/PM biçimli saat gösterimi (örn, 04:38:53 ÖS)
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır. POSIX yerelinde, bu biçim <code>%I:%M:%S %p</code> biçim dizgesine eşdeğerdir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%R</code></term>
      <listitem>
       <para>
        <code>%H:%M</code> biçiminde saat ve dakika.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.1-2001 ve &isoc;99 tarafından standartlaştırılmıştır. Fakat GNU oluşumu olarak evvelce de vardı.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%s</code></term>
      <listitem>
       <para>
        POSIX zamanından bu yana, yani 1970-01-01 00:00:00 UTC'den bu yana geçen saniye sayısı. Artık saniye desteği olmadığı sürece artık saniyeler sayılmaz.
       </para>
       <para>
        Bu biçim GNU oluşumudur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%S</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>60</code> arasında saniye.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%t</code></term>
      <listitem>
       <para>
        Tek bir <code>\t</code> (sekme) karateri.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%T</code></term>
      <listitem>
       <para>
        <code>%H:%M:%S</code> biçiminde saat.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%u</code></term>
      <listitem>
       <para>
        <code>1</code> ile <code>7</code> arasında hafta günü numarası. Pazartesi, haftanın birinci günüdür.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%U</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>53</code> arasında hafta numarası. Yılın ilk Pazar gününden önceki günler <code>00</code>. hafta olarak kabul edilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%V</code></term>
      <listitem>
       <para>
        <code>01</code> ile <code>53</code> arasında ISO 8601:1988 hafta numarası. ISO haftaları Pazartesi günü başlar, Pazar günü biter. Yılın <code>01</code>. haftası, günlerinin çoğunluğu yeni yıl içinde kalan ilk haftadır; örneğin, yılın ilk günü Perşembe ve son günü 4 Ocak olan hafta <code>01</code>. haftadır (7 günden 4'ü yeni yıl içinde). Yani, yılın <code>01</code>. haftası bir önceki yıldan da günler içerebileceği gibi bunun tersine <code>01</code>. haftadan önceki hafta yeni yıldan bir kaç gün içerse bile yılın son haftası (<code>52</code>. veya <code>53</code>. hafta) olabilir.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.2-1992 ve &isoc;99 tarafından standartlaştırılmıştır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%w</code></term>
      <listitem>
       <para>
        <code>0</code> ile <code>6</code> arasında haftadaki günün numarası. Pazar, haftanın sıfırıncı günüdür.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%W</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>53</code> arasında hafta numarası. Yılın ilk Pazartesi gününden önceki günler <code>00</code>. hafta olarak kabul edilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%x</code></term>
      <listitem>
       <para>
        Yerele özgü tercih edilen tarih gösterimi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%X</code></term>
      <listitem>
       <para>
        Yerele özgü tercih edilen saat gösterimi.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%y</code></term>
      <listitem>
       <para>
        <code>00</code> ile <code>99</code> arasında yılın asırlık parçası olmaksızın yıl numarasıdır (örneğin, 1999 için 99, 2004 için 04).
       </para>
       <para>
        <code>E</code> değiştirici (<code>%Ey</code>) belirtilirse, bunun yerine yerel ayara özgü diğer takvime göre yıl numarasını üretilir. <code>%y</code>'den farklı olarak, sayı 100'e bölümden artana indirgenmez. Ancak, varsayılan olarak en az iki basamak sıfır dolguludur (bu, doğrudan alan genişliği veya <code>_</code> ve <code>-</code> imleri tarafından geçersiz kılınabilir).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%Y</code></term>
      <listitem>
       <para>
        Gregoryen takvimine göre yıl. <code>1</code>. yıldan önceki yıllar <code>0</code>, <code>-1</code>, <code>-2</code> diye gider.
       </para>
       <para>
        <code>E</code> değiştirici (<code>%EY</code>) belirtilirse, bunun yerine yerel ayarın diğer takvimine göre yılın eksiksiz bir temsilini üretir. Genel olarak bu, <code>%EC</code> ve <code>%Ey</code> tarafından üretilen bilgilerin birleşimi olacaktır. GNU oluşumu olarak, <code>_</code> veya <code>-</code> biçem imleri bu dönüştürme belirleteciyle kullanılabilir; yıl numarasının nasıl yazdırılacağını etkiler.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%z</code></term>
      <listitem>
       <para>
        RFC 822/ISO 8601:1988 tarzı zaman dilimi (örn, <command>+0300</command> veya <command>-0600</command>); zaman dilimi saptanamazsa hiçbir şey basılmaz.
       </para>
       <para>
        Bu biçim ilk olarak POSIX.1-2001 ve &isoc;99 tarafından standartlaştırılmıştır. Fakat GNU oluşumu olarak evvelce de vardı.
       </para>
       <para>
        POSIX yerelinde, RFC 822 tam tarih ve saati <command>&quot;%a, %d %b %Y %H:%M:%S %z&quot;</command> (veya <command>&quot;%a, %d %b %Y %T %z&quot;</command> eşdeğeri) biçimindedir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%Z</code></term>
      <listitem>
       <para>
        Zaman dilimi kısaltması (örn, EEST); saptanamazsa boş dizge.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><code>%%</code></term>
      <listitem>
       <para>
        Tek bir <code>%</code> karakteri.
       </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      <parameter>size</parameter> bağımsız değişkeni <parameter>s</parameter> dizisi içinde sonlandırıcı boş karakter dahil saklanabilecek karakterlerin sayısı kadar ya da daha büyük olmalıdır. Biçimlenen zaman dizgesi <parameter>size</parameter> karakterden fazla ise <code>strftime</code> sıfır ile döner ve <parameter>s</parameter> dizisi tanımsız bırakılır. Aksi takdirde işlev <parameter>s</parameter> dizisine yerleştirilen karakter sayısı ile döner, bu sayıya sonlandırıcı boş karakter dahil değildir.
     </para>
     <warning>
      <para>
       Dönüş değeri için &isoc;'de açıklanan bu uzlaşım bazı durumlarda sorunlara yol açabilir. Bazı yerellerde bazı biçim dizgeleri gerçekten de boş dizge çıktılar ve bu durum dönüş değerine bakarak saptanamaz. Örneğin çoğu yerel AM/PM biçimini kullanmaz (çoğu ülkede 24 saatlik biçim kullanılır) ve bu yerellerde boş dizge çıktılanır, bu durumda işlevin dönüş değeri sıfır olur. Buna benzer bir durumu saptamak için şöyle bir kod kullanılmalıdır:
      </para>
      <screen>buf[0] = '\1';
len = strftime (buf, bufsize, format, tp);
if (len == 0 &amp;&amp; buf[0] != '\0')
  {
  /* <replaceable>strftime çağrısında bir şeyler yanlış gitmiş.</replaceable>  */
    …
  }
</screen>
    </warning>
    <para>
     <parameter>s</parameter> boş gösterici ise, <code>strftime</code> hiçbir yazma işlemi yapmaz, ama <parameter>s</parameter> dizgesine yazılmış gibi karakterlerin sayısı ile döner.
    </para>
    <para>
     <code>strftime</code> çağrısı ayrıca <function>tzset</function> çağrılmış gibi geçerli zaman dilimini de ayarlar. <code>strftime</code> bu bilgiyi, <parameter>brokentime</parameter> yapısının <code>tm_gmtoff</code> ve <code>tm_zone</code> üyeleri yerine kullanır.
    </para>
    <para>
     <code>strftime</code> örneği <xref linkend="glibc-Time-Functions-Example"/> bölümünde verilmiştir.
    </para>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-wcsftime"><primary>wcsftime</primary></indexterm>
    <csproto type="işlev">
     <csname><type>size_t</type><function>wcsftime</function></csname>
     <csparam><ptr>wchar_t</ptr><parameter>s</parameter></csparam>
     <csparam><type>size_t</type><parameter>size</parameter></csparam>
     <csparam><ptr>const&#160;wchar_t</ptr><parameter>template</parameter></csparam>
     <csparam><ptr>const&#160;struct&#160;tm</ptr><parameter>brokentime</parameter></csparam>
    </csproto>
    <header>&time.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &corrupt; &heap; &lock; &dlopen;</concept>
     <concept>&acunsafe; &corrupt; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     <code>wcsftime</code> işlevi geniş karakter dizgeleriyle çalışması dışında <function>strftime</function> işleviyle aynıdır. Sonucun saklandığı <parameter>s</parameter> bir geniş karakter dizisi olmalıdır. <parameter>size</parameter> bağımsız değişkeni ile bayt sayısı değil, geniş karakter sayısı belirtilir.
    </para>
    <para>
     Ayrıca <parameter>template</parameter> biçim dizgesi de bir geniş karakterli dizgedir. Biçim dizgesindeki tüm karakterlerin temel karakter kümesindeki karakterler olması gerektiğinden taşınabilirlik açısından C kaynak kodunda biçim dizgesi <command>L&quot;…&quot;</command> sözdizimi ile yazılmalıdır. <parameter>brokentime</parameter> bağımsız değişkeni <function>strftime</function> çağrısındaki ile aynı anlamdadır.
    </para>
    <para>
     <code>wcsftime</code> işlevi <function>strftime</function> işlevinin desteklediği tüm seçenekleri, değiştiricileri ve biçim belirteçlerini destekler.
    </para>
    <para>
     <code>wcsftime</code> işlevinin dönüş değeri <parameter>s</parameter> dizisine saklanan geniş karakterlerin sayısıdır. <parameter>s</parameter> çıktılanacak karakterler bakımından yetersizse işlev sıfır ile döner, ayrıca <function>strftime</function> işlevinin açıklamasında bahsedilen sorunlar burada da geçerlidir.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Parsing-Date-and-Time">
   <title>Tarih ve Saatin Dökümlü Zamana Dönüştürülmesi</title>
   <titleabbrev>Metin biçimindeki tarih ve saatin tekrar dökümlü zaman değerine dönüştürülmesi.</titleabbrev>
   <preliminary>
    <para>
     ISO C standardı <function>strftime</function> işlevinin çıktısının, işlevin girdisi olan ikil biçime dönüştürülmesi için herhangi bir işlev belirtmemiştir. Bu, ilk yıllarda farklı arayüzlerin az ya da çok başarılı çeşitli gerçeklemeler geliştirmeleri ile sonuçlanmıştır. Bunların ardından Unix standardı iki ek işlev tanımladı: <function>strptime</function> ve <function>getdate</function>. Her ikisi de tuhaf arayüzlere sahip olmasına karşın geniş kullanım alanı bulmuştur.
    </para>
   </preliminary>
   <sect2 xml:id="glibc-Low-Level-Time-String-Parsing">
    <title>Düşük Seviyede Çözümleme</title>
    <titleabbrev>Dizgenin belirtilen biçimle yorumlanması</titleabbrev>
    <para>
     İlk işlev oldukça düşük seviyededir. Buna rağmen, iyi bilindiğinden yazılım geliştirirken sıklıkla kullanılır. Arayüzü ve gerçeklenmesi ağırlıkla, <function>strptime</function> çağrısı kurallarıyla tanımlanmış ve gerçeklenmiş olan <function>getdate</function> işlevinden etkilenmiştir.
    </para><!--
<dl class="def">
<dt xml:id="glibc-index-strptime"><span class="category">Function: </replaceable><span><emphasis>char *</emphasis> <strong>strptime</strong> <emphasis>(const char *<var>s</var>, const char *<var>fmt</var>, struct tm *<var>tp</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-strptime" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe env locale
| AS-Unsafe heap lock
| AC-Unsafe lock mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>strptime</code> function parses the input string <var>s</var> according
to the format string <var>fmt</var> and stores its results in the
structure <var>tp</var>.
</para>
<para>The input string could be generated by a <code>strftime</code> call or
obtained any other way.  It does not need to be in a human-recognizable
format; e.g. a date passed as <code>"02:1999:9"</code> is acceptable, even
though it is ambiguous without context.  As long as the format string
<var>fmt</var> matches the input string the function will succeed.
</para>
<para>The user has to make sure, though, that the input can be parsed in a
unambiguous way.  The string <code>"1999112"</code> can be parsed using the
format <code>"%Y%m%d"</code> as 1999-1-12, 1999-11-2, or even 19991-1-2.  It
is necessary to add appropriate separators to reliably get results.
</para>
<para>The format string consists of the same components as the format string
of the <code>strftime</code> function.  The only difference is that the flags
<code>_</code>, <code>-</code>, <code>0</code>, and <code>^</code> are not allowed.
Several of the distinct formats of <code>strftime</code> do the same work in
<code>strptime</code> since differences like case of the input do not matter.
For reasons of symmetry all formats are supported, though.
</para>
<para>The modifiers <code>E</code> and <code>O</code> are also allowed everywhere the
<code>strftime</code> function allows them.
</para>
<para>The formats are:
</para>
<dl compact="compact">
<dt><span><code>%a</code></replaceable></dt>
<dt><span><code>%A</code></replaceable></dt>
<dd><para>The weekday name according to the current locale, in abbreviated form or
the full name.
</para>
</dd>
<dt><span><code>%b</code></replaceable></dt>
<dt><span><code>%B</code></replaceable></dt>
<dt><span><code>%h</code></replaceable></dt>
<dd><para>A month name according to the current locale.  All three specifiers
will recognize both abbreviated and full month names.  If the
locale provides two different grammatical forms of month names,
all three specifiers will recognize both forms.
</para>
<para>As a GNU extension, the <code>O</code> modifier can be used with these
specifiers; it has no effect, as both grammatical forms of month
names are recognized.
</para>
</dd>
<dt><span><code>%c</code></replaceable></dt>
<dd><para>The date and time representation for the current locale.
</para>
</dd>
<dt><span><code>%Ec</code></replaceable></dt>
<dd><para>Like <code>%c</code> but the locale’s alternative date and time format is used.
</para>
</dd>
<dt><span><code>%C</code></replaceable></dt>
<dd><para>The century of the year.
</para>
<para>It makes sense to use this format only if the format string also
contains the <code>%y</code> format.
</para>
</dd>
<dt><span><code>%EC</code></replaceable></dt>
<dd><para>The locale’s representation of the period.
</para>
<para>Unlike <code>%C</code> it sometimes makes sense to use this format since some
cultures represent years relative to the beginning of eras instead of
using the Gregorian years.
</para>
</dd>
<dt><span><code>%d</code></replaceable></dt>
<dt><span><code>%e</code></replaceable></dt>
<dd><para>The day of the month as a decimal number (range <code>1</code> through <code>31</code>).
Leading zeroes are permitted but not required.
</para>
</dd>
<dt><span><code>%Od</code></replaceable></dt>
<dt><span><code>%Oe</code></replaceable></dt>
<dd><para>Same as <code>%d</code> but using the locale’s alternative numeric symbols.
</para>
<para>Leading zeroes are permitted but not required.
</para>
</dd>
<dt><span><code>%D</code></replaceable></dt>
<dd><para>Equivalent to <code>%m/%d/%y</code>.
</para>
</dd>
<dt><span><code>%F</code></replaceable></dt>
<dd><para>Equivalent to <code>%Y-%m-%d</code>, which is the ISO&nbsp;8601 date
format.
</para>
<para>This is a GNU extension following an &isoc;99 extension to
<code>strftime</code>.
</para>
</dd>
<dt><span><code>%g</code></replaceable></dt>
<dd><para>The year corresponding to the ISO week number, but without the century
(range <code>00</code> through <code>99</code>).
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
<para>This format is a GNU extension following a GNU extension of <code>strftime</code>.
</para>
</dd>
<dt><span><code>%G</code></replaceable></dt>
<dd><para>The year corresponding to the ISO week number.
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
<para>This format is a GNU extension following a GNU extension of <code>strftime</code>.
</para>
</dd>
<dt><span><code>%H</code></replaceable></dt>
<dt><span><code>%k</code></replaceable></dt>
<dd><para>The hour as a decimal number, using a 24-hour clock (range <code>00</code> through
<code>23</code>).
</para>
<para><code>%k</code> is a GNU extension following a GNU extension of <code>strftime</code>.
</para>
</dd>
<dt><span><code>%OH</code></replaceable></dt>
<dd><para>Same as <code>%H</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%I</code></replaceable></dt>
<dt><span><code>%l</code></replaceable></dt>
<dd><para>The hour as a decimal number, using a 12-hour clock (range <code>01</code> through
<code>12</code>).
</para>
<para><code>%l</code> is a GNU extension following a GNU extension of <code>strftime</code>.
</para>
</dd>
<dt><span><code>%OI</code></replaceable></dt>
<dd><para>Same as <code>%I</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%j</code></replaceable></dt>
<dd><para>The day of the year as a decimal number (range <code>1</code> through <code>366</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
</dd>
<dt><span><code>%m</code></replaceable></dt>
<dd><para>The month as a decimal number (range <code>1</code> through <code>12</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
</dd>
<dt><span><code>%Om</code></replaceable></dt>
<dd><para>Same as <code>%m</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%M</code></replaceable></dt>
<dd><para>The minute as a decimal number (range <code>0</code> through <code>59</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
</dd>
<dt><span><code>%OM</code></replaceable></dt>
<dd><para>Same as <code>%M</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%n</code></replaceable></dt>
<dt><span><code>%t</code></replaceable></dt>
<dd><para>Matches any white space.
</para>
</dd>
<dt><span><code>%p</code></replaceable></dt>
<dt><span><code>%P</code></replaceable></dt>
<dd><para>The locale-dependent equivalent to ‘<filename>AM</filename>’ or ‘<filename>PM</filename>’.
</para>
<para>This format is not useful unless <code>%I</code> or <code>%l</code> is also used.
Another complication is that the locale might not define these values at
all and therefore the conversion fails.
</para>
<para><code>%P</code> is a GNU extension following a GNU extension to <code>strftime</code>.
</para>
</dd>
<dt><span><code>%r</code></replaceable></dt>
<dd><para>The complete time using the AM/PM format of the current locale.
</para>
<para>A complication is that the locale might not define this format at all
and therefore the conversion fails.
</para>
</dd>
<dt><span><code>%R</code></replaceable></dt>
<dd><para>The hour and minute in decimal numbers using the format <code>%H:%M</code>.
</para>
<para><code>%R</code> is a GNU extension following a GNU extension to <code>strftime</code>.
</para>
</dd>
<dt><span><code>%s</code></replaceable></dt>
<dd><para>The number of seconds since the epoch, i.e., since 1970-01-01 00:00:00 UTC.
Leap seconds are not counted unless leap second support is available.
</para>
<para><code>%s</code> is a GNU extension following a GNU extension to <code>strftime</code>.
</para>
</dd>
<dt><span><code>%S</code></replaceable></dt>
<dd><para>The seconds as a decimal number (range <code>0</code> through <code>60</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
<para><strong>NB:</strong> The Unix specification says the upper bound on this value
is <code>61</code>, a result of a decision to allow double leap seconds.  You
will not see the value <code>61</code> because no minute has more than one
leap second, but the myth persists.
</para>
</dd>
<dt><span><code>%OS</code></replaceable></dt>
<dd><para>Same as <code>%S</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%T</code></replaceable></dt>
<dd><para>Equivalent to the use of <code>%H:%M:%S</code> in this place.
</para>
</dd>
<dt><span><code>%u</code></replaceable></dt>
<dd><para>The day of the week as a decimal number (range <code>1</code> through
<code>7</code>), Monday being <code>1</code>.
</para>
<para>Leading zeroes are permitted but not required.
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
</dd>
<dt><span><code>%U</code></replaceable></dt>
<dd><para>The week number of the current year as a decimal number (range <code>0</code>
through <code>53</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
</dd>
<dt><span><code>%OU</code></replaceable></dt>
<dd><para>Same as <code>%U</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%V</code></replaceable></dt>
<dd><para>The ISO&nbsp;8601:1988 week number as a decimal number (range <code>1</code>
through <code>53</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
</dd>
<dt><span><code>%w</code></replaceable></dt>
<dd><para>The day of the week as a decimal number (range <code>0</code> through
<code>6</code>), Sunday being <code>0</code>.
</para>
<para>Leading zeroes are permitted but not required.
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
</dd>
<dt><span><code>%Ow</code></replaceable></dt>
<dd><para>Same as <code>%w</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%W</code></replaceable></dt>
<dd><para>The week number of the current year as a decimal number (range <code>0</code>
through <code>53</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
</dd>
<dt><span><code>%OW</code></replaceable></dt>
<dd><para>Same as <code>%W</code> but using the locale’s alternative numeric symbols.
</para>
</dd>
<dt><span><code>%x</code></replaceable></dt>
<dd><para>The date using the locale’s date format.
</para>
</dd>
<dt><span><code>%Ex</code></replaceable></dt>
<dd><para>Like <code>%x</code> but the locale’s alternative data representation is used.
</para>
</dd>
<dt><span><code>%X</code></replaceable></dt>
<dd><para>The time using the locale’s time format.
</para>
</dd>
<dt><span><code>%EX</code></replaceable></dt>
<dd><para>Like <code>%X</code> but the locale’s alternative time representation is used.
</para>
</dd>
<dt><span><code>%y</code></replaceable></dt>
<dd><para>The year without a century as a decimal number (range <code>0</code> through
<code>99</code>).
</para>
<para>Leading zeroes are permitted but not required.
</para>
<para>Note that it is questionable to use this format without
the <code>%C</code> format.  The <code>strptime</code> function does regard input
values in the range <em class="math">68</emphasis> to <em class="math">99</emphasis> as the years <em class="math">1969</emphasis> to
<em class="math">1999</emphasis> and the values <em class="math">0</emphasis> to <em class="math">68</emphasis> as the years
<em class="math">2000</emphasis> to <em class="math">2068</emphasis>.  But maybe this heuristic fails for some
input data.
</para>
<para>Therefore it is best to avoid <code>%y</code> completely and use <code>%Y</code>
instead.
</para>
</dd>
<dt><span><code>%Ey</code></replaceable></dt>
<dd><para>The offset from <code>%EC</code> in the locale’s alternative representation.
</para>
</dd>
<dt><span><code>%Oy</code></replaceable></dt>
<dd><para>The offset of the year (from <code>%C</code>) using the locale’s alternative
numeric symbols.
</para>
</dd>
<dt><span><code>%Y</code></replaceable></dt>
<dd><para>The year as a decimal number, using the Gregorian calendar.
</para>
</dd>
<dt><span><code>%EY</code></replaceable></dt>
<dd><para>The full alternative year representation.
</para>
</dd>
<dt><span><code>%z</code></replaceable></dt>
<dd><para>The offset from GMT in ISO&nbsp;8601/RFC822 format.
</para>
</dd>
<dt><span><code>%Z</code></replaceable></dt>
<dd><para>The timezone name.
</para>
<para><emphasis>Note:</emphasis> Currently, this is not fully implemented.  The format is
recognized, input is consumed but no field in <var>tm</var> is set.
</para>
</dd>
<dt><span><code>%%</code></replaceable></dt>
<dd><para>A literal ‘<filename>%</filename>’ character.
</para></dd>
</dl>

<para>All other characters in the format string must have a matching character
in the input string.  Exceptions are white spaces in the input string
which can match zero or more whitespace characters in the format string.
</para>
<para><strong>Portability Note:</strong> The XPG standard advises applications to use
at least one whitespace character (as specified by <code>isspace</code>) or
other non-alphanumeric characters between any two conversion
specifications.  The GNU C Library does not have this limitation but
other libraries might have trouble parsing formats like
<code>"%d%m%Y%H%M%S"</code>.
</para>
<para>The <code>strptime</code> function processes the input string from right to
left.  Each of the three possible input elements (white space, literal,
or format) are handled one after the other.  If the input cannot be
matched to the format string the function stops.  The remainder of the
format and input strings are not processed.
</para>
<para>The function returns a pointer to the first character it was unable to
process.  If the input string contains more characters than required by
the format string the return value points right after the last consumed
input character.  If the whole input string is consumed the return value
points to the <code>NULL</code> byte at the end of the string.  If an error
occurs, i.e., <code>strptime</code> fails to match all of the format string,
the function returns <code>NULL</code>.
</para></dd></dl>

<para>The specification of the function in the XPG standard is rather vague,
leaving out a few important pieces of information.  Most importantly, it
does not specify what happens to those elements of <var>tm</var> which are
not directly initialized by the different formats.  The
implementations on different Unix systems vary here.
</para>
<para>The GNU C Library implementation does not touch those fields which are not
directly initialized.  Exceptions are the <code>tm_wday</code> and
<code>tm_yday</code> elements, which are recomputed if any of the year, month,
or date elements changed.  This has two implications:
</para>
<ul>
<li> Before calling the <code>strptime</code> function for a new input string, you
should prepare the <var>tm</var> structure you pass.  Normally this will mean
initializing all values to zero.  Alternatively, you can set all
fields to values like <code>INT_MAX</code>, allowing you to determine which
elements were set by the function call.  Zero does not work here since
it is a valid value for many of the fields.

<para>Careful initialization is necessary if you want to find out whether a
certain field in <var>tm</var> was initialized by the function call.
</para>
</li><li> You can construct a <code>struct tm</code> value with several consecutive
<code>strptime</code> calls.  A useful application of this is e.g. the parsing
of two separate strings, one containing date information and the other
time information.  By parsing one after the other without clearing the
structure in-between, you can construct a complete broken-down time.
</li></ul>

<para>The following example shows a function which parses a string which
contains the date information in either US style or ISO&nbsp;8601 form:
</para>
<example>
</screen>const char *
parse_date (const char *input, struct tm *tm)
{
  const char *cp;

  /* <replaceable>First clear the result structure.</replaceable>  */
  memset (tm, '\0', sizeof (*tm));

  /* <replaceable>Try the ISO format first.</replaceable>  */
  cp = strptime (input, "%F", tm);
  if (cp == NULL)
    {
      /* <replaceable>Does not match.  Try the US form.</replaceable>  */
      cp = strptime (input, "%D", tm);
    }

  return cp;
}
</screen></example>

<hr>
</div>
<div class="subsubsection" xml:id="glibc-General-Time-String-Parsing">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dLevel-Time-String-Parsing" accesskey="p" rel="prev">Interpret string according to given format</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Date-and-Time" accesskey="u" rel="up">Convert textual time and date information back</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-A-More-User_002dfriendly-Way-to-Parse-Times-and-Dates"></replaceable><h4 class="subsubsection">21.5.5.2 A More User-friendly Way to Parse Times and Dates</title>

<para>The Unix standard defines another function for parsing date strings.
The interface is weird, but if the function happens to suit your
application it is just fine.  It is problematic to use this function
in multi-threaded programs or libraries, since it returns a pointer to
a static variable, and uses a global variable and global state (an
environment variable).
</para>
<dl class="def">
<dt xml:id="glibc-index-getdate_005ferr"><span class="category">Variable: </replaceable><span><strong>getdate_err</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getdate_005ferr" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This variable of type <code>int</code> contains the error code of the last
unsuccessful call to <code>getdate</code>.  Defined values are:
</para>
<dl compact="compact">
<dt><span><em class="math">1</emphasis></replaceable></dt>
<dd><para>The environment variable <code>DATEMSK</code> is not defined or null.
</para></dd>
<dt><span><em class="math">2</emphasis></replaceable></dt>
<dd><para>The template file denoted by the <code>DATEMSK</code> environment variable
cannot be opened.
</para></dd>
<dt><span><em class="math">3</emphasis></replaceable></dt>
<dd><para>Information about the template file cannot retrieved.
</para></dd>
<dt><span><em class="math">4</emphasis></replaceable></dt>
<dd><para>The template file is not a regular file.
</para></dd>
<dt><span><em class="math">5</emphasis></replaceable></dt>
<dd><para>An I/O error occurred while reading the template file.
</para></dd>
<dt><span><em class="math">6</emphasis></replaceable></dt>
<dd><para>Not enough memory available to execute the function.
</para></dd>
<dt><span><em class="math">7</emphasis></replaceable></dt>
<dd><para>The template file contains no matching template.
</para></dd>
<dt><span><em class="math">8</emphasis></replaceable></dt>
<dd><para>The input date is invalid, but would match a template otherwise.  This
includes dates like February 31st, and dates which cannot be represented
in a <code>time_t</code> variable.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-getdate"><span class="category">Function: </replaceable><span><emphasis>struct tm *</emphasis> <strong>getdate</strong> <emphasis>(const char *<var>string</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getdate" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:getdate env locale
| AS-Unsafe heap lock
| AC-Unsafe lock mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The interface to <code>getdate</code> is the simplest possible for a function
to parse a string and return the value.  <var>string</var> is the input
string and the result is returned in a statically-allocated variable.
</para>
<para>The details about how the string is processed are hidden from the user.
In fact, they can be outside the control of the program.  Which formats
are recognized is controlled by the file named by the environment
variable <code>DATEMSK</code>.  This file should contain
lines of valid format strings which could be passed to <code>strptime</code>.
</para>
<para>The <code>getdate</code> function reads these format strings one after the
other and tries to match the input string.  The first line which
completely matches the input string is used.
</para>
<para>Elements not initialized through the format string retain the values
present at the time of the <code>getdate</code> function call.
</para>
<para>The formats recognized by <code>getdate</code> are the same as for
<code>strptime</code>.  See above for an explanation.  There are only a few
extensions to the <code>strptime</code> behavior:
</para>
<ul>
<li> If the <code>%Z</code> format is given the broken-down time is based on the
current time of the timezone matched, not of the current timezone of the
runtime environment.

<para><emphasis>Note</emphasis>: This is not implemented (currently).  The problem is that
timezone names are not unique.  If a fixed timezone is assumed for a
given string (say <code>EST</code> meaning US East Coast time), then uses for
countries other than the USA will fail.  So far we have found no good
solution to this.
</para>
</li><li> If only the weekday is specified the selected day depends on the current
date.  If the current weekday is greater than or equal to the <code>tm_wday</code>
value the current week’s day is chosen, otherwise the day next week is chosen.

</li><li> A similar heuristic is used when only the month is given and not the
year.  If the month is greater than or equal to the current month, then
the current year is used.  Otherwise it wraps to next year.  The first
day of the month is assumed if one is not explicitly specified.

</li><li> The current hour, minute, and second are used if the appropriate value is
not set through the format.

</li><li> If no date is given tomorrow’s date is used if the time is
smaller than the current time.  Otherwise today’s date is taken.
</li></ul>

<para>It should be noted that the format in the template file need not only
contain format elements.  The following is a list of possible format
strings (taken from the Unix standard):
</para>
<example>
</screen>%m
%A %B %d, %Y %H:%M:%S
%A
%B
%m/%d/%y %I %p
%d,%m,%Y %H:%M
at %A the %dst of %B in %Y
run job at %I %p,%B %dnd
%A den %d. %B %Y %H.%M Uhr
</screen></example>

<para>As you can see, the template list can contain very specific strings like
<code>run job at %I %p,%B %dnd</code>.  Using the above list of templates and
assuming the current time is Mon Sep 22 12:19:47 EDT 1986, we can obtain the
following results for the given input.
</para>
<table>
<tbody><tr><td>Input</td><td>Match</td><td>Result</td></tr>
<tr><td>Mon</td><td>%a</td><td>Mon Sep 22 12:19:47 EDT 1986</td></tr>
<tr><td>Sun</td><td>%a</td><td>Sun Sep 28 12:19:47 EDT 1986</td></tr>
<tr><td>Fri</td><td>%a</td><td>Fri Sep 26 12:19:47 EDT 1986</td></tr>
<tr><td>September</td><td>%B</td><td>Mon Sep 1 12:19:47 EDT 1986</td></tr>
<tr><td>January</td><td>%B</td><td>Thu Jan 1 12:19:47 EST 1987</td></tr>
<tr><td>December</td><td>%B</td><td>Mon Dec 1 12:19:47 EST 1986</td></tr>
<tr><td>Sep Mon</td><td>%b %a</td><td>Mon Sep 1 12:19:47 EDT 1986</td></tr>
<tr><td>Jan Fri</td><td>%b %a</td><td>Fri Jan 2 12:19:47 EST 1987</td></tr>
<tr><td>Dec Mon</td><td>%b %a</td><td>Mon Dec 1 12:19:47 EST 1986</td></tr>
<tr><td>Jan Wed 1989</td><td>%b %a %Y</td><td>Wed Jan 4 12:19:47 EST 1989</td></tr>
<tr><td>Fri 9</td><td>%a %H</td><td>Fri Sep 26 09:00:00 EDT 1986</td></tr>
<tr><td>Feb 10:30</td><td>%b %H:%S</td><td>Sun Feb 1 10:00:30 EST 1987</td></tr>
<tr><td>10:30</td><td>%H:%M</td><td>Tue Sep 23 10:30:00 EDT 1986</td></tr>
<tr><td>13:30</td><td>%H:%M</td><td>Mon Sep 22 13:30:00 EDT 1986</td></tr>
</tbody></table>

<para>The return value of the function is a pointer to a static variable of
type <code>struct&nbsp;tm</code>, or a null pointer if an error occurred.  The
result is only valid until the next <code>getdate</code> call, making this
function unusable in multi-threaded applications.
</para>
<para>The <code>errno</code> variable is <emphasis>not</emphasis> changed.  Error conditions are
stored in the global variable <code>getdate_err</code>.  See the
description above for a list of the possible error values.
</para>
<para><emphasis>Warning:</emphasis> The <code>getdate</code> function should <emphasis>never</emphasis> be
used in SUID-programs.  The reason is obvious: using the
<code>DATEMSK</code> environment variable you can get the function to open
any arbitrary file and chances are high that with some bogus input
(such as a binary file) the program will crash.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-getdate_005fr"><span class="category">Function: </replaceable><span><emphasis>int</emphasis> <strong>getdate_r</strong> <emphasis>(const char *<var>string</var>, struct tm *<var>tp</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getdate_005fr" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe env locale
| AS-Unsafe heap lock
| AC-Unsafe lock mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>getdate_r</code> function is the reentrant counterpart of
<code>getdate</code>.  It does not use the global variable <code>getdate_err</code>
to signal an error, but instead returns an error code.  The same error
codes as described in the <code>getdate_err</code> documentation above are
used, with 0 meaning success.
</para>
<para>Moreover, <code>getdate_r</code> stores the broken-down time in the variable
of type <code>struct tm</code> pointed to by the second argument, rather than
in a static variable.
</para>
<para>This function is not defined in the Unix standard.  Nevertheless it is
available on some other Unix systems as well.
</para>
<para>The warning against using <code>getdate</code> in SUID-programs applies to
<code>getdate_r</code> as well.
</para></dd></dl>

<hr>
</div>
</div>
<div class="subsection" xml:id="glibc-TZ-Variable">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Time-Zone-Functions" accesskey="n" rel="next">Functions and Variables for Time Zones</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Date-and-Time" accesskey="p" rel="prev">Convert textual time and date information back</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Calendar-Time" accesskey="u" rel="up">Calendar Time</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Specifying-the-Time-Zone-with-TZ"></replaceable><h4 class="subsection">21.5.6 Specifying the Time Zone with <code>TZ</code></title>

<para>In POSIX systems, a user can specify the time zone by means of the
<code>TZ</code> environment variable.  For information about how to set
environment variables, see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Variables">Environment Variables</a>.  The functions
for accessing the time zone are declared in <filename>time.h</filename>.
<span xml:id="glibc-index-time_002eh-3"></replaceable>
<span xml:id="glibc-index-time-zone"></replaceable>
</para>
<para>You should not normally need to set <code>TZ</code>.  If the system is
configured properly, the default time zone will be correct.  You might
set <code>TZ</code> if you are using a computer over a network from a
different time zone, and would like times reported to you in the time
zone local to you, rather than what is local to the computer.
</para>
<para>In POSIX.1 systems the value of the <code>TZ</code> variable can be in one of
three formats.  With the GNU C Library, the most common format is the
last one, which can specify a selection from a large database of time
zone information for many regions of the world.  The first two formats
are used to describe the time zone information directly, which is both
more cumbersome and less precise.  But the POSIX.1 standard only
specifies the details of the first two formats, so it is good to be
familiar with them in case you come across a POSIX.1 system that doesn’t
support a time zone information database.
</para>
<para>The first format is used when there is no Daylight Saving Time (or
summer time) in the local time zone:
</para>
<example>
</screen><replaceable><var>std</var> <var>offset</var></replaceable>
</screen></example>

<para>The <var>std</var> string specifies the name of the time zone.  It must be
three or more characters long and must not contain a leading colon,
embedded digits, commas, nor plus and minus signs.  There is no space
character separating the time zone name from the <var>offset</var>, so these
restrictions are necessary to parse the specification correctly.
</para>
<para>The <var>offset</var> specifies the time value you must add to the local time
to get a Coordinated Universal Time value.  It has syntax like
[<code>+</code>|<code>-</code>]<var>hh</var>[<code>:</code><var>mm</var>[<code>:</code><var>ss</var>]].  This
is positive if the local time zone is west of the Prime Meridian and
negative if it is east.  The hour must be between <code>0</code> and
<code>24</code>, and the minute and seconds between <code>0</code> and <code>59</code>.
</para>
<para>For example, here is how we would specify Eastern Standard Time, but
without any Daylight Saving Time alternative:
</para>
<example>
</screen>EST+5
</screen></example>

<para>The second format is used when there is Daylight Saving Time:
</para>
<example>
</screen><replaceable><var>std</var> <var>offset</var> <var>dst</var> [<var>offset</var>]<code>,</code><var>start</var>[<code>/</code><var>time</var>]<code>,</code><var>end</var>[<code>/</code><var>time</var>]</replaceable>
</screen></example>

<para>The initial <var>std</var> and <var>offset</var> specify the standard time zone, as
described above.  The <var>dst</var> string and <var>offset</var> specify the name
and offset for the corresponding Daylight Saving Time zone; if the
<var>offset</var> is omitted, it defaults to one hour ahead of standard time.
</para>
<para>The remainder of the specification describes when Daylight Saving Time is
in effect.  The <var>start</var> field is when Daylight Saving Time goes into
effect and the <var>end</var> field is when the change is made back to standard
time.  The following formats are recognized for these fields:
</para>
<dl compact="compact">
<dt><span><code>J<var>n</var></code></replaceable></dt>
<dd><para>This specifies the Julian day, with <var>n</var> between <code>1</code> and <code>365</code>.
February 29 is never counted, even in leap years.
</para>
</dd>
<dt><span><code><var>n</var></code></replaceable></dt>
<dd><para>This specifies the Julian day, with <var>n</var> between <code>0</code> and <code>365</code>.
February 29 is counted in leap years.
</para>
</dd>
<dt><span><code>M<var>m</var>.<var>w</var>.<var>d</var></code></replaceable></dt>
<dd><para>This specifies day <var>d</var> of week <var>w</var> of month <var>m</var>.  The day
<var>d</var> must be between <code>0</code> (Sunday) and <code>6</code>.  The week
<var>w</var> must be between <code>1</code> and <code>5</code>; week <code>1</code> is the
first week in which day <var>d</var> occurs, and week <code>5</code> specifies the
<emphasis>last</emphasis> <var>d</var> day in the month.  The month <var>m</var> should be
between <code>1</code> and <code>12</code>.
</para></dd>
</dl>

<para>The <var>time</var> fields specify when, in the local time currently in
effect, the change to the other time occurs.  If omitted, the default is
<code>02:00:00</code>.  The hours part of the time fields can range from
-167 through 167; this is an extension to POSIX.1, which allows
only the range 0 through 24.
</para>
<para>Here are some example <code>TZ</code> values, including the appropriate
Daylight Saving Time and its dates of applicability.  In North
American Eastern Standard Time (EST) and Eastern Daylight Time (EDT),
the normal offset from UTC is 5 hours; since this is
west of the prime meridian, the sign is positive.  Summer time begins on
March’s second Sunday at 2:00am, and ends on November’s first Sunday
at 2:00am.
</para>
<example>
</screen>EST+5EDT,M3.2.0/2,M11.1.0/2
</screen></example>

<para>Israel Standard Time (IST) and Israel Daylight Time (IDT) are 2 hours
ahead of the prime meridian in winter, springing forward an hour on
March’s fourth Thursday at 26:00 (i.e., 02:00 on the first Friday on or
after March 23), and falling back on October’s last Sunday at 02:00.
</para>
<example>
</screen>IST-2IDT,M3.4.4/26,M10.5.0
</screen></example>

<para>Western Argentina Summer Time (WARST) is 3 hours behind the prime
meridian all year.  There is a dummy fall-back transition on December
31 at 25:00 daylight saving time (i.e., 24:00 standard time,
equivalent to January 1 at 00:00 standard time), and a simultaneous
spring-forward transition on January 1 at 00:00 standard time, so
daylight saving time is in effect all year and the initial <code>WART</code>
is a placeholder.
</para>
<example>
</screen>WART4WARST,J1/0,J365/25
</screen></example>

<para>Western Greenland Time (WGT) and Western Greenland Summer Time (WGST)
are 3 hours behind UTC in the winter.  Its clocks follow the European
Union rules of springing forward by one hour on March’s last Sunday at
01:00 UTC (-02:00 local time) and falling back on October’s
last Sunday at 01:00 UTC (-01:00 local time).
</para>
<example>
</screen>WGT3WGST,M3.5.0/-2,M10.5.0/-1
</screen></example>

<para>The schedule of Daylight Saving Time in any particular jurisdiction has
changed over the years.  To be strictly correct, the conversion of dates
and times in the past should be based on the schedule that was in effect
then.  However, this format has no facilities to let you specify how the
schedule has changed from year to year.  The most you can do is specify
one particular schedule—usually the present day schedule—and this is
used to convert any date, no matter when.  For precise time zone
specifications, it is best to use the time zone information database
(see below).
</para>
<para>The third format looks like this:
</para>
<example>
</screen>:<var>characters</var>
</screen></example>

<para>Each operating system interprets this format differently; in
the GNU C Library, <var>characters</var> is the name of a file which describes the time
zone.
</para>
<span xml:id="glibc-index-_002fetc_002flocaltime"></replaceable>
<span xml:id="glibc-index-localtime-1"></replaceable>
<para>If the <code>TZ</code> environment variable does not have a value, the
operation chooses a time zone by default.  In the GNU C Library, the
default time zone is like the specification ‘<filename>TZ=:/etc/localtime</filename>’
(or ‘<filename>TZ=:/usr/local/etc/localtime</filename>’, depending on how the GNU C Library
was configured; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Installation">Installing the GNU C Library</a>).  Other C libraries use their own
rule for choosing the default time zone, so there is little we can say
about them.
</para>
<span xml:id="glibc-index-time-zone-database"></replaceable>
<span xml:id="glibc-index-_002fusr_002fshare_002fzoneinfo"></replaceable>
<span xml:id="glibc-index-zoneinfo"></replaceable>
<para>If <var>characters</var> begins with a slash, it is an absolute file name;
otherwise the library looks for the file
<filename>/usr/share/zoneinfo/<var>characters</var></filename>.  The <filename>zoneinfo</filename>
directory contains data files describing local time zones in many
different parts of the world.  The names represent major cities, with
subdirectories for geographical areas; for example,
<filename>America/New_York</filename>, <filename>Europe/London</filename>, <filename>Asia/Hong_Kong</filename>.
These data files are installed by the system administrator, who also
sets <filename>/etc/localtime</filename> to point to the data file for the local time
zone.  The files typically come from the <a href="http://www.iana.org/time-zones">Time Zone Database</a> of time zone and daylight saving time
information for most regions of the world, which is maintained by a
community of volunteers and put in the public domain.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Time-Zone-Functions">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Time-Functions-Example" accesskey="n" rel="next">Time Functions Example</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#TZ-Variable" accesskey="p" rel="prev">Specifying the Time Zone with <code>TZ</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Calendar-Time" accesskey="u" rel="up">Calendar Time</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Functions-and-Variables-for-Time-Zones"></replaceable><h4 class="subsection">21.5.7 Functions and Variables for Time Zones</title>

<dl class="def">
<dt xml:id="glibc-index-tzname"><span class="category">Variable: </replaceable><span><emphasis>char *</emphasis> <strong>tzname</strong> <emphasis>[2]</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tzname" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>The array <code>tzname</code> contains two strings, which are the standard
names of the pair of time zones (standard and Daylight
Saving) that the user has selected.  <code>tzname[0]</code> is the name of
the standard time zone (for example, <code>"EST"</code>), and <code>tzname[1]</code>
is the name for the time zone when Daylight Saving Time is in use (for
example, <code>"EDT"</code>).  These correspond to the <var>std</var> and <var>dst</var>
strings (respectively) from the <code>TZ</code> environment variable.  If
Daylight Saving Time is never used, <code>tzname[1]</code> is the empty string.
</para>
<para>The <code>tzname</code> array is initialized from the <code>TZ</code> environment
variable whenever <code>tzset</code>, <code>ctime</code>, <code>strftime</code>,
<code>mktime</code>, or <code>localtime</code> is called.  If multiple abbreviations
have been used (e.g. <code>"EWT"</code> and <code>"EDT"</code> for U.S. Eastern War
Time and Eastern Daylight Time), the array contains the most recent
abbreviation.
</para>
<para>The <code>tzname</code> array is required for POSIX.1 compatibility, but in
GNU programs it is better to use the <code>tm_zone</code> member of the
broken-down time structure, since <code>tm_zone</code> reports the correct
abbreviation even when it is not the latest one.
</para>
<para>Though the strings are declared as <code>char *</code> the user must refrain
from modifying these strings.  Modifying the strings will almost certainly
lead to trouble.
</para>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-tzset"><span class="category">Function: </replaceable><span><emphasis>void</emphasis> <strong>tzset</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-tzset" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe env locale
| AS-Unsafe heap lock
| AC-Unsafe lock mem fd
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>tzset</code> function initializes the <code>tzname</code> variable from
the value of the <code>TZ</code> environment variable.  It is not usually
necessary for your program to call this function, because it is called
automatically when you use the other time conversion functions that
depend on the time zone.
</para></dd></dl>

<para>The following variables are defined for compatibility with System V
Unix.  Like <code>tzname</code>, these variables are set by calling
<code>tzset</code> or the other time conversion functions.
</para>
<dl class="def">
<dt xml:id="glibc-index-timezone"><span class="category">Variable: </replaceable><span><emphasis>long int</emphasis> <strong>timezone</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-timezone" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This contains the difference between UTC and the latest local standard
time, in seconds west of UTC.  For example, in the U.S. Eastern time
zone, the value is <code>5*60*60</code>.  Unlike the <code>tm_gmtoff</code> member
of the broken-down time structure, this value is not adjusted for
daylight saving, and its sign is reversed.  In GNU programs it is better
to use <code>tm_gmtoff</code>, since it contains the correct offset even when
it is not the latest one.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-daylight"><span class="category">Variable: </replaceable><span><emphasis>int</emphasis> <strong>daylight</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-daylight" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This variable has a nonzero value if Daylight Saving Time rules apply.
A nonzero value does not necessarily mean that Daylight Saving Time is
now in effect; it means only that Daylight Saving Time is sometimes in
effect.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Time-Functions-Example">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Time-Zone-Functions" accesskey="p" rel="prev">Functions and Variables for Time Zones</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Calendar-Time" accesskey="u" rel="up">Calendar Time</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Time-Functions-Example-1"></replaceable><h4 class="subsection">21.5.8 Time Functions Example</title>

<para>Here is an example program showing the use of some of the calendar time
functions.
</para>
<example>
</screen>
#include &lt;time.h&gt;
#include &lt;stdio.h&gt;

#define SIZE 256

int
main (void)
{
  char buffer[SIZE];
  time_t curtime;
  struct tm *loctime;

  /* <replaceable>Get the current time.</replaceable> */
  curtime = time (NULL);

  /* <replaceable>Convert it to local time representation.</replaceable> */
  loctime = localtime (&amp;curtime);

  /* <replaceable>Print out the date and time in the standard format.</replaceable> */
  fputs (asctime (loctime), stdout);

</pre></screen>  /* <replaceable>Print it out in a nice format.</replaceable> */
  strftime (buffer, SIZE, "Today is %A, %B %d.\n", loctime);
  fputs (buffer, stdout);
  strftime (buffer, SIZE, "The time is %I:%M %p.\n", loctime);
  fputs (buffer, stdout);

  return 0;
}
</screen></example>

<para>It produces output like this:
</para>
<example>
</screen>Wed Jul 31 13:02:36 1991
Today is Wednesday, July 31.
The time is 01:02 PM.
</screen></example>


<hr>
</div>
</div>
<sect xml:id="glibc-Setting-an-Alarm">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sleeping" accesskey="n" rel="next">Sleeping</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Calendar-Time" accesskey="p" rel="prev">Calendar Time</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Date-and-Time" accesskey="u" rel="up">Date and Time</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Setting-an-Alarm-1"></replaceable><h3 class="section">21.6 Setting an Alarm</title>

<para>The <code>alarm</code> and <code>setitimer</code> functions provide a mechanism for a
process to interrupt itself in the future.  They do this by setting a
timer; when the timer expires, the process receives a signal.
</para>
<span xml:id="glibc-index-setting-an-alarm"></replaceable>
<span xml:id="glibc-index-interval-timer_002c-setting"></replaceable>
<span xml:id="glibc-index-alarms_002c-setting"></replaceable>
<span xml:id="glibc-index-timers_002c-setting"></replaceable>
<para>Each process has three independent interval timers available:
</para>
<ul>
<li> A real-time timer that counts elapsed time.  This timer sends a
<code>SIGALRM</code> signal to the process when it expires.
<span xml:id="glibc-index-real_002dtime-timer"></replaceable>
<span xml:id="glibc-index-timer_002c-real_002dtime"></replaceable>

</li><li> A virtual timer that counts processor time used by the process.  This timer
sends a <code>SIGVTALRM</code> signal to the process when it expires.
<span xml:id="glibc-index-virtual-timer"></replaceable>
<span xml:id="glibc-index-timer_002c-virtual"></replaceable>

</li><li> A profiling timer that counts both processor time used by the process,
and processor time spent in system calls on behalf of the process.  This
timer sends a <code>SIGPROF</code> signal to the process when it expires.
<span xml:id="glibc-index-profiling-timer"></replaceable>
<span xml:id="glibc-index-timer_002c-profiling"></replaceable>

<para>This timer is useful for profiling in interpreters.  The interval timer
mechanism does not have the fine granularity necessary for profiling
native code.
</para></li></ul>

<para>You can only have one timer of each kind set at any given time.  If you
set a timer that has not yet expired, that timer is simply reset to the
new value.
</para>
<para>You should establish a handler for the appropriate alarm signal using
<code>signal</code> or <code>sigaction</code> before issuing a call to
<code>setitimer</code> or <code>alarm</code>.  Otherwise, an unusual chain of events
could cause the timer to expire before your program establishes the
handler.  In this case it would be terminated, since termination is the
default action for the alarm signals.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling">Signal Handling</a>.
</para>
<para>To be able to use the alarm function to interrupt a system call which
might block otherwise indefinitely it is important to <emphasis>not</emphasis> set the
<code>SA_RESTART</code> flag when registering the signal handler using
<code>sigaction</code>.  When not using <code>sigaction</code> things get even
uglier: the <code>signal</code> function has fixed semantics with respect
to restarts.  The BSD semantics for this function is to set the flag.
Therefore, if <code>sigaction</code> for whatever reason cannot be used, it is
necessary to use <code>sysv_signal</code> and not <code>signal</code>.
</para>
<para>The <code>setitimer</code> function is the primary means for setting an alarm.
This facility is declared in the header file <filename>sys/time.h</filename>.  The
<code>alarm</code> function, declared in <filename>unistd.h</filename>, provides a somewhat
simpler interface for setting the real-time timer.
<span xml:id="glibc-index-unistd_002eh-14"></replaceable>
<span xml:id="glibc-index-sys_002ftime_002eh-1"></replaceable>
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-itimerval"><span class="category">Data Type: </replaceable><span><strong>struct itimerval</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-itimerval" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This structure is used to specify when a timer should expire.  It contains
the following members:
</para><dl compact="compact">
<dt><span><code>struct timeval it_interval</code></replaceable></dt>
<dd><para>This is the period between successive timer interrupts.  If zero, the
alarm will only be sent once.
</para>
</dd>
<dt><span><code>struct timeval it_value</code></replaceable></dt>
<dd><para>This is the period between now and the first timer interrupt.  If zero,
the alarm is disabled.
</para></dd>
</dl>

<para>The <code>struct timeval</code> data type is described in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Time-Types">Time Types</a>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-setitimer"><span class="category">Function: </replaceable><span><emphasis>int</emphasis> <strong>setitimer</strong> <emphasis>(int <var>which</var>, const struct itimerval *<var>new</var>, struct itimerval *<var>old</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-setitimer" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe timer
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>setitimer</code> function sets the timer specified by <var>which</var>
according to <var>new</var>.  The <var>which</var> argument can have a value of
<code>ITIMER_REAL</code>, <code>ITIMER_VIRTUAL</code>, or <code>ITIMER_PROF</code>.
</para>
<para>If <var>old</var> is not a null pointer, <code>setitimer</code> returns information
about any previous unexpired timer of the same kind in the structure it
points to.
</para>
<para>The return value is <code>0</code> on success and <code>-1</code> on failure.  The
following <code>errno</code> error conditions are defined for this function:
</para>
<dl compact="compact">
<dt><span><code>EINVAL</code></replaceable></dt>
<dd><para>The timer period is too large.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-getitimer"><span class="category">Function: </replaceable><span><emphasis>int</emphasis> <strong>getitimer</strong> <emphasis>(int <var>which</var>, struct itimerval *<var>old</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getitimer" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>getitimer</code> function stores information about the timer specified
by <var>which</var> in the structure pointed at by <var>old</var>.
</para>
<para>The return value and error conditions are the same as for <code>setitimer</code>.
</para></dd></dl>

<dl compact="compact">
<dt xml:id="glibc-index-ITIMER_005fREAL"><span><code>ITIMER_REAL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ITIMER_005fREAL" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This constant can be used as the <var>which</var> argument to the
<code>setitimer</code> and <code>getitimer</code> functions to specify the real-time
timer.
</para>
</dd>
<dt xml:id="glibc-index-ITIMER_005fVIRTUAL"><span><code>ITIMER_VIRTUAL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ITIMER_005fVIRTUAL" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This constant can be used as the <var>which</var> argument to the
<code>setitimer</code> and <code>getitimer</code> functions to specify the virtual
timer.
</para>
</dd>
<dt xml:id="glibc-index-ITIMER_005fPROF"><span><code>ITIMER_PROF</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ITIMER_005fPROF" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>This constant can be used as the <var>which</var> argument to the
<code>setitimer</code> and <code>getitimer</code> functions to specify the profiling
timer.
</para></dd>
</dl>

<dl class="def">
<dt xml:id="glibc-index-alarm"><span class="category">Function: </replaceable><span><emphasis>unsigned int</emphasis> <strong>alarm</strong> <emphasis>(unsigned int <var>seconds</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-alarm" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe timer
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>alarm</code> function sets the real-time timer to expire in
<var>seconds</var> seconds.  If you want to cancel any existing alarm, you
can do this by calling <code>alarm</code> with a <var>seconds</var> argument of
zero.
</para>
<para>The return value indicates how many seconds remain before the previous
alarm would have been sent.  If there was no previous alarm, <code>alarm</code>
returns zero.
</para></dd></dl>

<para>The <code>alarm</code> function could be defined in terms of <code>setitimer</code>
like this:
</para>
<example>
</screen>unsigned int
alarm (unsigned int seconds)
{
  struct itimerval old, new;
  new.it_interval.tv_usec = 0;
  new.it_interval.tv_sec = 0;
  new.it_value.tv_usec = 0;
  new.it_value.tv_sec = (long int) seconds;
  if (setitimer (ITIMER_REAL, &amp;new, &amp;old) &lt; 0)
    return 0;
  else
    return old.it_value.tv_sec;
}
</screen></example>

<para>There is an example showing the use of the <code>alarm</code> function in
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Handler-Returns">Signal Handlers that Return</a>.
</para>
<para>If you simply want your process to wait for a given number of seconds,
you should use the <code>sleep</code> function.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Sleeping">Sleeping</a>.
</para>
<para>You shouldn’t count on the signal arriving precisely when the timer
expires.  In a multiprocessing environment there is typically some
amount of delay involved.
</para>
<para><strong>Portability Note:</strong> The <code>setitimer</code> and <code>getitimer</code>
functions are derived from BSD Unix, while the <code>alarm</code> function is
specified by the POSIX.1 standard.  <code>setitimer</code> is more powerful than
<code>alarm</code>, but <code>alarm</code> is more widely used.
</para>
<hr>
</div>
<sect xml:id="glibc-Sleeping">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Setting-an-Alarm" accesskey="p" rel="prev">Setting an Alarm</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Date-and-Time" accesskey="u" rel="up">Date and Time</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Sleeping-1"></replaceable><h3 class="section">21.7 Sleeping</title>

<para>The function <code>sleep</code> gives a simple way to make the program wait
for a short interval.  If your program doesn’t use signals (except to
terminate), then you can expect <code>sleep</code> to wait reliably throughout
the specified interval.  Otherwise, <code>sleep</code> can return sooner if a
signal arrives; if you want to wait for a given interval regardless of
signals, use <code>select</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Waiting-for-I_002fO">Waiting for Input or Output</a>) and don’t specify
any descriptors to wait for.
</para>
<dl class="def">
<dt xml:id="glibc-index-sleep"><span class="category">Function: </replaceable><span><emphasis>unsigned int</emphasis> <strong>sleep</strong> <emphasis>(unsigned int <var>seconds</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-sleep" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Unsafe sig:SIGCHLD/linux
| AS-Unsafe
| AC-Unsafe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>sleep</code> function waits for <var>seconds</var> seconds or until a signal
is delivered, whichever happens first.
</para>
<para>If <code>sleep</code> returns because the requested interval is over,
it returns a value of zero.  If it returns because of delivery of a
signal, its return value is the remaining time in the sleep interval.
</para>
<para>The <code>sleep</code> function is declared in <filename>unistd.h</filename>.
</para></dd></dl>

<para>Resist the temptation to implement a sleep for a fixed amount of time by
using the return value of <code>sleep</code>, when nonzero, to call
<code>sleep</code> again.  This will work with a certain amount of accuracy as
long as signals arrive infrequently.  But each signal can cause the
eventual wakeup time to be off by an additional second or so.  Suppose a
few signals happen to arrive in rapid succession by bad luck—there is
no limit on how much this could shorten or lengthen the wait.
</para>
<para>Instead, compute the calendar time at which the program should stop
waiting, and keep trying to wait until that calendar time.  This won’t
be off by more than a second.  With just a little more work, you can use
<code>select</code> and make the waiting period quite accurate.  (Of course,
heavy system load can cause additional unavoidable delays—unless the
machine is dedicated to one application, there is no way you can avoid
this.)
</para>
<para>On some systems, <code>sleep</code> can do strange things if your program uses
<code>SIGALRM</code> explicitly.  Even if <code>SIGALRM</code> signals are being
ignored or blocked when <code>sleep</code> is called, <code>sleep</code> might
return prematurely on delivery of a <code>SIGALRM</code> signal.  If you have
established a handler for <code>SIGALRM</code> signals and a <code>SIGALRM</code>
signal is delivered while the process is sleeping, the action taken
might be just to cause <code>sleep</code> to return instead of invoking your
handler.  And, if <code>sleep</code> is interrupted by delivery of a signal
whose handler requests an alarm or alters the handling of <code>SIGALRM</code>,
this handler and <code>sleep</code> will interfere.
</para>
<para>On GNU systems, it is safe to use <code>sleep</code> and <code>SIGALRM</code> in
the same program, because <code>sleep</code> does not work by means of
<code>SIGALRM</code>.
</para>
<dl class="def">
<dt xml:id="glibc-index-nanosleep"><span class="category">Function: </replaceable><span><emphasis>int</emphasis> <strong>nanosleep</strong> <emphasis>(const struct timespec *<var>requested_time</var>, struct timespec *<var>remaining</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-nanosleep" class="copiable-anchor"> ¶</a></replaceable></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>If resolution to seconds is not enough the <code>nanosleep</code> function can
be used.  As the name suggests the sleep interval can be specified in
nanoseconds.  The actual elapsed time of the sleep interval might be
longer since the system rounds the elapsed time you request up to the
next integer multiple of the actual resolution the system can deliver.
</para>
<para><code>*<var>requested_time</var></code> is the elapsed time of the interval you
want to sleep.
</para>
<para>The function returns as <code>*<var>remaining</var></code> the elapsed time left
in the interval for which you requested to sleep.  If the interval
completed without getting interrupted by a signal, this is zero.
</para>
<para><code>struct timespec</code> is described in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Time-Types">Time Types</a>.
</para>
<para>If the function returns because the interval is over the return value is
zero.  If the function returns <em class="math">-1</emphasis> the global variable <code>errno</code>
is set to the following values:
</para>
<dl compact="compact">
<dt><span><code>EINTR</code></replaceable></dt>
<dd><para>The call was interrupted because a signal was delivered to the thread.
If the <var>remaining</var> parameter is not the null pointer the structure
pointed to by <var>remaining</var> is updated to contain the remaining
elapsed time.
</para>
</dd>
<dt><span><code>EINVAL</code></replaceable></dt>
<dd><para>The nanosecond value in the <var>requested_time</var> parameter contains an
illegal value.  Either the value is negative or greater than or equal to
1000 million.
</para></dd>
</dl>

<para>This function is a cancellation point in multi-threaded programs.  This
is a problem if the thread allocates some resources (like memory, file
descriptors, semaphores or whatever) at the time <code>nanosleep</code> is
called.  If the thread gets canceled these resources stay allocated
until the program ends.  To avoid this calls to <code>nanosleep</code> should
be protected using cancellation handlers.
</para>
<para>The <code>nanosleep</code> function is declared in <filename>time.h</filename>.
</para></dd></dl-->
   </sect2>
  </sect1>
 </chapter>
</part>
