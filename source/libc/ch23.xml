<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch23.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-Non-Local-Exits">
  <title>Yerel Olmayan Çıkışlar</title>
  <titleabbrev>İç içe işlev çağrılarının dışına atlamak.</titleabbrev>
 <preliminary>
  <para>
   <indexterm linkend="glibc-cp"><primary>yerel olmayan çıkışlar</primary></indexterm>
   <indexterm linkend="glibc-cp"><primary>uzun atlama</primary></indexterm>
   Kimi zaman derinlemesine iç içe geçmiş bir dizi işlev çağrısı içinde olağan dışı bir durum algılandığında, denetimin daha dış bir düzeye aktarılması ihtiyacı ortaya çıkar. Bu oylumda <function>setjmp</function> ve <function>longjmp</function> çağrılarıyla böyle <wordasword>yerel olmayan çıkışlar</wordasword>ın nasıl yapılacağından bahsedilecektir.
  </para>
 </preliminary>
 <chapter xml:id="glibc-Non-Local-Intro">
  <title>Yerel Olmayan Çıkışlar Hakkında</title>
  <titleabbrev>Bu oluşumlar ne zaman ve nasıl kullanılır.</titleabbrev>
  <para>
   Yerel olmayan çıkışların ne zaman faydalı olabileceğini bir örnekle açıklamaya çalışmak daha iyi olacak. Örneğin, bir ana döngüyle kullanıcıdan komutları alıp bunları çalıştıran etkileşimli bir yazılım olsun. Komutların bir dosyadaki girdilerden okunduğunu ve girdideki komutun işleme sokulmadan önce bazı sözel çözümleme işlemleriyle girdinin incelendiği varsayılsın. Düşük seviyeli bir hata saptandığında, sözel çözümleme, ayrıştırma ve işleme aşamalarının her yapılışında iç içe çağrılarda saptanan hatalarla yerinde uğraşmaktansa hemen "ana döngü"ye dönebilmek iyi olurdu.
  </para>
  <para>
   (Diğer taraftan, bu aşamalardan her çıkışta önemli miktarda temizlik işlemleri yapılması gerekli olabilir--örneğin, dosyaların kapatılması, tamponların ve veri yapılarının serbest bırakılması ve benzerleri--ancak bundan sonra normal dönüş yapmak daha uygun olabilir. Bir yerel olmayan çıkış ara aşamaların ve onlarla ilgili temizlik kodunun atlanmasına neden olacağından her aşamanın kendine özgü temizlik kodu olması da daha uygun olabilir. Bundan başka, temizliği "ana döngü"ye dönmeden önce ya da döndükten sonra yapacak şekilde bir yerel olmayan çıkış da kullanılabilirdi.)
  </para>
  <para>
   Bazı bakımlardan, yerel olmayan çıkış, işlevden çıkış deyimi olan <code>return</code> kullanımına benzer. Fakat <code>return</code> sadece tek bir işlev çağrısından çıkıp denetimi geriye işlev çağrısının yapıldığı noktaya taşırken,  yerel olmayan çıkış denetimin büyük olasılıkla çok iç içe geçmiş pek çok işlev çağrısının dışındaki bir noktaya taşınmasını sağlar.
  </para>
  <para>
   Yerel olmayan çıkışlarda denetimin döndürüleceği nokta <function>setjmp</function> işlevi çağrılarak belirtilebilir. Bu işlev,  <function>setjmp</function> işlev çağrısının göründüğü yürütme ortamı hakkındaki bilgiyi <type>jmp_buf</type> türünde bir nesneye kaydeder. Yazılımın çalışması <function>setjmp</function> çağrısından sonra normal olarak devam eder, fakat daha sonra bu dönüş noktası için kaydedilen <type>jmp_buf</type> türündeki nesne ile yapılan bir <function>longjmp</function> çağrısı ile bu dönüş noktasına bir çıkış yapılırsa, denetim <function>setjmp</function> çağrısının yapıldığı noktaya aktarılmış olur. <function>setjmp</function> çağrısından dönen değer ile sıradan bir dönüş ve <function>longjmp</function> çağrısı tarafından yapılan bir dönüş arasında ayrım yapılabilmesi için <function>setjmp</function> çağrısının bir <code>if</code> deyimi içinde görünmesi gerekir.
  </para>
  <para>
   Bunun yapılışına bir örnek:
  </para>
  <example>
   <screen>#include &lt;setjmp.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

jmp_buf ana_dongu;

void
abort_to_main_loop (int status)
{
  longjmp (ana_dongu, status);
}

int
main (void)
{
  while (1)
    if (setjmp (ana_dongu))
      puts ("Ana döngüye geri dön....");
    else
      do_command ();
}


void
do_command (void)
{
  char buffer[128];
  if (fgets (buffer, 128, stdin) == NULL)
    abort_to_main_loop (-1);
  else
    exit (EXIT_SUCCESS);
}
</screen>
   <para>
    <code>abort_to_main_loop</code> işlevi nereden çağrıldığına bakılmaksızın, denetimin, yazılımın ana döngüsüne geri dönmesine sebep olur.
   </para>
   <para>
    <code>main</code> işlevinin içindeki akış denetimi başta biraz esrarlı görünebilir. Bir normal <function>setjmp</function> çağrısı sıfırla döner, böylece &quot;else&quot; sözcüğündeki kod çalışır. <code>do_command</code> içinde bir yerlerde <code>abort_to_main_loop</code> yapılırsa, hemen ardından <code>main</code> içinde <code>-1</code> değeri döndüren ikinci bir <function>setjmp</function> çağrısı yapılmış gibi görünür.
   </para>
   <para>
    <function>setjmp</function> kullanımı ile ilgili genel kalıp şöyle görünür:
   </para>
   <screen>if (setjmp (<replaceable>tampon</replaceable>))
  /* <replaceable>Erken dönüş sonrası temizlik kodu.</replaceable> */
  …
else
  /* <replaceable>Dönüş noktası ayarlandıktan sonra
     normal olarak çalıştırılacak kod.</replaceable> */
  …
</screen>
  </example>
 </chapter>

 <chapter xml:id="glibc-Non-Local-Details">
  <title>Yerel Olmayan Çıkışların Ayrıntıları</title>
  <titleabbrev>Yerel olmayan çıkışlarla ilgili işlevler.</titleabbrev>
  <para>
   Burada yerel olmayan çıkışları gerçekleştirmekte kullanılan veri yapıları ve işlevler ayrıntılı olarak incelenecektir. Bu oluşumlar &setjmp.h; dosyasında bildirilmiştir.
   <indexterm linkend="glibc-pg"><primary>setjmp.h</primary></indexterm>
  </para>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-jmp_buf"><primary>jmp_buf</primary></indexterm>
   <csproto type="veri türü">
    <csname><function>jmp_buf</function></csname>
   </csproto>
   <header>&setjmp.h;</header>
   <para>
    <code>jmp_buf</code> türündeki nesneler, yerel olmayan bir çıkış tarafından eski durumuna getirilecek durum bilgisini tutar.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-setjmp"><primary>setjmp</primary></indexterm>
   <csproto type="makro">
    <csname><type>int</type><function>setjmp</function></csname>
    <csparam><type>jmp_buf</type><parameter>state</parameter></csparam>
   </csproto>
   <header>&setjmp.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    Normal olarak çağrıldığında, <code>setjmp</code> işlevi yazılımın yürütülme durumu hakkında bilgiyi <parameter>state</parameter> nesnesine kaydeder ve sıfırla döner. Daha sonra yerel olmayan bir çıkış gerçekleştirmek için bu <parameter>state</parameter> durum bilgisi ile bir <function>longjmp</function> çağrısı yapılırsa, <code>setjmp</code> sıfırdan farklı bir değerle döner.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-longjmp"><primary>longjmp</primary></indexterm>
   <csproto type="makro">
    <csname><type>void</type><function>longjmp</function></csname>
    <csparam><type>jmp_buf</type><parameter>state</parameter></csparam>
    <csparam><type>int</type><parameter>value</parameter></csparam>
   </csproto>
   <header>&setjmp.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&asunsafe; &plugin; &corrupt; &lock;<code linkend="glibc-safety-condition">/hurd</code></concept>
    <concept>&acunsafe; &corrupt; &lock;<code linkend="glibc-safety-condition">/hurd</code></concept>
   </conceptlist>
   <para>
    Bu işlev o anki çalışma durumunu <parameter>state</parameter> nesnesinde kayıtlı durum ile değiştirerek yürütmenin dönüş noktasını oluşturan <function>setjmp</function> çağrısından devam etmesini sağlar. <function>setjmp</function> işlevinin dönüş durumu <code>0</code> yerine, <function>longjmp</function> çağrısının <parameter>value</parameter> bağımsız değişkeninde belirtilen değer olur. (Ancak, eğer <parameter>value</parameter> olarak sıfır verilmişse, <function>setjmp</function> işlevi <code>1</code> ile döner).
   </para>
  </csynopsis>
  <para>
   <function>setjmp</function> ve <function>longjmp</function> kullanımında önemli sınırlamalar getirmeyen bazı karanlık noktalar vardır. Bu sınırlamaların çoğu hala vardır, çünkü yerel olmayan çıkışlar C derleyicisinin bir kısmının biraz sihirli olmasını ve dilin diğer parçaları ile tuhaf bir yolla etkileşmesini gerektirir.
  </para>
  <para>
   <function>setjmp</function> işlevi aslında bir işlev tanımı olmaksızın bir makrodur, yani <code>#undef</code> yapılamaz ve adresi alınamaz. Ek olarak, <function>setjmp</function> çağrıları sadece aşağıdaki bağlamla güvenlidir.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Bir seçim ya da yineleme deyiminin sınama ifadesi olarak. (örneğin, <code>if</code>, <code>switch</code> veya <code>while</code>).
    </para>
   </listitem>
   <listitem>
    <para>
      Bir seçim ya da yineleme deyiminin sınama ifadesinde görünen bir eşitlik ya da karşılaştırma işlecinin terimi olarak. Diğer terim bir tamsayı sabit ifadesi olmalıdır.
    </para>
   </listitem>
   <listitem>
    <para>
     Bir seçim ya da yineleme deyiminin sınama ifadesinde görünen bir tek terimli <code>!</code> işlecinin terimi olarak.
    </para>
   </listitem>
   <listitem>
    <para>
     Bir ifade deyimi olarak kendisi tarafından.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Geri dönüş noktaları, sadece bu dönüş noktalarını oluşturan <function>setjmp</function> işlevine çağrı yapan işlevin (örnekteki, <code>main</code> işlevi) çalışması boyunca geçerlidir. Eğer zaten dönmüş bir işlevde kurulu bir dönüş noktasına <function>longjmp</function> yapılırsa bunun sonuçları öngörülemez ve yıkıcı etkileri olabilir.
  </para>
  <para>
   <function>longjmp</function> çağrısında <parameter>value</parameter> bağımsız değişkenine sıfırdan farklı bir değer belirtilmelidir. <function>longjmp</function> işlevinin, <function>setjmp</function> işlevinden dönecek değer olarak, <command>setjmp</command> işlevine sıfır değerini aktarmayı reddetmesi, aslında kaza ile oluşacak bir kötü kullanıma karşı oluşturulmuş bir güvencedir.
  </para>
  <para>
   Bir yerel olmayan çıkış yapıldığında, erişilebilir nesneler genellikle <command>longjmp</command> çağrısı yapıldığı sıradaki değerlerinde kalır. Bunun istisnası, <function>setjmp</function> çağrısını içeren işlevin yerel özdevinimli değişken değerlerinin, <function>setjmp</function> çağrısının belirsizliğinden dolayı değişmesidir. Bunun olmaması için bunlar <type>volatile</type> olarak bildirilebilir.
  </para>
 </chapter>

 <chapter xml:id="glibc-Non-Local-Exits-and-Signals">
  <title>Yerel Olmayan Çıkışlarda Sinyaller</title>
  <titleabbrev>Taşınabilirlik bilgileri.</titleabbrev>
  <para>
   BSD Unix sistemlerinde, <function>setjmp</function> ve <function>longjmp</function> işlevleri <link linkend="glibc-Blocking-Signals">engellenen sinyalleri</link> kaydedebilir ve daha sonra onları eski durumuna getirebilir.  Ancak, POSIX.1 standardı <function>setjmp</function> ve <function>longjmp</function> gerçekleniminin engellenen sinyalleri değiştirmemesini gerektirir ve BSD davranışını elde etmek için ek bir işlev çifti (<function>sigsetjmp</function> ve <function>siglongjmp</function>) sağlar.
  </para>
  <para>
   <function>setjmp</function> ve <function>longjmp</function> işlevlerinin davranışı &glibc;nde <link linkend="glibc-Feature-Test-Macros">özellik sınama makroları</link> ile denetlenir. &glibc;nde varsayılan BSD davranışı değil POSIX.1 davranışıdır.
  </para>
  <para>
   Bu kısımdaki oluşumlar &setjmp.h; başlık dosyasında bildirilmiştir.
   <indexterm linkend="glibc-pg"><primary>setjmp.h</primary></indexterm>
  </para>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-sigjmp_buf"><primary>sigjmp_buf</primary></indexterm>
   <csproto type="veri türü">
    <csname><function>sigjmp_buf</function></csname>
   </csproto>
   <header>&setjmp.h;</header>
   <para>
    Bu veri türü, ayrıca engellenen sinyallerin durum bilgilerinin de kaydedilmesini sağlaması dışında <type>jmp_buf</type> türüne benzer.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-sigsetjmp"><primary>sigsetjmp</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>sigsetjmp</function></csname>
    <csparam><type>sigjmp_buf</type><parameter>state</parameter></csparam>
    <csparam><type>int</type><parameter>savesigs</parameter></csparam>
   </csproto>
   <header>&setjmp.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&asunsafe; &lock;<code linkend="glibc-safety-condition">/hurd</code></concept>
    <concept>&acunsafe; &lock;<code linkend="glibc-safety-condition">/hurd</code></concept>
   </conceptlist>
   <para>
    <code>setjmp</code> işlevine benzer.  Eğer <parameter>savesigs</parameter> bağımsız değişkeninin değeri sıfırdan farklıysa, engellenen sinyaller daha sonraki bir <function>siglongjmp</function> çağrısı ile yerine konmak üzere <parameter>state</parameter> nesnesine kaydedilir.
   </para>
  </csynopsis>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-siglongjmp"><primary>siglongjmp</primary></indexterm>
   <csproto type="işlev">
    <csname><type>void</type><function>siglongjmp</function></csname>
    <csparam><type>sigjmp_buf</type><parameter>state</parameter></csparam>
    <csparam><type>int</type><parameter>value</parameter></csparam>
   </csproto>
   <header>&setjmp.h;</header>
   <conceptlist>
    <concept>&mtsafe;</concept>
    <concept>&asunsafe; &plugin; &corrupt; &lock;<code linkend="glibc-safety-condition">/hurd</code></concept>
    <concept>&acunsafe; &corrupt; &lock;<code linkend="glibc-safety-condition">/hurd</code></concept>
   </conceptlist>
   <para>
    <parameter>state</parameter> bağımsız değişkeninin türü dışında <function>longjmp</function> işlevine benzer. Eğer <function>sigsetjmp</function> çağrısında sıfırdan farklı bir <parameter>savesigs</parameter> bağımsız değişkeni belirtilerek engellenen sinyaller bu <parameter>state</parameter> nesnesine kaydedilmişse, bu çağrı ayrıca onları da eski durumlarına getirir.
   </para>
  </csynopsis>
 </chapter>

 <chapter xml:id="glibc-System-V-contexts">
  <title>Bütünsel Bağlam Denetimi</title>
  <titleabbrev>System V usulü bütünsel bağlam denetimi.</titleabbrev>
  <para>
   Unix standardında var olan, yürütme yolunu denetleyen bir diğer işlev grubu. Bu işlevler bu bölümde buraya kadar anlatılanlardan daha güçlü olup en baştan beri System V yazılım geliştirme arayüzünde bulunmakta olup buradan Unix yazılım geliştirme arayüzüne aktarılmıştır. Markalı Unix gerçeklenimleri dışında bu arayüzlere fazla rastlanmaz. GNU C'nin bulunduğu bütün platformlar ve mimarilerde de yer almazlar. Var olup olmadıkları <code>configure</code> kullanılarak anlaşılabilir.
  </para>
  <para>
   <function>longjmp</function> işlevinin durumunu içeren değişkenler için kullanılan <type>jmp_buf</type> ve <type>sigjmp_buf</type> türlerine benzer şekilde, burada anlatılacak olan arayüzler için de uygun türler tanımlanmıştır. Bu türdeki nesneler daha fazla bilgi içerdiklerinden dolayı daha büyüktür. Bu tür ileride görülecek birkaç yerde daha kullanılmıştır. Bu bölümde anlatılan veri türleri ve işlevlerin tümü &ucontext.h; başlık dosyasında tanımlanmış ve bildirilmiştir.
   <indexterm linkend="glibc-pg"><primary>ucontext.h</primary></indexterm>
  </para>
  <csynopsis>
   <indexterm linkend="glibc-tp" xml:id="glibc-tp-ucontext_t"><primary>ucontext_t</primary></indexterm>
   <csproto type="veri türü">
    <csname><function>ucontext_t</function></csname>
   </csproto>
   <header>&ucontext.h;</header>
   <para>
    <code>ucontext_t</code> yapısı en azından aşağıdaki üyeleri içermelidir:
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <type>ucontext_t&nbsp;*</type><structfield>uc_link</structfield>
     </glossterm>
     <glossdef>
      <para>
       Sonraki bağlam yapısına göstericidir. Eğer mevcut yapıda tanımlanan bağlamdan çıkılmışsa kullanılır.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>sigset_t&nbsp;</type><structfield>uc_sigmask</structfield>
     </glossterm>
     <glossdef>
      <para>
       Bu bağlam kullanıldığında engellenen sinyalleri içerir.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>stack_t&nbsp;</type><structfield>uc_stack</structfield>
     </glossterm>
     <glossdef>
      <para>
       Bu bağlam için kullanılan yığıt. Değeri bir yığıt göstericisi olmak zorunda değildir ve normalde de değildir. Bkz. <xref linkend="glibc-Signal-Stack"/>.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <type>mcontext_t&nbsp;</type><structfield>uc_mcontext</structfield>
     </glossterm>
     <glossdef>
      <para>
       Bu üye sürecin mevcut durumunu içerir. <type>mcontext_t</type> türü de bu başlıkta tanımlanır fakat bu tanımın geçirimsiz olduğu düşünülmelidir. Bu türde herhangi bir bilgi kullanımı, uygulamaları daha az taşınabilir hale getirir.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </csynopsis>
  <para>
   Bu türden nesneler yazılımcı tarafından oluşturulmalıdır. İlklendirme ve değişiklik işlemleri için aşağıdaki işlevlerden biri kullanılır:
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-getcontext"><primary>getcontext</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>getcontext</function></csname>
    <csparam><ptr>ucontext_t</ptr><parameter>ucp</parameter></csparam>
   </csproto>
   <header>&ucontext.h;</header>
   <conceptlist>
    <concept>&mtsafe; &race;<code linkend="glibc-safety-identifier">:ucp</code></concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    <code>getcontext</code> işlevi, kendisini çağıran evre bağlamında <parameter>ucp</parameter> ile gösterilen bağlam nesnesini ilklendirir. Buradaki bağlam, yazmaçlar, sinyal maskesi ve mevcut yığıta ait içerikleri barındırır. İçeriklerin yürütmesi <code>getcontext</code> çağrısı döndüğü anda başlar.
   </para>
   <note><title>Uyumluluk Bilgisi:</title>
    <para>
     İşletim sistemine bağlı olarak, geçerli bağlamın yığıtı hakkındaki bilgiler <parameter>ucp</parameter>'nin <structfield>uc_stack</structfield> alanında olabilir veya bunun yerine <structfield>uc_mcontext</structfield> alanının mimariye özgü alt alanlarında olabilir.
    </para>
   </note>
   <para>
    İşlev başarılıysa <code>0</code> değerini döndürür. Değilse <code>-1</code> döndürür ve <varname>errno</varname> değişkenine uygun değeri atar.
   </para>
  </csynopsis>
  <para>
   <code>getcontext</code> işlevi <function>setjmp</function> işlevine benzer ancak işlevin ilk kez mi döndüğü yoksa ilklendirilmiş bağlam kullanılıp yürütmeye o noktadan mı geri dönüldüğü konusunda bilgi vermez.  Eğer bu ayrımın yapılması gerekliyse, bunu yazılımcı kendisi ortaya çıkarmalıdır. Ancak bunu dikkatlice yapmak gerekir çünkü bağlam içerisinde yazmaç değişkenlerini içeren yazmaçlar bulunabilir. Değişkenleri <type>volatile</type> ile tanımlamak için bu iyi bir durumdur.
  </para>
  <para>
   <parameter>ucp</parameter> bağlam nesnesine bir kez ilk değer atandıktan sonra ya olduğu gibi ya da <code>makecontext</code> işlevi ile değiştirilerek kullanılır. Değişiklik normal olarak eş-yordamları veya benzeri yapıları gerçekleştirmek için yapılır.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-makecontext"><primary>makecontext</primary></indexterm>
   <csproto type="işlev">
    <csname><type>void</type><function>makecontext</function></csname>
    <csparam><ptr>ucontext_t</ptr><parameter>ucp</parameter></csparam>
    <csparam><code>void&nbsp;(*<parameter>func</parameter>)&nbsp;(void)</code></csparam>
    <csparam><type>int</type><parameter>argc</parameter></csparam>
    <varargs/>
   </csproto>
   <header>&ucontext.h;</header>
   <conceptlist>
    <concept>&mtsafe; &race;<code linkend="glibc-safety-identifier">:ucp</code></concept>
    <concept>&assafe;</concept>
    <concept>&acsafe;</concept>
   </conceptlist>
   <para>
    İşleve aktarılan <parameter>ucp</parameter> bağımsız değişkeni <function>getcontext</function> tarafından ilklendirilmiş olmalıdır. Sonuçta elde edilen bağlama geri dönüldüğünde yapılan ilk işlem, <parameter>argc</parameter> tane tamsayı bağımsız değişken ile <parameter>func</parameter> işlevinin çağrılmasıdır. <code>makecontext</code> çağrısında tamsayı bağımsız değişkenler <parameter>argc</parameter> bağımsız değişkeninden sonra verilmelidir.
   </para>
   <para>
    Bu işlev çağrılmadan önce <parameter>ucp</parameter> yapısına ait <structfield>uc_stack</structfield> ve <structfield>uc_link</structfield> üyeleri ilklendirilmelidir. <structfield>uc_stack</structfield> üyesi bu bağlam için kullanılan yığıtı tanımlar. Aynı anda kullanılan bağlamların her biri yığıt için ayrı bellek bölgeleri kullanmalıdır.
   </para>
   <para>
    <parameter>ucp</parameter> tarafından gösterilen nesnenin <structfield>uc_link</structfield> üyesi, <parameter>func</parameter> işlevinin geri dönüş noktasında yürütülecek bağlamı göstermeli veya boş gösterici olmalıdır. Kullanımı hakkında daha fazla bilgi için bkz: <function>setcontext</function>.
   </para>
  </csynopsis>
  <para>
   Yığıt için bellek ayırırken dikkatli olunmalıdır. Günümüzde işlemcilerin çoğunluğu bir bellek bölgesinin çalıştırılabilir kod içerip içeremeyeceği konusunda ayrım yapar. Veri bölütleri ve özdevimli ayırma yapılan bellekte buna izin veren bir yaftalama yoktur. Sonuçta yazılımlar başarısız olur. Bu tür çalıştırılabilir koda bir örnek, iç içe işlev çağrıları için GNU C derleyicisinin ürettiği çağrı dizilimleridir. Yığıtlar için güvenli bir şekilde bellek ayırmak için örneğin özgün evre yığıtı üzerindeki bellek kullanılabilir veya çalıştırılmaya uygun şekilde yaftalanmış bir bellek bölgesi tahsis edilebilir (bkz. <xref linkend="glibc-Memory-mapped-I-O"/>).
  </para>
  <note><title>Uyumluluk Bilgisi</title>
   <para>
    Mevcut Unix standardı yığıt için bellek tahsisi konusunda hemen hemen hiç belirleyici değildir. Bütün gerçeklenimler <structfield>uc_stack</structfield> üyesinin kullanımında anlaşmıştır ama <type>stack_t</type> türünden üyelerde saklanan değerler konusunu belirsiz bırakmıştır. &glibc; ve diğer Unix gerçeklenimlerinin çoğunluğunda <structfield>uc_stack</structfield> üyesinin <structfield>ss_sp</structfield> değeri, yığıt için ayrılmış bellek bölgesinin tabanını göstermelir ve <structfield>ss_size</structfield> değeri de bu bölgenin büyüklüğünü içermelidir. Bazı gerçeklenimlerde ise <structfield>ss_sp</structfield> değeri yığıt göstericisinin değerini içerir (yığıtın gelişme yönüne göre bu değer farklıdır). Bu farklılık <function>makecontext</function> işlevinin kullanımını zorlaştırır ve derleme sırasında platformn bilgisinin elde edilip kullanılmasını zorunlu kılar.
   </para>
  </note>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-setcontext"><primary>setcontext</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>setcontext</function></csname>
    <csparam><ptr>const&nbsp;ucontext_t</ptr><parameter>ucp</parameter></csparam>
   </csproto>
   <header>&ucontext.h;</header>
   <conceptlist>
    <concept>&mtsafe; &race;<code linkend="glibc-safety-identifier">:ucp</code></concept>
    <concept>&asunsafe; &corrupt;</concept>
    <concept>&acunsafe; &corrupt;</concept>
   </conceptlist>
   <para>
    <code>setcontext</code> işlevi, <parameter>ucp</parameter> tarafından tanımlanmış bağlamı yeniden geçerli kılar. Bağlamda değişiklik yapılmaz ve istenen sıklıkta yeniden kullanılabilir.
   </para>
   <para>
    Eğer bağlam <function>getcontext</function> ile oluşturulmuşsa yürütme sonunda yazmaçlar, <function>getcontext</function> sanki o an geri dönüş yapmış gibi aynı değerleri içerir.
   </para>
   <para>
    Eğer <function>makecontext</function>'in çağrılmasıyla bağlamda değişiklik yapılmışsa <function>makecontext</function>'in çağrıldığı işlevle yürütmeye devam edilir ve bu işleve aynı çağrı sırasında verilen bağımsız değişkenler aktarılır. Bu işlev geri dönüş yaptığında <function>makecontext</function> çağrılırken verilen bağlam yapısının <structfield>uc_link</structfield> üyesi tarafından gösterilen bağlamla yürütmeye devam edilir. Eğer <structfield>uc_link</structfield> boş gösterici ise, bu durumda uygulama sonlanır.
   </para>
   <para>
    Bağlam yığıt hakkında bilgi içerdiğinden aynı bağlamı aynı anda iki evre kullanmamalıdır. Aksi takdirde, sonuç çoğu durumda felaket olurdu.
   </para>
   <para>
    <code>setcontext</code> işlevi bir hata oluşmadıkça dönmeyecekir, hata oluşmuşsa <code>-1</code> değeri ile döner.
   </para>
  </csynopsis>
  <para>
   <code>setcontext</code> işlevi mevcut bağlamı basitçe <parameter>ucp</parameter> bağımsız değişkenini tanımlayarak değiştirir. Mevcut bağlamın korunmasını gerektiren durumlar da olmasına rağmen bu çoğunlukla kullanışlıdır.
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-swapcontext"><primary>swapcontext</primary></indexterm>
   <csproto type="işlev">
    <csname><type>int</type><function>swapcontext</function></csname>
    <csparam><type>ucontext_t&nbsp;*restrict</type><parameter>oucp</parameter></csparam>
    <csparam><type>const&nbsp;ucontext_t&nbsp;*restrict</type><parameter>ucp</parameter></csparam>
   </csproto>
   <header>&ucontext.h;</header>
   <conceptlist>
    <concept>&mtsafe; &race;<code linkend="glibc-safety-identifier">:oucp</code> &race;<code linkend="glibc-safety-identifier">:ucp</code></concept>
    <concept>&asunsafe; &corrupt;</concept>
    <concept>&acunsafe; &corrupt;</concept>
   </conceptlist>
   <para>
    <code>swapcontext</code> işlevi <function>setcontext</function> işlevine benzer, fakat geçerli bağlam olan <parameter>ucp</parameter> bağlamını bir <function>getcontext</function> çağrısından dönmüş olan <parameter>oucp</parameter> ile değiştirir. <code>swapcontext</code> çağrısında sonra yürütme bu bağlamla devam eder.
   </para>
   <para>
    Eğer <code>swapcontext</code> başarılıysa işlev dönmez. <parameter>oucp</parameter> bağlamı evvelki bir <function>makecontext</function> çağrısı ile değişiklik yapılmaksızın kullanışmışsa  dönüş değeri <code>0</code>'dır. Eğer işlev başarısız olmuşsa <code>-1</code> döner ve <varname>errno</varname> değişkenine hata durumu atanır.
   </para>
  </csynopsis>
  <example xml:id="glibc-Example-for-SVID-Context-Handling">
   <title>SVID Bağlam Denetimi Örneği</title>
   <para>
    Bağlam işleme işlevlerini kullanmanın en kolay yolu <function>setjmp</function> ve <function>longjmp</function> işlevlerinin yerine bunları kullanmaktır. Bağlam çoğu platformda daha az sürprizle sonuçlanan daha fazla bilgi içermesine rağmen bu işlevlerin kullanımı daha masraflıdır (daha az taşınabilir olması cabası).
   </para>
   <screen>int
random_search (int n, int (*fp) (int, ucontext_t *))
{
  volatile int cnt = 0;
  ucontext_t uc;

  /* <replaceable>Geçerli bağlamı güvene alalım.</replaceable>  */
  if (getcontext (&amp;uc) &lt; 0)
    return -1;

  /* <replaceable>n deneme yapılmamışsa, tekrar dene.</replaceable>  */
  if (cnt++ &lt; n)
    /* <replaceable>İşlevi yeni bir rastgele sayı
       ve bağlamla çağır.</replaceable>.  */
    if (fp (rand (), &amp;uc) != 0)
      /* <replaceable>Arayan bulur.</replaceable>  */
      return 1;

  /* <replaceable>Yokmuş.</replaceable>  */
  return 0;
}
</screen>
   <para>
    Bağlamların böyle bir yolla kullanımı olağan dışılıkların elde edilme benzeşimini etkinleştirir. <replaceable>fp</replaceable> bağımsız değişkeni ile aktarılan arama işlevleri çok büyük, iç içe ve çağrıcıya aktarılan bir hata değeri ile işlevin bırakılması onu karmaşıklaştıracağından (veya en azından biraz daha kod gerekeceğinden), çok karmaşık olabilir. Bağlamı kullanarak arama işlevini tek bir adımda bırakmak ve ayrıca belirgin biçimde daha hızlı olabilen bir yan etkiyle aramanın yeniden başlatılmasına izin vermek mümkündür.
   </para>
   <para>
    Geçici olarak farklı bir yürütme noktasına geçmek ve sonra yürütmenin durduğu yerden devam etmek gibi şeylerin <function>setjmp</function> ve <function>longjmp</function> ile gerçeklenmesi daha zordur.
   </para>
   <screen>
#include &lt;signal.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ucontext.h&gt;
#include &lt;sys/time.h&gt;

/* <replaceable>Bunu sinyal eylemci atayacak.</replaceable> */
static volatile int expired;

/* <replaceable>Bağlamlar.</replaceable> */
static ucontext_t uc[3];

/* <replaceable>Belli sayıda geçiş yapılacak.</replaceable> */
static int switches;


/* <replaceable>Bu işi yapan işlev. Sadece bir iskelet,
   gerçek kod sonra yerleştirilecek</replaceable> */
static void
f (int n)
{
  int m = 0;
  while (1)
    {
      /* <replaceable>İşin yapıldığı yer.</replaceable> */
      if (++m % 100 == 0)
        {
          putchar ('.');
          fflush (stdout);
        }

      /* <replaceable>Değişkenin zaman aşımına uğrayıp uğramadığına
         düzenli olarak bakmak lazım.</replaceable> */
      if (expired)
        {
          /* <replaceable>Kodun uzun uzadıya çalışmasını istenmiyor.</replaceable> */
          if (++switches == 20)
            return;

          printf (\n%d. bağlamdan %d. bağlama geçiliyor\n", n, 3 - n);
          expired = 0;
          /* <replaceable>Diğer bağlama geçip şimdikini kaydet.</replaceable> */
          swapcontext (&amp;uc[n], &amp;uc[3 - n]);
        }
    }
}

/* <replaceable>Sadece değişkene değer atayan bir sinyal eylemci bu.</replaceable> */
void
handler (int signal)
{
  expired = 1;
}


int
main (void)
{
  struct sigaction sa;
  struct itimerval it;
  char st1[8192];
  char st2[8192];

  /* <replaceable>Zamanlayıcının kullanacağı veri yapılarını ilklendir.</replaceable> */
  sa.sa_flags = SA_RESTART;
  sigfillset (&amp;sa.sa_mask);
  sa.sa_handler = handler;
  it.it_interval.tv_sec = 0;
  it.it_interval.tv_usec = 1;
  it.it_value = it.it_interval;

  /* <replaceable>Zamanlayıcıyı kur ve çalışılacak bağlamı al.</replaceable> */
  if (sigaction (SIGPROF, &amp;sa, NULL) &lt; 0
      || setitimer (ITIMER_PROF, &amp;it, NULL) &lt; 0
      || getcontext (&amp;uc[1]) == -1
      || getcontext (&amp;uc[2]) == -1)
    abort ();

  /* <replaceable>Bağlamı, f işlevinin 1 bağımsız değişkeni ile
     çağrılmasına sebep olan ayrı bir yığıt ile oluştur.
     uc_link'in, işlev döndüğü anda yazılımın sonlanmasına
     sebep olan ana bağlamı gösterdiğine dikkat et.</replaceable> */
  uc[1].uc_link = &amp;uc[0];
  uc[1].uc_stack.ss_sp = st1;
  uc[1].uc_stack.ss_size = sizeof st1;
  makecontext (&amp;uc[1], (void (*) (void)) f, 1, 1);

  /* <replaceable>Aynı ama f'ye bağımsız değişken olarak 2 aktarılıyor.</replaceable> */
  uc[2].uc_link = &amp;uc[0];
  uc[2].uc_stack.ss_sp = st2;
  uc[2].uc_stack.ss_size = sizeof st2;
  makecontext (&amp;uc[2], (void (*) (void)) f, 1, 2);

  /* <replaceable>İşbaşı!</replaceable> */
  swapcontext (&amp;uc[0], &amp;uc[1]);
  putchar ('\n');

  return 0;
}
</screen>
   <para>
    Bu kod, bağlam işlevlerinin eş-yordamları veya çok evreli işbirliğini gerçekleştirmekte kullanılabilirliğine bir örnektir. Burada yapılan <function>swapcontext</function> kullanarak yürütmenin her seferinde farklı bir bağlamdan devam ettirilmesidir. Sinyal eylemci içinden ne <function>setcontext</function> ne de <function>swapcontext</function> çağrısı yapıldığından, bağlam değiştirme doğrudan sinyal eylemci tarafından yapılmamaktadır. Bunun yerine sinyal eylemci içinde bir değişkene değer atanıp, işlev içinden bu değişkene bakarak bu işlem gerçekleştirilmektedir. <function>swapcontext</function> geçerli bağlamı kaydettiğinden kod içinde farklı zamanlama noktaları olabilir. Yürütme daima kaldığı yerden devam edecektir.
   </para>
  </example>
 </chapter>
</part>
