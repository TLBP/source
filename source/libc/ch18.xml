<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch18.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-Syslog">
  <title>Syslog</title>
  <titleabbrev>Sistem günlük ve ileti yönetimi.</titleabbrev>
 <preliminary>
  <para>
   Bu oylumda sistem yönetimini ilgilendiren iletilerin günlüklenmesi ve çıktılanması ile ilgili oluşumlardan bahsedilecektir. Bu oylumda bahsedilen oluşumlar yazılımların kullanıcılarına ileti çıktılaması ve özel günlükler tutması ile ilgili hiçbir şey yapmazlar (Bunları yapan oluşumlar <xref linkend="glibc-I-O-on-Streams"/> bölümünde açıklanmıştır).
  </para>
  <para>
   Çoğu sistemde &quot;Syslog&quot; diye bilinen bir oluşum vardır; yazılımların sistem yöneticisini ilgilendiren iletileri teslim edeceği ve bu iletileri aktarmak için konsola çıktılama, belli bir şahsa postalama ya da ileride başvurulmak üzere bir günlük dosyasına kaydetme gibi çeşitli yolların yapılandırılabileceği bir oluşumdur.
  </para>
  <para>
   Yazılımlar bu oylumdaki oluşumları böyle iletileri teslim etmek için kullanır.
  </para>
 </preliminary>
 <chapter xml:id="glibc-Overview-of-Syslog">
  <title>Syslog'a Bir Bakış</title>
  <titleabbrev>Bir sistemin Syslog oluşumuna bir bakış.</titleabbrev>
  <para>
   Sistem yöneticileri her sistemin içindeki bir yığın alt sistemden ve bazı başka sistemlerden gelen farklı çeşitte iletiyle uğraşmak zorunda kalır. Örneğin, bir FTP sunucu aldığı her bağlantıyı raporlayabilir. Çekirdek bir disk sürücüsündeki donanımsal hataları raporlayabilir. Bir DNS sunucusu düzenli aralıklarla istatistikleri raporlayabilir.
  </para>
  <para>
   Bu iletilerden bazıları bir sistem yöneticisinin dikkatinin hemen çekilmesini gerektirebilir. Ve o sadece herhangi bir sistem yöneticisi olmayabilir - belli ileti çeşitleri ile uğraşan belli sistem yöneticileri olabilir. Diğer iletilerin sadece ileride gerektiğinde bakılmak üzere sadece kaydedilmesi gerekebilir. Kalan diğerlerinin aylık raporlar üreten kendiliğinden çalışan süreçler tarafından çıkarılan bilgiler olması gerekebilir.
  </para>
  <para>
   Bu iletilerle uğraşmak için çoğu Unix sisteminde &quot;Syslog&quot; diye bilinen bir oluşum vardır ve genellikle &quot;Syslogd&quot; diye bilinen artalan süreci olarak çalışır. Syslogd iletiler için, <filename>/dev/log</filename> isminde bir Unix alan soketini dinler. İletilerdeki sınıflama bilgisine ve yapılandırma dosyasına (genellikle <filename>/etc/syslog.conf</filename>) bağlı olarak Syslogd onları çeşitli yollara yönlendirir. Çok bilinen bazı yöntemler:
  </para>
  <simplelist>
   <member>Sistem konsoluna yazma
   </member><member>Belli bir kullanıcıya ileti postalama
   </member><member>Bir günlük dosyasına yazma
   </member><member>Başka bir artalan sürecine aktarma
   </member><member>İptal etme
   </member>
  </simplelist>
  <para>
   Syslogd ayrıca başka sistemlerdeki iletileri de işleyebilir. İletiler için   <function>syslog</function> hem UDP portunu hem de yerel soketi dinler.
  </para>
  <para>
   Syslog çekirdeğin kendisinden gelen iletileri de işleyebilir. Fakat çekirdek <filename>/dev/log</filename>'a yazmaz; onun yerine başka bir artalan süreci (kimi zaman &quot;Klogd&quot; denir) çekirdekten iletileri çıkarır ve  onları herhangi bir başka sürecin yaptığı gibi Syslog'a aktarır (ve iletilerin çekirdekten geldiğini belirtir).
  </para>
  <para>
   Syslog çekirdeğin Syslogd ve Klogd çalıştırılmadan önce çıktıladığı iletileri de işleyebilir. Örneğin Linux çekirdeği başlatma iletilerini bir çekirdek ileti zincirinde saklar ve daha sonra Klogd başlatıldığında onlar normal olarak hala orada duruyor olur. Klogd başlatıldığında Syslogd'nin de başlatılmış olduğu varsayımıyla ileti zincirindeki herşeyi ona aktarır.
  </para>
  <para>
   Düzenlemek amacıyla iletilerin sınıflanması için, Syslogd her sürecin bir iletiyi teslim ederken iki parçalı sınıflama bilgisini iletiyle birlikte sağlamasını gerektirir:
  </para>
  <variablelist>
   <varlistentry>
    <term>oluşum</term>
    <listitem>
     <para>
      İletiyi kimin teslim ettiğini belirtir. Tanımlı çok az sayıda oluşum vardır. Çekirdek, posta altsistemi ve FTP sunucusu tanınan oluşumlara birer örnektir. Tam bir liste için <xref linkend="glibc-syslog-vsyslog"/> bölümüne bakınız. Bunların tamamen keyfi bir sınıflama olduğunu unutulmamalıdır. "Posta altsistemi" denince sistem yöneticisinin ona verdiğinden daha fazla bir anlam içermez.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>öncelik</term>
    <listitem>
     <para>
      Bu teslim edilen iletinin ne kadar önemli olduğunu gösterir. Tanımlı önceliklere örnekler: hata ayıklama, bilgilendirme, uyarı, ölümcül. Tam bir liste için  <xref linkend="glibc-syslog-vsyslog"/> bölümüne bakılabilir.  Önceliklerin tanımlı bir sıralamasının dışında bu önceliklerin anlamları sistem yöneticisi tarafından belirlenir.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   Bir &quot;oluşum/öncelik&quot; çifti hem oluşumu hem de önceliği belirten bir sayıdır.
  </para>
  <warning>
   <para>
    Bu terminoloji evrensel değildir. Bazıları önceliğe "seviye", öncelikle oluşumun oluşturduğu birleşime "öncelik" der. Linux çekirdeğinde ise bir iletinin seviyesi hem Syslog önceliği hem de Syslog oluşum/öncelik çiftine karşılık gelir (oluşum kodu çekirdek için sıfır olduğundan her ikisi de aslında aynı değere sahip olur).
   </para>
  </warning>
  <para>
   &glibc; iletileri Syslog'a teslim etmek için işlevler içerir. Bu işlemi <filename>/dev/log</filename> soketine yazarak yapar. Bkz. <xref linkend="glibc-Submitting-Syslog-Messages"/>.
  </para>
  <para>
   &glibc; işlevleri iletileri sadece aynı sistemdeki Syslog oluşumuna teslim eder. Syslog iletilerini başka bir sistemdeki Syslog oluşumuna teslim etmek için sistemdeki <function>syslog</function> UDP portuna bir UDP ver katarı yazan soket G/Ç işlevleri kullanılır. Bkz. <xref linkend="glibc-Sockets"/>.
  </para>
 </chapter>
 <chapter xml:id="glibc-Submitting-Syslog-Messages" userlevel="notoc">
  <?dbhtml stop-chunking?>
  <title>Syslog İletilerinin Teslim Edilmesi</title>
  <titleabbrev>Syslog'a iletileri teslim eden işlevler.</titleabbrev>
  <para>
   &glibc; iletileri Syslog'a teslim etmek için işlevler içerir:
  </para>
  <para>
   Bu işlevler iletileri sadece aynı sistemdeki Syslog oluşumuna teslim eder. Syslog iletilerini başka bir sistemdeki Syslog oluşumuna teslim etmek için sistemdeki <function>syslog</function> UDP portuna bir UDP veri katarı yazan soket G/Ç işlevleri kullanılır. Bkz. <xref linkend="glibc-Sockets"/>.
  </para>
  <sect1 xml:id="glibc-openlog">
   <title>openlog</title>
   <titleabbrev>Syslog'a bağlantı açılması.</titleabbrev>
   <para>
    Bu bölümdeki simgeler &syslog.h; başlık dosyasında bildirilmiştir.
    <indexterm linkend="glibc-pg"><primary>syslog.h</primary></indexterm>
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-openlog"><primary>openlog</primary></indexterm>
    <csproto type="işlev">
     <csname><type>void</type><function>openlog</function></csname>
     <csparam><ptr>const&#160;char</ptr><parameter>ident</parameter></csparam>
     <csparam><type>int</type><parameter>option</parameter></csparam>
     <csparam><type>int</type><parameter>facility</parameter></csparam>
    </csproto>
     <header>&syslog.h;</header>
    <conceptlist>
     <concept>&mtsafe;</concept>
     <concept>&asunsafe; &lock;</concept>
     <concept>&acunsafe; &lock; &fd;</concept>
    </conceptlist>
    <para>
     <code>openlog</code> işlevi iletileri teslim etmek için Syslog'a bir bağlantı açar ya da yeniden açar.
    </para>
    <para>
     <parameter>ident</parameter> ileride yapılacak <function>syslog</function> çağrılarında iletinin başına eklenecek keyfi bir kimlik dizgesidir. Bu iletinin kaynağını belirtmek için düşünülmüştür ve uzlaşımsal olarak iletileri teslim edecek yazılımın ismidir.
    </para>
    <para>
     <parameter>ident</parameter> <varname>NULL</varname> ise ya da <code>openlog</code> çağrısı yapılmazsa, varsayılan kimlik dizgesi <code>argv[0]</code>'dan alınan yazılım ismi olacaktır.
    </para>
    <para>
     <parameter>ident</parameter> dizge göstericisinin Syslog yordamları tarafından dahili olarak saklanacağı unutulmamalıdır. <parameter>ident</parameter> ile gösterilen bellek serbest bırakılmamalıdır. Etki alanından çıkmak değişkenin yaşamının sonu demek olduğundan dizgeyi bir özdevinimli değişkende saklamak ayrıca tehlikelidir de. <parameter>ident</parameter> dizgesi değiştirilmek istenirse <code>openlog</code> işlevi tekrar çağrılmalıdır; <parameter>ident</parameter> ile gösterilen dizgeye yazma işlemi evresel olarak güvenilir değildir.
    </para>
    <para>
     Syslog yordamlarının <parameter>ident</parameter> başvurusunu bırakması sağlanabilir ve <function>closelog</function> çağrısı ile varsayılan dizgeye (<code>argv[0]</code>'dan alınan yazılım ismi) geri dönülebilir: Bkz. <xref linkend="glibc-closelog"/>.
    </para>
    <para>
     Kodun, yüklenebilen bir paylaşımlı kütüphane (örn, bir PAM modülü) için yazılması durumunda <code>openlog</code> kullanılıyorsa, kütüphaneyi yüklenmemiş duruma getirmeden önce bir noktada <function>closelog</function> çağrısı yapılmalıdır. Bir örnek:
    </para>
    <example>
     <screen>#include &lt;syslog.h&gt;

void
shared_library_function (void)
{
  openlog ("mylibrary", option, priority);

  syslog (LOG_INFO, "shared library has been invoked");

  closelog ();
}
</screen>
     <para>
      <function>closelog</function> çağrılmaksızın kütüphane yüklenmemiş duruma getirilip <code>"mylibrary"</code> dizgesini içeren bellek eşlenmemiş duruma getirilirse, kütüphaneyi kullanan yazılım tarafından ileride yapılacak bir <function>syslog</function> çağrısı çökmeye sebep olabilir. Bu BSD syslog arayüzünün bir sınırlamasıdır.
     </para>
    </example>
    <para>
     <code>openlog</code> işlevi <parameter>option</parameter> değerine bağlı olarak <filename>/dev/log</filename> soketini açabilir de açmayabilir de. Eğer açması gerekiyorsa,açmayı dener ve bir UDP soketi olarak ona bağlanır. Soket, &quot;Close on Exec&quot; özniteliğine sahiptir, bu bakımdan eğer süreç bir <function>exec</function> çağrısı yaparsa çekirdek onu kapatacaktır.
    </para>
    <para>
     <code>openlog</code> kullanımı zorunlu değildir. <code>openlog</code> çağrısı yapmaksızın bir <function>syslog</function> çağrısı yapılırsa, <parameter>ident</parameter> ve <parameter>option</parameter> için varsayılan değerler kullanılarak bağlantı anında açılır.
    </para>
    <para>
     <parameter>option</parameter> bir bit dizgesidir. Bitler aşağıdaki tek bitlik maskelerle tanımlanmıştır:
    </para>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-LOG_PERROR"><primary>LOG_PERROR</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_PERROR</function></csname>
     </csproto>
     <para>
      Bit varsa, <code>openlog</code> bağlantıyı kurar, böylece bu bağlantı üzerinden yapılan herhangi bir <function>syslog</function> çağrısı iletiyi Syslog'a teslim ederken ek olarak iletiyi sürecin standart hata akımına da yazar. Bit yoksa, <function>syslog</function> iletiyi standart hataya yazmaz.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-LOG_CONS"><primary>LOG_CONS</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_CONS</function></csname>
     </csproto>
     <para>
      Bit varsa, <code>openlog</code> bağlantıyı kurar, böylece bu bağlantı üzerinden yapılan herhangi bir <function>syslog</function> çağrısında bir ileti Syslog'a teslim edilemezse ileti sistem konsoluna yazılır. Bit yoksa, <function>syslog</function> çağrısı sistem konsoluna yazmaz (ama şüphesiz çağrının geldiği konsola yazabilir).
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-LOG_PID"><primary>LOG_PID</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_PID</function></csname>
     </csproto>
     <para>
      Bit varsa, <code>openlog</code> bağlantıyı kurar, böylece bu bağlantı üzerinden yapılan herhangi bir <function>syslog</function> çağrısı, çağrıldığı sürecin süreç kimliğini (PID) iletiye yerleştirir. Bit yoksa, <code>openlog</code> PID'i yerleştirmez.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-LOG_NDELAY"><primary>LOG_NDELAY</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_NDELAY</function></csname>
     </csproto>
     <para>
      Bit varsa, <code>openlog</code>, <filename>/dev/log</filename> soketini açar ve bağlanır. Bit yoksa, ileride yapılacak bir <function>syslog</function> çağrısı soketi açmalı ve bağlanmalıdır.
     </para>
     <note><title>Taşınabilirlik Bilgisi</title>
      <para>
       Erken dönemdeki sistemlerde, bu bit tamamen ters çalışırdı.
      </para>
     </note>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vr-LOG_ODELAY"><primary>LOG_ODELAY</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_ODELAY</function></csname>
     </csproto>
     <para>
      Bu bit hiçbir şey yapmaz. Sadece geriye uyumluluk adına vardır.
     </para>
    </csynopsis>
    <para>
     <parameter>option</parameter> içindeki diğer bitler birse sonuç belirsizdir.
    </para>
    <para>
     <parameter>facility</parameter> bu bağlantı için varsayılan oluşum kodudur. Bu bağlantı üzerinden varsayılan oluşum belirten bir <function>syslog</function> çağrısı, iletinin bu oluşumla ilişkilendirilmesine sebep olur. Olası değerler <function>syslog</function> işlevinin açıklamasında bulunabilir. <command>LOG_USER</command> anlamına gelen sıfır değeri varsayılan değerdir.
    </para>
    <para>
     <code>openlog</code> çağrısı yapıldığında, eğer bir Syslog bağlantısı zaten açıksa, <code>openlog</code> bağlantıyı "yeniden" açar. Yeniden açma varsayılan oluşum kodu için sıfır belirtilmesi dışında açma gibidir, varsayılan kod basitçe değişmeden kalır ve <varname>LOG_NDELAY</varname> belirtilmişse, soket zaten açık ve bağlı olduğundan <code>openlog</code> onu olduğu gibi bırakır.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-syslog-vsyslog">
   <title>syslog, vsyslog</title>
  <titleabbrev>İletinin Syslog'a teslim edilmesi.</titleabbrev>
  <para>
   Bu bölümdeki simgeler &syslog.h; başkık dosyasında bildirilmiştir.
   <indexterm linkend="glibc-pg"><primary>syslog.h</primary></indexterm>
  </para>
  <csynopsis>
   <indexterm linkend="glibc-fn" xml:id="glibc-fn-syslog"><primary>syslog</primary></indexterm>
   <csproto type="işlev">
    <csname><type>void</type><function>syslog</function></csname>
    <csparam><type>int</type><parameter>facility_priority</parameter></csparam>
    <csparam><ptr>const&#160;char</ptr><parameter>format</parameter></csparam>
   </csproto>
   <header>&syslog.h;</header>
   <conceptlist>
    <concept>&mtsafe; &env; &locale;</concept>
    <concept>&asunsafe; &corrupt; &heap; &lock; &dlopen;</concept>
    <concept>&acunsafe; &corrupt; &lock; &mem; &fd;</concept>
   </conceptlist>
   <para>
    <code>syslog</code> bir iletiyi Syslog'a teslim eder. Bunu Unix alan soketi olan <filename>/dev/log</filename>'a yazarak yapar.
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-LOG_MAKEPRI"><primary>LOG_MAKEPRI</primary></indexterm>
   <csproto type="makro">
    <csname><function>LOG_MAKEPRI</function></csname>
    <csparam><parameter>facility</parameter></csparam>
    <csparam><parameter>priority</parameter></csparam>
   </csproto>
   <header>&syslog.h;</header>
   <para>
    <code>syslog</code> iletiyi <parameter>facility_priority</parameter> ile belirtilen oluşum ve öncelikle teslim eder. Tek bir oluşum ve tek bir öncelik kodundan <parameter>facility_priority</parameter> değeri <code>LOG_MAKEPRI</code> makrosu ile şöyle üretilir (Makro iki değeri VEYAlar):
    </para>
    <screen>LOG_MAKEPRI(LOG_USER, LOG_WARNING)</screen>
    <para>
     <parameter>facility</parameter> için olası değerler (makrolar):
    </para>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_USER"><primary>LOG_USER</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_USER</function></csname>
     </csproto>
     <para>
      Çeşitli kullanıcı süreci
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_MAIL"><primary>LOG_MAIL</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_MAIL</function></csname>
     </csproto>
     <para>
      Posta
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_DAEMON"><primary>LOG_DAEMON</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_DAEMON</function></csname>
     </csproto>
     <para>
      Çeşitli sistem artalan süreci
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_AUTH"><primary>LOG_AUTH</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_AUTH</function></csname>
     </csproto>
     <para>
      Güvenlik (yetkilendirme)
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_SYSLOG"><primary>LOG_SYSLOG</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_SYSLOG</function></csname>
     </csproto>
     <para>
      Syslog
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LPR"><primary>LOG_LPR</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LPR</function></csname>
     </csproto>
     <para>
      Merkezi yazıcı
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_NEWS"><primary>LOG_NEWS</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_NEWS</function></csname>
     </csproto>
     <para>
      Ağ haber grupları (örn, Usenet)
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_UUCP"><primary>LOG_UUCP</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_UUCP</function></csname>
     </csproto>
     <para>
      UUCP
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_CRON"><primary>LOG_CRON</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_CRON</function></csname>
     </csproto>
     <para>
      Cron ve At
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_AUTHPRIV"><primary>LOG_AUTHPRIV</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_AUTHPRIV</function></csname>
     </csproto>
     <para>
      Özel güvenlik (yetkilendirme)
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_FTP"><primary>LOG_FTP</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_FTP</function></csname>
     </csproto>
     <para>
      FTP Sunucusu
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL0"><primary>LOG_LOCAL0</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL0</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL1"><primary>LOG_LOCAL1</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL1</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL2"><primary>LOG_LOCAL2</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL2</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL3"><primary>LOG_LOCAL3</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL3</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL4"><primary>LOG_LOCAL4</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL4</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL5"><primary>LOG_LOCAL5</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL5</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL6"><primary>LOG_LOCAL6</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL6</function></csname>
     </csproto>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_LOCAL7"><primary>LOG_LOCAL7</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_LOCAL7</function></csname>
     </csproto>
     <para>
      Yerel olarak tanımlı
     </para>
    </csynopsis>
    <para>
     Bunların dışındaki <parameter>facility</parameter> değerleri için sonuç tanımsızdır.
    </para>
    <note>
     <para>
      <code>syslog</code> başka bir oluşum kodu daha tanır: bu çekirdektir. Ama onun oluşum kodu bu işlevlerle belirtilemez. Denenirse, <code>syslog</code> varsaydığı oluşum isteği yapılmış gibi davranır. Fakat bunun hiçbir şekilde denenmemesi gerekir, çünkü çekirdek &glibc;ni kullanan bir yazılım değildir.
     </para>
    </note>
    <para>
     <parameter>facility_priority</parameter> olarak tek bir öncelik kodu belirtilebilir. Bu durumda, <code>syslog</code> çağrısı Syslog bağlantısı açıldığında varsaydığı oluşum bağlantısının kurulduğunu varsayar. Bkz.  <xref linkend="glibc-Syslog-Example"/>.
    </para>
    <para>
     <parameter>priority</parameter> için olası değerler (makrolar):
    </para>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_EMERG"><primary>LOG_EMERG</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_EMERG</function></csname>
     </csproto>
     <para>
      İleti, sistemin kullanılamaz olduğunu söylüyor.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_ALERT"><primary>LOG_ALERT</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_ALERT</function></csname>
     </csproto>
     <para>
      İletideki işlem hemen yerine getirilmelidir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_CRIT"><primary>LOG_CRIT</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_CRIT</function></csname>
     </csproto>
     <para>
      İleti ciddi bir durum belirtiyor.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_ERR"><primary>LOG_ERR</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_ERR</function></csname>
     </csproto>
     <para>
      İleti bir hata açıklıyor.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_WARNING"><primary>LOG_WARNING</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_WARNING</function></csname>
     </csproto>
     <para>
      İleti bir uyarı açıklıyor.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_NOTICE"><primary>LOG_NOTICE</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_NOTICE</function></csname>
     </csproto>
     <para>
      İleti normal ama önemli bir olayı açıklıyor.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_INFO"><primary>LOG_INFO</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_INFO</function></csname>
     </csproto>
     <para>
      İleti tamamen bilgilendiricidir.
     </para>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-vr" xml:id="glibc-vt-LOG_DEBUG"><primary>LOG_DEBUG</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_DEBUG</function></csname>
     </csproto>
     <para>
      İleti yalnızca hata ayıklama amaçlıdır.
     </para>
    </csynopsis>
    <para>
     Bunların dışındaki <parameter>priority</parameter> değerleri için sonuç tanımsızdır.
    </para>
   </csynopsis>
   <para>
    Süreç açık bir Syslog bağlantısına sahip değilse (yani <function>openlog</function> çağrısı yapılmamışsa), <code>syslog</code> işlevi <function>openlog</function>  işlevinin yaptığı gibi hemen bağlantıyı açar. Bağlantıyı açarken, aksi sadece bir <function>openlog</function>  çağrısı ile belirtilebilecek bilgi için şu varsayılanları kullanır:
   </para>
   <simplelist>
    <member>Varsayılan <parameter>ident</parameter> dizgesi yazılımın ismidir.
    </member><member>Varsayılan <parameter>facility</parameter> <command>LOG_USER</command>'dır.
    </member><member><parameter>option</parameter> ile belirtilen bitlerin hepsi sıfırdır. </member><member><code>syslog</code> bağlantıyı açık bırakır.</member>
   </simplelist>
   <para>
    <filename>dev/log</filename> soketi açık ve bağlı değilse, <code>syslog</code> işlevi, <function>openlog</function> işlevinin <varname>LOG_NDELAY</varname> seçeneğiyle yaptığı gibi soketi açar ve bağlanır.
   </para>
   <para>
    <code>syslog</code> iletiyi göndermeye çalışırkan başarısız olmazsa, <filename>dev/log</filename> soketini açık ve bağlı bırakır, aksi takdirde <code>syslog</code> soketi kapatır (ileride bir örtük açılışın Syslog bağlantısını kullanışlı bir durumda açacağını umarak).
   </para>
   <example>
    <screen>#include &lt;syslog.h&gt;
syslog (LOG_MAKEPRI(LOG_LOCAL1, LOG_ERROR),
        "Unable to make network connection to %s.  Error=%m", host);
</screen>
    </example>
   </csynopsis>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-vsyslog"><primary>vsyslog</primary></indexterm>
    <csproto type="işlev" varargs="">
     <csname><type>void</type><function>vsyslog</function></csname>
     <csparam><type>int</type><parameter>facility_priority</parameter></csparam>
     <csparam><ptr>const&#160;char</ptr><parameter>format</parameter></csparam>
     <csparam><type>va_list</type><parameter>arglist</parameter></csparam>
    </csproto>
    <header>&syslog.h;</header>
    <conceptlist>
     <concept>&mtsafe; &env; &locale;</concept>
     <concept>&asunsafe; &corrupt; &heap; &lock; &dlopen;</concept>
     <concept>&acunsafe; &corrupt; &lock; &mem; &fd;</concept>
    </conceptlist>
    <para>
     BSD tarzı değişken sayıda bağımsız değişken dışında <function>syslog</function> işlevinin benzeridir.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-closelog">
   <title>closelog</title>
   <titleabbrev>Syslog bağlantısının kapatılması.</titleabbrev>
   <para>
    Bu bölümdeki simgeler &syslog.h; başılk dosyasında bildirilmiştir.
    <indexterm linkend="glibc-pg"><primary>syslog.h</primary></indexterm>
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-closelog"><primary>closelog</primary></indexterm>
    <csproto type="işlev" varargs="">
     <csname><type>void</type><function>closelog</function></csname>
     <csparam><void/></csparam>
    </csproto>
    <header>&syslog.h;</header>
    <conceptlist>
     <concept>&mtsafe;;</concept>
     <concept>&asunsafe; &lock;</concept>
     <concept>&acunsafe; &lock; &fd;</concept>
    </conceptlist>
    <para>
     <code>closelog</code> işlevi, var olan Syslog bağlantısını kapatır. Bu işlem açıksa <filename>/dev/log</filename> soketini de kapatır. İşlev ayrıca Syslog iletilerininin kimlik dizgesini, eğer <function>openlog</function> bağlantıyı boş olmayan bir <parameter>ident</parameter> bağımsız değişkeni ile açmışsa, geriye varsayılan değerine ayarlar. Varsayılan <parameter>ident</parameter> dizgesi <code>argv[0]</code>'dan alınan yazılım ismidir.
    </para>
    <para>
     Özelleştirilmiş syslog çıktısı üretmek için <function>openlog</function> kullanan paylaşımlı bir kütüphane kodu yazılıyorsa, iş bittiğinde, &glibc;nin <parameter>ident</parameter> göstericisi ile ilişkisini kesmek için <code>closelog</code> kullanılmalıdır. Daha fazla bilgi için <xref linkend="glibc-openlog"/> bölümünü okunabilir.
    </para>
    <para>
     <code>closelog</code> tamponları boşaltmaz. Bir Syslog bağlantısını <function>openlog</function> ile yeniden açmadan önce <code>closelog</code> çağrısı zorunlu değildir. Syslog bağlantıları <function>exec</function> veya <function>exit</function> çağrıları ile özdevinimli olarak kapanır.
    </para>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-setlogmask">
   <title>setlogmask</title>
   <titleabbrev>Belli iletilerin yok sayılmasının sağlanması.</titleabbrev>
   <para>
    Bu bölümdeki simgeler &syslog.h; başılk dosyasında bildirilmiştir.
    <indexterm linkend="glibc-pg"><primary>syslog.h</primary></indexterm>
   </para>
   <csynopsis>
    <indexterm linkend="glibc-fn" xml:id="glibc-fn-setlogmask"><primary>setlogmask</primary></indexterm>
    <csproto type="işlev" varargs="">
     <csname><type>int</type><function>setlogmask</function></csname>
     <csparam><type>int</type><parameter>mask</parameter></csparam>
    </csproto>
    <header>&syslog.h;</header>
    <conceptlist>
     <concept>&mtunsafe; &race;<code linkend="glibc-safety-identifier">:LogMask</code></concept>
     <concept>&asunsafe;</concept>
     <concept>&acsafe;</concept>
    </conceptlist>
    <para>
     <code>setlogmask</code> işlevi ileride hangi <function>syslog</function> çağrılarının yok sayılacağını belirleyen bir maske (&quot;logmask&quot;) tanımlar. Eğer bir yazılım <code>setlogmask</code> çağrısı yapmazsa, hiçbir <function>syslog</function> çağrısı yok sayılmaz. <code>setlogmask</code> işlevi hangi öncelikteki iletilerin ileride yok sayılacağını belirtmek için kullanılabilir.
    </para>
    <para>
     Her <code>setlogmask</code> çağrısı daha önceki bir <code>setlogmask</code> çağrısının etkisini ortadan kaldırır.
    </para>
    <para>
     Logmask, Syslog bağlantılarının açılması ya da kapanmasından bağımsız olarak mevcut olabilir.
    </para>
    <para>
     Logmaskın atanması, Syslog'un yapılandırmasına benzer bir etki oluşturmasına rağmen tamamen aynı değildir. Syslog yapılandırması, alınacak belli iletilerin tamamen yok sayılmasına sebep olabilir, ama logmaskta belirterek yapılandırma ile yok sayılan iletilerin teslim edilmesi sağlanamaz.
    </para>
    <para>
     <parameter>mask</parameter> her biti olası ileti önceliklerine karşılık düşen bir bit maskesidir. Eğer bu bitlerden biri birse, <function>syslog</function> o bitle ilgili öncelikteki iletileri iptal eder. Kullanılan ileti öncelik makroları  <xref linkend="glibc-syslog-vsyslog"/> bölümünde açıklanmıştır.
    </para>
    <csynopsis>
     <indexterm linkend="glibc-fn" xml:id="glibc-fn-LOG_MASK"><primary>LOG_MASK</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_MASK</function></csname>
      <csparam><parameter>priority</parameter></csparam>
     </csproto>
     <para>
      Uygun <parameter>mask</parameter> değeri oluşturmak için kullanılır. Kullanım örnekleri:
     </para>
     <example>
      <screen>LOG_MASK(LOG_EMERG) | LOG_MASK(LOG_ERROR)
</screen>
     <para>veya</para>
     <screen>~(LOG_MASK(LOG_INFO))
</screen>
     </example>
    </csynopsis>
    <csynopsis>
     <indexterm linkend="glibc-fn" xml:id="glibc-fn-LOG_UPTO"><primary>LOG_UPTO</primary></indexterm>
     <csproto type="makro">
      <csname><function>LOG_UPTO</function></csname>
      <csparam><parameter>priority</parameter></csparam>
     </csproto>
     <para>
      <varname>LOG_MASK</varname> makrosuna benzer, farklı olarak belirtilen öncelikten daha düşük öncelikteki iletiler de iptal edilir. Örnek:
     </para>
     <screen>LOG_UPTO(LOG_ERROR)
</screen>
     <para>
      Makronun talihsiz bir şekilde adlandırılmasının nedeni dahili olarak daha düşük ileti öncelikleri için daha yüksek sayıların kullanılmasıdır.
     </para>
    </csynopsis>
   </csynopsis>
  </sect1>
  <sect1 xml:id="glibc-Syslog-Example">
   <title>Syslog Örneği</title>
   <titleabbrev>Buraya kadar bahsedilenlere toplu bir örnek.</titleabbrev>
   <para>
    Burada <function>openlog</function>, <function>syslog</function> ve <function>closelog</function> işlevlerinin kullanımı örneklenmiştir:
   </para>
   <example>
    <para>
     Bu örnekte hata ayıklama ve bilgilendirme iletileri logmaskta belirtilerek daha Syslog'a ulaşmadan iptal edilmektedir. Böylece örnekteki ikinci <function>syslog</function> hiçbir şey yapmamaktadır.
    </para>
    <screen>#include &lt;syslog.h&gt;

setlogmask (LOG_UPTO (LOG_NOTICE));

openlog ("exampleprog", LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL1);

syslog (LOG_NOTICE, "Program started by User %d", getuid ());
syslog (LOG_INFO, "Ormanda bir ağaç devrildi.");

closelog ();

</screen>
   </example>
  </sect1>
 </chapter>
</part>
