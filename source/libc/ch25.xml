<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        glibc/ch25.xml,v2.36, GFDL,LGPL, NBB, 2023
     ******************************************************************** -->
<part xml:id="glibc-The-Basic-Program-System-Interfaces">
  <title>Temel Yazılım ve Sistem Arayüzü</title>
  <titleabbrev>Yazılımların başlangıcının sonunun yazılması.</titleabbrev>
 <preliminary>

<!--span xml:id="glibc-index-process"></span>
<span xml:id="glibc-index-program"></span>
<span xml:id="glibc-index-address-space-1"></span>
<span xml:id="glibc-index-thread-of-control"></span-->
<para><emphasis>Processes</emphasis> are the primitive units for allocation of system
resources.  Each process has its own address space and (usually) one
thread of control.  A process executes a program; you can have multiple
processes executing the same program, but each process has its own copy
of the program within its own address space and executes it
independently of the other copies.  Though it may have multiple threads
of control within the same program and a program may be composed of
multiple logically separate modules, a process always executes exactly
one program.
</para>
<para>Note that we are using a specific definition of “program” for the
purposes of this manual, which corresponds to a common definition in the
context of Unix systems.  In popular usage, “program” enjoys a much
broader definition; it can refer for example to a system’s kernel, an
editor macro, a complex package of software, or a discrete section of
code executing within a process.
</para>
<para>Writing the program is what this manual is all about.  This chapter
explains the most basic interface between your program and the system
that runs, or calls, it.  This includes passing of parameters (arguments
and environment) from the system, requesting basic services from the
system, and telling the system the program is done.
</para>
<para>A program starts another program with the <code>exec</code> family of system calls.
This chapter looks at program startup from the execee’s point of view.  To
see the event from the execor’s point of view, see <xref linkend="glibc-Executing-a-File"/>.
</para>
 </preliminary><!--
<sect xml:id="glibc-Program-Arguments">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Variables" accesskey="n" rel="next">Environment Variables</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Basics" accesskey="u" rel="up">The Basic Program/System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Program-Arguments-1"></span><h3 class="section">25.1 Program Arguments</title>
<span xml:id="glibc-index-program-arguments"></span>
<span xml:id="glibc-index-command-line-arguments"></span>
<span xml:id="glibc-index-arguments_002c-to-program"></span>

<span xml:id="glibc-index-program-startup"></span>
<span xml:id="glibc-index-startup-of-program"></span>
<span xml:id="glibc-index-invocation-of-program"></span>
<span xml:id="glibc-index-main-function"></span>
<span xml:id="glibc-index-main"></span>
<para>The system starts a C program by calling the function <code>main</code>.  It
is up to you to write a function named <code>main</code>—otherwise, you
won’t even be able to link your program without errors.
</para>
<para>In &isoc; you can define <code>main</code> either to take no arguments, or to
take two arguments that represent the command line arguments to the
program, like this:
</para>
<div class="example">
<pre class="example">int main (int <var>argc</var>, char *<var>argv</var>[])
</pre></div>

<span xml:id="glibc-index-argc-_0028program-argument-count_0029"></span>
<span xml:id="glibc-index-argv-_0028program-argument-vector_0029"></span>
<para>The command line arguments are the whitespace-separated tokens given in
the shell command used to invoke the program; thus, in ‘<filename>cat foo
bar</filename>’, the arguments are ‘<filename>foo</filename>’ and ‘<filename>bar</filename>’.  The only way a
program can look at its command line arguments is via the arguments of
<code>main</code>.  If <code>main</code> doesn’t take arguments, then you cannot get
at the command line.
</para>
<para>The value of the <var>argc</var> argument is the number of command line
arguments.  The <var>argv</var> argument is a vector of C strings; its
elements are the individual command line argument strings.  The file
name of the program being run is also included in the vector as the
first element; the value of <var>argc</var> counts this element.  A null
pointer always follows the last element: <code><var>argv</var>[<var>argc</var>]</code>
is this null pointer.
</para>
<para>For the command ‘<filename>cat foo bar</filename>’, <var>argc</var> is 3 and <var>argv</var> has
three elements, <code>"cat"</code>, <code>"foo"</code> and <code>"bar"</code>.
</para>
<para>In Unix systems you can define <code>main</code> a third way, using three arguments:
</para>
<div class="example">
<pre class="example">int main (int <var>argc</var>, char *<var>argv</var>[], char *<var>envp</var>[])
</pre></div>

<para>The first two arguments are just the same.  The third argument
<var>envp</var> gives the program’s environment; it is the same as the value
of <code>environ</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Variables">Environment Variables</a>.  POSIX.1 does not
allow this three-argument form, so to be portable it is best to write
<code>main</code> to take two arguments, and use the value of <code>environ</code>.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argument-Syntax" accesskey="1">Program Argument Syntax Conventions</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Program-Arguments" accesskey="2">Parsing Program Arguments</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Argument-Syntax">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Program-Arguments" accesskey="n" rel="next">Parsing Program Arguments</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments" accesskey="u" rel="up">Program Arguments</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Program-Argument-Syntax-Conventions"></span><h4 class="subsection">25.1.1 Program Argument Syntax Conventions</title>
<span xml:id="glibc-index-program-argument-syntax"></span>
<span xml:id="glibc-index-syntax_002c-for-program-arguments"></span>
<span xml:id="glibc-index-command-argument-syntax"></span>

<para>POSIX recommends these conventions for command line arguments.
<code>getopt</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt">Parsing program options using <code>getopt</code></a>) and <code>argp_parse</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp">Parsing Program Options with Argp</a>) make
it easy to implement them.
</para>
<ul>
<li> Arguments are options if they begin with a hyphen delimiter (‘<filename>-</filename>’).

</li><li> Multiple options may follow a hyphen delimiter in a single token if
the options do not take arguments.  Thus, ‘<filename>-abc</filename>’ is equivalent to
‘<filename>-a -b -c</filename>’.

</li><li> Option names are single alphanumeric characters (as for <code>isalnum</code>;
see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Classification-of-Characters">Classification of Characters</a>).

</li><li> Certain options require an argument.  For example, the <filename>-o</filename> option
of the <code>ld</code> command requires an argument—an output file name.

</li><li> An option and its argument may or may not appear as separate tokens.  (In
other words, the whitespace separating them is optional.)  Thus,
<filename><span class="nolinebreak">-o</span>&nbsp;foo</filename> and <filename>-ofoo</filename> are equivalent.

</li><li> Options typically precede other non-option arguments.

<para>The implementations of <code>getopt</code> and <code>argp_parse</code> in the GNU C Library
normally make it appear as if all the option arguments were
specified before all the non-option arguments for the purposes of
parsing, even if the user of your program intermixed option and
non-option arguments.  They do this by reordering the elements of the
<var>argv</var> array.  This behavior is nonstandard; if you want to suppress
it, define the <code>_POSIX_OPTION_ORDER</code> environment variable.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Environment">Standard Environment Variables</a>.
</para>
</li><li> The argument <filename>&#45;&#45;</filename> terminates all options; any following arguments
are treated as non-option arguments, even if they begin with a hyphen.

</li><li> A token consisting of a single hyphen character is interpreted as an
ordinary non-option argument.  By convention, it is used to specify
input from or output to the standard input and output streams.

</li><li> Options may be supplied in any order, or appear multiple times.  The
interpretation is left up to the particular application program.
</li></ul>

<span xml:id="glibc-index-long_002dnamed-options"></span>
<para>GNU adds <emphasis>long options</emphasis> to these conventions.  Long options consist
of <filename>&#45;&#45;-</filename> followed by a name made of alphanumeric characters and
dashes.  Option names are typically one to three words long, with
hyphens to separate words.  Users can abbreviate the option names as
long as the abbreviations are unique.
</para>
<para>To specify an argument for a long option, write
<filename>&#45;&#45;<var>name</var>=<var>value</var></filename>.  This syntax enables a long option to
accept an argument that is itself optional.
</para>
<para>Eventually, GNU systems will provide completion for long option names
in the shell.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Parsing-Program-Arguments">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argument-Syntax" accesskey="p" rel="prev">Program Argument Syntax Conventions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments" accesskey="u" rel="up">Program Arguments</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Parsing-Program-Arguments-1"></span><h4 class="subsection">25.1.2 Parsing Program Arguments</title>

<span xml:id="glibc-index-program-arguments_002c-parsing"></span>
<span xml:id="glibc-index-command-arguments_002c-parsing"></span>
<span xml:id="glibc-index-parsing-program-arguments"></span>
<para>If the syntax for the command line arguments to your program is simple
enough, you can simply pick the arguments off from <var>argv</var> by hand.
But unless your program takes a fixed number of arguments, or all of the
arguments are interpreted in the same way (as file names, for example),
you are usually better off using <code>getopt</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt">Parsing program options using <code>getopt</code></a>) or
<code>argp_parse</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp">Parsing Program Options with Argp</a>) to do the parsing.
</para>
<para><code>getopt</code> is more standard (the short-option only version of it is a
part of the POSIX standard), but using <code>argp_parse</code> is often
easier, both for very simple and very complex option structures, because
it does more of the dirty work for you.
</para>


<hr>
</div>
</div>
<sect xml:id="glibc-Getopt">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="n" rel="next">Parsing Program Options with Argp</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Program-Arguments" accesskey="u" rel="up">Parsing Program Arguments</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Parsing-program-options-using-getopt"></span><h3 class="section">25.2 Parsing program options using <code>getopt</code></title>

<para>The <code>getopt</code> and <code>getopt_long</code> functions automate some of the
chore involved in parsing typical unix command line options.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Using-Getopt" accesskey="1">Using the <code>getopt</code> function</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Example-of-Getopt" accesskey="2">Example of Parsing Arguments with <code>getopt</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt-Long-Options" accesskey="3">Parsing Long Options with <code>getopt_long</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt-Long-Option-Example" accesskey="4">Example of Parsing Long Options with <code>getopt_long</code></a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Using-Getopt">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Example-of-Getopt" accesskey="n" rel="next">Example of Parsing Arguments with <code>getopt</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt" accesskey="u" rel="up">Parsing program options using <code>getopt</code></a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Using-the-getopt-function"></span><h4 class="subsection">25.2.1 Using the <code>getopt</code> function</title>

<para>Here are the details about how to call the <code>getopt</code> function.  To
use this facility, your program must include the header file
<filename>unistd.h</filename>.
<span xml:id="glibc-index-unistd_002eh-15"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-opterr"><span class="category">Variable: </span><span><emphasis>int</emphasis> <strong>opterr</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-opterr" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If the value of this variable is nonzero, then <code>getopt</code> prints an
error message to the standard error stream if it encounters an unknown
option character or an option with a missing required argument.  This is
the default behavior.  If you set this variable to zero, <code>getopt</code>
does not print any messages, but it still returns the character <code>?</code>
to indicate an error.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-optopt"><span class="category">Variable: </span><span><emphasis>int</emphasis> <strong>optopt</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-optopt" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>When <code>getopt</code> encounters an unknown option character or an option
with a missing required argument, it stores that option character in
this variable.  You can use this for providing your own diagnostic
messages.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-optind"><span class="category">Variable: </span><span><emphasis>int</emphasis> <strong>optind</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-optind" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This variable is set by <code>getopt</code> to the index of the next element
of the <var>argv</var> array to be processed.  Once <code>getopt</code> has found
all of the option arguments, you can use this variable to determine
where the remaining non-option arguments begin.  The initial value of
this variable is <code>1</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-optarg"><span class="category">Variable: </span><span><emphasis>char *</emphasis> <strong>optarg</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-optarg" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This variable is set by <code>getopt</code> to point at the value of the
option argument, for those options that accept arguments.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-getopt"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>getopt</strong> <emphasis>(int <var>argc</var>, char *const *<var>argv</var>, const char *<var>options</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getopt" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:getopt env
| AS-Unsafe heap i18n lock corrupt
| AC-Unsafe mem lock corrupt
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>getopt</code> function gets the next option argument from the
argument list specified by the <var>argv</var> and <var>argc</var> arguments.
Normally these values come directly from the arguments received by
<code>main</code>.
</para>
<para>The <var>options</var> argument is a string that specifies the option
characters that are valid for this program.  An option character in this
string can be followed by a colon (‘<filename>:</filename>’) to indicate that it takes a
required argument.  If an option character is followed by two colons
(‘<filename>::</filename>’), its argument is optional; this is a GNU extension.
</para>
<para><code>getopt</code> has three ways to deal with options that follow
non-options <var>argv</var> elements.  The special argument ‘<filename>&#45;&#45;</filename>’ forces
in all cases the end of option scanning.
</para>
<ul>
<li> The default is to permute the contents of <var>argv</var> while scanning it
so that eventually all the non-options are at the end.  This allows
options to be given in any order, even with programs that were not
written to expect this.

</li><li> If the <var>options</var> argument string begins with a hyphen (‘<filename>-</filename>’), this
is treated specially.  It permits arguments that are not options to be
returned as if they were associated with option character ‘<filename>\1</filename>’.

</li><li> POSIX demands the following behavior: the first non-option stops option
processing.  This mode is selected by either setting the environment
variable <code>POSIXLY_CORRECT</code> or beginning the <var>options</var> argument
string with a plus sign (‘<filename>+</filename>’).
</li></ul>

<para>The <code>getopt</code> function returns the option character for the next
command line option.  When no more option arguments are available, it
returns <code>-1</code>.  There may still be more non-option arguments; you
must compare the external variable <code>optind</code> against the <var>argc</var>
parameter to check this.
</para>
<para>If the option has an argument, <code>getopt</code> returns the argument by
storing it in the variable <var>optarg</var>.  You don’t ordinarily need to
copy the <code>optarg</code> string, since it is a pointer into the original
<var>argv</var> array, not into a static area that might be overwritten.
</para>
<para>If <code>getopt</code> finds an option character in <var>argv</var> that was not
included in <var>options</var>, or a missing option argument, it returns
‘<filename>?</filename>’ and sets the external variable <code>optopt</code> to the actual
option character.  If the first character of <var>options</var> is a colon
(‘<filename>:</filename>’), then <code>getopt</code> returns ‘<filename>:</filename>’ instead of ‘<filename>?</filename>’ to
indicate a missing option argument.  In addition, if the external
variable <code>opterr</code> is nonzero (which is the default), <code>getopt</code>
prints an error message.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Example-of-Getopt">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt-Long-Options" accesskey="n" rel="next">Parsing Long Options with <code>getopt_long</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Using-Getopt" accesskey="p" rel="prev">Using the <code>getopt</code> function</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt" accesskey="u" rel="up">Parsing program options using <code>getopt</code></a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Example-of-Parsing-Arguments-with-getopt"></span><h4 class="subsection">25.2.2 Example of Parsing Arguments with <code>getopt</code></title>

<para>Here is an example showing how <code>getopt</code> is typically used.  The
key points to notice are:
</para>
<ul>
<li> Normally, <code>getopt</code> is called in a loop.  When <code>getopt</code> returns
<code>-1</code>, indicating no more options are present, the loop terminates.

</li><li> A <code>switch</code> statement is used to dispatch on the return value from
<code>getopt</code>.  In typical use, each case just sets a variable that
is used later in the program.

</li><li> A second loop is used to process the remaining non-option arguments.
</li></ul>

<div class="example">
<pre class="example">
</pre><pre class="example">#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

int
main (int argc, char **argv)
{
  int aflag = 0;
  int bflag = 0;
  char *cvalue = NULL;
  int index;
  int c;

  opterr = 0;
</pre><pre class="example">
</pre><pre class="example">  while ((c = getopt (argc, argv, "abc:")) != -1)
    switch (c)
      {
      case 'a':
        aflag = 1;
        break;
      case 'b':
        bflag = 1;
        break;
      case 'c':
        cvalue = optarg;
        break;
      case '?':
        if (optopt == 'c')
          fprintf (stderr, "Option -%c requires an argument.\n", optopt);
        else if (isprint (optopt))
          fprintf (stderr, "Unknown option `-%c'.\n", optopt);
        else
          fprintf (stderr,
                   "Unknown option character `\\x%x'.\n",
                   optopt);
        return 1;
      default:
        abort ();
      }
</pre><pre class="example">
</pre><pre class="example">  printf ("aflag = %d, bflag = %d, cvalue = %s\n",
          aflag, bflag, cvalue);

  for (index = optind; index &lt; argc; index++)
    printf ("Non-option argument %s\n", argv[index]);
  return 0;
}
</pre></div>

<para>Here are some examples showing what this program prints with different
combinations of arguments:
</para>
<div class="example">
<pre class="example">% testopt
aflag = 0, bflag = 0, cvalue = (null)

% testopt -a -b
aflag = 1, bflag = 1, cvalue = (null)

% testopt -ab
aflag = 1, bflag = 1, cvalue = (null)

% testopt -c foo
aflag = 0, bflag = 0, cvalue = foo

% testopt -cfoo
aflag = 0, bflag = 0, cvalue = foo

% testopt arg1
aflag = 0, bflag = 0, cvalue = (null)
Non-option argument arg1

% testopt -a arg1
aflag = 1, bflag = 0, cvalue = (null)
Non-option argument arg1

% testopt -c foo arg1
aflag = 0, bflag = 0, cvalue = foo
Non-option argument arg1

% testopt -a &#45;&#45; -b
aflag = 1, bflag = 0, cvalue = (null)
Non-option argument -b

% testopt -a -
aflag = 1, bflag = 0, cvalue = (null)
Non-option argument -
</pre></div>

<hr>
</div>
<div class="subsection" xml:id="glibc-Getopt-Long-Options">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt-Long-Option-Example" accesskey="n" rel="next">Example of Parsing Long Options with <code>getopt_long</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Example-of-Getopt" accesskey="p" rel="prev">Example of Parsing Arguments with <code>getopt</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt" accesskey="u" rel="up">Parsing program options using <code>getopt</code></a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Parsing-Long-Options-with-getopt_005flong"></span><h4 class="subsection">25.2.3 Parsing Long Options with <code>getopt_long</code></title>

<para>To accept GNU-style long options as well as single-character options,
use <code>getopt_long</code> instead of <code>getopt</code>.  This function is
declared in <filename>getopt.h</filename>, not <filename>unistd.h</filename>.  You should make every
program accept long options if it uses any options, for this takes
little extra work and helps beginners remember how to use the program.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-option"><span class="category">Data Type: </span><span><strong>struct option</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-option" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This structure describes a single long option name for the sake of
<code>getopt_long</code>.  The argument <var>longopts</var> must be an array of
these structures, one for each long option.  Terminate the array with an
element containing all zeros.
</para>
<para>The <code>struct option</code> structure has these fields:
</para>
<dl compact="compact">
<dt><span><code>const char *name</code></span></dt>
<dd><para>This field is the name of the option.  It is a string.
</para>
</dd>
<dt><span><code>int has_arg</code></span></dt>
<dd><para>This field says whether the option takes an argument.  It is an integer,
and there are three legitimate values: <code><span class="nolinebreak">no_argument</span></code>,
<code>required_argument</code> and <code>optional_argument</code>.
</para>
</dd>
<dt><span><code>int *flag</code></span></dt>
<dt><span><code>int val</code></span></dt>
<dd><para>These fields control how to report or act on the option when it occurs.
</para>
<para>If <code>flag</code> is a null pointer, then the <code>val</code> is a value which
identifies this option.  Often these values are chosen to uniquely
identify particular long options.
</para>
<para>If <code>flag</code> is not a null pointer, it should be the address of an
<code>int</code> variable which is the flag for this option.  The value in
<code>val</code> is the value to store in the flag to indicate that the option
was seen.
</para></dd>
</dl>
</dd></dl>

<dl class="def">
<dt xml:id="glibc-index-getopt_005flong"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>getopt_long</strong> <emphasis>(int <var>argc</var>, char *const *<var>argv</var>, const char *<var>shortopts</var>, const struct option *<var>longopts</var>, int *<var>indexptr</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getopt_005flong" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:getopt env
| AS-Unsafe heap i18n lock corrupt
| AC-Unsafe mem lock corrupt
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>Decode options from the vector <var>argv</var> (whose length is <var>argc</var>).
The argument <var>shortopts</var> describes the short options to accept, just as
it does in <code>getopt</code>.  The argument <var>longopts</var> describes the long
options to accept (see above).
</para>
<para>When <code>getopt_long</code> encounters a short option, it does the same
thing that <code>getopt</code> would do: it returns the character code for the
option, and stores the option’s argument (if it has one) in <code>optarg</code>.
</para>
<para>When <code>getopt_long</code> encounters a long option, it takes actions based
on the <code>flag</code> and <code>val</code> fields of the definition of that
option.  The option name may be abbreviated as long as the abbreviation is
unique.
</para>
<para>If <code>flag</code> is a null pointer, then <code>getopt_long</code> returns the
contents of <code>val</code> to indicate which option it found.  You should
arrange distinct values in the <code>val</code> field for options with
different meanings, so you can decode these values after
<code>getopt_long</code> returns.  If the long option is equivalent to a short
option, you can use the short option’s character code in <code>val</code>.
</para>
<para>If <code>flag</code> is not a null pointer, that means this option should just
set a flag in the program.  The flag is a variable of type <code>int</code>
that you define.  Put the address of the flag in the <code>flag</code> field.
Put in the <code>val</code> field the value you would like this option to
store in the flag.  In this case, <code>getopt_long</code> returns <code>0</code>.
</para>
<para>For any long option, <code>getopt_long</code> tells you the index in the array
<var>longopts</var> of the options definition, by storing it into
<code>*<var>indexptr</var></code>.  You can get the name of the option with
<code><var>longopts</var>[*<var>indexptr</var>].name</code>.  So you can distinguish among
long options either by the values in their <code>val</code> fields or by their
indices.  You can also distinguish in this way among long options that
set flags.
</para>
<para>When a long option has an argument, <code>getopt_long</code> puts the argument
value in the variable <code>optarg</code> before returning.  When the option
has no argument, the value in <code>optarg</code> is a null pointer.  This is
how you can tell whether an optional argument was supplied.
</para>
<para>When <code>getopt_long</code> has no more options to handle, it returns
<code>-1</code>, and leaves in the variable <code>optind</code> the index in
<var>argv</var> of the next remaining argument.
</para></dd></dl>

<para>Since long option names were used before <code>getopt_long</code>
was invented there are program interfaces which require programs
to recognize options like ‘<filename><span class="nolinebreak">-option</span>&nbsp;value</filename>’ instead of
‘<filename><span class="nolinebreak">&#45;&#45;option</span>&nbsp;value</filename>’.  To enable these programs to use the GNU
getopt functionality there is one more function available.
</para>
<dl class="def">
<dt xml:id="glibc-index-getopt_005flong_005fonly"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>getopt_long_only</strong> <emphasis>(int <var>argc</var>, char *const *<var>argv</var>, const char *<var>shortopts</var>, const struct option *<var>longopts</var>, int *<var>indexptr</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getopt_005flong_005fonly" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:getopt env
| AS-Unsafe heap i18n lock corrupt
| AC-Unsafe mem lock corrupt
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <code>getopt_long_only</code> function is equivalent to the
<code>getopt_long</code> function but it allows the user of the
application to pass long options with only ‘<filename>-</filename>’ instead of
‘<filename>&#45;&#45;</filename>’.  The ‘<filename>&#45;&#45;</filename>’ prefix is still recognized but instead of
looking through the short options if a ‘<filename>-</filename>’ is seen it is first
tried whether this parameter names a long option.  If not, it is parsed
as a short option.
</para>
<para>Assuming <code>getopt_long_only</code> is used starting an application with
</para>
<div class="example">
<pre class="example">  app -foo
</pre></div>

<para>the <code>getopt_long_only</code> will first look for a long option named
‘<filename>foo</filename>’.  If this is not found, the short options ‘<filename>f</filename>’, ‘<filename>o</filename>’,
and again ‘<filename>o</filename>’ are recognized.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Getopt-Long-Option-Example">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt-Long-Options" accesskey="p" rel="prev">Parsing Long Options with <code>getopt_long</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt" accesskey="u" rel="up">Parsing program options using <code>getopt</code></a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Example-of-Parsing-Long-Options-with-getopt_005flong"></span><h4 class="subsection">25.2.4 Example of Parsing Long Options with <code>getopt_long</code></title>

<div class="example">
<pre class="example">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;getopt.h&gt;

/* <span class="roman">Flag set by ‘<filename>&#45;&#45;verbose</filename>’.</span> */
static int verbose_flag;

int
main (int argc, char **argv)
{
  int c;

  while (1)
    {
      static struct option long_options[] =
        {
          /* <span class="roman">These options set a flag.</span> */
          {"verbose", no_argument,       &amp;verbose_flag, 1},
          {"brief",   no_argument,       &amp;verbose_flag, 0},
          /* <span class="roman">These options don’t set a flag.
             We distinguish them by their indices.</span> */
          {"add",     no_argument,       0, 'a'},
          {"append",  no_argument,       0, 'b'},
          {"delete",  required_argument, 0, 'd'},
          {"create",  required_argument, 0, 'c'},
          {"file",    required_argument, 0, 'f'},
          {0, 0, 0, 0}
        };
      /* <span class="roman"><code>getopt_long</code> stores the option index here.</span> */
      int option_index = 0;

      c = getopt_long (argc, argv, "abc:d:f:",
                       long_options, &amp;option_index);

      /* <span class="roman">Detect the end of the options.</span> */
      if (c == -1)
        break;

      switch (c)
        {
        case 0:
          /* <span class="roman">If this option set a flag, do nothing else now.</span> */
          if (long_options[option_index].flag != 0)
            break;
          printf ("option %s", long_options[option_index].name);
          if (optarg)
            printf (" with arg %s", optarg);
          printf ("\n");
          break;

        case 'a':
          puts ("option -a\n");
          break;

        case 'b':
          puts ("option -b\n");
          break;

        case 'c':
          printf ("option -c with value `%s'\n", optarg);
          break;

        case 'd':
          printf ("option -d with value `%s'\n", optarg);
          break;

        case 'f':
          printf ("option -f with value `%s'\n", optarg);
          break;

        case '?':
          /* <span class="roman"><code>getopt_long</code> already printed an error message.</span> */
          break;

        default:
          abort ();
        }
    }

  /* <span class="roman">Instead of reporting ‘<filename>&#45;&#45;verbose</filename>’
     and ‘<filename>&#45;&#45;brief</filename>’ as they are encountered,
     we report the final status resulting from them.</span> */
  if (verbose_flag)
    puts ("verbose flag is set");

  /* <span class="roman">Print any remaining command line arguments (not options).</span> */
  if (optind &lt; argc)
    {
      printf ("non-option ARGV-elements: ");
      while (optind &lt; argc)
        printf ("%s ", argv[optind++]);
      putchar ('\n');
    }

  exit (0);
}
</pre></div>
<hr>
</div>
</div>
<sect xml:id="glibc-Argp">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Suboptions" accesskey="n" rel="next">Parsing of Suboptions</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt" accesskey="p" rel="prev">Parsing program options using <code>getopt</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Program-Arguments" accesskey="u" rel="up">Parsing Program Arguments</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Parsing-Program-Options-with-Argp"></span><h3 class="section">25.3 Parsing Program Options with Argp</title>
<span xml:id="glibc-index-argp-_0028program-argument-parser_0029"></span>
<span xml:id="glibc-index-argument-parsing-with-argp"></span>
<span xml:id="glibc-index-option-parsing-with-argp"></span>

<para><emphasis>Argp</emphasis> is an interface for parsing unix-style argument vectors.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments">Program Arguments</a>.
</para>
<para>Argp provides features unavailable in the more commonly used
<code>getopt</code> interface.  These features include automatically producing
output in response to the ‘<filename>&#45;&#45;help</filename>’ and ‘<filename>&#45;&#45;version</filename>’ options, as
described in the GNU coding standards.  Using argp makes it less likely
that programmers will neglect to implement these additional options or
keep them up to date.
</para>
<para>Argp also provides the ability to merge several independently defined
option parsers into one, mediating conflicts between them and making the
result appear seamless.  A library can export an argp option parser that
user programs might employ in conjunction with their own option parsers,
resulting in less work for the user programs.  Some programs may use only
argument parsers exported by libraries, thereby achieving consistent and
efficient option-parsing for abstractions implemented by the libraries.
</para>
<span xml:id="glibc-index-argp_002eh"></span>
<para>The header file <filename>&lt;argp.h&gt;</filename> should be included to use argp.
</para>
<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#The-argp_005fparse-Function" accesskey="1">The <code>argp_parse</code> Function</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Global-Variables" accesskey="2">Argp Global Variables</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="3">Specifying Argp Parsers</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors" accesskey="4">Specifying Options in an Argp Parser</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions" accesskey="5">Argp Parser Functions</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Children" accesskey="6">Combining Multiple Argp Parsers</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Flags" accesskey="7">Flags for <code>argp_parse</code></a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Filtering" accesskey="8">Customizing Argp Help Output</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help" accesskey="9">The <code>argp_help</code> Function</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Flags">Flags for the <code>argp_help</code> Function</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples">Argp Examples</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-User-Customization">Argp User Customization</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Suboptions-Example">Parsing of Suboptions Example</a></li>
</ul>
<div class="subsection" xml:id="glibc-The-argp_005fparse-Function">
<h4 class="subsection">25.3.1 The <code>argp_parse</code> Function</title>

<para>The main interface to argp is the <code>argp_parse</code> function.  In many
cases, calling <code>argp_parse</code> is the only argument-parsing code
needed in <code>main</code>.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments">Program Arguments</a>.
</para>
<dl class="def">
<dt xml:id="glibc-index-argp_005fparse"><span class="category">Function: </span><span><emphasis>error_t</emphasis> <strong>argp_parse</strong> <emphasis>(const struct argp *<var>argp</var>, int <var>argc</var>, char **<var>argv</var>, unsigned <var>flags</var>, int *<var>arg_index</var>, void *<var>input</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fparse" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:argpbuf locale env
| AS-Unsafe heap i18n lock corrupt
| AC-Unsafe mem lock corrupt
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>argp_parse</code> function parses the arguments in <var>argv</var>, of
length <var>argc</var>, using the argp parser <var>argp</var>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers">Specifying Argp Parsers</a>.  Passing a null pointer for <var>argp</var> is the same as using
a <code>struct argp</code> containing all zeros.
</para>
<para><var>flags</var> is a set of flag bits that modify the parsing behavior.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Flags">Flags for <code>argp_parse</code></a>.  <var>input</var> is passed through to the argp parser
<var>argp</var>, and has meaning defined by <var>argp</var>.  A typical usage is
to pass a pointer to a structure which is used for specifying
parameters to the parser and passing back the results.
</para>
<para>Unless the <code>ARGP_NO_EXIT</code> or <code>ARGP_NO_HELP</code> flags are included
in <var>flags</var>, calling <code>argp_parse</code> may result in the program
exiting.  This behavior is true if an error is detected, or when an
unknown option is encountered.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination">Program Termination</a>.
</para>
<para>If <var>arg_index</var> is non-null, the index of the first unparsed option
in <var>argv</var> is returned as a value.
</para>
<para>The return value is zero for successful parsing, or an error code
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Error-Codes">Error Codes</a>) if an error is detected.  Different argp parsers
may return arbitrary error codes, but the standard error codes are:
<code>ENOMEM</code> if a memory allocation error occurred, or <code>EINVAL</code> if
an unknown option or option argument is encountered.
</para></dd></dl>


<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Global-Variables">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="n" rel="next">Specifying Argp Parsers</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="u" rel="up">Parsing Program Options with Argp</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Argp-Global-Variables-1"></span><h4 class="subsection">25.3.2 Argp Global Variables</title>

<para>These variables make it easy for user programs to implement the
‘<filename>&#45;&#45;version</filename>’ option and provide a bug-reporting address in the
‘<filename>&#45;&#45;help</filename>’ output.  These are implemented in argp by default.
</para>
<dl class="def">
<dt xml:id="glibc-index-argp_005fprogram_005fversion"><span class="category">Variable: </span><span><emphasis>const char *</emphasis> <strong>argp_program_version</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fprogram_005fversion" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If defined or set by the user program to a non-zero value, then a
‘<filename>&#45;&#45;version</filename>’ option is added when parsing with <code>argp_parse</code>,
which will print the ‘<filename>&#45;&#45;version</filename>’ string followed by a newline and
exit.  The exception to this is if the <code>ARGP_NO_EXIT</code> flag is used.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-argp_005fprogram_005fbug_005faddress"><span class="category">Variable: </span><span><emphasis>const char *</emphasis> <strong>argp_program_bug_address</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fprogram_005fbug_005faddress" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If defined or set by the user program to a non-zero value,
<code>argp_program_bug_address</code> should point to a string that will be
printed at the end of the standard output for the ‘<filename>&#45;&#45;help</filename>’ option,
embedded in a sentence that says ‘<filename>Report bugs to <var>address</var>.</filename>’.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-argp_005fprogram_005fversion_005fhook"><span class="category">Variable: </span><span><strong>argp_program_version_hook</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fprogram_005fversion_005fhook" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If defined or set by the user program to a non-zero value, a
‘<filename>&#45;&#45;version</filename>’ option is added when parsing with <code>arg_parse</code>,
which prints the program version and exits with a status of zero.  This
is not the case if the <code>ARGP_NO_HELP</code> flag is used.  If the
<code>ARGP_NO_EXIT</code> flag is set, the exit behavior of the program is
suppressed or modified, as when the argp parser is going to be used by
other programs.
</para>
<para>It should point to a function with this type of signature:
</para>
<div class="example">
<pre class="example">void <var>print-version</var> (FILE *<var>stream</var>, struct argp_state *<var>state</var>)
</pre></div>

<para>See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State">Argp Parsing State</a>, for an explanation of <var>state</var>.
</para>
<para>This variable takes precedence over <code>argp_program_version</code>, and is
useful if a program has version information not easily expressed in a
simple string.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-argp_005ferr_005fexit_005fstatus"><span class="category">Variable: </span><span><emphasis>error_t</emphasis> <strong>argp_err_exit_status</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005ferr_005fexit_005fstatus" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the exit status used when argp exits due to a parsing error.  If
not defined or set by the user program, this defaults to:
<code>EX_USAGE</code> from <filename>&lt;sysexits.h&gt;</filename>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Parsers">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Flags" accesskey="n" rel="next">Flags for <code>argp_parse</code></a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Global-Variables" accesskey="p" rel="prev">Argp Global Variables</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="u" rel="up">Parsing Program Options with Argp</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Specifying-Argp-Parsers"></span><h4 class="subsection">25.3.3 Specifying Argp Parsers</title>

<para>The first argument to the <code>argp_parse</code> function is a pointer to a
<code>struct argp</code>, which is known as an <emphasis>argp parser</emphasis>:
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-argp"><span class="category">Data Type: </span><span><strong>struct argp</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-argp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This structure specifies how to parse a given set of options and
arguments, perhaps in conjunction with other argp parsers.  It has the
following fields:
</para>
<dl compact="compact">
<dt><span><code>const struct argp_option *options</code></span></dt>
<dd><para>A pointer to a vector of <code>argp_option</code> structures specifying which
options this argp parser understands; it may be zero if there are no
options at all.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors">Specifying Options in an Argp Parser</a>.
</para>
</dd>
<dt><span><code>argp_parser_t parser</code></span></dt>
<dd><para>A pointer to a function that defines actions for this parser; it is
called for each option parsed, and at other well-defined points in the
parsing process.  A value of zero is the same as a pointer to a function
that always returns <code>ARGP_ERR_UNKNOWN</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions">Argp Parser Functions</a>.
</para>
</dd>
<dt><span><code>const char *args_doc</code></span></dt>
<dd><para>If non-zero, a string describing what non-option arguments are called by
this parser.  This is only used to print the ‘<filename>Usage:</filename>’ message.  If
it contains newlines, the strings separated by them are considered
alternative usage patterns and printed on separate lines.  Lines after
the first are prefixed by ‘<filename> or: </filename>’ instead of ‘<filename>Usage:</filename>’.
</para>
</dd>
<dt><span><code>const char *doc</code></span></dt>
<dd><para>If non-zero, a string containing extra text to be printed before and
after the options in a long help message, with the two sections
separated by a vertical tab (<code>'\v'</code>, <code>'\013'</code>) character.  By
convention, the documentation before the options is just a short string
explaining what the program does.  Documentation printed after the
options describe behavior in more detail.
</para>
</dd>
<dt><span><code>const struct argp_child *children</code></span></dt>
<dd><para>A pointer to a vector of <code>argp_child</code> structures.  This pointer
specifies which additional argp parsers should be combined with this
one.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Children">Combining Multiple Argp Parsers</a>.
</para>
</dd>
<dt><span><code>char *(*help_filter)(int <var>key</var>, const char *<var>text</var>, void *<var>input</var>)</code></span></dt>
<dd><para>If non-zero, a pointer to a function that filters the output of help
messages.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Filtering">Customizing Argp Help Output</a>.
</para>
</dd>
<dt><span><code>const char *argp_domain</code></span></dt>
<dd><para>If non-zero, the strings used in the argp library are translated using
the domain described by this string.  If zero, the current default domain
is used.
</para>
</dd>
</dl>
</dd></dl>

<para>Of the above group, <code>options</code>, <code>parser</code>, <code>args_doc</code>, and
the <code>doc</code> fields are usually all that are needed.  If an argp
parser is defined as an initialized C variable, only the fields used
need be specified in the initializer.  The rest will default to zero due
to the way C structure initialization works.  This design is exploited in
most argp structures; the most-used fields are grouped near the
beginning, the unused fields left unspecified.
</para>

<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Option-Vectors">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions" accesskey="n" rel="next">Argp Parser Functions</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="p" rel="prev">Specifying Argp Parsers</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="u" rel="up">Specifying Argp Parsers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Specifying-Options-in-an-Argp-Parser"></span><h4 class="subsection">25.3.4 Specifying Options in an Argp Parser</title>

<para>The <code>options</code> field in a <code>struct argp</code> points to a vector of
<code>struct argp_option</code> structures, each of which specifies an option
that the argp parser supports.  Multiple entries may be used for a single
option provided it has multiple names.  This should be terminated by an
entry with zero in all fields.  Note that when using an initialized C
array for options, writing <code>{ 0 }</code> is enough to achieve this.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-argp_005foption"><span class="category">Data Type: </span><span><strong>struct argp_option</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-argp_005foption" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This structure specifies a single option that an argp parser
understands, as well as how to parse and document that option.  It has
the following fields:
</para>
<dl compact="compact">
<dt><span><code>const char *name</code></span></dt>
<dd><para>The long name for this option, corresponding to the long option
‘<filename>&#45;&#45;<var>name</var></filename>’; this field may be zero if this option <emphasis>only</emphasis>
has a short name.  To specify multiple names for an option, additional
entries may follow this one, with the <code>OPTION_ALIAS</code> flag
set.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Flags">Flags for Argp Options</a>.
</para>
</dd>
<dt><span><code>int key</code></span></dt>
<dd><para>The integer key provided by the current option to the option parser.  If
<var>key</var> has a value that is a printable <small>ASCII</small> character (i.e.,
<code>isascii (<var>key</var>)</code> is true), it <emphasis>also</emphasis> specifies a short
option ‘<filename>-<var>char</var></filename>’, where <var>char</var> is the <small>ASCII</small> character
with the code <var>key</var>.
</para>
</dd>
<dt><span><code>const char *arg</code></span></dt>
<dd><para>If non-zero, this is the name of an argument associated with this
option, which must be provided (e.g., with the
‘<filename>&#45;&#45;<var>name</var>=<var>value</var></filename>’ or ‘<filename>-<var>char</var> <var>value</var></filename>’
syntaxes), unless the <code>OPTION_ARG_OPTIONAL</code> flag (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Flags">Flags for Argp Options</a>) is set, in which case it <emphasis>may</emphasis> be provided.
</para>
</dd>
<dt><span><code>int flags</code></span></dt>
<dd><para>Flags associated with this option, some of which are referred to above.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Flags">Flags for Argp Options</a>.
</para>
</dd>
<dt><span><code>const char *doc</code></span></dt>
<dd><para>A documentation string for this option, for printing in help messages.
</para>
<para>If both the <code>name</code> and <code>key</code> fields are zero, this string
will be printed tabbed left from the normal option column, making it
useful as a group header.  This will be the first thing printed in its
group.  In this usage, it’s conventional to end the string with a
‘<filename>:</filename>’ character.
</para>
</dd>
<dt><span><code>int group</code></span></dt>
<dd><para>Group identity for this option.
</para>
<para>In a long help message, options are sorted alphabetically within each
group, and the groups presented in the order 0, 1, 2, …, <var>n</var>,
-<var>m</var>, …, -2, -1.
</para>
<para>Every entry in an options array with this field 0 will inherit the group
number of the previous entry, or zero if it’s the first one.  If it’s a
group header with <code>name</code> and <code>key</code> fields both zero, the
previous entry + 1 is the default.  Automagic options such as
‘<filename>&#45;&#45;help</filename>’ are put into group -1.
</para>
<para>Note that because of C structure initialization rules, this field often
need not be specified, because 0 is the correct value.
</para></dd>
</dl>
</dd></dl>



<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Flags" accesskey="1">Flags for Argp Options</a></li>
</ul>
<hr>
<div class="subsubsection" xml:id="glibc-Argp-Option-Flags">
<div class="header">
<para>
Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors" accesskey="u" rel="up">Specifying Options in an Argp Parser</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Flags-for-Argp-Options"></span><h4 class="subsubsection">25.3.4.1 Flags for Argp Options</title>

<para>The following flags may be or’d together in the <code>flags</code> field of a
<code>struct argp_option</code>.  These flags control various aspects of how
that option is parsed or displayed in help messages:
</para>

<dl compact="compact">
<dt xml:id="glibc-index-OPTION_005fARG_005fOPTIONAL"><span><code>OPTION_ARG_OPTIONAL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-OPTION_005fARG_005fOPTIONAL" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The argument associated with this option is optional.
</para>
</dd>
<dt xml:id="glibc-index-OPTION_005fHIDDEN"><span><code>OPTION_HIDDEN</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-OPTION_005fHIDDEN" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This option isn’t displayed in any help messages.
</para>
</dd>
<dt xml:id="glibc-index-OPTION_005fALIAS"><span><code>OPTION_ALIAS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-OPTION_005fALIAS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This option is an alias for the closest previous non-alias option.  This
means that it will be displayed in the same help entry, and will inherit
fields other than <code>name</code> and <code>key</code> from the option being
aliased.
</para>

</dd>
<dt xml:id="glibc-index-OPTION_005fDOC"><span><code>OPTION_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-OPTION_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This option isn’t actually an option and should be ignored by the actual
option parser.  It is an arbitrary section of documentation that should
be displayed in much the same manner as the options.  This is known as a
<emphasis>documentation option</emphasis>.
</para>
<para>If this flag is set, then the option <code>name</code> field is displayed
unmodified (e.g., no ‘<filename>&#45;&#45;</filename>’ prefix is added) at the left-margin where
a <emphasis>short</emphasis> option would normally be displayed, and this
documentation string is left in its usual place.  For purposes of
sorting, any leading whitespace and punctuation is ignored, unless the
first non-whitespace character is ‘<filename>-</filename>’.  This entry is displayed
after all options, after <code>OPTION_DOC</code> entries with a leading
‘<filename>-</filename>’, in the same group.
</para>
</dd>
<dt xml:id="glibc-index-OPTION_005fNO_005fUSAGE"><span><code>OPTION_NO_USAGE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-OPTION_005fNO_005fUSAGE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This option shouldn’t be included in ‘long’ usage messages, but should
still be included in other help messages.  This is intended for options
that are completely documented in an argp’s <code>args_doc</code>
field.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers">Specifying Argp Parsers</a>.  Including this option in the generic usage
list would be redundant, and should be avoided.
</para>
<para>For instance, if <code>args_doc</code> is <code>"FOO BAR\n-x BLAH"</code>, and the
‘<filename>-x</filename>’ option’s purpose is to distinguish these two cases, ‘<filename>-x</filename>’
should probably be marked <code>OPTION_NO_USAGE</code>.
</para></dd>
</dl>

<hr>
</div>
</div>
<div class="subsection" xml:id="glibc-Argp-Parser-Functions">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Children" accesskey="n" rel="next">Combining Multiple Argp Parsers</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors" accesskey="p" rel="prev">Specifying Options in an Argp Parser</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="u" rel="up">Specifying Argp Parsers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Argp-Parser-Functions-1"></span><h4 class="subsection">25.3.5 Argp Parser Functions</title>

<para>The function pointed to by the <code>parser</code> field in a <code>struct
argp</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers">Specifying Argp Parsers</a>) defines what actions take place in response
to each option or argument parsed.  It is also used as a hook, allowing a
parser to perform tasks at certain other points during parsing.
</para>
<para>Argp parser functions have the following type signature:
</para>
<span xml:id="glibc-index-argp-parser-functions"></span>
<div class="example">
<pre class="example">error_t <var>parser</var> (int <var>key</var>, char *<var>arg</var>, struct argp_state *<var>state</var>)
</pre></div>

<para>where the arguments are as follows:
</para>
<dl compact="compact">
<dt><span><var>key</var></span></dt>
<dd><para>For each option that is parsed, <var>parser</var> is called with a value of
<var>key</var> from that option’s <code>key</code> field in the option
vector.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors">Specifying Options in an Argp Parser</a>.  <var>parser</var> is also called at
other times with special reserved keys, such as <code>ARGP_KEY_ARG</code> for
non-option arguments.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Special-Keys">Special Keys for Argp Parser Functions</a>.
</para>
</dd>
<dt><span><var>arg</var></span></dt>
<dd><para>If <var>key</var> is an option, <var>arg</var> is its given value.  This defaults
to zero if no value is specified.  Only options that have a non-zero
<code>arg</code> field can ever have a value.  These must <emphasis>always</emphasis> have a
value unless the <code>OPTION_ARG_OPTIONAL</code> flag is specified.  If the
input being parsed specifies a value for an option that doesn’t allow
one, an error results before <var>parser</var> ever gets called.
</para>
<para>If <var>key</var> is <code>ARGP_KEY_ARG</code>, <var>arg</var> is a non-option
argument.  Other special keys always have a zero <var>arg</var>.
</para>
</dd>
<dt><span><var>state</var></span></dt>
<dd><para><var>state</var> points to a <code>struct argp_state</code>, containing useful
information about the current parsing state for use by
<var>parser</var>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State">Argp Parsing State</a>.
</para></dd>
</dl>

<para>When <var>parser</var> is called, it should perform whatever action is
appropriate for <var>key</var>, and return <code>0</code> for success,
<code>ARGP_ERR_UNKNOWN</code> if the value of <var>key</var> is not handled by this
parser function, or a unix error code if a real error
occurred.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Error-Codes">Error Codes</a>.
</para>
<dl class="def">
<dt xml:id="glibc-index-ARGP_005fERR_005fUNKNOWN"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>ARGP_ERR_UNKNOWN</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fERR_005fUNKNOWN" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Argp parser functions should return <code>ARGP_ERR_UNKNOWN</code> for any
<var>key</var> value they do not recognize, or for non-option arguments
(<code><var>key</var> == ARGP_KEY_ARG</code>) that they are not equipped to handle.
</para></dd></dl>

<para>A typical parser function uses a switch statement on <var>key</var>:
</para>
<div class="example">
<pre class="example">error_t
parse_opt (int key, char *arg, struct argp_state *state)
{
  switch (key)
    {
    case <var>option_key</var>:
      <var>action</var>
      break;
    …
    default:
      return ARGP_ERR_UNKNOWN;
    }
  return 0;
}
</pre></div>


<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Special-Keys" accesskey="1">Special Keys for Argp Parser Functions</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State" accesskey="2">Argp Parsing State</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Helper-Functions" accesskey="3">Functions For Use in Argp Parsers</a></li>
</ul>
<hr>
<div class="subsubsection" xml:id="glibc-Argp-Special-Keys">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State" accesskey="n" rel="next">Argp Parsing State</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions" accesskey="u" rel="up">Argp Parser Functions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Special-Keys-for-Argp-Parser-Functions"></span><h4 class="subsubsection">25.3.5.1 Special Keys for Argp Parser Functions</title>

<para>In addition to key values corresponding to user options, the <var>key</var>
argument to argp parser functions may have a number of other special
values.  In the following example <var>arg</var> and <var>state</var> refer to
parser function arguments.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions">Argp Parser Functions</a>.
</para>
<dl compact="compact">
<dt xml:id="glibc-index-ARGP_005fKEY_005fARG"><span><code>ARGP_KEY_ARG</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fARG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is not an option at all, but rather a command line argument, whose
value is pointed to by <var>arg</var>.
</para>
<para>When there are multiple parser functions in play due to argp parsers
being combined, it’s impossible to know which one will handle a specific
argument.  Each is called until one returns 0 or an error other than
<code>ARGP_ERR_UNKNOWN</code>; if an argument is not handled,
<code>argp_parse</code> immediately returns success, without parsing any more
arguments.
</para>
<para>Once a parser function returns success for this key, that fact is
recorded, and the <code>ARGP_KEY_NO_ARGS</code> case won’t be
used.  <emphasis>However</emphasis>, if while processing the argument a parser function
decrements the <code>next</code> field of its <var>state</var> argument, the option
won’t be considered processed; this is to allow you to actually modify
the argument, perhaps into an option, and have it processed again.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fARGS"><span><code>ARGP_KEY_ARGS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fARGS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If a parser function returns <code>ARGP_ERR_UNKNOWN</code> for
<code>ARGP_KEY_ARG</code>, it is immediately called again with the key
<code>ARGP_KEY_ARGS</code>, which has a similar meaning, but is slightly more
convenient for consuming all remaining arguments.  <var>arg</var> is 0, and
the tail of the argument vector may be found at <code><var>state</var>-&gt;argv
+ <var>state</var>-&gt;next</code>.  If success is returned for this key, and
<code><var>state</var>-&gt;next</code> is unchanged, all remaining arguments are
considered to have been consumed.  Otherwise, the amount by which
<code><var>state</var>-&gt;next</code> has been adjusted indicates how many were used.
Here’s an example that uses both, for different args:
</para>

<div class="example">
<pre class="example">…
case ARGP_KEY_ARG:
  if (<var>state</var>-&gt;arg_num == 0)
    /* First argument */
    first_arg = <var>arg</var>;
  else
    /* Let the next case parse it.  */
    return ARGP_KEY_UNKNOWN;
  break;
case ARGP_KEY_ARGS:
  remaining_args = <var>state</var>-&gt;argv + <var>state</var>-&gt;next;
  num_remaining_args = <var>state</var>-&gt;argc - <var>state</var>-&gt;next;
  break;
</pre></div>

</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fEND"><span><code>ARGP_KEY_END</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fEND" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This indicates that there are no more command line arguments.  Parser
functions are called in a different order, children first.  This allows
each parser to clean up its state for the parent.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fNO_005fARGS"><span><code>ARGP_KEY_NO_ARGS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fNO_005fARGS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Because it’s common to do some special processing if there aren’t any
non-option args, parser functions are called with this key if they
didn’t successfully process any non-option arguments.  This is called
just before <code>ARGP_KEY_END</code>, where more general validity checks on
previously parsed arguments take place.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fINIT"><span><code>ARGP_KEY_INIT</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fINIT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is passed in before any parsing is done.  Afterwards, the values of
each element of the <code>child_input</code> field of <var>state</var>, if any, are
copied to each child’s state to be the initial value of the <code>input</code>
when <emphasis>their</emphasis> parsers are called.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fSUCCESS"><span><code>ARGP_KEY_SUCCESS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fSUCCESS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Passed in when parsing has successfully been completed, even if
arguments remain.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fERROR"><span><code>ARGP_KEY_ERROR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fERROR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Passed in if an error has occurred and parsing is terminated.  In this
case a call with a key of <code>ARGP_KEY_SUCCESS</code> is never made.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fFINI"><span><code>ARGP_KEY_FINI</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fFINI" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The final key ever seen by any parser, even after
<code>ARGP_KEY_SUCCESS</code> and <code>ARGP_KEY_ERROR</code>.  Any resources
allocated by <code>ARGP_KEY_INIT</code> may be freed here.  At times, certain
resources allocated are to be returned to the caller after a successful
parse.  In that case, those particular resources can be freed in the
<code>ARGP_KEY_ERROR</code> case.
</para></dd>
</dl>

<para>In all cases, <code>ARGP_KEY_INIT</code> is the first key seen by parser
functions, and <code>ARGP_KEY_FINI</code> the last, unless an error was
returned by the parser for <code>ARGP_KEY_INIT</code>.  Other keys can occur
in one the following orders.  <var>opt</var> refers to an arbitrary option
key:
</para>
<dl compact="compact">
<dt><span><var>opt</var>… <code>ARGP_KEY_NO_ARGS</code> <code>ARGP_KEY_END</code> <code>ARGP_KEY_SUCCESS</code></span></dt>
<dd><para>The arguments being parsed did not contain any non-option arguments.
</para>
</dd>
<dt><span>( <var>opt</var> | <code>ARGP_KEY_ARG</code> )… <code>ARGP_KEY_END</code> <code>ARGP_KEY_SUCCESS</code></span></dt>
<dd><para>All non-option arguments were successfully handled by a parser
function.  There may be multiple parser functions if multiple argp
parsers were combined.
</para>
</dd>
<dt><span>( <var>opt</var> | <code>ARGP_KEY_ARG</code> )… <code>ARGP_KEY_SUCCESS</code></span></dt>
<dd><para>Some non-option argument went unrecognized.
</para>
<para>This occurs when every parser function returns <code>ARGP_KEY_UNKNOWN</code>
for an argument, in which case parsing stops at that argument if
<var>arg_index</var> is a null pointer.  Otherwise an error occurs.
</para></dd>
</dl>

<para>In all cases, if a non-null value for <var>arg_index</var> gets passed to
<code>argp_parse</code>, the index of the first unparsed command-line argument
is passed back in that value.
</para>
<para>If an error occurs and is either detected by argp or because a parser
function returned an error value, each parser is called with
<code>ARGP_KEY_ERROR</code>.  No further calls are made, except the final call
with <code>ARGP_KEY_FINI</code>.
</para>
<hr>
</div>
<div class="subsubsection" xml:id="glibc-Argp-Parsing-State">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Helper-Functions" accesskey="n" rel="next">Functions For Use in Argp Parsers</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Special-Keys" accesskey="p" rel="prev">Special Keys for Argp Parser Functions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions" accesskey="u" rel="up">Argp Parser Functions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Argp-Parsing-State-1"></span><h4 class="subsubsection">25.3.5.2 Argp Parsing State</title>

<para>The third argument to argp parser functions (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions">Argp Parser Functions</a>) is a pointer to a <code>struct argp_state</code>, which contains
information about the state of the option parsing.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-argp_005fstate"><span class="category">Data Type: </span><span><strong>struct argp_state</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-argp_005fstate" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This structure has the following fields, which may be modified as noted:
</para>
<dl compact="compact">
<dt><span><code>const struct argp *const root_argp</code></span></dt>
<dd><para>The top level argp parser being parsed.  Note that this is often
<emphasis>not</emphasis> the same <code>struct argp</code> passed into <code>argp_parse</code> by
the invoking program.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp">Parsing Program Options with Argp</a>.  It is an internal argp parser that
contains options implemented by <code>argp_parse</code> itself, such as
‘<filename>&#45;&#45;help</filename>’.
</para>
</dd>
<dt><span><code>int argc</code></span></dt>
<dt><span><code>char **argv</code></span></dt>
<dd><para>The argument vector being parsed.  This may be modified.
</para>
</dd>
<dt><span><code>int next</code></span></dt>
<dd><para>The index in <code>argv</code> of the next argument to be parsed.  This may be
modified.
</para>
<para>One way to consume all remaining arguments in the input is to set
<code><var>state</var>-&gt;next = <var>state</var>-&gt;argc</code>, perhaps after recording
the value of the <code>next</code> field to find the consumed arguments.  The
current option can be re-parsed immediately by decrementing this field,
then modifying <code><var>state</var>-&gt;argv[<var>state</var>-&gt;next]</code> to reflect
the option that should be reexamined.
</para>
</dd>
<dt><span><code>unsigned flags</code></span></dt>
<dd><para>The flags supplied to <code>argp_parse</code>.  These may be modified, although
some flags may only take effect when <code>argp_parse</code> is first
invoked.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Flags">Flags for <code>argp_parse</code></a>.
</para>
</dd>
<dt><span><code>unsigned arg_num</code></span></dt>
<dd><para>While calling a parsing function with the <var>key</var> argument
<code>ARGP_KEY_ARG</code>, this represents the number of the current arg,
starting at 0.  It is incremented after each <code>ARGP_KEY_ARG</code> call
returns.  At all other times, this is the number of <code>ARGP_KEY_ARG</code>
arguments that have been processed.
</para>
</dd>
<dt><span><code>int quoted</code></span></dt>
<dd><para>If non-zero, the index in <code>argv</code> of the first argument following a
special ‘<filename>&#45;&#45;</filename>’ argument.  This prevents anything that follows from
being interpreted as an option.  It is only set after argument parsing
has proceeded past this point.
</para>
</dd>
<dt><span><code>void *input</code></span></dt>
<dd><para>An arbitrary pointer passed in from the caller of <code>argp_parse</code>, in
the <var>input</var> argument.
</para>
</dd>
<dt><span><code>void **child_inputs</code></span></dt>
<dd><para>These are values that will be passed to child parsers.  This vector will
be the same length as the number of children in the current parser.  Each
child parser will be given the value of
<code><var>state</var>-&gt;child_inputs[<var>i</var>]</code> as <emphasis>its</emphasis>
<code><var>state</var>-&gt;input</code> field, where <var>i</var> is the index of the child
in the this parser’s <code>children</code> field.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Children">Combining Multiple Argp Parsers</a>.
</para>
</dd>
<dt><span><code>void *hook</code></span></dt>
<dd><para>For the parser function’s use.  Initialized to 0, but otherwise ignored
by argp.
</para>
</dd>
<dt><span><code>char *name</code></span></dt>
<dd><para>The name used when printing messages.  This is initialized to
<code>argv[0]</code>, or <code>program_invocation_name</code> if <code>argv[0]</code> is
unavailable.
</para>
</dd>
<dt><span><code>FILE *err_stream</code></span></dt>
<dt><span><code>FILE *out_stream</code></span></dt>
<dd><para>The stdio streams used when argp prints.  Error messages are printed to
<code>err_stream</code>, all other output, such as ‘<filename>&#45;&#45;help</filename>’ output) to
<code>out_stream</code>.  These are initialized to <code>stderr</code> and
<code>stdout</code> respectively.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Streams">Standard Streams</a>.
</para>
</dd>
<dt><span><code>void *pstate</code></span></dt>
<dd><para>Private, for use by the argp implementation.
</para></dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsubsection" xml:id="glibc-Argp-Helper-Functions">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State" accesskey="p" rel="prev">Argp Parsing State</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions" accesskey="u" rel="up">Argp Parser Functions</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Functions-For-Use-in-Argp-Parsers"></span><h4 class="subsubsection">25.3.5.3 Functions For Use in Argp Parsers</title>

<para>Argp provides a number of functions available to the user of argp
(see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions">Argp Parser Functions</a>), mostly for producing error messages.
These take as their first argument the <var>state</var> argument to the
parser function.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State">Argp Parsing State</a>.
</para>

<span xml:id="glibc-index-usage-messages_002c-in-argp"></span>
<dl class="def">
<dt xml:id="glibc-index-argp_005fusage"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>argp_usage</strong> <emphasis>(const struct argp_state *<var>state</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fusage" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:argpbuf env locale
| AS-Unsafe heap i18n corrupt
| AC-Unsafe mem corrupt lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>Outputs the standard usage message for the argp parser referred to by
<var>state</var> to <code><var>state</var>-&gt;err_stream</code> and terminates the program
with <code>exit (argp_err_exit_status)</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Global-Variables">Argp Global Variables</a>.
</para></dd></dl>

<span xml:id="glibc-index-syntax-error-messages_002c-in-argp"></span>
<dl class="def">
<dt xml:id="glibc-index-argp_005ferror"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>argp_error</strong> <emphasis>(const struct argp_state *<var>state</var>, const char *<var>fmt</var>, …)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005ferror" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:argpbuf env locale
| AS-Unsafe heap i18n corrupt
| AC-Unsafe mem corrupt lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>Prints the printf format string <var>fmt</var> and following args, preceded
by the program name and ‘<filename>:</filename>’, and followed by a ‘<filename>Try&nbsp;…&nbsp;<span class="nolinebreak">&#45;&#45;help</span></filename>’ message, and terminates the program with an exit status of
<code>argp_err_exit_status</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Global-Variables">Argp Global Variables</a>.
</para></dd></dl>

<span xml:id="glibc-index-error-messages_002c-in-argp"></span>
<dl class="def">
<dt xml:id="glibc-index-argp_005ffailure"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>argp_failure</strong> <emphasis>(const struct argp_state *<var>state</var>, int <var>status</var>, int <var>errnum</var>, const char *<var>fmt</var>, …)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005ffailure" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe corrupt heap
| AC-Unsafe lock corrupt mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>Similar to the standard GNU error-reporting function <code>error</code>, this
prints the program name and ‘<filename>:</filename>’, the printf format string
<var>fmt</var>, and the appropriate following args.  If it is non-zero, the
standard unix error text for <var>errnum</var> is printed.  If <var>status</var> is
non-zero, it terminates the program with that value as its exit status.
</para>
<para>The difference between <code>argp_failure</code> and <code>argp_error</code> is that
<code>argp_error</code> is for <emphasis>parsing errors</emphasis>, whereas
<code>argp_failure</code> is for other problems that occur during parsing but
don’t reflect a syntactic problem with the input, such as illegal values
for options, bad phase of the moon, etc.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-argp_005fstate_005fhelp"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>argp_state_help</strong> <emphasis>(const struct argp_state *<var>state</var>, FILE *<var>stream</var>, unsigned <var>flags</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fstate_005fhelp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:argpbuf env locale
| AS-Unsafe heap i18n corrupt
| AC-Unsafe mem corrupt lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>Outputs a help message for the argp parser referred to by <var>state</var>,
to <var>stream</var>.  The <var>flags</var> argument determines what sort of help
message is produced.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Flags">Flags for the <code>argp_help</code> Function</a>.
</para></dd></dl>

<para>Error output is sent to <code><var>state</var>-&gt;err_stream</code>, and the program
name printed is <code><var>state</var>-&gt;name</code>.
</para>
<para>The output or program termination behavior of these functions may be
suppressed if the <code>ARGP_NO_EXIT</code> or <code>ARGP_NO_ERRS</code> flags are
passed to <code>argp_parse</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Flags">Flags for <code>argp_parse</code></a>.
</para>
<para>This behavior is useful if an argp parser is exported for use by other
programs (e.g., by a library), and may be used in a context where it is
not desirable to terminate the program in response to parsing errors.  In
argp parsers intended for such general use, and for the case where the
program <emphasis>doesn’t</emphasis> terminate, calls to any of these functions should
be followed by code that returns the appropriate error code:
</para>
<div class="example">
<pre class="example">if (<var>bad argument syntax</var>)
  {
     argp_usage (<var>state</var>);
     return EINVAL;
  }
</pre></div>

<para>If a parser function will <emphasis>only</emphasis> be used when <code>ARGP_NO_EXIT</code>
is not set, the return may be omitted.
</para>
<hr>
</div>
</div>
<div class="subsection" xml:id="glibc-Argp-Children">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Filtering" accesskey="n" rel="next">Customizing Argp Help Output</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions" accesskey="p" rel="prev">Argp Parser Functions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="u" rel="up">Specifying Argp Parsers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Combining-Multiple-Argp-Parsers"></span><h4 class="subsection">25.3.6 Combining Multiple Argp Parsers</title>

<para>The <code>children</code> field in a <code>struct argp</code> enables other argp
parsers to be combined with the referencing one for the parsing of a
single set of arguments.  This field should point to a vector of
<code>struct argp_child</code>, which is terminated by an entry having a value
of zero in the <code>argp</code> field.
</para>
<para>Where conflicts between combined parsers arise, as when two specify an
option with the same name, the parser conflicts are resolved in favor of
the parent argp parser(s), or the earlier of the argp parsers in the
list of children.
</para>
<dl class="def">
<dt xml:id="glibc-index-struct-argp_005fchild"><span class="category">Data Type: </span><span><strong>struct argp_child</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-struct-argp_005fchild" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>An entry in the list of subsidiary argp parsers pointed to by the
<code>children</code> field in a <code>struct argp</code>.  The fields are as
follows:
</para>
<dl compact="compact">
<dt><span><code>const struct argp *argp</code></span></dt>
<dd><para>The child argp parser, or zero to end of the list.
</para>
</dd>
<dt><span><code>int flags</code></span></dt>
<dd><para>Flags for this child.
</para>
</dd>
<dt><span><code>const char *header</code></span></dt>
<dd><para>If non-zero, this is an optional header to be printed within help output
before the child options.  As a side-effect, a non-zero value forces the
child options to be grouped together.  To achieve this effect without
actually printing a header string, use a value of <code>""</code>.  As with
header strings specified in an option entry, the conventional value of
the last character is ‘<filename>:</filename>’.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors">Specifying Options in an Argp Parser</a>.
</para>
</dd>
<dt><span><code>int group</code></span></dt>
<dd><para>This is where the child options are grouped relative to the other
‘consolidated’ options in the parent argp parser.  The values are the
same as the <code>group</code> field in <code>struct argp_option</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors">Specifying Options in an Argp Parser</a>.  All child-groupings follow parent options at a
particular group level.  If both this field and <code>header</code> are zero,
then the child’s options aren’t grouped together, they are merged with
parent options at the parent option group level.
</para>
</dd>
</dl>
</dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Flags">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help" accesskey="n" rel="next">The <code>argp_help</code> Function</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="p" rel="prev">Specifying Argp Parsers</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="u" rel="up">Parsing Program Options with Argp</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Flags-for-argp_005fparse"></span><h4 class="subsection">25.3.7 Flags for <code>argp_parse</code></title>

<para>The default behavior of <code>argp_parse</code> is designed to be convenient
for the most common case of parsing program command line argument.  To
modify these defaults, the following flags may be or’d together in the
<var>flags</var> argument to <code>argp_parse</code>:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-ARGP_005fPARSE_005fARGV0"><span><code>ARGP_PARSE_ARGV0</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fPARSE_005fARGV0" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Don’t ignore the first element of the <var>argv</var> argument to
<code>argp_parse</code>.  Unless <code>ARGP_NO_ERRS</code> is set, the first element
of the argument vector is skipped for option parsing purposes, as it
corresponds to the program name in a command line.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fNO_005fERRS"><span><code>ARGP_NO_ERRS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fNO_005fERRS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Don’t print error messages for unknown options to <code>stderr</code>; unless
this flag is set, <code>ARGP_PARSE_ARGV0</code> is ignored, as <code>argv[0]</code>
is used as the program name in the error messages.  This flag implies
<code>ARGP_NO_EXIT</code>.  This is based on the assumption that silent exiting
upon errors is bad behavior.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fNO_005fARGS"><span><code>ARGP_NO_ARGS</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fNO_005fARGS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Don’t parse any non-option args.  Normally these are parsed by calling
the parse functions with a key of <code>ARGP_KEY_ARG</code>, the actual
argument being the value.  This flag needn’t normally be set, as the
default behavior is to stop parsing as soon as an argument fails to be
parsed.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions">Argp Parser Functions</a>.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fIN_005fORDER"><span><code>ARGP_IN_ORDER</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fIN_005fORDER" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Parse options and arguments in the same order they occur on the command
line.  Normally they’re rearranged so that all options come first.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fNO_005fHELP"><span><code>ARGP_NO_HELP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fNO_005fHELP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Don’t provide the standard long option ‘<filename>&#45;&#45;help</filename>’, which ordinarily
causes usage and option help information to be output to <code>stdout</code>
and <code>exit (0)</code>.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fNO_005fEXIT"><span><code>ARGP_NO_EXIT</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fNO_005fEXIT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Don’t exit on errors, although they may still result in error messages.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fLONG_005fONLY"><span><code>ARGP_LONG_ONLY</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fLONG_005fONLY" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Use the GNU getopt ‘long-only’ rules for parsing arguments.  This allows
long-options to be recognized with only a single ‘<filename>-</filename>’
(i.e., ‘<filename>-help</filename>’).  This results in a less useful interface, and its
use is discouraged as it conflicts with the way most GNU programs work
as well as the GNU coding standards.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fSILENT"><span><code>ARGP_SILENT</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fSILENT" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Turns off any message-printing/exiting options, specifically
<code>ARGP_NO_EXIT</code>, <code>ARGP_NO_ERRS</code>, and <code>ARGP_NO_HELP</code>.
</para></dd>
</dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Help-Filtering">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Children" accesskey="p" rel="prev">Combining Multiple Argp Parsers</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers" accesskey="u" rel="up">Specifying Argp Parsers</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Customizing-Argp-Help-Output"></span><h4 class="subsection">25.3.8 Customizing Argp Help Output</title>

<para>The <code>help_filter</code> field in a <code>struct argp</code> is a pointer to a
function that filters the text of help messages before displaying
them.  They have a function signature like:
</para>
<div class="example">
<pre class="example">char *<var>help-filter</var> (int <var>key</var>, const char *<var>text</var>, void *<var>input</var>)
</pre></div>


<para>Where <var>key</var> is either a key from an option, in which case <var>text</var>
is that option’s help text.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors">Specifying Options in an Argp Parser</a>.  Alternately, one
of the special keys with names beginning with ‘<filename>ARGP_KEY_HELP_</filename>’
might be used, describing which other help text <var>text</var> will contain.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Filter-Keys">Special Keys for Argp Help Filter Functions</a>.
</para>
<para>The function should return either <var>text</var> if it remains as-is, or a
replacement string allocated using <code>malloc</code>.  This will be either be
freed by argp or zero, which prints nothing.  The value of <var>text</var> is
supplied <emphasis>after</emphasis> any translation has been done, so if any of the
replacement text needs translation, it will be done by the filter
function.  <var>input</var> is either the input supplied to <code>argp_parse</code>
or it is zero, if <code>argp_help</code> was called directly by the user.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Filter-Keys" accesskey="1">Special Keys for Argp Help Filter Functions</a></li>
</ul>
<hr>
<div class="subsubsection" xml:id="glibc-Argp-Help-Filter-Keys">
<div class="header">
<para>
Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help-Filtering" accesskey="u" rel="up">Customizing Argp Help Output</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Special-Keys-for-Argp-Help-Filter-Functions"></span><h4 class="subsubsection">25.3.8.1 Special Keys for Argp Help Filter Functions</title>

<para>The following special values may be passed to an argp help filter
function as the first argument in addition to key values for user
options.  They specify which help text the <var>text</var> argument contains:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-ARGP_005fKEY_005fHELP_005fPRE_005fDOC"><span><code>ARGP_KEY_HELP_PRE_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fHELP_005fPRE_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The help text preceding options.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fHELP_005fPOST_005fDOC"><span><code>ARGP_KEY_HELP_POST_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fHELP_005fPOST_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The help text following options.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fHELP_005fHEADER"><span><code>ARGP_KEY_HELP_HEADER</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fHELP_005fHEADER" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The option header string.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fHELP_005fEXTRA"><span><code>ARGP_KEY_HELP_EXTRA</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fHELP_005fEXTRA" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is used after all other documentation; <var>text</var> is zero for this key.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fHELP_005fDUP_005fARGS_005fNOTE"><span><code>ARGP_KEY_HELP_DUP_ARGS_NOTE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fHELP_005fDUP_005fARGS_005fNOTE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The explanatory note printed when duplicate option arguments have been suppressed.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fKEY_005fHELP_005fARGS_005fDOC"><span><code>ARGP_KEY_HELP_ARGS_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fKEY_005fHELP_005fARGS_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The argument doc string; formally the <code>args_doc</code> field from the argp parser.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers">Specifying Argp Parsers</a>.
</para></dd>
</dl>

<hr>
</div>
</div>
<div class="subsection" xml:id="glibc-Argp-Help">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples" accesskey="n" rel="next">Argp Examples</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Flags" accesskey="p" rel="prev">Flags for <code>argp_parse</code></a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="u" rel="up">Parsing Program Options with Argp</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-The-argp_005fhelp-Function"></span><h4 class="subsection">25.3.9 The <code>argp_help</code> Function</title>

<para>Normally programs using argp need not be written with particular
printing argument-usage-type help messages in mind as the standard
‘<filename>&#45;&#45;help</filename>’ option is handled automatically by argp.  Typical error
cases can be handled using <code>argp_usage</code> and
<code>argp_error</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Helper-Functions">Functions For Use in Argp Parsers</a>.  However, if it’s
desirable to print a help message in some context other than parsing the
program options, argp offers the <code>argp_help</code> interface.
</para>
<dl class="def">
<dt xml:id="glibc-index-argp_005fhelp"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>argp_help</strong> <emphasis>(const struct argp *<var>argp</var>, FILE *<var>stream</var>, unsigned <var>flags</var>, char *<var>name</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-argp_005fhelp" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:argpbuf env locale
| AS-Unsafe heap i18n corrupt
| AC-Unsafe mem corrupt lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This outputs a help message for the argp parser <var>argp</var> to
<var>stream</var>.  The type of messages printed will be determined by
<var>flags</var>.
</para>
<para>Any options such as ‘<filename>&#45;&#45;help</filename>’ that are implemented automatically by
argp itself will <emphasis>not</emphasis> be present in the help output; for this
reason it is best to use <code>argp_state_help</code> if calling from within
an argp parser function.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Helper-Functions">Functions For Use in Argp Parsers</a>.
</para></dd></dl>


<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Help-Flags">
<div class="header">
<para>
Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help" accesskey="u" rel="up">The <code>argp_help</code> Function</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Flags-for-the-argp_005fhelp-Function"></span><h4 class="subsection">25.3.10 Flags for the <code>argp_help</code> Function</title>

<para>When calling <code>argp_help</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help">The <code>argp_help</code> Function</a>) or
<code>argp_state_help</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Helper-Functions">Functions For Use in Argp Parsers</a>) the exact output
is determined by the <var>flags</var> argument.  This should consist of any of
the following flags, or’d together:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-ARGP_005fHELP_005fUSAGE"><span><code>ARGP_HELP_USAGE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fUSAGE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A unix ‘<filename>Usage:</filename>’ message that explicitly lists all options.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fSHORT_005fUSAGE"><span><code>ARGP_HELP_SHORT_USAGE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fSHORT_005fUSAGE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A unix ‘<filename>Usage:</filename>’ message that displays an appropriate placeholder to
indicate where the options go; useful for showing the non-option
argument syntax.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fSEE"><span><code>ARGP_HELP_SEE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fSEE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A ‘<filename>Try … for more help</filename>’ message; ‘<filename>…</filename>’ contains the
program name and ‘<filename>&#45;&#45;help</filename>’.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fLONG"><span><code>ARGP_HELP_LONG</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fLONG" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A verbose option help message that gives each option available along
with its documentation string.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fPRE_005fDOC"><span><code>ARGP_HELP_PRE_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fPRE_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The part of the argp parser doc string preceding the verbose option help.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fPOST_005fDOC"><span><code>ARGP_HELP_POST_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fPOST_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The part of the argp parser doc string that following the verbose option help.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fDOC"><span><code>ARGP_HELP_DOC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fDOC" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para><code>(ARGP_HELP_PRE_DOC | ARGP_HELP_POST_DOC)</code>
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fBUG_005fADDR"><span><code>ARGP_HELP_BUG_ADDR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fBUG_005fADDR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A message that prints where to report bugs for this program, if the
<code>argp_program_bug_address</code> variable contains this information.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fLONG_005fONLY"><span><code>ARGP_HELP_LONG_ONLY</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fLONG_005fONLY" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This will modify any output to reflect the <code>ARGP_LONG_ONLY</code> mode.
</para></dd>
</dl>

<para>The following flags are only understood when used with
<code>argp_state_help</code>.  They control whether the function returns after
printing its output, or terminates the program:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-ARGP_005fHELP_005fEXIT_005fERR"><span><code>ARGP_HELP_EXIT_ERR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fEXIT_005fERR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This will terminate the program with <code>exit (argp_err_exit_status)</code>.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fEXIT_005fOK"><span><code>ARGP_HELP_EXIT_OK</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fEXIT_005fOK" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This will terminate the program with <code>exit (0)</code>.
</para></dd>
</dl>

<para>The following flags are combinations of the basic flags for printing
standard messages:
</para>
<dl compact="compact">
<dt xml:id="glibc-index-ARGP_005fHELP_005fSTD_005fERR"><span><code>ARGP_HELP_STD_ERR</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fSTD_005fERR" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Assuming that an error message for a parsing error has printed, this
prints a message on how to get help, and terminates the program with an
error.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fSTD_005fUSAGE"><span><code>ARGP_HELP_STD_USAGE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fSTD_005fUSAGE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This prints a standard usage message and terminates the program with an
error.  This is used when no other specific error messages are
appropriate or available.
</para>
</dd>
<dt xml:id="glibc-index-ARGP_005fHELP_005fSTD_005fHELP"><span><code>ARGP_HELP_STD_HELP</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-ARGP_005fHELP_005fSTD_005fHELP" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This prints the standard response for a ‘<filename>&#45;&#45;help</filename>’ option, and
terminates the program successfully.
</para></dd>
</dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Argp-Examples">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-User-Customization" accesskey="n" rel="next">Argp User Customization</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Help" accesskey="p" rel="prev">The <code>argp_help</code> Function</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="u" rel="up">Parsing Program Options with Argp</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Argp-Examples-1"></span><h4 class="subsection">25.3.11 Argp Examples</title>

<para>These example programs demonstrate the basic usage of argp.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-1" accesskey="1">A Minimal Program Using Argp</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-2" accesskey="2">A Program Using Argp with Only Default Options</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-3" accesskey="3">A Program Using Argp with User Options</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-4" accesskey="4">A Program Using Multiple Combined Argp Parsers</a></li>
</ul>
<hr>
<div class="subsubsection" xml:id="glibc-Argp-Example-1">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-2" accesskey="n" rel="next">A Program Using Argp with Only Default Options</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples" accesskey="u" rel="up">Argp Examples</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-A-Minimal-Program-Using-Argp"></span><h4 class="subsubsection">25.3.11.1 A Minimal Program Using Argp</title>

<para>This is perhaps the smallest program possible that uses argp.  It won’t
do much except give an error message and exit when there are any
arguments, and prints a rather pointless message for ‘<filename>&#45;&#45;help</filename>’.
</para>
<div class="example">
<pre class="example">
/* <span class="roman">This is (probably) the smallest possible program that
   uses argp.  It won’t do much except give an error
   messages and exit when there are any arguments, and print
   a (rather pointless) messages for –help.</span> */

#include &lt;stdlib.h&gt;
#include &lt;argp.h&gt;

int
main (int argc, char **argv)
{
  argp_parse (0, argc, argv, 0, 0, 0);
  exit (0);
}
</pre></div>

<hr>
</div>
<div class="subsubsection" xml:id="glibc-Argp-Example-2">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-3" accesskey="n" rel="next">A Program Using Argp with User Options</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-1" accesskey="p" rel="prev">A Minimal Program Using Argp</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples" accesskey="u" rel="up">Argp Examples</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-A-Program-Using-Argp-with-Only-Default-Options"></span><h4 class="subsubsection">25.3.11.2 A Program Using Argp with Only Default Options</title>

<para>This program doesn’t use any options or arguments, it uses argp to be
compliant with the GNU standard command line format.
</para>
<para>In addition to giving no arguments and implementing a ‘<filename>&#45;&#45;help</filename>’
option, this example has a ‘<filename>&#45;&#45;version</filename>’ option, which will put the
given documentation string and bug address in the ‘<filename>&#45;&#45;help</filename>’ output,
as per GNU standards.
</para>
<para>The variable <code>argp</code> contains the argument parser
specification.  Adding fields to this structure is the way most
parameters are passed to <code>argp_parse</code>.  The first three fields are
normally used, but they are not in this small program.  There are also
two global variables that argp can use defined here,
<code>argp_program_version</code> and <code>argp_program_bug_address</code>.  They
are considered global variables because they will almost always be
constant for a given program, even if they use different argument
parsers for various tasks.
</para>
<div class="example">
<pre class="example">
/* <span class="roman">This program doesn’t use any options or arguments, but uses
   argp to be compliant with the GNU standard command line
   format.

   In addition to making sure no arguments are given, and
   implementing a –help option, this example will have a
   –version option, and will put the given documentation string
   and bug address in the –help output, as per GNU standards.

   The variable ARGP contains the argument parser specification;
   adding fields to this structure is the way most parameters are
   passed to argp_parse (the first three fields are usually used,
   but not in this small program).  There are also two global
   variables that argp knows about defined here,
   ARGP_PROGRAM_VERSION and ARGP_PROGRAM_BUG_ADDRESS (they are
   global variables because they will almost always be constant
   for a given program, even if it uses different argument
   parsers for various tasks).</span> */

#include &lt;stdlib.h&gt;
#include &lt;argp.h&gt;

const char *argp_program_version =
  "argp-ex2 1.0";
const char *argp_program_bug_address =
  "&lt;bug-gnu-utils@gnu.org&gt;";

/* <span class="roman">Program documentation.</span> */
static char doc[] =
  "Argp example #2 &#45;&#45; a pretty minimal program using argp";

/* <span class="roman">Our argument parser.  The <code>options</code>, <code>parser</code>, and
   <code>args_doc</code> fields are zero because we have neither options or
   arguments; <code>doc</code> and <code>argp_program_bug_address</code> will be
   used in the output for ‘<filename>&#45;&#45;help</filename>’, and the ‘<filename>&#45;&#45;version</filename>’
   option will print out <code>argp_program_version</code>.</span> */
static struct argp argp = { 0, 0, 0, doc };

int
main (int argc, char **argv)
{
  argp_parse (&amp;argp, argc, argv, 0, 0, 0);
  exit (0);
}
</pre></div>

<hr>
</div>
<div class="subsubsection" xml:id="glibc-Argp-Example-3">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-4" accesskey="n" rel="next">A Program Using Multiple Combined Argp Parsers</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-2" accesskey="p" rel="prev">A Program Using Argp with Only Default Options</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples" accesskey="u" rel="up">Argp Examples</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-A-Program-Using-Argp-with-User-Options"></span><h4 class="subsubsection">25.3.11.3 A Program Using Argp with User Options</title>

<para>This program uses the same features as example 2, adding user options
and arguments.
</para>
<para>We now use the first four fields in <code>argp</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers">Specifying Argp Parsers</a>)
and specify <code>parse_opt</code> as the parser function.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parser-Functions">Argp Parser Functions</a>.
</para>
<para>Note that in this example, <code>main</code> uses a structure to communicate
with the <code>parse_opt</code> function, a pointer to which it passes in the
<code>input</code> argument to <code>argp_parse</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp">Parsing Program Options with Argp</a>.  It is retrieved
by <code>parse_opt</code> through the <code>input</code> field in its <code>state</code>
argument.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsing-State">Argp Parsing State</a>.  Of course, it’s also possible to
use global variables instead, but using a structure like this is
somewhat more flexible and clean.
</para>
<div class="example">
<pre class="example">
/* <span class="roman">This program uses the same features as example 2, and uses options and
   arguments.

   We now use the first four fields in ARGP, so here’s a description of them:
     OPTIONS  – A pointer to a vector of struct argp_option (see below)
     PARSER   – A function to parse a single option, called by argp
     ARGS_DOC – A string describing how the non-option arguments should look
     DOC      – A descriptive string about this program; if it contains a
                 vertical tab character (\v), the part after it will be
                 printed *following* the options

   The function PARSER takes the following arguments:
     KEY  – An integer specifying which option this is (taken
             from the KEY field in each struct argp_option), or
             a special key specifying something else; the only
             special keys we use here are ARGP_KEY_ARG, meaning
             a non-option argument, and ARGP_KEY_END, meaning
             that all arguments have been parsed
     ARG  – For an option KEY, the string value of its
             argument, or NULL if it has none
     STATE– A pointer to a struct argp_state, containing
             various useful information about the parsing state; used here
             are the INPUT field, which reflects the INPUT argument to
             argp_parse, and the ARG_NUM field, which is the number of the
             current non-option argument being parsed
   It should return either 0, meaning success, ARGP_ERR_UNKNOWN, meaning the
   given KEY wasn’t recognized, or an errno value indicating some other
   error.

   Note that in this example, main uses a structure to communicate with the
   parse_opt function, a pointer to which it passes in the INPUT argument to
   argp_parse.  Of course, it’s also possible to use global variables
   instead, but this is somewhat more flexible.

   The OPTIONS field contains a pointer to a vector of struct argp_option’s;
   that structure has the following fields (if you assign your option
   structures using array initialization like this example, unspecified
   fields will be defaulted to 0, and need not be specified):
     NAME   – The name of this option’s long option (may be zero)
     KEY    – The KEY to pass to the PARSER function when parsing this option,
               *and* the name of this option’s short option, if it is a
               printable ascii character
     ARG    – The name of this option’s argument, if any
     FLAGS  – Flags describing this option; some of them are:
                 OPTION_ARG_OPTIONAL – The argument to this option is optional
                 OPTION_ALIAS        – This option is an alias for the
                                        previous option
                 OPTION_HIDDEN       – Don’t show this option in –help output
     DOC    – A documentation string for this option, shown in –help output

   An options vector should be terminated by an option with all fields zero.</span> */

#include &lt;stdlib.h&gt;
#include &lt;argp.h&gt;

const char *argp_program_version =
  "argp-ex3 1.0";
const char *argp_program_bug_address =
  "&lt;bug-gnu-utils@gnu.org&gt;";

/* <span class="roman">Program documentation.</span> */
static char doc[] =
  "Argp example #3 &#45;&#45; a program with options and arguments using argp";

/* <span class="roman">A description of the arguments we accept.</span> */
static char args_doc[] = "ARG1 ARG2";

/* <span class="roman">The options we understand.</span> */
static struct argp_option options[] = {
  {"verbose",  'v', 0,      0,  "Produce verbose output" },
  {"quiet",    'q', 0,      0,  "Don't produce any output" },
  {"silent",   's', 0,      OPTION_ALIAS },
  {"output",   'o', "FILE", 0,
   "Output to FILE instead of standard output" },
  { 0 }
};

/* <span class="roman">Used by <code>main</code> to communicate with <code>parse_opt</code>.</span> */
struct arguments
{
  char *args[2];                /* <span class="roman"><var>arg1</var> &amp; <var>arg2</var></span> */
  int silent, verbose;
  char *output_file;
};

/* <span class="roman">Parse a single option.</span> */
static error_t
parse_opt (int key, char *arg, struct argp_state *state)
{
  /* <span class="roman">Get the <var>input</var> argument from <code>argp_parse</code>, which we
     know is a pointer to our arguments structure.</span> */
  struct arguments *arguments = state-&gt;input;

  switch (key)
    {
    case 'q': case 's':
      arguments-&gt;silent = 1;
      break;
    case 'v':
      arguments-&gt;verbose = 1;
      break;
    case 'o':
      arguments-&gt;output_file = arg;
      break;

    case ARGP_KEY_ARG:
      if (state-&gt;arg_num &gt;= 2)
        /* <span class="roman">Too many arguments.</span> */
        argp_usage (state);

      arguments-&gt;args[state-&gt;arg_num] = arg;

      break;

    case ARGP_KEY_END:
      if (state-&gt;arg_num &lt; 2)
        /* <span class="roman">Not enough arguments.</span> */
        argp_usage (state);
      break;

    default:
      return ARGP_ERR_UNKNOWN;
    }
  return 0;
}

/* <span class="roman">Our argp parser.</span> */
static struct argp argp = { options, parse_opt, args_doc, doc };

int
main (int argc, char **argv)
{
  struct arguments arguments;

  /* <span class="roman">Default values.</span> */
  arguments.silent = 0;
  arguments.verbose = 0;
  arguments.output_file = "-";

  /* <span class="roman">Parse our arguments; every option seen by <code>parse_opt</code> will
     be reflected in <code>arguments</code>.</span> */
  argp_parse (&amp;argp, argc, argv, 0, 0, &amp;arguments);

  printf ("ARG1 = %s\nARG2 = %s\nOUTPUT_FILE = %s\n"
          "VERBOSE = %s\nSILENT = %s\n",
          arguments.args[0], arguments.args[1],
          arguments.output_file,
          arguments.verbose ? "yes" : "no",
          arguments.silent ? "yes" : "no");

  exit (0);
}
</pre></div>

<hr>
</div>
<div class="subsubsection" xml:id="glibc-Argp-Example-4">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Example-3" accesskey="p" rel="prev">A Program Using Argp with User Options</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples" accesskey="u" rel="up">Argp Examples</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-A-Program-Using-Multiple-Combined-Argp-Parsers"></span><h4 class="subsubsection">25.3.11.4 A Program Using Multiple Combined Argp Parsers</title>

<para>This program uses the same features as example 3, but has more options,
and presents more structure in the ‘<filename>&#45;&#45;help</filename>’ output.  It also
illustrates how you can ‘steal’ the remainder of the input arguments
past a certain point for programs that accept a list of items.  It also
illustrates the <var>key</var> value <code>ARGP_KEY_NO_ARGS</code>, which is only
given if no non-option arguments were supplied to the
program.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Special-Keys">Special Keys for Argp Parser Functions</a>.
</para>
<para>For structuring help output, two features are used: <emphasis>headers</emphasis> and a
two part option string.  The <emphasis>headers</emphasis> are entries in the options
vector.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Vectors">Specifying Options in an Argp Parser</a>.  The first four fields are zero.  The
two part documentation string are in the variable <code>doc</code>, which
allows documentation both before and after the options.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Parsers">Specifying Argp Parsers</a>, the two parts of <code>doc</code> are separated by a vertical-tab
character (<code>'\v'</code>, or <code>'\013'</code>).  By convention, the
documentation before the options is a short string stating what the
program does, and after any options it is longer, describing the
behavior in more detail.  All documentation strings are automatically
filled for output, although newlines may be included to force a line
break at a particular point.  In addition, documentation strings are
passed to the <code>gettext</code> function, for possible translation into the
current locale.
</para>
<div class="example">
<pre class="example">
/* <span class="roman">This program uses the same features as example 3, but has more
   options, and somewhat more structure in the -help output.  It
   also shows how you can ‘steal’ the remainder of the input
   arguments past a certain point, for programs that accept a
   list of items.  It also shows the special argp KEY value
   ARGP_KEY_NO_ARGS, which is only given if no non-option
   arguments were supplied to the program.

   For structuring the help output, two features are used,
   *headers* which are entries in the options vector with the
   first four fields being zero, and a two part documentation
   string (in the variable DOC), which allows documentation both
   before and after the options; the two parts of DOC are
   separated by a vertical-tab character (’\v’, or ’\013’).  By
   convention, the documentation before the options is just a
   short string saying what the program does, and that afterwards
   is longer, describing the behavior in more detail.  All
   documentation strings are automatically filled for output,
   although newlines may be included to force a line break at a
   particular point.  All documentation strings are also passed to
   the ‘gettext’ function, for possible translation into the
   current locale.</span> */

#include &lt;stdlib.h&gt;
#include &lt;error.h&gt;
#include &lt;argp.h&gt;

const char *argp_program_version =
  "argp-ex4 1.0";
const char *argp_program_bug_address =
  "&lt;bug-gnu-utils@prep.ai.mit.edu&gt;";

/* <span class="roman">Program documentation.</span> */
static char doc[] =
  "Argp example #4 &#45;&#45; a program with somewhat more complicated\
options\
\vThis part of the documentation comes *after* the options;\
 note that the text is automatically filled, but it's possible\
 to force a line-break, e.g.\n&lt;&#45;&#45; here.";

/* <span class="roman">A description of the arguments we accept.</span> */
static char args_doc[] = "ARG1 [STRING...]";

/* <span class="roman">Keys for options without short-options.</span> */
#define OPT_ABORT  1            /* <span class="roman">–abort</span> */

/* <span class="roman">The options we understand.</span> */
static struct argp_option options[] = {
  {"verbose",  'v', 0,       0, "Produce verbose output" },
  {"quiet",    'q', 0,       0, "Don't produce any output" },
  {"silent",   's', 0,       OPTION_ALIAS },
  {"output",   'o', "FILE",  0,
   "Output to FILE instead of standard output" },

  {0,0,0,0, "The following options should be grouped together:" },
  {"repeat",   'r', "COUNT", OPTION_ARG_OPTIONAL,
   "Repeat the output COUNT (default 10) times"},
  {"abort",    OPT_ABORT, 0, 0, "Abort before showing any output"},

  { 0 }
};

/* <span class="roman">Used by <code>main</code> to communicate with <code>parse_opt</code>.</span> */
struct arguments
{
  char *arg1;                   /* <span class="roman"><var>arg1</var></span> */
  char **strings;               /* <span class="roman">[<var>string</var>…]</span> */
  int silent, verbose, abort;   /* <span class="roman">‘<filename>-s</filename>’, ‘<filename>-v</filename>’, ‘<filename>&#45;&#45;abort</filename>’</span> */
  char *output_file;            /* <span class="roman"><var>file</var> arg to ‘<filename>&#45;&#45;output</filename>’</span> */
  int repeat_count;             /* <span class="roman"><var>count</var> arg to ‘<filename>&#45;&#45;repeat</filename>’</span> */
};

/* <span class="roman">Parse a single option.</span> */
static error_t
parse_opt (int key, char *arg, struct argp_state *state)
{
  /* <span class="roman">Get the <code>input</code> argument from <code>argp_parse</code>, which we
     know is a pointer to our arguments structure.</span> */
  struct arguments *arguments = state-&gt;input;

  switch (key)
    {
    case 'q': case 's':
      arguments-&gt;silent = 1;
      break;
    case 'v':
      arguments-&gt;verbose = 1;
      break;
    case 'o':
      arguments-&gt;output_file = arg;
      break;
    case 'r':
      arguments-&gt;repeat_count = arg ? atoi (arg) : 10;
      break;
    case OPT_ABORT:
      arguments-&gt;abort = 1;
      break;

    case ARGP_KEY_NO_ARGS:
      argp_usage (state);

    case ARGP_KEY_ARG:
      /* <span class="roman">Here we know that <code>state-&gt;arg_num == 0</code>, since we
         force argument parsing to end before any more arguments can
         get here.</span> */
      arguments-&gt;arg1 = arg;

      /* <span class="roman">Now we consume all the rest of the arguments.
         <code>state-&gt;next</code> is the index in <code>state-&gt;argv</code> of the
         next argument to be parsed, which is the first <var>string</var>
         we’re interested in, so we can just use
         <code>&amp;state-&gt;argv[state-&gt;next]</code> as the value for
         arguments-&gt;strings.

         <emphasis>In addition</emphasis>, by setting <code>state-&gt;next</code> to the end
         of the arguments, we can force argp to stop parsing here and
         return.</span> */
      arguments-&gt;strings = &amp;state-&gt;argv[state-&gt;next];
      state-&gt;next = state-&gt;argc;

      break;

    default:
      return ARGP_ERR_UNKNOWN;
    }
  return 0;
}

/* <span class="roman">Our argp parser.</span> */
static struct argp argp = { options, parse_opt, args_doc, doc };

int
main (int argc, char **argv)
{
  int i, j;
  struct arguments arguments;

  /* <span class="roman">Default values.</span> */
  arguments.silent = 0;
  arguments.verbose = 0;
  arguments.output_file = "-";
  arguments.repeat_count = 1;
  arguments.abort = 0;

  /* <span class="roman">Parse our arguments; every option seen by <code>parse_opt</code> will be
     reflected in <code>arguments</code>.</span> */
  argp_parse (&amp;argp, argc, argv, 0, 0, &amp;arguments);

  if (arguments.abort)
    error (10, 0, "ABORTED");

  for (i = 0; i &lt; arguments.repeat_count; i++)
    {
      printf ("ARG1 = %s\n", arguments.arg1);
      printf ("STRINGS = ");
      for (j = 0; arguments.strings[j]; j++)
        printf (j == 0 ? "%s" : ", %s", arguments.strings[j]);
      printf ("\n");
      printf ("OUTPUT_FILE = %s\nVERBOSE = %s\nSILENT = %s\n",
              arguments.output_file,
              arguments.verbose ? "yes" : "no",
              arguments.silent ? "yes" : "no");
    }

  exit (0);
}
</pre></div>

<hr>
</div>
</div>
<div class="subsection" xml:id="glibc-Argp-User-Customization">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Examples" accesskey="p" rel="prev">Argp Examples</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="u" rel="up">Parsing Program Options with Argp</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Argp-User-Customization-1"></span><h4 class="subsection">25.3.12 Argp User Customization</title>

<span xml:id="glibc-index-ARGP_005fHELP_005fFMT-environment-variable"></span>
<para>The formatting of argp ‘<filename>&#45;&#45;help</filename>’ output may be controlled to some
extent by a program’s users, by setting the <code>ARGP_HELP_FMT</code>
environment variable to a comma-separated list of tokens.  Whitespace is
ignored:
</para>
<dl compact="compact">
<dt><span>‘<filename>dup-args</filename>’</span></dt>
<dt><span>‘<filename>no-dup-args</filename>’</span></dt>
<dd><para>These turn <emphasis>duplicate-argument-mode</emphasis> on or off.  In duplicate
argument mode, if an option that accepts an argument has multiple names,
the argument is shown for each name.  Otherwise, it is only shown for the
first long option.  A note is subsequently printed so the user knows that
it applies to other names as well.  The default is ‘<filename>no-dup-args</filename>’,
which is less consistent, but prettier.
</para>
</dd>
<dt><span>‘<filename>dup-args-note</filename>’</span></dt>
<dt><span>‘<filename>no-dup-args-note</filename>’</span></dt>
<dd><para>These will enable or disable the note informing the user of suppressed
option argument duplication.  The default is ‘<filename>dup-args-note</filename>’.
</para>
</dd>
<dt><span>‘<filename>short-opt-col=<var>n</var></filename>’</span></dt>
<dd><para>This prints the first short option in column <var>n</var>.  The default is 2.
</para>
</dd>
<dt><span>‘<filename>long-opt-col=<var>n</var></filename>’</span></dt>
<dd><para>This prints the first long option in column <var>n</var>.  The default is 6.
</para>
</dd>
<dt><span>‘<filename>doc-opt-col=<var>n</var></filename>’</span></dt>
<dd><para>This prints ‘documentation options’ (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp-Option-Flags">Flags for Argp Options</a>) in
column <var>n</var>.  The default is 2.
</para>
</dd>
<dt><span>‘<filename>opt-doc-col=<var>n</var></filename>’</span></dt>
<dd><para>This prints the documentation for options starting in column
<var>n</var>.  The default is 29.
</para>
</dd>
<dt><span>‘<filename>header-col=<var>n</var></filename>’</span></dt>
<dd><para>This will indent the group headers that document groups of options to
column <var>n</var>.  The default is 1.
</para>
</dd>
<dt><span>‘<filename>usage-indent=<var>n</var></filename>’</span></dt>
<dd><para>This will indent continuation lines in ‘<filename>Usage:</filename>’ messages to column
<var>n</var>.  The default is 12.
</para>
</dd>
<dt><span>‘<filename>rmargin=<var>n</var></filename>’</span></dt>
<dd><para>This will word wrap help output at or before column <var>n</var>.  The default
is 79.
</para></dd>
</dl>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Suboptions" accesskey="1">Parsing of Suboptions</a></li>
</ul>
<hr>
<div class="subsubsection" xml:id="glibc-Suboptions">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Suboptions-Example" accesskey="n" rel="next">Parsing of Suboptions Example</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argp" accesskey="p" rel="prev">Parsing Program Options with Argp</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Program-Arguments" accesskey="u" rel="up">Parsing Program Arguments</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Parsing-of-Suboptions"></span><h4 class="subsubsection">25.3.12.1 Parsing of Suboptions</title>

<para>Having a single level of options is sometimes not enough.  There might
be too many options which have to be available or a set of options is
closely related.
</para>
<para>For this case some programs use suboptions.  One of the most prominent
programs is certainly <code>mount</code>(8).  The <code>-o</code> option take one
argument which itself is a comma separated list of options.  To ease the
programming of code like this the function <code>getsubopt</code> is
available.
</para>
<dl class="def">
<dt xml:id="glibc-index-getsubopt"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>getsubopt</strong> <emphasis>(char **<var>optionp</var>, char *const *<var>tokens</var>, char **<var>valuep</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getsubopt" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para>The <var>optionp</var> parameter must be a pointer to a variable containing
the address of the string to process.  When the function returns, the
reference is updated to point to the next suboption or to the
terminating ‘<filename>\0</filename>’ character if there are no more suboptions available.
</para>
<para>The <var>tokens</var> parameter references an array of strings containing the
known suboptions.  All strings must be ‘<filename>\0</filename>’ terminated and to mark
the end a null pointer must be stored.  When <code>getsubopt</code> finds a
possible legal suboption it compares it with all strings available in
the <var>tokens</var> array and returns the index in the string as the
indicator.
</para>
<para>In case the suboption has an associated value introduced by a ‘<filename>=</filename>’
character, a pointer to the value is returned in <var>valuep</var>.  The
string is ‘<filename>\0</filename>’ terminated.  If no argument is available
<var>valuep</var> is set to the null pointer.  By doing this the caller can
check whether a necessary value is given or whether no unexpected value
is present.
</para>
<para>In case the next suboption in the string is not mentioned in the
<var>tokens</var> array the starting address of the suboption including a
possible value is returned in <var>valuep</var> and the return value of the
function is ‘<filename>-1</filename>’.
</para></dd></dl>

<hr>
</div>
</div>
<div class="subsection" xml:id="glibc-Suboptions-Example">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Suboptions" accesskey="p" rel="prev">Parsing of Suboptions</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Parsing-Program-Arguments" accesskey="u" rel="up">Parsing Program Arguments</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Parsing-of-Suboptions-Example"></span><h4 class="subsection">25.3.13 Parsing of Suboptions Example</title>

<para>The code which might appear in the <code>mount</code>(8) program is a perfect
example of the use of <code>getsubopt</code>:
</para>
<div class="example">
<pre class="example">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

int do_all;
const char *type;
int read_size;
int write_size;
int read_only;

enum
{
  RO_OPTION = 0,
  RW_OPTION,
  READ_SIZE_OPTION,
  WRITE_SIZE_OPTION,
  THE_END
};

const char *mount_opts[] =
{
  [RO_OPTION] = "ro",
  [RW_OPTION] = "rw",
  [READ_SIZE_OPTION] = "rsize",
  [WRITE_SIZE_OPTION] = "wsize",
  [THE_END] = NULL
};

int
main (int argc, char **argv)
{
  char *subopts, *value;
  int opt;

  while ((opt = getopt (argc, argv, "at:o:")) != -1)
    switch (opt)
      {
      case 'a':
        do_all = 1;
        break;
      case 't':
        type = optarg;
        break;
      case 'o':
        subopts = optarg;
        while (*subopts != '\0')
          switch (getsubopt (&amp;subopts, mount_opts, &amp;value))
            {
            case RO_OPTION:
              read_only = 1;
              break;
            case RW_OPTION:
              read_only = 0;
              break;
            case READ_SIZE_OPTION:
              if (value == NULL)
                abort ();
              read_size = atoi (value);
              break;
            case WRITE_SIZE_OPTION:
              if (value == NULL)
                abort ();
              write_size = atoi (value);
              break;
            default:
              /* <span class="roman">Unknown suboption.</span> */
              printf ("Unknown suboption `%s'\n", value);
              break;
            }
        break;
      default:
        abort ();
      }

  /* <span class="roman">Do the real work.</span> */

  return 0;
}
</pre></div>


<hr>
</div>
</div>
<sect xml:id="glibc-Environment-Variables">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Auxiliary-Vector" accesskey="n" rel="next">Auxiliary Vector</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments" accesskey="p" rel="prev">Program Arguments</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Basics" accesskey="u" rel="up">The Basic Program/System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Environment-Variables-1"></span><h3 class="section">25.4 Environment Variables</title>

<span xml:id="glibc-index-environment-variable"></span>
<para>When a program is executed, it receives information about the context in
which it was invoked in two ways.  The first mechanism uses the
<var>argv</var> and <var>argc</var> arguments to its <code>main</code> function, and is
discussed in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments">Program Arguments</a>.  The second mechanism uses
<emphasis>environment variables</emphasis> and is discussed in this section.
</para>
<para>The <var>argv</var> mechanism is typically used to pass command-line
arguments specific to the particular program being invoked.  The
environment, on the other hand, keeps track of information that is
shared by many programs, changes infrequently, and that is less
frequently used.
</para>
<para>The environment variables discussed in this section are the same
environment variables that you set using assignments and the
<code>export</code> command in the shell.  Programs executed from the shell
inherit all of the environment variables from the shell.
</para>
<span xml:id="glibc-index-environment"></span>
<para>Standard environment variables are used for information about the user’s
home directory, terminal type, current locale, and so on; you can define
additional variables for other purposes.  The set of all environment
variables that have values is collectively known as the
<emphasis>environment</emphasis>.
</para>
<para>Names of environment variables are case-sensitive and must not contain
the character ‘<filename>=</filename>’.  System-defined environment variables are
invariably uppercase.
</para>
<para>The values of environment variables can be anything that can be
represented as a string.  A value must not contain an embedded null
character, since this is assumed to terminate the string.
</para>


<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Access" accesskey="1">Environment Access</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Environment" accesskey="2">Standard Environment Variables</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Environment-Access">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Standard-Environment" accesskey="n" rel="next">Standard Environment Variables</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Variables" accesskey="u" rel="up">Environment Variables</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Environment-Access-1"></span><h4 class="subsection">25.4.1 Environment Access</title>
<span xml:id="glibc-index-environment-access"></span>
<span xml:id="glibc-index-environment-representation"></span>

<para>The value of an environment variable can be accessed with the
<code>getenv</code> function.  This is declared in the header file
<filename>stdlib.h</filename>.
<span xml:id="glibc-index-stdlib_002eh-21"></span>
</para>
<para>Libraries should use <code>secure_getenv</code> instead of <code>getenv</code>, so
that they do not accidentally use untrusted environment variables.
Modifications of environment variables are not allowed in
multi-threaded programs.  The <code>getenv</code> and <code>secure_getenv</code>
functions can be safely used in multi-threaded programs.
</para>
<dl class="def">
<dt xml:id="glibc-index-getenv"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>getenv</strong> <emphasis>(const char *<var>name</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getenv" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe env
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function returns a string that is the value of the environment
variable <var>name</var>.  You must not modify this string.  In some non-Unix
systems not using the GNU C Library, it might be overwritten by subsequent
calls to <code>getenv</code> (but not by any other library function).  If the
environment variable <var>name</var> is not defined, the value is a null
pointer.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-secure_005fgetenv"><span class="category">Function: </span><span><emphasis>char *</emphasis> <strong>secure_getenv</strong> <emphasis>(const char *<var>name</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-secure_005fgetenv" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe env
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is similar to <code>getenv</code>, but it returns a null
pointer if the environment is untrusted.  This happens when the
program file has SUID or SGID bits set.  General-purpose libraries
should always prefer this function over <code>getenv</code> to avoid
vulnerabilities if the library is referenced from a SUID/SGID program.
</para>
<para>This function is a GNU extension.
</para></dd></dl>


<dl class="def">
<dt xml:id="glibc-index-putenv"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>putenv</strong> <emphasis>(char *<var>string</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-putenv" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe const:env
| AS-Unsafe heap lock
| AC-Unsafe corrupt lock mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>putenv</code> function adds or removes definitions from the environment.
If the <var>string</var> is of the form ‘<filename><var>name</var>=<var>value</var></filename>’, the
definition is added to the environment.  Otherwise, the <var>string</var> is
interpreted as the name of an environment variable, and any definition
for this variable in the environment is removed.
</para>
<para>If the function is successful it returns <code>0</code>.  Otherwise the return
value is nonzero and <code>errno</code> is set to indicate the error.
</para>
<para>The difference to the <code>setenv</code> function is that the exact string
given as the parameter <var>string</var> is put into the environment.  If the
user should change the string after the <code>putenv</code> call this will
reflect automatically in the environment.  This also requires that
<var>string</var> not be an automatic variable whose scope is left before the
variable is removed from the environment.  The same applies of course to
dynamically allocated variables which are freed later.
</para>
<para>This function is part of the extended Unix interface.  You should define
<var>_XOPEN_SOURCE</var> before including any header.
</para></dd></dl>


<dl class="def">
<dt xml:id="glibc-index-setenv"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>setenv</strong> <emphasis>(const char *<var>name</var>, const char *<var>value</var>, int <var>replace</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-setenv" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe const:env
| AS-Unsafe heap lock
| AC-Unsafe corrupt lock mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>setenv</code> function can be used to add a new definition to the
environment.  The entry with the name <var>name</var> is replaced by the
value ‘<filename><var>name</var>=<var>value</var></filename>’.  Please note that this is also true
if <var>value</var> is the empty string.  To do this a new string is created
and the strings <var>name</var> and <var>value</var> are copied.  A null pointer
for the <var>value</var> parameter is illegal.  If the environment already
contains an entry with key <var>name</var> the <var>replace</var> parameter
controls the action.  If replace is zero, nothing happens.  Otherwise
the old entry is replaced by the new one.
</para>
<para>Please note that you cannot remove an entry completely using this function.
</para>
<para>If the function is successful it returns <code>0</code>.  Otherwise the
environment is unchanged and the return value is <code>-1</code> and
<code>errno</code> is set.
</para>
<para>This function was originally part of the BSD library but is now part of
the Unix standard.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-unsetenv"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>unsetenv</strong> <emphasis>(const char *<var>name</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-unsetenv" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe const:env
| AS-Unsafe lock
| AC-Unsafe lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>Using this function one can remove an entry completely from the
environment.  If the environment contains an entry with the key
<var>name</var> this whole entry is removed.  A call to this function is
equivalent to a call to <code>putenv</code> when the <var>value</var> part of the
string is empty.
</para>
<para>The function returns <code>-1</code> if <var>name</var> is a null pointer, points to
an empty string, or points to a string containing a <code>=</code> character.
It returns <code>0</code> if the call succeeded.
</para>
<para>This function was originally part of the BSD library but is now part of
the Unix standard.  The BSD version had no return value, though.
</para></dd></dl>

<para>There is one more function to modify the whole environment.  This
function is said to be used in the POSIX.9 (POSIX bindings for Fortran
77) and so one should expect it did made it into POSIX.1.  But this
never happened.  But we still provide this function as a GNU extension
to enable writing standard compliant Fortran environments.
</para>
<dl class="def">
<dt xml:id="glibc-index-clearenv"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>clearenv</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-clearenv" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe const:env
| AS-Unsafe heap lock
| AC-Unsafe lock mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>clearenv</code> function removes all entries from the environment.
Using <code>putenv</code> and <code>setenv</code> new entries can be added again
later.
</para>
<para>If the function is successful it returns <code>0</code>.  Otherwise the return
value is nonzero.
</para></dd></dl>


<para>You can deal directly with the underlying representation of environment
objects to add more variables to the environment (for example, to
communicate with another program you are about to execute;
see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Executing-a-File">Executing a File</a>).
</para>
<dl class="def">
<dt xml:id="glibc-index-environ"><span class="category">Variable: </span><span><emphasis>char **</emphasis> <strong>environ</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-environ" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>The environment is represented as an array of strings.  Each string is
of the format ‘<filename><var>name</var>=<var>value</var></filename>’.  The order in which
strings appear in the environment is not significant, but the same
<var>name</var> must not appear more than once.  The last element of the
array is a null pointer.
</para>
<para>This variable is declared in the header file <filename>unistd.h</filename>.
</para>
<para>If you just want to get the value of an environment variable, use
<code>getenv</code>.
</para></dd></dl>

<para>Unix systems, and GNU systems, pass the initial value of
<code>environ</code> as the third argument to <code>main</code>.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Arguments">Program Arguments</a>.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Standard-Environment">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Access" accesskey="p" rel="prev">Environment Access</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Variables" accesskey="u" rel="up">Environment Variables</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Standard-Environment-Variables"></span><h4 class="subsection">25.4.2 Standard Environment Variables</title>
<span xml:id="glibc-index-standard-environment-variables"></span>

<para>These environment variables have standard meanings.  This doesn’t mean
that they are always present in the environment; but if these variables
<emphasis>are</emphasis> present, they have these meanings.  You shouldn’t try to use
these environment variable names for some other purpose.
</para>
<dl compact="compact">
<dt xml:id="glibc-index-HOME-environment-variable"><span><code>HOME</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-HOME-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd><span xml:id="glibc-index-home-directory"></span>

<para>This is a string representing the user’s <emphasis>home directory</emphasis>, or
initial default working directory.
</para>
<para>The user can set <code>HOME</code> to any value.
If you need to make sure to obtain the proper home directory
for a particular user, you should not use <code>HOME</code>; instead,
look up the user’s name in the user database (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#User-Database">User Database</a>).
</para>
<para>For most purposes, it is better to use <code>HOME</code>, precisely because
this lets the user specify the value.
</para>
</dd>
<dt xml:id="glibc-index-LOGNAME-environment-variable"><span><code>LOGNAME</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LOGNAME-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This is the name that the user used to log in.  Since the value in the
environment can be tweaked arbitrarily, this is not a reliable way to
identify the user who is running a program; a function like
<code>getlogin</code> (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Who-Logged-In">Identifying Who Logged In</a>) is better for that purpose.
</para>
<para>For most purposes, it is better to use <code>LOGNAME</code>, precisely because
this lets the user specify the value.
</para>
</dd>
<dt xml:id="glibc-index-PATH-environment-variable"><span><code>PATH</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-PATH-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>A <emphasis>path</emphasis> is a sequence of directory names which is used for
searching for a file.  The variable <code>PATH</code> holds a path used
for searching for programs to be run.
</para>
<para>The <code>execlp</code> and <code>execvp</code> functions (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Executing-a-File">Executing a File</a>)
use this environment variable, as do many shells and other utilities
which are implemented in terms of those functions.
</para>
<para>The syntax of a path is a sequence of directory names separated by
colons.  An empty string instead of a directory name stands for the
current directory (see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Working-Directory">Working Directory</a>).
</para>
<para>A typical value for this environment variable might be a string like:
</para>
<div class="example">
<pre class="example">:/bin:/etc:/usr/bin:/usr/new/X11:/usr/new:/usr/local/bin
</pre></div>

<para>This means that if the user tries to execute a program named <code>foo</code>,
the system will look for files named <filename>foo</filename>, <filename>/bin/foo</filename>,
<filename>/etc/foo</filename>, and so on.  The first of these files that exists is
the one that is executed.
</para>
</dd>
<dt xml:id="glibc-index-TERM-environment-variable"><span><code>TERM</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-TERM-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies the kind of terminal that is receiving program output.
Some programs can make use of this information to take advantage of
special escape sequences or terminal modes supported by particular kinds
of terminals.  Many programs which use the termcap library
(see <a data-manual="termcap" href="https://www.gnu.org/software/libc/manual/html_mono/termcap.html#Finding-a-Terminal-Description">Find</a> in <cite>The Termcap Library
Manual</cite>) use the <code>TERM</code> environment variable, for example.
</para>
</dd>
<dt xml:id="glibc-index-TZ-environment-variable"><span><code>TZ</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-TZ-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies the time zone.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#TZ-Variable">Specifying the Time Zone with <code>TZ</code></a>, for information about
the format of this string and how it is used.
</para>
</dd>
<dt xml:id="glibc-index-LANG-environment-variable-1"><span><code>LANG</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LANG-environment-variable-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies the default locale to use for attribute categories where
neither <code>LC_ALL</code> nor the specific environment variable for that
category is set.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Locales">Locales and Internationalization</a>, for more information about
locales.
</para>

</dd>
<dt xml:id="glibc-index-LC_005fALL-environment-variable-1"><span><code>LC_ALL</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fALL-environment-variable-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If this environment variable is set it overrides the selection for all
the locales done using the other <code>LC_*</code> environment variables.  The
value of the other <code>LC_*</code> environment variables is simply ignored
in this case.
</para>
</dd>
<dt xml:id="glibc-index-LC_005fCOLLATE-environment-variable"><span><code>LC_COLLATE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fCOLLATE-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies what locale to use for string sorting.
</para>
</dd>
<dt xml:id="glibc-index-LC_005fCTYPE-environment-variable"><span><code>LC_CTYPE</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fCTYPE-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies what locale to use for character sets and character
classification.
</para>
</dd>
<dt xml:id="glibc-index-LC_005fMESSAGES-environment-variable-1"><span><code>LC_MESSAGES</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fMESSAGES-environment-variable-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies what locale to use for printing messages and to parse
responses.
</para>
</dd>
<dt xml:id="glibc-index-LC_005fMONETARY-environment-variable"><span><code>LC_MONETARY</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fMONETARY-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies what locale to use for formatting monetary values.
</para>
</dd>
<dt xml:id="glibc-index-LC_005fNUMERIC-environment-variable"><span><code>LC_NUMERIC</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fNUMERIC-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies what locale to use for formatting numbers.
</para>
</dd>
<dt xml:id="glibc-index-LC_005fTIME-environment-variable"><span><code>LC_TIME</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-LC_005fTIME-environment-variable" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies what locale to use for formatting date/time values.
</para>
</dd>
<dt xml:id="glibc-index-NLSPATH-environment-variable-1"><span><code>NLSPATH</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-NLSPATH-environment-variable-1" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This specifies the directories in which the <code>catopen</code> function
looks for message translation catalogs.
</para>
</dd>
<dt xml:id="glibc-index-_005fPOSIX_005fOPTION_005fORDER-environment-variable_002e"><span><code>_POSIX_OPTION_ORDER</code><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005fPOSIX_005fOPTION_005fORDER-environment-variable_002e" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>If this environment variable is defined, it suppresses the usual
reordering of command line arguments by <code>getopt</code> and
<code>argp_parse</code>.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Argument-Syntax">Program Argument Syntax Conventions</a>.
</para>
</dd>
</dl>

<hr>
</div>
</div>
<sect xml:id="glibc-Auxiliary-Vector">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#System-Calls" accesskey="n" rel="next">System Calls</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Environment-Variables" accesskey="p" rel="prev">Environment Variables</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Basics" accesskey="u" rel="up">The Basic Program/System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Auxiliary-Vector-1"></span><h3 class="section">25.5 Auxiliary Vector</title>
<span xml:id="glibc-index-auxiliary-vector"></span>

<para>When a program is executed, it receives information from the operating
system about the environment in which it is operating.  The form of this
information is a table of key-value pairs, where the keys are from the
set of ‘<filename>AT_</filename>’ values in <filename>elf.h</filename>.  Some of the data is provided
by the kernel for libc consumption, and may be obtained by ordinary
interfaces, such as <code>sysconf</code>.  However, on a platform-by-platform
basis there may be information that is not available any other way.
</para>
<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Definition-of-getauxval" accesskey="1">Definition of <code>getauxval</code></a></li>
</ul>
<div class="subsection" xml:id="glibc-Definition-of-getauxval">
<h4 class="subsection">25.5.1 Definition of <code>getauxval</code></title>
<dl class="def">
<dt xml:id="glibc-index-getauxval"><span class="category">Function: </span><span><emphasis>unsigned long int</emphasis> <strong>getauxval</strong> <emphasis>(unsigned long int <var>type</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-getauxval" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is used to inquire about the entries in the auxiliary
vector.  The <var>type</var> argument should be one of the ‘<filename>AT_</filename>’ symbols
defined in <filename>elf.h</filename>.  If a matching entry is found, the value is
returned; if the entry is not found, zero is returned and <code>errno</code> is
set to <code>ENOENT</code>.
</para></dd></dl>

<para>For some platforms, the key <code>AT_HWCAP</code> is the easiest way to inquire
about any instruction set extensions available at runtime.  In this case,
there will (of necessity) be a platform-specific set of ‘<filename>HWCAP_</filename>’
values masked together that describe the capabilities of the cpu on which
the program is being executed.
</para>
<hr>
</div>
</div>
<sect xml:id="glibc-System-Calls">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination" accesskey="n" rel="next">Program Termination</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Auxiliary-Vector" accesskey="p" rel="prev">Auxiliary Vector</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Basics" accesskey="u" rel="up">The Basic Program/System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-System-Calls-1"></span><h3 class="section">25.6 System Calls</title>

<span xml:id="glibc-index-system-call"></span>
<para>A system call is a request for service that a program makes of the
kernel.  The service is generally something that only the kernel has
the privilege to do, such as doing I/O.  Programmers don’t normally
need to be concerned with system calls because there are functions in
the GNU C Library to do virtually everything that system calls do.
These functions work by making system calls themselves.  For example,
there is a system call that changes the permissions of a file, but
you don’t need to know about it because you can just use the GNU C Library’s
<code>chmod</code> function.
</para>
<span xml:id="glibc-index-kernel-call"></span>
<para>System calls are sometimes called kernel calls.
</para>
<para>However, there are times when you want to make a system call explicitly,
and for that, the GNU C Library provides the <code>syscall</code> function.
<code>syscall</code> is harder to use and less portable than functions like
<code>chmod</code>, but easier and more portable than coding the system call
in assembler instructions.
</para>
<para><code>syscall</code> is most useful when you are working with a system call
which is special to your system or is newer than the GNU C Library you
are using.  <code>syscall</code> is implemented in an entirely generic way;
the function does not know anything about what a particular system
call does or even if it is valid.
</para>
<para>The description of <code>syscall</code> in this section assumes a certain
protocol for system calls on the various platforms on which the GNU C Library
runs.  That protocol is not defined by any strong authority, but
we won’t describe it here either because anyone who is coding
<code>syscall</code> probably won’t accept anything less than kernel and C
library source code as a specification of the interface between them
anyway.
</para>

<para><code>syscall</code> is declared in <filename>unistd.h</filename>.
</para>
<dl class="def">
<dt xml:id="glibc-index-syscall"><span class="category">Function: </span><span><emphasis>long int</emphasis> <strong>syscall</strong> <emphasis>(long int <var>sysno</var>, …)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-syscall" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>


<para><code>syscall</code> performs a generic system call.
</para>
<span xml:id="glibc-index-system-call-number"></span>
<para><var>sysno</var> is the system call number.  Each kind of system call is
identified by a number.  Macros for all the possible system call numbers
are defined in <filename>sys/syscall.h</filename>
</para>
<para>The remaining arguments are the arguments for the system call, in
order, and their meanings depend on the kind of system call.  Each kind
of system call has a definite number of arguments, from zero to five.
If you code more arguments than the system call takes, the extra ones to
the right are ignored.
</para>
<para>The return value is the return value from the system call, unless the
system call failed.  In that case, <code>syscall</code> returns <code>-1</code> and
sets <code>errno</code> to an error code that the system call returned.  Note
that system calls do not return <code>-1</code> when they succeed.
<span xml:id="glibc-index-errno"></span>
</para>
<para>If you specify an invalid <var>sysno</var>, <code>syscall</code> returns <code>-1</code>
with <code>errno</code> = <code>ENOSYS</code>.
</para>
<para>Example:
</para>
<div class="example">
<pre class="example">
#include &lt;unistd.h&gt;
#include &lt;sys/syscall.h&gt;
#include &lt;errno.h&gt;

…

int rc;

rc = syscall(SYS_chmod, "/etc/passwd", 0444);

if (rc == -1)
   fprintf(stderr, "chmod failed, errno = %d\n", errno);

</pre></div>

<para>This, if all the compatibility stars are aligned, is equivalent to the
following preferable code:
</para>
<div class="example">
<pre class="example">
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;errno.h&gt;

…

int rc;

rc = chmod("/etc/passwd", 0444);
if (rc == -1)
   fprintf(stderr, "chmod failed, errno = %d\n", errno);

</pre></div>

</dd></dl>


<hr>
</div>
<sect xml:id="glibc-Program-Termination">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#System-Calls" accesskey="p" rel="prev">System Calls</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Basics" accesskey="u" rel="up">The Basic Program/System Interface</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Program-Termination-1"></span><h3 class="section">25.7 Program Termination</title>
<span xml:id="glibc-index-program-termination"></span>
<span xml:id="glibc-index-process-termination"></span>

<span xml:id="glibc-index-exit-status-value"></span>
<para>The usual way for a program to terminate is simply for its <code>main</code>
function to return.  The <emphasis>exit status value</emphasis> returned from the
<code>main</code> function is used to report information back to the process’s
parent process or shell.
</para>
<para>A program can also terminate normally by calling the <code>exit</code>
function.
</para>
<para>In addition, programs can be terminated by signals; this is discussed in
more detail in <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling">Signal Handling</a>.  The <code>abort</code> function causes
a signal that kills the program.
</para>

<ul class="section-toc">
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Normal-Termination" accesskey="1">Normal Termination</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Exit-Status" accesskey="2">Exit Status</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Cleanups-on-Exit" accesskey="3">Cleanups on Exit</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Aborting-a-Program" accesskey="4">Aborting a Program</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Internals" accesskey="5">Termination Internals</a></li>
</ul>
<hr>
<div class="subsection" xml:id="glibc-Normal-Termination">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Exit-Status" accesskey="n" rel="next">Exit Status</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination" accesskey="u" rel="up">Program Termination</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Normal-Termination-1"></span><h4 class="subsection">25.7.1 Normal Termination</title>

<para>A process terminates normally when its program signals it is done by
calling <code>exit</code>.  Returning from <code>main</code> is equivalent to
calling <code>exit</code>, and the value that <code>main</code> returns is used as
the argument to <code>exit</code>.
</para>
<dl class="def">
<dt xml:id="glibc-index-exit"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>exit</strong> <emphasis>(int <var>status</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-exit" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Unsafe race:exit
| AS-Unsafe corrupt
| AC-Unsafe corrupt lock
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>exit</code> function tells the system that the program is done, which
causes it to terminate the process.
</para>
<para><var>status</var> is the program’s exit status, which becomes part of the
process’ termination status.  This function does not return.
</para></dd></dl>

<para>Normal termination causes the following actions:
</para>
<ol>
<li> Functions that were registered with the <code>atexit</code> or <code>on_exit</code>
functions are called in the reverse order of their registration.  This
mechanism allows your application to specify its own “cleanup” actions
to be performed at program termination.  Typically, this is used to do
things like saving program state information in a file, or unlocking
locks in shared data bases.

</li><li> All open streams are closed, writing out any buffered output data.  See
<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Closing-Streams">Closing Streams</a>.  In addition, temporary files opened
with the <code>tmpfile</code> function are removed; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Temporary-Files">Temporary Files</a>.

</li><li> <code>_exit</code> is called, terminating the program.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Internals">Termination Internals</a>.
</li></ol>

<hr>
</div>
<div class="subsection" xml:id="glibc-Exit-Status">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Cleanups-on-Exit" accesskey="n" rel="next">Cleanups on Exit</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Normal-Termination" accesskey="p" rel="prev">Normal Termination</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination" accesskey="u" rel="up">Program Termination</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Exit-Status-1"></span><h4 class="subsection">25.7.2 Exit Status</title>
<span xml:id="glibc-index-exit-status"></span>

<para>When a program exits, it can return to the parent process a small
amount of information about the cause of termination, using the
<emphasis>exit status</emphasis>.  This is a value between 0 and 255 that the exiting
process passes as an argument to <code>exit</code>.
</para>
<para>Normally you should use the exit status to report very broad information
about success or failure.  You can’t provide a lot of detail about the
reasons for the failure, and most parent processes would not want much
detail anyway.
</para>
<para>There are conventions for what sorts of status values certain programs
should return.  The most common convention is simply 0 for success and 1
for failure.  Programs that perform comparison use a different
convention: they use status 1 to indicate a mismatch, and status 2 to
indicate an inability to compare.  Your program should follow an
existing convention if an existing convention makes sense for it.
</para>
<para>A general convention reserves status values 128 and up for special
purposes.  In particular, the value 128 is used to indicate failure to
execute another program in a subprocess.  This convention is not
universally obeyed, but it is a good idea to follow it in your programs.
</para>
<para><strong>Warning:</strong> Don’t try to use the number of errors as the exit
status.  This is actually not very useful; a parent process would
generally not care how many errors occurred.  Worse than that, it does
not work, because the status value is truncated to eight bits.
Thus, if the program tried to report 256 errors, the parent would
receive a report of 0 errors—that is, success.
</para>
<para>For the same reason, it does not work to use the value of <code>errno</code>
as the exit status—these can exceed 255.
</para>
<para><strong>Portability note:</strong> Some non-POSIX systems use different
conventions for exit status values.  For greater portability, you can
use the macros <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> for the
conventional status value for success and failure, respectively.  They
are declared in the file <filename>stdlib.h</filename>.
<span xml:id="glibc-index-stdlib_002eh-22"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-EXIT_005fSUCCESS"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>EXIT_SUCCESS</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-EXIT_005fSUCCESS" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This macro can be used with the <code>exit</code> function to indicate
successful program completion.
</para>
<para>On POSIX systems, the value of this macro is <code>0</code>.  On other
systems, the value might be some other (possibly non-constant) integer
expression.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-EXIT_005fFAILURE"><span class="category">Macro: </span><span><emphasis>int</emphasis> <strong>EXIT_FAILURE</strong><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-EXIT_005fFAILURE" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>This macro can be used with the <code>exit</code> function to indicate
unsuccessful program completion in a general sense.
</para>
<para>On POSIX systems, the value of this macro is <code>1</code>.  On other
systems, the value might be some other (possibly non-constant) integer
expression.  Other nonzero status values also indicate failures.  Certain
programs use different nonzero status values to indicate particular
kinds of "non-success".  For example, <code>diff</code> uses status value
<code>1</code> to mean that the files are different, and <code>2</code> or more to
mean that there was difficulty in opening the files.
</para></dd></dl>

<para>Don’t confuse a program’s exit status with a process’ termination status.
There are lots of ways a process can terminate besides having its program
finish.  In the event that the process termination <emphasis>is</emphasis> caused by program
termination (i.e., <code>exit</code>), though, the program’s exit status becomes
part of the process’ termination status.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Cleanups-on-Exit">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Aborting-a-Program" accesskey="n" rel="next">Aborting a Program</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Exit-Status" accesskey="p" rel="prev">Exit Status</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination" accesskey="u" rel="up">Program Termination</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Cleanups-on-Exit-1"></span><h4 class="subsection">25.7.3 Cleanups on Exit</title>

<para>Your program can arrange to run its own cleanup functions if normal
termination happens.  If you are writing a library for use in various
application programs, then it is unreliable to insist that all
applications call the library’s cleanup functions explicitly before
exiting.  It is much more robust to make the cleanup invisible to the
application, by setting up a cleanup function in the library itself
using <code>atexit</code> or <code>on_exit</code>.
</para>
<dl class="def">
<dt xml:id="glibc-index-atexit"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>atexit</strong> <emphasis>(void (*<var>function</var>) (void))</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-atexit" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap lock
| AC-Unsafe lock mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>atexit</code> function registers the function <var>function</var> to be
called at normal program termination.  The <var>function</var> is called with
no arguments.
</para>
<para>The return value from <code>atexit</code> is zero on success and nonzero if
the function cannot be registered.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-on_005fexit"><span class="category">Function: </span><span><emphasis>int</emphasis> <strong>on_exit</strong> <emphasis>(void (*<var>function</var>)(int <var>status</var>, void *<var>arg</var>), void *<var>arg</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-on_005fexit" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe heap lock
| AC-Unsafe lock mem
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>This function is a somewhat more powerful variant of <code>atexit</code>.  It
accepts two arguments, a function <var>function</var> and an arbitrary
pointer <var>arg</var>.  At normal program termination, the <var>function</var> is
called with two arguments:  the <var>status</var> value passed to <code>exit</code>,
and the <var>arg</var>.
</para>
<para>This function is included in the GNU C Library only for compatibility
for SunOS, and may not be supported by other implementations.
</para></dd></dl>

<para>Here’s a trivial program that illustrates the use of <code>exit</code> and
<code>atexit</code>:
</para>
<div class="example">
<pre class="example">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void
bye (void)
{
  puts ("Goodbye, cruel world....");
}

int
main (void)
{
  atexit (bye);
  exit (EXIT_SUCCESS);
}
</pre></div>

<para>When this program is executed, it just prints the message and exits.
</para>
<hr>
</div>
<div class="subsection" xml:id="glibc-Aborting-a-Program">
<div class="header">
<para>
Next: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Termination-Internals" accesskey="n" rel="next">Termination Internals</a>, Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Cleanups-on-Exit" accesskey="p" rel="prev">Cleanups on Exit</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination" accesskey="u" rel="up">Program Termination</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Aborting-a-Program-1"></span><h4 class="subsection">25.7.4 Aborting a Program</title>
<span xml:id="glibc-index-aborting-a-program"></span>

<para>You can abort your program using the <code>abort</code> function.  The prototype
for this function is in <filename>stdlib.h</filename>.
<span xml:id="glibc-index-stdlib_002eh-23"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-abort"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>abort</strong> <emphasis>(void)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-abort" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Unsafe corrupt
| AC-Unsafe lock corrupt
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>abort</code> function causes abnormal program termination.  This
does not execute cleanup functions registered with <code>atexit</code> or
<code>on_exit</code>.
</para>
<para>This function actually terminates the process by raising a
<code>SIGABRT</code> signal, and your program can include a handler to
intercept this signal; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Signal-Handling">Signal Handling</a>.
</para></dd></dl>

<hr>
</div>
<div class="subsection" xml:id="glibc-Termination-Internals">
<div class="header">
<para>
Previous: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Aborting-a-Program" accesskey="p" rel="prev">Aborting a Program</a>, Up: <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Program-Termination" accesskey="u" rel="up">Program Termination</a> &nbsp; [<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#SEC_Contents" title="Table of contents" rel="contents">Contents</a>][<a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Concept-Index" title="Index" rel="index">Index</a>]</para>
</div>
<span xml:id="glibc-Termination-Internals-1"></span><h4 class="subsection">25.7.5 Termination Internals</title>

<para>The <code>_exit</code> function is the primitive used for process termination
by <code>exit</code>.  It is declared in the header file <filename>unistd.h</filename>.
<span xml:id="glibc-index-unistd_002eh-16"></span>
</para>
<dl class="def">
<dt xml:id="glibc-index-_005fexit"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>_exit</strong> <emphasis>(int <var>status</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005fexit" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>_exit</code> function is the primitive for causing a process to
terminate with status <var>status</var>.  Calling this function does not
execute cleanup functions registered with <code>atexit</code> or
<code>on_exit</code>.
</para></dd></dl>

<dl class="def">
<dt xml:id="glibc-index-_005fExit"><span class="category">Function: </span><span><emphasis>void</emphasis> <strong>_Exit</strong> <emphasis>(int <var>status</var>)</emphasis><a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#index-_005fExit" class="copiable-anchor"> ¶</a></span></dt>
<dd>
<para>Preliminary:
| MT-Safe
| AS-Safe
| AC-Safe
| See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#POSIX-Safety-Concepts">POSIX Safety Concepts</a>.
</para>

<para>The <code>_Exit</code> function is the &isoc; equivalent to <code>_exit</code>.
The &isoc; committee members were not sure whether the definitions of
<code>_exit</code> and <code>_Exit</code> were compatible so they have not used the
POSIX name.
</para>
<para>This function was introduced in &isoc;99 and is declared in
<filename>stdlib.h</filename>.
</para></dd></dl>

<para>When a process terminates for any reason—either because the program
terminates, or as a result of a signal—the
following things happen:
</para>
<ul>
<li> All open file descriptors in the process are closed.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Low_002dLevel-I_002fO">Low-Level Input/Output</a>.
Note that streams are not flushed automatically when the process
terminates; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#I_002fO-on-Streams">Input/Output on Streams</a>.

</li><li> A process exit status is saved to be reported back to the parent process
via <code>wait</code> or <code>waitpid</code>; see <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Process-Completion">Process Completion</a>.  If the
program exited, this status includes as its low-order 8 bits the program
exit status.


</li><li> Any child processes of the process being terminated are assigned a new
parent process.  (On most systems, including GNU, this is the <code>init</code>
process, with process ID 1.)

</li><li> A <code>SIGCHLD</code> signal is sent to the parent process.

</li><li> If the process is a session leader that has a controlling terminal, then
a <code>SIGHUP</code> signal is sent to each process in the foreground job,
and the controlling terminal is disassociated from that session.
See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control">Job Control</a>.

</li><li> If termination of a process causes a process group to become orphaned,
and any member of that process group is stopped, then a <code>SIGHUP</code>
signal and a <code>SIGCONT</code> signal are sent to each process in the
group.  See <a href="https://www.gnu.org/software/libc/manual/html_mono/libc.html#Job-Control">Job Control</a>.
</li></ul>
<hr>
</div>
</div>
</div-->
</part>
