<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: rfc0793.xml,v 1.8 2002/12/20 22:46:09 nilgun Exp $
     ********************************************************************-->
<article id="rfc793">
  <articleinfo>
    <title>Aktarım Denetim Protokolü (TCP)</title>
    <subtitle>RFC 793</subtitle>
    <titleabbrev>RFC 793</titleabbrev>
    <authorgroup>
      <author role="editor">
        <firstname>Jon Postel</firstname>
      </author><author role="translator">
        <firstname>Behice Balkaya</firstname>
        <affiliation>
          <address>
            <email>comp.behicebalkaya@gmail.com</email>
          </address>
        </affiliation>
      </author>
    </authorgroup>
    <pubdate>Mayıs 2006</pubdate>
    <revhistory>
      <revision>
        <revnumber>1.0</revnumber>
        <date>Mayıs 2006</date>
        <authorinitials>BB</authorinitials>
        <revremark>İlk çeviri</revremark>
      </revision><revision>
        <revnumber>Standart</revnumber>
        <date>Eylül 1981</date>
        <authorinitials>JP</authorinitials>
        <revremark>Özgün sürüm</revremark>
      </revision>
    </revhistory>
    <releaseinfo>
Information Sciences Institute<sbr/>
University of Southern California<sbr/>
4676 Admiralty Way<sbr/>
Marina del Rey, California  90291<sbr/>
<emphasis>tarafından</emphasis><sbr/>
Defense Advanced Research Projects Agency<sbr/>
Information Processing Techniques Office<sbr/>
1400 Wilson Boulevard<sbr/>
Arlington, Virginia  22209<sbr/>
<emphasis>için hazırlanmıştır.</emphasis><sbr/>
<sbr/>
Açıklama İsteği: 793<sbr/>
Geçersiz Kıldığı RFC'ler: 761<sbr/>
Geçersiz Kıldığı IEN'ler: 129, 124, 112, 81, 55, 44, 40, 27, 21, 5<sbr/>
Güncelleyen RFC: 3168<sbr/>
Durumu: Standart (STD0007)
    </releaseinfo>
    <legalnotice><title>Yasal Uyarı</title><para>
RFC'lerin yazarlarının hakları <ulink url="ftp://ftp.rfc-editor.org/in-notes/bcp/bcp78.txt">BCP 78</ulink> ile düzenlenmiştir. Dolayısıyla RFC çevirilerinin çevirmenlerinin haklarını da <link linkend="&bcp078;">BCP 78</link>'in düzenlediği kabul edilmiştir.
        </para><para>
Bu belge <ulink url="http://www.ietf.org/">IETF</ulink> tarafından yayınlanan resmi RFC793'ün <emphasis role="bold">gayrıresmi</emphasis> çevirisidir ve aslının yerine kullanılamaz. Bu çevirinin hiçbir bağlamda ya da koşulda hükmü yoktur. Bu çeviri, anadili Türkçe olan Genel Ağ kullanıcılarının bu RFC hakkında fikir edinebilmelerini sağlamak amacıyla hazırlanmıştır.
  </para>
  <para>
BU BELGE "ÜCRETSİZ" OLARAK RUHSATLANDIĞI İÇİN, İÇERDİĞİ BİLGİLER İÇİN İLGİLİ KANUNLARIN İZİN VERDİĞİ ÖLÇÜDE HERHANGİ BİR GARANTİ VERİLMEMEKTEDİR. AKSİ YAZILI OLARAK BELİRTİLMEDİĞİ MÜDDETÇE TELİF HAKKI SAHİPLERİ VE/VEYA BAŞKA ŞAHISLAR BELGEYİ "OLDUĞU GİBİ", AŞİKAR VEYA ZIMNEN, SATILABİLİRLİĞİ VEYA HERHANGİ BİR AMACA UYGUNLUĞU DA DAHİL OLMAK ÜZERE HİÇBİR GARANTİ VERMEKSİZİN DAĞITMAKTADIRLAR. BİLGİNİN KALİTESİ İLE İLGİLİ TÜM SORUNLAR SİZE AİTTİR. HERHANGİ BİR HATALI BİLGİDEN DOLAYI DOĞABİLECEK OLAN BÜTÜN SERVİS, TAMİR VEYA DÜZELTME MASRAFLARI SİZE AİTTİR.
  </para>
  <para>
İLGİLİ KANUNUN İCBAR ETTİĞİ DURUMLAR VEYA YAZILI ANLAŞMA HARİCİNDE HERHANGİ BİR ŞEKİLDE TELİF HAKKI SAHİBİ VEYA YUKARIDA İZİN VERİLDİĞİ ŞEKİLDE BELGEYİ DEĞİŞTİREN VEYA YENİDEN DAĞITAN HERHANGİ BİR KİŞİ, BİLGİNİN KULLANIMI VEYA KULLANILAMAMASI (VEYA VERİ KAYBI OLUŞMASI, VERİNİN YANLIŞ HALE GELMESİ, SİZİN VEYA ÜÇÜNCÜ ŞAHISLARIN ZARARA UĞRAMASI VEYA BİLGİLERİN BAŞKA BİLGİLERLE UYUMSUZ OLMASI) YÜZÜNDEN OLUŞAN GENEL, ÖZEL, DOĞRUDAN YA DA DOLAYLI HERHANGİ BİR ZARARDAN, BÖYLE BİR TAZMİNAT TALEBİ TELİF HAKKI SAHİBİ VEYA İLGİLİ KİŞİYE BİLDİRİLMİŞ OLSA DAHİ, SORUMLU DEĞİLDİR.
  </para>
  <para>
Tüm telif hakları aksi özellikle belirtilmediği sürece sahibine aittir. Belge içinde geçen herhangi bir terim, bir ticari isim ya da kuruma itibar kazandırma olarak algılanmamalıdır. Bir ürün ya da markanın kullanılmış olması ona onay verildiği anlamında görülmemelidir.
  </para>
    </legalnotice>
    <abstract><para>
Aktarım Denetim Protokolü (TCP) paket anahtarlamalı bilgisayar ağlarındaki ve bu tür ağların birbirine bağlı sistemlerindeki konaklar arasında çok güvenilir bir konaktan konağa protokol olarak kullanılmak üzere tasarlanmıştır. Bu belge Aktarım Denetim Protokolü ve protokolün kullanıcılara veya uygulamalara arayüzünü ve kendini gerçekleyen programlar tarafından yerine getirilen işlevleri açıklar.
    </para></abstract>
  <atomEntry>
    <link rel="alternate" href="http://belgeler.org/rfc/rfc793.html" hreflang="tr_TR" type="text/html" title="RFC 793"/>
    <link rel="related" href="http://adsl.belgeler.org/source/rfcs/rfc0793.xml" hreflang="tr_TR" type="application/xml" title="RFC 793"/>
    <title type="text/html">RFC 793 - Aktarım Denetim Protokolü (TCP)</title>
    <id>belgeler.org:rfc:rfc793</id>
    <author role="editor"><name>Jon Postel</name></author>
    <author role="translator"><name>Behice Balkaya</name></author>
    <created>2006-06</created>
    <modified>2006-09-18</modified>
    <rights type="application/xhtml+xml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>RFC'lerin yazarlarının hakları <a href="ftp://ftp.rfc-editor.org/in-notes/bcp/bcp78.txt">BCP 78</a> ile düzenlenmiştir. Dolayısıyla RFC çevirilerinin çevirmenlerinin haklarını da BCP 78'in düzenlediği kabul edilmiştir.</p></div>
    </rights>
  </atomEntry>
</articleinfo>

<dedication><title>Önsöz</title>
<blockquote><para>
Bu belge ABD Savunma Bakanlığı (DoD) Standart Aktarım Denetim Protokolünü (Transmission Control Protocol - TCP) açıklar. Bu standardın üzerine inşa edildiği daha önceki dokuz ARPA TCP belirtimi vardır ve belirtimin metni ağırlıkla bunların metinlerinden oluşmuştur. Gerek metin gerekse kavramsal olarak bu çalışmaya pek çok kişi destek oldu. Bu sürümde çeşitli ayrıntılar arıtıldı ve mektup-sonu tampon-boyutu ayarlamaları silindi ve mektup mekanizması bir bası işlevi olarak yeniden açıklandı.
</para><attribution>Jon Postel<sbr/>Editör</attribution>
</blockquote>
</dedication>

<sect1 id="rfc793-s1"><title>Giriş</title>
<para>
Aktarım Denetim Protokolü (TCP) paket anahtarlamalı bilgisayar ağlarındaki ve bu tür ağların birbirine bağlı sistemlerindeki konaklar arasında çok güvenilir bir konaktan konağa protokol olarak kullanılmak üzere tasarlanmıştır.
</para><para>
Bu belge Aktarım Denetim Protokolü ve protokolün kullanıcılara veya uygulamalara arayüzünü ve kendisini gerçekleyen programlar tarafından yerine getirilen işlevleri açıklar.
</para>
<sect2 id="rfc793-s11" chunkthis="1"><title>Güdülenme</title>
<para>
Bilgisayar iletişim sistemleri gerek orduda gerek idari teşkilatta ve gerekse sivil çevrelerde gittikçe
önemi artan bir konudur. Bu belgede öncelikle askeri bilgisayarların iletişim gereksinimleri, özelikle bir tıkanıklıkta ve güvenilir olmayan bir bağlantı durumunda güvenilirliği sağlama konularına dikkat edilecektir. Ama bu sorunların çoğu sivil ve devlet sektöründe de bulunmaktadır.
</para><para>
Stratejik ve taktiksel olarak bilgisayar iletişim ağları esasen bilgisayarları birbirine bağlamak ve çok sayıda uygulamayı destekleyen standart süreçler arası iletişim protokollerinin tüm gereksinimlerini sağlamak için geliştirilir ve konuşlandırılır. Bu tür standartlarla ilgili gereksinimi karşılamak için Savunma Bakanlığının Araştırma ve Mühendislik Dairesi<footnote><para>Deputy Undersecretary of Defense for Research and Engineering</para></footnote> Savunma Bakanlığı bünyesinde süreçler arası iletişim protokolünün standartlaştırılması temelinde burada açıklanan Aktarım Denetim Protokolünü (TCP) bildirmiştir.
</para><para>
TCP, çok ağlı çalışmayı destekleyen uygulamaları destekleyen protokollerin katmanlı hiyerarşisine uyum sağlamak için tasarlanmış bağlantı yönelimli, uçtan uca güvenilir iletişim sağlayan bir protokoldür. Birbirine bağlı bilgisayar iletişim ağlarına konak olarak bağlı bilgisayar çiftlerindeki süreçler arasında süreçlerarası güvenilir iletişim için gerekenleri sağlar. TCP katmanı altındaki iletişim protokollerinin güvenilirliği ile ilgili pek az önkabul yapılmıştır. TCP'nin daha düşük seviyeli protokollerden basit ve potansiyel olarak güvensiz bir verikatarı hizmeti sağlayabileceği varsayılır. TCP'nin doğrudan bağlantılı ağlardan paket anahtarlamalı veya devre anahtarlamalı ağlara kadar geniş bir tayftaki iletişim sistemleri üzerinde çalışabilmesi prensip olarak mümkün olmalıdır.
</para><para>
TCP temel olarak ilk defa Cerf ve Kahn tarafından [<xref linkend="rfc793-bib1"/>] içinde açıklanan kavramlara oturtulmuştur. TCP katmanlı protokol mimarisinde, Genel Ağ verikatarı "zarfları" halinde zarflanmış değişik uzunluktaki veribölütlerini almak ve göndermek için TCP'ye bir yöntem sağlayan temel Genel Ağ Protokolünün hemen üstüne oturur. Genel Ağ verikatarı farklı ağlardaki kaynak ve hedef TCP'lerin adreslenmesini sağlar. Genel Ağ protokolü ayrıca çoklu ağlar ve bağlantılı ağ geçitlerinden taşınmasını ve teslimatını sağlamak için TCP veribölütlerinin parçalanması ve yeniden birleştirilmesi ile de ilgilenir. Genel Ağ protokolü ayrıca öncelik, güvenlik sınıflandırması ve TCP veribölütlerinin bölümlere ayrılması ile ilgili bilgileri de taşır, böylece bu bilgi çok sayıda ağ arasında bir uçtan bir uca iletilebilir.
</para><figure id="rfc793-fig1"><title>Protokol Katmanları</title>
<literallayout indent="0">
    +---------------------+
    |      üstdüzey       |
    +---------------------+
    |        TCP          |
    +---------------------+
    | Genel Ağ protokolü  |
    +---------------------+
    |    iletişim ağı     |
    +---------------------+
</literallayout>
</figure><para>
Bu belge çoğunlukla, konak bilgisayarlarda daha yüksek seviyeli protokollerle birlikte yerleşik olan TCP gerçeklenimleri bağlamında kaleme alınmıştır. Bazı bilgisayar sistemleri ağlara bağlanmak için üzerlerinde ağa özel yazılımlara ek olarak TCP ve IP katmanlarını barındıran bilgisayarları kullanırlar. TCP belirtimi, bağlanma noktasında bile gerçeklenebilir görünen daha yüksek seviyeli protokollere bir arayüzden başka bağlanma noktası protokolü olarak da gerçeklenmeye uygun bir arayüz tanımlar (Burada bağlantı noktasından kasıt, sistemin ağa bağlantısını sağlayan bilgisayardır).
</para>
</sect2>

<sect2 id="rfc793-s12" chunkthis="1"><title>Etki Alanı</title>
<para>
TCP, çok ağlı bir ortamda iki süreç arasında güvenilir bir iletişim sağlamak için düşünülmüştür. TCP, çoklu ağlarda ortak kullanım için iki konak arası protokol olarak tasarlanmıştır.
</para>
</sect2>

<sect2 id="rfc793-s13" chunkthis="1"><title>Belge Hakkında</title>
<para>
Bu belgede bir TCP gerçekleniminin, gerek daha yüksek seviyeli protokollerle etkileşim gerekse diğer TCP gerçeklenimleriyle etkileşimin gerektirdiği davranışın bir belirtimi sunulmaktadır. Bu bölümün kalanında protokol arayüzlerine ve işlemlerine kısaca bir gözatılmıştır. <xref linkend="rfc793-s2"/> bölümünde TCP tasarımının felsefi temeli özetlenmiştir. <xref linkend="rfc793-s3"/> bölümünde ise TCP veribölütlerinin biçimlerinin ayrıntıları ile oluşan çeşitli olaylarda (yeni veribölütlerin gelişi, kullanıcı çağrıları, hatalar, vs.) TCP'nin verdiği tepkilerin ayrıntıları açıklanmıştır.
</para>
</sect2>

<sect2 id="rfc793-s14" chunkthis="1"><title>Arayüzler</title>
<para>
TCP arayüzlerinin bir tarafı Genel Ağ Protokolü gibi daha düşük seviyede bir protokole bakarken, diğer tarafı kullanıcıya veya uygulama süreçlerine bakar.
</para><para>
Uygulama süreçleri ve TCP arasındaki arayüz makul derecede bir ayrıntıyla ele alınmıştır. Bu arayüz bir işletim sisteminin dosyaları işlemesi için bir uygulama sürecine sağladığı çağrılara çok benzeyen bir çağrı kümesinden oluşur. Örneğin, bağlantıları kurmak ve kapamak, kurulu bağlantılar üzerinden veri göndermek ve almak için çağrılar vardır. Ayrıca TCP'nin uygulama programları ile eşzamansız haberleşmesi beklenir. TCP gerçeklenimcilerine belli bir işletim sistemine uygun arayüzlerin tasarlanması için epeyce özgürlük tanınmış olsa da, TCP/kullanıcı arayüzünde geçerli bir gerçeklenim için asgari bir işlevsellik gereklidir.
</para><para>
TCP ile daha düşük seviyeli protokol arasındaki arayüz aslında belirlenmemiştir, ancak iki seviyenin birbirlerine eşzamansız olarak bilgi aktarabilecekleri bir mekanizmanın olduğu varsayılır. Genel olarak, bu arayüzü daha düşük seviyedeki protokolün belirleyeceği umulur. TCP birbirine bağlı ağlardan oluşan çok genel bir ortamda çalışmak üzere tasarlanmıştır. Bu belge boyunca, daha düşük seviyeli protokolün Genel Ağ Protokolü [<xref linkend="rfc793-bib2"/>] olduğu varsayılmıştır.
</para>
</sect2>

<sect2 id="rfc793-s15" chunkthis="1"><title>İşlemler</title>
<para>
Evvelce belirtildiği üzere, TCP'nin birincil amacı süreç çiftleri arasında  güvenilir ve güvenli olabilen mantıksal bir devre veya bağlantı hizmeti sağlamaktır. Bir az güvenilir ağ iletişim sisteminin tepesinde bu hizmeti sağlamak için aşağıdaki alanlardaki oluşumlara ihtiyaç vardır:
</para><itemizedlist>
<listitem>Temel Veri Aktarımı</listitem>
<listitem>Güvenilirlik</listitem>
<listitem>Akış Denetimi</listitem>
<listitem>Çoğullama</listitem>
<listitem>Bağlantılar</listitem>
<listitem>Öncelik ve Güvenlik</listitem>
</itemizedlist><para>
TCP'nin bu alanların her birindeki temel işlemleri aşağıdaki paragraflarda açıklanmıştır.
</para>
<variablelist><varlistentry>
<term>Temel Veri Aktarımı:</term><listitem><para>
TCP, Genel Ağ sistemi üzerinden aktarım için bazı sayıları veribölütleri içinde sekizliler şeklinde paketleyen kullanıcılar arasında iki yönlü olarak sürekli bir sekizliler akımı olarak aktarabilir. Genelde, TCP verinin ne zaman durdurulacağına ve ne zaman bırakılacağına kendi kuralları dahilinde karar verir.
</para><para>
Bazen kullanıcılar gönderilmesi için TCP'ye teslim ettikleri verilerin tamamının iletildiğinden emin olmak isterler. İşte bu amaçla bir gitsin işlevi tanımlanmıştır. TCP'ye teslim edilmiş verinin gerçekten iletildiğinden emin olmak için gönderici tarafın bu verinin alıcı tarafa doğru itilmesi gerektiğini belirtmesi gerekir. Bir <literal>GİT</literal>sin, TCP'nin hemen bu noktada alıcıya verileri göndermesine ve teslim etmesine sebep olur. gitme noktası alıcı tarafa görünür olmayabileceği gibi gitsin işlevi bir kayıt sınırlama işaretçisi de sağlamaz.
</para></listitem></varlistentry><varlistentry>
<term>Güvenilirlik:</term><listitem><para>
TCP'nin Genel Ağ iletişim sistemi tarafından hasar verilmiş, kaybedilmiş, yinelenmiş veya sırası değiştirilerek teslim edilmiş verileri kurtarması gerekir. Bunu sağlamak için aktarılacak her sekizliye alıcı TCP tarafından olumlu bir alındı (<literal>ALN</literal>) gönderilmesini gerektiren bir sıra numarası atanır. Eğer bir zamanaşımı süresi içinde <literal>ALN</literal> alınmazsa veri yeniden aktarılır. Alıcı tarafta bu sıra numarası gönderilen veribölütlerin doğru sıraya konması (veribölütleri karışık bir sırada gelmiş olabilir) ve gelen veribölütlerinin içinden yinelenmiş olanların ayıklanması için kulanılır. Aktarılan veribölütlerinde meydana gelen hasarı saptamak için her veribölütüne, alıcı tarafta sınanması ve bozuksa veribölütünün iptal edilebilmesi için bir sağlama özeti eklenir.
</para><para>
TCP'ler düzgün olarak işlediği sürece ve Genel Ağ sistemi tamamen parçalanmadıkça verinin düzgün teslimatını etkileyecek hiçbir aktarım hatası olmaz.
</para></listitem></varlistentry><varlistentry>
<term>Akış Denetimi:</term><listitem><para>
TCP alıcıya gönderici tarafından gönderilmiş verinin miktarını yönetme imkanı da sağlar. Bunun için her <literal>ALN</literal> ile bir "pencere" döndürülür ve bu pencere son veribölütün başarıyla alındığını belirtmekten başka alıcıdan bir izin alınmasını gerektirmeden gönderilebilecek sekizlilerin sayısını belirten bir sıra numarası aralığı içerir.
</para></listitem></varlistentry><varlistentry>
<term>Çoğullama:</term><listitem><para>
Tek bir konak içinde birden fazla sürecin TCP iletişim oluşumlarını aynı anda kullanabilmelerini mümkün kılmak için TCP her konağa bir takım adresler ve portlar sağlar. Genel Ağ iletişim katmanındaki ağ ve konak adreslerine kademeli eklenerek bu bir soketi şekillendirir.  Bir bağlantı bir soket çifti gerektirdiğinden bir soket aynı anda çok sayıda bağlantıda kullanılabilir.
</para><para>
Süreçlerin portlara bağlanması her konak tarafından bağımsız olarak yürütülür. Yine de, sıklıkla kullanılan süreçleri (örn, bir günlük kayıtçısı veya zaman paylaşım hizmeti) herkesin bildiği hep aynı soketlere bağlamak kullanışlılık sağlar.  Bu hizmetlere böylece bilinen adreslerden erişilebilir. Diğer süreçlerin port adreslerinin kurulması ve öğrenilmesi daha anlık mekanizmaların işe karışmasını gerektirebilir.
</para></listitem></varlistentry><varlistentry>
<term>Bağlantılar:</term><listitem><para>
Yukarıda açıklanan güvenilirlik ve akış denetim mekanizmaları TCP'lerin her veri akımı için ilklendirilmesini ve belli bir durum bilgisinin sürekli sağlanmasını gerektirir. Soketleri, sıra numaralarını ve pencere boyutlarını da içererek bu bilgi bütününe bağlantı adı verilir. Her bağlantı her biri bir ucu belirten bir çift soket tarafından eşsiz olarak belirlenir.
</para><para>
İki süreç haberleşmek istediklerinde, kendi TCP'leri önce bir bağlantı oluşturmalıdır (her iki uçta da durum bilgileri ilklendirilmelidir). Haberleşme tamamlandığında, özkaynakları başkalarının kullanımı için serbest bırakmak için  bağlantı sonlandırıldıktan sonra kapatılır.
</para><para>
Bağlantılar güvenilir olmayan makinalar arasında ve güvenilir olmayan Genel Ağ iletişim sistemi üzerinden yapılmak zorunda olunduğu için, bağlantıların hatalı ilklendirilmesinden kaçınmak için  saate dayalı sıra numaraları ile bir uzlaşma mekanizması kulanılır.
</para></listitem></varlistentry><varlistentry>
<term>Öncelik ve Güvenlik:</term><listitem><para>
TCP kullanıcıları iletişimlerinin önceliğini ve güvenliğini belirleyebilir. Gerekli önlemler bu özellikler gerekli olmadığında kullanılan öntanımlı değerler için alınır.
</para></listitem></varlistentry></variablelist>
</sect2>
</sect1>

<sect1 id="rfc793-s2"><title>FELSEFE</title>
<sect2 id="rfc793-s21" chunkthis="1"><title>Ağlararası Sistemin Elemanları</title>
<para>
Ağlararası ortam, ağgeçitleri üzerinden birbirlerine bağlanan ağlara bağlı konaklardan (ağların ağlararası ortama bağlanmasını sağlayan bilgisayarlardan) oluşur. Burada bahsedilen ağlar yerel ağlar (örn, ETHERNET) olabileceği gibi geniş ağlar da (örn, ARPANET) olabilir, ancak bunlar paket anahtarlamalı teknolojiyi kullanıyor olmalıdırlar. İletileri üreten de tüketen de süreçlerdir. Konaklar, ağgeçitleri ve ağlar çeşitli seviyelerdeki protokollerle portlar arasında mantıksal bağlantılardan iki yönlü veri akışı sağlayan süreçlerarası iletişim sistemini desteklerler.
</para><para>
Paket deyince burada genel olarak bir konakla ağ arasında bir hareketlik veriden bahsetmiş oluruz. Bir ağ içinde değiştokuş edilen veri bloklarının biçimi ise genellikle bizi ilgilendirmeyecektir.
</para><para>
Konaklar ağa bağlı bilgisayarlar olup haberleşme ağları bakımından ise paketlerin kaynakları ve hedefleridir. Süreçler (oldukça bilinen tanımı gereğince çalışmakta olan bir program olarak süreçler) ise konak bilgisayarlardaki etkin elemanlar olarak görülürler. Hatta uçbirimler, dosyalar veya G/Ç aygıtlarının bile bir diğeri ile süreçleri kullanarak haberleştikleri görülür. Böylece, tüm iletişim süreçler arasındaki haberleşme gibi görünür.
</para><para>
Bir sürecin kendisiyle başka bir süreç (veya süreçler) arasındaki çeşitli iletişim akımları arasında ayrım yapması gerekebileceğinden biz her sürecin bir miktar porta sahip olabileceğini ve diğer süreçlerin portlarıyla bunlar üzerinden haberleşeceğini farzediyoruz.
</para>
</sect2>

<sect2 id="rfc793-s22" chunkthis="1"><title>İşlem Modeli</title>
<para>
Süreçler veriyi TCP'ye argüman olarak veri tamponlarını vererek yaptıkları çağrıyla aktarırlar. TCP bu tamponlardaki veriyi veribölütleri halinde paketler ve her veribölütünü hedef TCP'ye aktarmak üzere Genel Ağ modülünü çağırır. Alıcı TCP bir veribölütünden aldığı veriyi bir kullanıcı tamponuna yerleştirilir ve alıcı kullanıcıyı bilgilendirir. TCP'ler veri aktarımının düzgün sırada yapıldığından emin olunmasını sağlamakta kullanılmak üzere veribölütlerinde denetim bilgisi bulundururlar.
</para><para>
Genel Ağ iletişim modeli, yerel ağa bir arayüz sağlayan her TCP ile ilişkili birer Genel Ağ modülünden oluşur. Bu Genel Ağ modülü TCP veribölütlerini Genel Ağ verikatarları içinde paketler ve bu verikatarlarını hedef Genel Ağ modülüne veya ara ağgeçitlerine yönlendirir. Verikatarını yerel ağ üzerinden aktarmak için verikatarı bir yerel ağ paketine gömülür.
</para><para>
Paket anahtarları yerel paketin hedef Genel Ağ modülüne teslimatını gerçekleştirmek için paketleme, parçalama ve diğer işlemleri uygulayabilir.
</para><para>
Ağlar arasındaki bir ağgeçidinde Genel Ağ verikatarı yerel paketten çıkarılır ve seyahatine hangi ağda devam edeceğini saptamak için incelenir. Genel Ağ verikatarı seyahatine devam edeceği ağa uygun bir yerel paket olarak yeniden sarmalanır ve sonraki ağgeçidine veya son hedefine yollanır.
</para><para>
Sonraki ağa aktarım için gerekliyse Genel Ağ verikatarı ağgeçidinde daha küçük Genel Ağ veridilimlerine parçalanabilir. Ağgeçidi bunu yapmak için her biri bir veridilimi taşıyan bir Genel Ağ verikatarı takımı üretir. Veridilimleri sonraki ağ geçitlerinde daha küçük veridilimlerine parçalanabilir. Genel Ağ veridilimlerinin biçimi hedef Genel Ağ modülünde tekrar Genel Ağ verikatarı oluşturmak üzere birleştirilebilecek şekilde tasarlanmıştır.
</para><para>
Ara hedeflerdeki Genel Ağ modülleri verikatarından bilgi dilimini çıkardıktan sonra (gerekliyse verikatarını yeniden oluşturduktan sonra) onu sonraki hedef TCP'ye aktarır.
</para><para>
Bu basit işlem modeli birçok ayrıntıyı gizler. Önemli bir özellik hizmet türüdür ve ağgeçidine (veya Genel Ağ modülüne) sonraki ağa geçirmekte kullanılacak hizmet parametrelerinin seçimine rehberlik edecek bilgiyi sağlar. Bu hizmet türü bilgileri içinde verikatarının öncelik bilgisi bulunur. Verikatarları ayrıca çok seviyeli güvenlikli ortamlarda çalışan konak ve ağgeçitlerinin güvenlik kaygılarıyla verikatarlarını bütünün içinden gerektiği gibi ayırmasını mümkün kılmak için güvenlik bilgisi taşıyabilir.
</para>
</sect2>

<sect2 id="rfc793-s23" chunkthis="1"><title>Konak Ortamı</title>
<para>
TCP'nin, bir işletim sisteminde bir modül olduğu varsayılır. Kullanıcılar TCP'ye daha çok bir dosya sistemine erişir gibi erişirler. TCP  işletim sisteminin diğer işlevleri üzerinden çağrılabilir; örneğin veri yapılarını yönetmek için. Asıl ağ arayüzünün bir aygıt sürücüsünün modülü tarafından denetlendiği varsayılır. TCP ağ aygıtı sürücüsünü doğrudan çağırmaz, çağrıyı sürücüye yöneltebilen Genel Ağ verikatarı protokol modülünü çağırır.
</para><para>
TCP mekanizmaları TCP'nin kullanıcı seviyesinde bir işlemcide gerçeklenimine engel olmaz. Yine de, böyle bir gerçeklenimde, konakla kullanıcı seviyesi arasındaki bir protokolle bu belgede açıklanan TCP kullanıcısı türü arayüzü destekleyecek işlevsellik sağlanmalıdır.
</para>
</sect2>

<sect2 id="rfc793-s24" chunkthis="1"><title>Arayüzler</title>
<para>
TCP/kullanıcı arayüzü, kullanıcı tarafından TCP üstünde bir bağlantının <command>AÇ</command>ılması/<command>KAPAT</command>ılması, verinin <command>GÖNDER</command>ilmesi/<command>AL</command>ınması veya bir bağlantı hakkında <command>DURUM</command> bilgisi sağlanması gibi çağrıların yapılması için tüm gereksinimleri sağlar. Bu çağrılar kullanıcı uygulamalarının işletim sistemine yaptığı diğer çağrılar gibi işlem görür; bir dosyanın açılması, okunması ve kapatılması gibi.
</para><para>
TCP/Genel Ağ arayüzü ise  Genel Ağ sisteminin herhangi bir yerindeki konaklarda TCP modüllerine adreslenmiş verikatarlarının alınması ve gönderilmesi gibi çağrıların yapılması için tüm gereksinimleri sağlar. Bu çağrılar, adres, hizmet türü, öncelik, güvenlik ve diğer denetim bilgilerinin aktarılmasını sağlayacak parametrelere sahiptir.
</para>
</sect2>

<sect2 id="rfc793-s25" chunkthis="1"><title>Diğer Protokollerle İlişkiler</title>
<para>
Aşağıdaki şekilde TCP'nin diğer protokoller arasındaki yeri gösterilmiştir:
</para><figure id="rfc793-fig2"><title>Protokol İlişkileri</title>
<literallayout indent="0">
    +------+ +-----+ +-----+       +-----+
    |Telnet| | FTP | | Ses |  ...  |     |  Uygulama Seviyesi
    +------+ +-----+ +-----+       +-----+
          |   |         |             |
         +-----+    +-----+       +-----+
         | TCP |    | RTP |  ...  |     |  Konak Seviyesi
         +-----+    +-----+       +-----+
            |           |             |
        +-------------------------------+
        |  Genel Ağ Protokolü ve ICMP   |  Ağgeçidi Seviyesi
        +-------------------------------+
                        |
          +---------------------------+
          |    Yerel Ağ Protokolü     |    Ağ Seviyesi
          +---------------------------+

           Protokollerin Birbirleriyle İlişkileri
</literallayout>
</figure><para>
TCP'nin daha yüksek seviyeli protokolleri verimli bir şekilde desteklemeye muktedir olması beklenir. ARPANET Telnet veya AUTODIN II THP gibi yüksek düzeyli protokollere arayüzlük yapmak TCP için zor olmamalıdır.
</para>
</sect2>

<sect2 id="rfc793-s26" chunkthis="1"><title>Güvenilir İletişim</title>
<para>
Bir TCP bağlantısı üzerinden gönderilen bir veri akımı hedefe güvenilir ve düzenli bir şekilde teslim edilir.
</para><para>
Aktarım, sıra numaraları ve alındılar kullanılarak güvenilir kılınır. Kavramsal olarak verinin her sekizlisine bir sıra numarası atanır. Bir veribölütündeki verinin ilk sekizlisinin sıra numarasına veribölütü sıra numarası denir ve veribölütü ile birlikte aktarılır. Veribölütleri ayrıca ters yöndeki aktarımın beklenen sonraki veri sekizlisinin sıra numarası olan bir alındı numarası taşır. TCP veri içeren bir veribölütünü aktardığında, bir kopyasını da yeniden aktarım kuyruğuna koyar ve zamanlayıcıyı başlatır; bu veri için bir alındı alındığında kopya veribölütü kuyruktan silinir. Zamanlayıcı sonlandığında hala alındı gelmemişse veribölütü yeniden aktarılır.
</para><para>
Bir alındının alınmış olması verinin son kullanıcıya teslim edildiğini garanti etmez, sadece alıcı TCP sorumluluğunun gereğini yapmıştır.
</para><para>
TCP'ler arasında veri akışını yönetmek için bir akış denetim mekanizması kurulmuştur. Alıcı TCP gönderici TCP'ye bir "pencere" raporlar. Bu pencere alındı numarasından başlanarak alıcı TCP'nin almaya hazır olduğu sekizliklerin sayısını belirtir.
</para>
</sect2>

<sect2 id="rfc793-s27" chunkthis="1"><title>Bağlantının Kurulması ve Temizliği</title>
<para>
Bir TCP'nin işleme sokabileceği bağımsız veri akımlarını kimliklendirmek için TCP bir port tanıtı sağlar. Port tanıtları her TCP tarafından bağımsız olarak seçildiğinden eşsiz olmayabilirler. Her TCP'ye eşsiz tanıtlar sağlamak, yani birbirlerine bağlı ağlar üzerinde eşsiz olacak bir soket oluşturmak için Genel Ağ adresi ile port tanıtını birleştiririz.
</para><para>
Bir bağlantı, uçlarındaki soketlerin oluşturduğu çift ile belirtilir. Bir yerel soket çok sayıda  yabancı soketle bağlantı kurabilir. Bir bağlantı veri taşımak için her iki yönde de kullanılabildiğinden "çift yönlü"dür.
</para><para>
TCP'ler hangi portun hangi süreçle ilişklendirileceğini belirlemekte özgürdürler çünkü onları kendileri seçerler. Bununla birlikte bazı gerçeklenimler bazı kabullerin yapılmasını gerektirir. TCP'nin bazı bakımlardan daima belli süreçleri belli soketlerle ilişkilendirdiğini bilmek gerekir. Biz, süreçlerin kendi portları olabileceğini ve bu süreçlerin sadece kendi soketleri üzerinden bağlantıya geçebileceğini, tasavvur ediyoruz. (Sahipliğin gerçeklenmesi yerel bir konudur ama bir port isteği yapacak bir kullanıcı komutu veya örneğin, belli bir süreci bir port isminin yüksek seviyeli bitleri ile ilişkilendirerek,  belli bir sürece belli bir grup portu tahsis edecek bir yöntem tasarlayabiliriz.)
</para><para>
Bir bağlantı, argüman olarak bir yerel bir de yabancı port vererek bir <command>AÇ</command> çağrısıyda belirtilir. <command>AÇ</command> çağrısı geriye, kullanıcının sonraki çağrılar için atıfta bulunabileceği TCP tarafından sağlanmış bir (kısa) yerel bağlantı ismi döndürür. Bir bağlantı ile ilgili olarak hatırlanması gereken çeşitli şeyler vardır. Bu bilgiyi saklamak için Aktarım Denetim Bloğu (ADB) adını verebileceğimiz bir veri yapısı tasarlarız. Bir gerçeklenim stratejisi olarak yerel bağlantı ismi bu bağlantının ADB'sine bir gösterici olurdu. <command>AÇ</command> çağrısında ayrıca bağlantının doğrudan mı kurulacağı yoksa edilgen olarak mı bekleneceği belirtilir.
</para><para>
Edilgen bir <command>AÇ</command> isteği, sürecin bir bağlantı başlatmaktan ziyade gelen bağlantı isteklerini kabul etmek istediği anlamına gelir. Çoğunlukla edilgen bir <command>AÇ</command> isteği belirten bir süreç herhangi bir çağrıcıdan gelen bağlantı isteğini kabul edecektir. Bu durumda herşeyi sıfır bir yabancı soket, belirsiz bir soketi belirtmekte kullanılır. Belirsiz yabancı soketlere sadece edilgen <command>AÇ</command> çağrılarında izin verilir.
</para><para>
Bilinmeyen başka süreçlere hizmet sağlamak isteyen bir hizmet süreci belirsiz bir yabancı soketle edilgen bir <command>AÇ</command> çağrısı yapar. Bundan sonra bir süreç bu yerel sokete bağlantı isteğinde bulunmuş gibi yapılır. Eğer bu yerel soket bu hizmetle ilişkili olduğu bilinen bir soketse, bağlantı kurulur.
</para><para>
Ne oldukları bilinen soketler bir standart hizmeti öncelikle bir soket adresi ile ilişkilendiren uzlaşımsal bir mekanizmadır. Örneğin, "Telnet Sunucusu" süreci kalıcı olarak belli bir sokete atanmış ve diğer soketler de dosya aktarımı, uzak iş girişi, metin üreteci, yansıtıcı ve giriş noktası (son üçü deneme amaçlıdır) süreçleri için ayrılmıştır. Bir soket adresi, her yeniden oluşturuluşunda belli bir soket döndüren bir "Ara-Bul" hizmetine erişim için ayrılmış olabilirdi. Bildik soketler kavramı TCP belirtiminin bir parçasıdır, fakat soketlerin hizmetlere atanması bu belirtimin dışındadır (bkz, [<xref linkend="rfc793-bib4"/>]).
</para><para>
Süreçler edilgen <command>AÇ</command> çağrıları yapabilir ve başka süreçlerin doğrudan <command>AÇ</command> çağrılarının bunlarla eşleşmesini beklerler; bağlantılar kurulduğunda TCP tarafından bilgilendirilirler. Birbirlerine aynı anda doğrudan <command>AÇ</command> çağrısı yapan iki süreç doğru biçimde bağlanacaktır. Bu esneklik bileşenleri birbirlerine göre eşzamansız hareket eden dağıtık hesaplamanın desteklenmesi bakımından yaşamsal önemdedir.
</para><para>
Yerel edilgen <command>AÇ</command> çağrıları ile yabancı doğrudan <command>AÇ</command> çağrılarındaki soketleri eşleştirmede başlıca iki durum sözkonusudur. İlk durumda, yerel edilgen <command>AÇ</command> çağrıları yabancı soketi tamamen belirtirler. Bu durumda eşleşme kesin olmalıdır. İkinci durumda, yerel edilgen <command>AÇ</command> çağrıları yabancı soketi belirsiz bırakırlar. Bu durumda, yerel soketler eşleştiği sürece herhangi bir yabancı soket kabul edilebilirdir. Diğer olasılıklar kısmen sınırlanmış eşleşmeleri kapsar.
</para><para>
Aynı yerel soketi kullanan edilgen <command>AÇ</command> çağrılarından bazıları (ADB'lerde kayıtlı olarak) beklemedeyse, belirsiz yabancı soketli bir ADB seçilmeden önce, bir yabancı doğrudan <command>AÇ</command> çağrısı, bir yerel doğrudan <command>AÇ</command> çağrısındaki belirli yabancı soketli bir ADB ile, eğer böyle bir ADB mevcutsa, (belirsiz yabancı soketli bekleyenleri sonraya bırakarak) eşleşecektir.
</para><para>
Bağlantıları oluşturan yordamlar eşzamanlama denetim bayrağından (<literal>EŞZ</literal>) yararlanırlar ve üç iletilik bir değiştokuşa katılırlar. Bu değiştokuş üçlü uzlaşı [<xref linkend="rfc793-bib3"/>] diye adlandırılmıştır.
</para><para>
Bir bağlantı bir kullanıcı <command>AÇ</command> çağrısıyla oluşturulan ve beklemekte olan bir ADB ile <literal>EŞZ</literal> içeren bir veribölütünün geliş randevusu tarafından ilklendirilir. Yerel ve yabancı soketlerin eşleşmesi bir bağlantı ilklendirildiği anda sağlanmış olur. Sıra numaraları da her iki yönde eşzamanlandığı anda bağlantı "kurulmuş" olur.
</para><para>
Bir bağlantı temizliği de veribölütlerinin değiştokuşunu ve bu durumda <literal>SON</literal> denetim bayrağının taşınmasını gerektirir.
</para>
</sect2>

<sect2 id="rfc793-s28" chunkthis="1"><title>Veri İletişimi</title>
<para>
Bir bağlantıdan akan veriyi bir sekizli akımı olarak düşünebiliriz. Gönderen taraf yaptığı bir <command>GÖNDER</command> çağrısındaki verinin beklemeksizin alıcı tarafa gidip gitmeyeceği <literal>GİT</literal>sin bayrağını kullanarak belirtir.
</para><para>
Gönderen TCP'nin gönderen taraftan veriyi toplamasına izin verilmiş ve gitsin işlevi algılanıncaya kadar verinin veribölütleri halinde gönderilmesi kararı da ona bırakılmıştır, ancak gitsin işlevini algıladığı anda henüz gönderilmemiş verinin tümünü göndermek zorundadır. Alıcı TCP <literal>GİT</literal>sin bayrağını gördüğünde, veriyi alıcı sürece aktarmadan önce gönderen TCP'den artık veri gelmesini beklememelidir.
</para><para>
Veribölütü sınırları ile gitsin işlevi arasında bir ilişkinin varlığı gerekli değildir. Herhangi bir veribölütündeki veri tek bir <command>GÖNDER</command> çağrısının sonucu olabileceği gibi çok sayıda <command>GÖNDER</command> çağrısının kısmen veya tamamının sonucu olabilir.
</para><para>
<literal>GİT</literal>sin bayrağının ve gitsin işlevinin amacı verinin beklemeksizin gönderici taraftan alıcı tarafa gitmesini sağlamaktır. Bir kayıt hizmeti sağlamaz.
</para><para>
TCP/kullanıcı arayüzünden geçen verinin tamponlarının kullanımı ile gitsin işlevi arasında bir uyum vardır. Bir <literal>GİT</literal>sin bayrağı her zaman alıcı tarafın tamponuna yerleştirilecek veri ile ilişkilidir, tampon dolmamış bile olsa tampon işlenmek üzere kullanıcıya döndürülür. Eğer bir <literal>GİT</literal>sin görünmeden önce gelen veri tampondan taşacak kadar fazla ise tampon doldukça veri tampon boyutluk birimler halinde kullanıcıya aktarılır.
</para><para>
TCP ayrıca verilerin alıcısı ile iletişime geçerek veri akımı içindeki bir noktada alıcının acil veriyi okumakta olduğunu bildirmekte kullanılır. TCP kullanıcıya bekleyen acil bir veri olduğunu haber verdikten sonra alıcının ne yapacağını tanımlaya çalışmaz, ama bu noktadaki genel eğilim alıcı sürecin acil veriyi hemen işleme alacağıdır.
</para>
</sect2>

<sect2 id="rfc793-s29" chunkthis="1"><title>Öncelik ve Güvenlik</title>
<para>
TCP, her bağlantının önceliğini ve güvenliğini sağlamak için Genel Ağ protokolünün hizmet türü alanı ile güvenlik seçeneğini TCP kullanıcısına kullanılır kılar. Tüm TCP modüllerinin çok seviyeli bir güvenlik ortamında işlevsel olması gerekli değildir; bir kısmı sadece sınıflanmamış kullanımla sınırlıyken bir kısmı da sadece tek bir güvenlik seviyesinde  ve bölmesinde çalışabilir. Bu nedenle, bazı TCP gerçeklenimleri ve kullanıcı hizmetleri çok seviyeli güvenlik durumunun bir alt kümesiyle sınırlı olabilir.
</para><para>
Çok seviyeli bir güvenlik ortamında işleyen TCP modülleri giden veribölütlerini güvenlik, bölüm ve öncelik bakımından düzgün biçimde imlemelidir. Bu tür TCP modülleri kullanıcılarına veya Telnet ve THP gibi daha üst düzey protokollere ayrıca, bağlantılarda istenen güvenlik seviyesini, bölmesini ve önceliği belirtmelerine imkan veren bir arayüz sağlamalıdır.
</para>
</sect2>

<sect2 id="rfc793-s210" chunkthis="1"><title>Güçlülük İlkesi</title>
<para>
TCP gerçeklenimleri genel güçlülük ilkesini izleyecektir: yapılacaklar konusunda tutucu, başkalarından kabul edilecekler konusunda özgürlükçü olmak.
</para>
</sect2>
</sect1>

<sect1 id="rfc793-s3"><title>İşlevsel Belirtim</title>
<sect2 id="rfc793-s31" chunkthis="1"><title>Başlık Biçimi</title>
<para>
TCP veribölütleri Genel Ağ verikatarları olarak gönderilir. Genel Ağ Protokolünün başlığı [<xref linkend="rfc793-bib2"/>] kaynak ve hedef konakların adreslerinin de içinde bulunduğu çeşitli bilgi alanları içerir. Genel Ağ Protokolünün başlığını TCP'ye özgü bilgi sağlayan TCP başlığı izler. Bu kısım TCP'ye ek olarak başka konak seviyesi protokollerin varlığına da izin verir.
</para><figure id="rfc793-fig3"><title>TCP Başlık Biçimi</title>
<literallayout indent="0">
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  &lt;=  Bitler
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Kaynak Port          |          Hedef Port           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Sıra Numarası                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Alındı Numarası                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Veri |           |A|A|G|B|E|S|                               |
   |Başlan-|  Yedek    |C|L|İ|Ş|Ş|O|            Pencere            |
   |gıcı   |           |L|N|T|T|Z|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Sağlama Özeti           |      Aciliyet Göstergesi      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Seçenekler                    |    Dolgu      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             veri                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            TCP Başlık Biçimi
</literallayout>
</figure><glosslist><glossentry>
<glossterm>Kaynak Port:  16 bit</glossterm><glossdef><para>
Kaynak port numarası
</para></glossdef></glossentry><glossentry>
<glossterm>Hedef Port:  16 bit</glossterm><glossdef><para>
Hedef port numarası
</para></glossdef></glossentry><glossentry>
<glossterm>Sıra Numarası:  32 bit</glossterm><glossdef><para>
Bu veribölütündeki ilk veri sekizlisinin sıra numarası (<literal>EŞZ</literal> varlığı hariç). Eğer <literal>EŞZ</literal> varsa sıra numarası ilk sıra numarasıdır (İSN) ve ilk veri sekizlisi de İSN+1'dir.
</para></glossdef></glossentry><glossentry>
<glossterm>Alındı Numarası:  32 bit</glossterm><glossdef><para>
<literal>ALN</literal> denetim biti etkinse bu alan veribölütü göndericisinin alacağı umulan sonraki sıra numarasını içerir. Bir bağlantı kurulduğu anda bu daima gönderilir.
</para></glossdef></glossentry><glossentry>
<glossterm>Veri Başlangıcı:  4 bit</glossterm><glossdef><para>
TCP Başlığındaki 32 bitlik sözcüklerin sayısı. Bu verinin başladığı yeri belirtir. TCP başlığı (bir seçenek içerse bile) 32 bitlik bir sayıdır.
</para></glossdef></glossentry><glossentry>
<glossterm>Yedek:  6 bit</glossterm><glossdef><para>
İlleride kullanmak üzere yedek. Sıfır olmalı.
</para></glossdef></glossentry><glossentry>
<glossterm>Denetim bitleri:  6 bit (soldan sağa):</glossterm><glossdef><para>
<literallayout indent="0">
ACL:  Aciliyet Göstergesi alanı önemli
ALN:  Alındı alanı önemli
GİT:  Gitsin işlevi
BŞT:  Bağlantıyı baştan al
EŞZ:  Sıra numaralarını eşzamanla
SON:  Göndericide başka veri yok
</literallayout>
</para></glossdef></glossentry><glossentry>
<glossterm>Pencere:  16 bit</glossterm><glossdef><para>
veribölütü göndericisinin kabul etmeye hazır olduğunu belirttiği alındı alanı ile başlayan veri sekizliklerinin sayısı.
</para></glossdef></glossentry><glossentry>
<glossterm>Sağlama Özeti:  16 bit</glossterm><glossdef><para>
Başlık ve metindeki 16 bitlik sözcüklerin bire tümleyen toplamının bire tümleyenini içeren 16 bitlik sağlama özeti alanı. Eğer bir veribölütü sağlama toplamı alınmak üzere başlık ve metin olarak tek sayıda sekizli içeriyorsa, sağlama özetinin amaçlarına uygun olarak 16 bitlik biçimi sağlamak için son sekizlinin sağındaki alan sıfırlarla doldurulur. Dolgu olarak kullanılan sekizli veribölütünün parçası olarak aktarılmaz. Sağlama özeti hesaplanırken sağlama özeti alanının kendisi sıfırlarla doldurulur.
</para><para>
Ayrıca sağlama özeti kavramsal olarak TCP başlığına önek olarak 96 bitlik sözde başlık bilgisini de içerir. Bu sözde başlık bilgisi Kaynak Adres, Hedef Adres, Protokol ve TCP uzunluğunu içerir. Bu, yanlış yollanmış veribölütlerine karşı TCP koruması sağlar. Bu bilgi Genel Ağ Protokolü tarafından taşınır ve TCP tarafından IP'ye yapılan çağrıların sonuçlarında veya argümanlarında TCP/ağ arayüzüne aktarılır.
</para><para>
<literallayout indent="0">
    +--------+--------+--------+--------+
    |           Kaynak Adres            |
    +--------+--------+--------+--------+
    |            Hedef Adres            |
    +--------+--------+--------+--------+
    |  sıfır | SBB Uz |  TCP Uzunluğu   |
    +--------+--------+--------+--------+
</literallayout>
</para><para>
TCP Uzunluğu, TCP başlık uzunluğu ile sekizliler cinsinden veri uzunluğunun toplamıdır (Bu miktar bilgisi doğrudan aktarılmaz, hesaplanır) ve sözde başlığın 12 sekizlisi sayılmaz.
</para></glossdef></glossentry><glossentry>
<glossterm>Aciliyet Göstergesi:  16 bit</glossterm><glossdef><para>
Bu alan, bu veribölütündeki sıra numarasından pozitif mesafe olarak aciliyet göstericisinin o anki değerini nakleder. Aciliyet göstericisi acil verinin başındaki sekizlinin sıra numarasını gösterir. Bu alan sadece <literal>ACL</literal> denetim biti etkin olan veribölütlerinde yorumlanır.
</para></glossdef></glossentry><glossentry>
<glossterm>Seçenekler:  değişken</glossterm><glossdef><para>
Seçenekler TCP başlığının sonunda 8 bitin katları olarak yer işgal edebilirler. Tüm seçenekler sağlama özetinde içerilirler. Bir seçenek herhangi bir sekizlinin sınırından başlayabilir. Bir seçeneğin biçimi ile ilgili iki durum vardır:
</para><itemizedlist>
<listitem>1. durum:  Seçenek çeşidini içeren tek bir sekizli.</listitem>
<listitem>2. durum:  Seçenek çeşidi için bir, seçenek uzunluğu için bir sekizli ve asıl seçenek verisi sekizlileri.</listitem>
</itemizedlist><para>
Seçenek uzunluğu olarak, çeşit bir ve uzunluk iki saydıktan sonra asıl veri sekizlileri sayılır.
</para><para>
Seçenek listesinin veri başlangıcı alanının gerektirdiğinden daha kısa olabileceği gözden uzak tutulmamalıdır. Başlık içeriği, "Seçenek Listesi Sonu" seçeneğinden sonra başlık dolgu karakteri (örn, sıfır) ile doldurulmalıdır.
</para><para>
Bir TCP tüm seçenekleri gerçeklemelidir.
</para><para>
Şimdilik tanımlı seçenekler şunlardır (çeşit sekizli cinsinden belirtilir):
</para><para>
<literallayout indent="0">
  Çeşit     Uzunluk    Anlamı
  -----     -------    -------
    0          -       Seçenek Listesi Sonu.
    1          -       İşlem Yok.
    2          4       Azami Veribölütü Boyu.
</literallayout>
</para><para>
<glosslist><title>Özel Seçenek Tanımları</title>
<glossentry><glossterm>Seçenek Listesi Sonu</glossterm><glossdef><para>
<literallayout indent="0">
+--------+
|00000000|
+--------+
  Çeşit=0
</literallayout>
</para><para>
Bu seçenek kodu Seçenek listesinin sonunu belirtir. Bu, Veri Başlangıcı alanı ile ilgili TCP
başlığının sonu ile çakışık olmayabilir. Bu, her seçeneğin sonunda değil, bütün seçeneklerin sonunda kullanılır ve sadece TCP başlığının sonu ile seçeneklerin sonu çakışık değilse kullanımına ihtiyaç duyulur.
</para></glossdef></glossentry><glossentry>
<glossterm>İşlem Yok</glossterm><glossdef><para>
<literallayout indent="0">
+--------+
|00000001|
+--------+
  Çeşit=1
</literallayout>
</para><para>
Bu seçenek kodu seçenekler arasında kullanılabilir, örneğin sonraki seçeneğin sözcük sınırına hizalanmasında. Göndericilerin bu seçeneği kullanacağının hiç bir garantisi yoktur, bu yüzden alıcılar bir sözcük sınırından başlamasa bile tüm seçenekleri işleme sokabilmeye hazır olmalıdır.
</para></glossdef></glossentry><glossentry>
<glossterm>Azami Veribölütü Boyu</glossterm><glossdef><para>
<literallayout indent="0">
+--------+--------+---------+--------+
|00000010|00000100|    azm vb boyu   |
+--------+--------+---------+--------+
  Çeşit=2   Uzunluk=4
</literallayout>
</para></glossdef></glossentry></glosslist>
</para></glossdef></glossentry><glossentry>
<glossterm>Azami Veribölütü Boyu Seçenek Verisi:  16 bit</glossterm><glossdef><para>
Bu seçenek mevcutsa, seçenekle bu veribölütünü gönderen TCP'deki azami alım veribölütü boyu nakledilir. Bu alan sadece ilk bağlantı isteğinde (örn, <literal>EŞZ</literal> denetim bitli veribölütlerinde) gönderilmelidir. Bu seçenek kullanılmamışsa her veribölütü boyuna izin verilir.
</para></glossdef></glossentry><glossentry>
<glossterm>Dolgu:  değişken</glossterm><glossdef><para>
TCP başlığının 32 bitlik olmasını sağlamak için dolgu yapılır. Doldurma işleminde sıfırlar kullanılır.
</para></glossdef></glossentry></glosslist>
</sect2>

<sect2 id="rfc793-s32" chunkthis="1"><title>Terminoloji</title>
<para>
TCP işlemlerine çok fazla dalmadan önce terminoloji üzerinde ayrıntılı olarak durmak istiyoruz. Bir TCP bağlantısının sürdürülmesi çeşitli değişkenlerin hatırlanmasını gerektirir. Bu değişkenlerin saklanacağı yer olarak Aktarım Denetim Bloğu (ADB) adını verdiğimiz bir bağlantı kaydı tasarladık. Yerel ve uzak soket numaralarını, bağlantı önceliği ve güvenliği, kullanıcıların gönderim ve alım tamponların göstericileri yeniden aktarım kuyruğunun göstericisi ve o anki veribölütü, ADB'de saklanan değişkenler arasında sayılabilir. Ek olarak gönderim ve alım sıra numaraları ile ilgili çeşitli değişkenler de ADB'de saklanır.
</para><variablelist><varlistentry>
<term>Gönderi Sıra Numaraları Değişkenleri</term><listitem><para>
<literallayout indent="0">
GÖN.OLM - gönderi alınmadı
GÖN.SNR - sonraki gönderi
GÖN.PEN - gönderi penceresi
GÖN.ACL - gönderi aciliyet göstericisi
GÖN.WL1 - son pencere güncellemesinde kullanılan veribölütü sıra numarası
GÖN.WL2 - son pencere güncellemesinde kullanılan veribölütü alındı numarası
İGS     - ilk gönderi sıra numarası
</literallayout>
</para></listitem></varlistentry><varlistentry>
<term>Alım Sıra Numaraları Değişkenleri</term><listitem><para>
<literallayout indent="0">
ALM.SNR - sonraki alım
ALM.PEN - alım penceresi
ALM.UP  - alım aciliyet göstericisi
İAS     - ilk alım sıra numarası
</literallayout>
</para></listitem></varlistentry></variablelist><para>
Bu değişkenlerden bazılarının sıra değişkenleri uzayıyla ilişkilendirlmesinde aşağıdaki şeklin yardımı olabilir.
</para><figure id="rfc793-fig4"><title>Gönderi Sıra Numaraları Uzayı</title>
<literallayout indent="0">
           1         2          3          4
      ----------|----------|----------|----------
             GÖN.OLM    GÖN.SNR    GÖN.OLM
                                  +GÖN.PEN

  1 - alındı'lanmış eski sıra numaraları
  2 - alındı'lanmamış sıra numaraları
  3 - yeni veri aktarımı için izin verilen sıra numaraları
  4 - henüz izin verilmemiş gelecekteki sıra numaraları

            Gönderi Sıra Numaraları Uzayı
</literallayout>
</figure><para>
Gönderi penceresi <xref linkend="rfc793-fig4"/>'teki sıra numaraları uzayının 3 ile etiketlenmiş bölümüdür.
</para><figure id="rfc793-fig5"><title>Alım Sıra Numaraları Uzayı</title>
<literallayout indent="0">
          1         2          3
     ----------|----------|----------
            ALM.SNR    ALM.SNR
                      +ALM.PEN

  1 - alındı'lanmış eski sıra numaraları
  2 - yeni alım için izin verilen sıra numaraları
  3 - henüz izin verilmemiş gelecekteki sıra numaraları

          Alım Sıra Numaraları Uzayı
</literallayout>
</figure><para>
Alım penceresi <xref linkend="rfc793-fig5"/>'teki sıra numaraları uzayının 2 ile etiketlenmiş bölümüdür.
</para><para>
Ayrıca değerlerini o anki veribölütündeki alanlardan alan ve incelememizde sıkça kullanılacak olan birtakım değişkerler daha vardır.
</para><variablelist><varlistentry>
<term>O anki Veribölütü Değişkenleri</term><listitem><para>
<literallayout indent="0">
VBL.SIRA - veribölütü sıra numarası
VBL.ALN  - veribölütü alındı numarası
VBL.UZN  - veribölütü uzunluğu
VBL.PEN  - veribölütü penceresi
VBL.ACL  - veribölütü aciliyet göstericisi
VBL.PRC  - veribölütü öncelik değeri
</literallayout>
</para></listitem></varlistentry></variablelist><para>
Bir bağlantı yaşamı boyunca bir seri durumdan geçer.  Bu durumlar: <literal>DİNLE</literal>, <literal>EŞZ-GÖNDER</literal>, <literal>EŞZ-ALINDI</literal>, <literal>KURULU</literal>, <literal>SON-BEKLE-1</literal>, <literal>SON-BEKLE-2</literal>, <literal>KAPAT-BEKLE</literal>, <literal>KAPANIŞ</literal>, <literal>SON-ALN</literal>, <literal>ZMN-BEKLE</literal> ve kurgusal durum <literal>KAPALI</literal>. <literal>KAPALI</literal> kurgusaldır, çünkü hiç ADB'nin olmadığı zamanı ve dolayısıyla bağlantı yokluğunu ifade eder. Durumların kısaca anlamları:
</para><variablelist><varlistentry>
<term><literal>DİNLE</literal></term>
<listitem><para>Bir porttan bir TCP bağlantısının beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>EŞZ-GÖNDER</literal></term>
<listitem><para>Bir bağlantı isteği gönderildikten sonra bununla eşleşen bir bağlantı isteğinin beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>EŞZ-ALINDI</literal></term>
<listitem><para>Bir bağlantı isteği gönderilip alındıktan sonra onaylayıcı bağlantı isteği alındısının beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>KURULU</literal></term>
<listitem><para>Alınan verinin kullanıcıya teslim edilebileceği bir açık bağlantıyı gösterir. Bu bağlantının veri aktarımının yapıldığı normal fazıdır.
</para></listitem></varlistentry><varlistentry>
<term><literal>SON-BEKLE-1</literal></term>
<listitem><para>Uzak TCP'den bir bağlantı sonlandırma isteğinin ya da evvelce gönderilmiş bağlantı sonlandırma isteğinin alındısının beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>SON-BEKLE-2</literal></term>
<listitem><para>Uzak TCP'den bir bağlantı sonlandırma isteğinin beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>KAPAT-BEKLE</literal></term>
<listitem><para>Yerel kullanıcıdan bir bağlantı sonlandırma isteğinin beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>KAPANIŞ</literal></term>
<listitem><para>Uzak TCP'den bir bağlantı sonlandırma isteği alındısının beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>SON-ALN</literal></term>
<listitem><para>Uzak TCP'ye evvelce gönderilmiş (bir bağlantı sonlandırma isteği alındısı içeren) bağlantı sonlandırma isteğinin alındısının beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>ZMN-BEKLE</literal></term>
<listitem><para>Uzak TCP'nin bağlantı sonlandırma isteğinin alındısını almasına kadar geçecek sürenin beklendiğini gösterir.
</para></listitem></varlistentry><varlistentry>
<term><literal>KAPALI</literal></term>
<listitem><para>Artık bir bağlantının olmadığını gösterir.
</para></listitem></varlistentry></variablelist><para>
Bir TCP bağlantısı yanıtlarla bir durumdan diğerine geçilen bir süreçtir. Yanıtların sebepleri  <command>AÇ</command>, <command>GÖNDER</command>, <command>AL</command>, <command>KAPAT</command>, <command>TERKET</command> ve <command>DURUM</command> kullanıcı çağrıları; özellikle <literal>EŞZ</literal>, <literal>ALN</literal>, <literal>BŞT</literal> ve <literal>SON</literal> bayraklarını içeren gelen veribölütleri; ve zamanaşımlarıdır.
</para><para>
<xref linkend="rfc793-fig6"/>'daki durum şeması sadece sebepleri ve sonuçlarıyla durum değişikliklerini görselleştirir. Fakat durum değişikliklerine bağlı hata durumları ve eylemler dikkate alınmamıştır. Sonraki bölümde TCP'nin olaylara tepkisi daha ayrıntılı incelenecektir.
</para><caution><title>Dikkat</title><para>
Bu şema sadece bir özettir ve belirtimin tamamı olarak ele alınmamalıdır.
</para></caution>
<figure id="rfc793-fig6"><title>TCP Bağlantı Durumları Şeması</title>
<literallayout indent="0">
                                 +----------+ ---------------\  doğrudan AÇ
                                 |  KAPALI  |                 \ -----------
                                 +----------+&lt;-------------\   \ ADB oluştur
                                    |    ^                  \   \ EŞZ gönder
                       edilgen AÇ   |    |   KAPA            \   \
                       -----------  |    | ----------         \   \
                       ADB oluştur  |    | ADB'yi sil          \   \
                                    V    |                      \   \
                                 +----------+           KAPA     |   \
                                 |   DİNLE  |         ---------- |    |
                                 +----------+         ADB'yi sil |    |
                        EŞZ al      |    |    GÖNDER             |    |
                   --------------   |    |    -------            |    V
    +--------+     EŞZ,ALN gönder  /      \   EŞZ gönder       +--------+
    |        |&lt;-------------------          ------------------>|        |
    |  EŞZ   |                    EŞZ al                       |   EŞZ  |
    | ALINDI |&lt;------------------------------------------------| GÖNDER |
    |        |                   EŞZ gönder                    |        |
    |        |--------------------          -------------------|        |
    +--------+ EŞZ'nin ALN'sini al \      /  EŞZ,ALN al        +--------+
      |        -------------------  |    |  ------------
      |                  x          |    |   ALN gönder
      |                             V    V
      |  KAPA                    +----------+
      | -------                  |  KURULU  |
      | SON gönder               +----------+
      |                   KAPA      |    |      SON al
      V                ----------   |    |    ---------
    +---------+        SON gönder  /      \   ALN gönder   +-------------+
    |  SON    |&lt;------------------          -------------->| KAPAT-BEKLE |
    | BEKLE-1 |-----------------------                     +-------------+
    +---------+                SON al  \                       KAPA    |
      | SON'un ALN'sini al   ---------  |                   ---------- |
      | ------------------   ALN gönder |                   SON gönder V
      V        x                        V                      +---------+
    +----------+                   +---------+                 | SON-ALN |
    |SONBEKLE-2|                   | KAPANIŞ |                 +---------+
    +----------+                   +---------+      SON'un ALN'sini al |
      |              SON'un ALN'sini al |           ------------------ |
      |              ------------------ |                    x         |
      |    SON al            x          |    ZmnAşımı=2AVÖ             |
      |  ----------                     V    -------------             V
       \ ALN gönder                +---------+ ADB'yi sil      +---------+
         ------------------------->|ZMN BEKLE|---------------->|  KAPALI |
                                   +---------+                 +---------+

                           TCP Bağlantı Durumları Şeması
</literallayout>
</figure>
</sect2>

<sect2 id="rfc793-s33" chunkthis="1"><title>Sıra Numaraları</title>
<para>
Tasarımdaki temel bir fikir bir TCP bağlantısından gönderilen her veri sekizlisinin bir sıra numarısının olmasıdır. Sekizliler sıralı olduklarından onlar için alındı gönderilebilir. Kullanılacak alındı mekanizması kümeleme yapan türdedir, böylece X numaralı alındı ile X numaralı sekizli hariç X'inci sekizliye kadar olan sekizlilerin alındığı belirtilebilir. Bu mekanizma, yeniden aktarım gerektiğinde düz mantıkla yinelenmenin saptanmasına da olanak sağlar. Bir veribölütündeki sekizliler, başlıktan hemen sonra gelen sekizli en düşük numarayı alacak şekilde numaralandırılırlar.
</para><para>
Gerçekte sıra numarası uzayının çok büyük olmasına rağmen sonlu olması gerektiğini unutmamak esastır. Bu uzay <literal>2<superscript>32</superscript> - 1</literal> birimliktir. Uzay sonlu olduğundan, sıra numaraları ile ilgili tüm işlemler <literal>2<superscript>32</superscript></literal>'nin katlarında <literal>2<superscript>32</superscript> - 1</literal> birimlik kümeler (ve hatta aynı sınırlama ile küme kümeleri) halinde yapılmalıdır. Bu tür işlemlerde bazı cinlikler olabildiğinden yazılımı geliştirirken böyle değerlerle karşılaşılacağı dikkate alınmalıdır. "=&lt;" sembolü "küçük veya eşittir" anlamına gelir.
</para><para>
TCP'nin uygulayacağı sıra numaraları kıyaslamalarından başlıcaları:
</para><orderedlist numeration="loweralpha"><listitem>
gönderilmiş ama henüz alınmamış bir sıra numarasını gösteren bir alındının saptanması.
</listitem><listitem>
Alındı'lanmış bir veribölütü tarafından işgal edilen tüm sıra numaralarının saptanması (örneğin, veribölütünün yeniden aktarım kuyruğundan silinmesi için).
</listitem><listitem>
Beklenen sıra numaralarını içeren bir gelen veribölütünün saptanması (örneğin, bu veribölütü alım penceresi ile "örtüşüyordur").
</listitem></orderedlist><para>
Gönderilen veriye verilen yanıtta TCP, alındıları alır. Alındıların işleme konulmasında aşağıdakilerle ilgili kıyaslamaların yapılması gerekir:
</para><para>
<literallayout indent="0">
  GÖN.OLM = en eski alındı'lanmamış sıra numarası

  GÖN.SNR = gönderilecek sonraki sıra numarası

  VBL.ALN = Alan TCP'deki alındı numarası
            (alan TCP'nin beklediği sonraki alındı numarası)

  VBL.SIRA = bir veribölütünün ilk sıra numarası

  VBL.UZN = veribölütündeki veri tarafından işgal edilen sekizlilerin sayısı
            (EŞZ ve SON sayarak)

  VBL.SIRA+VBL.UZN-1 = bir veribölütündeki son sıra numarası
</literallayout>
</para><para>
Yeni bir alındı numarası aşağıdaki eşitsizlikle ifade edilen değerlerden biridir:
</para><para>
<literallayout indent="0">
  GÖN.OLM &lt; VBL.ALN =&lt; GÖN.SNR
</literallayout>
</para><para>
Yeniden aktarım kuyruğundaki bir veribölütü, eğer sıra numaralarının toplamı ya da uzunluğu gelen veribölütündeki alındı değerinden küçük veya ona eşitse, tamamen alındı'lanmış demektir.
</para><para>
Veri alındığında aşağıdaki kıyaslamaların yapılması gerekir:
</para><para>
<literallayout indent="0">
ALM.SNR = gelen veribölütünde beklenen sonraki sıra numarası olup
          alım penceresinin alt veya sol kenarıdır

ALM.SNR+ALM.PEN-1 = gelen veribölütünde beklenen son sıra numarası olup
                    alım penceresinin üst veya sağ kenarıdır

VBL.SIRA = gelen veribölütü tarafından işgal edilen ilk sıra numarası

VBL.SIRA+VBL.UZN-1 = gelen veribölütü tarafından işgal edilen son sıra numarası
</literallayout>
</para><para>
Bir veribölütünün geçerli sıra numarası uzayının bir kısmını işgal ettiğine karar verilebilmesi için şunlardan biri geçerli olmalıdır:
</para><para>
<literallayout indent="0">
    ALM.SNR =&lt; VBL.SIRA &lt; ALM.SNR+ALM.PEN
</literallayout>
</para><para>veya</para><para>
<literallayout indent="0">
    ALM.SNR =&lt; VBL.SIRA+VBL.UZN-1 &lt; ALM.SNR+ALM.PEN
</literallayout>
</para><para>
Veribölütünün başlangıcının pencere içine düşüp düşmediğini anlamak için bu sınamanın ilk parçası, sonunun pencere için düşüp düşmediğini anlamak için ise ikinci parçası kullanılır. Eğer veribölütü her iki sınamayı da aşarsa penceredeki veriyi içeriyor demektir.
</para><para>
Aslında durum bundan biraz daha karışıktır. Sıfır sayıda pencere ve sıfır uzunlukta veribölütü olabileceğini de gözönüne alarak bir gelen veribölütünün kabul edilebilirliği için dört durum söz konusudur:
</para><para>
<literallayout indent="0">
Veribölütü    Alım     Sınama
 Uzunluğu   Penceresi
----------  ---------  -------------------------------------------

    0           0      VBL.SIRA = ALM.SNR

    0          >0      ALM.SNR =&lt; VBL.SIRA &lt; ALM.SNR+ALM.PEN

   >0           0      kabul edilebilir değil

   >0          >0      ALM.SNR =&lt; VBL.SIRA &lt; ALM.SNR+ALM.PEN
                    veya ALM.SNR =&lt; VBL.SIRA+VBL.UZN-1 &lt; ALM.SNR+ALM.PEN
</literallayout>
</para><para>
Alım penceresi sıfır olduğunda <literal>ALN</literal> veribölütleri dışında hiçbir veribölütünün kabul edilmeyeceği dikkate alınmalıdır. Bu durumda, bir TCP için veriyi aktarırken ve <literal>ALN</literal>'leri alırken sıfır alım penceresi sağlanması olasıdır. Yine de, alım penceresi sıfır olduğunda bile, bir TCP tüm gelen veribölütlerindeki <literal>BŞT</literal> ve <literal>ACL</literal> alanlarını işleme sokmalıdır.
</para><para>
Numaralama şemasının yararlarını belli denetim bilgilerini korumakta da kullanabiliriz. Bunu sıra numaraları uzayına örtük olarak bazı denetim bayraklarını dahil ederek sağlayabiliriz, böylece bunlar yeniden aktarılabilir ve bir karışıklık olmaksızın alındılanabilir (yani bir ve yalnız bir denetim kopyası rol alacak şekilde). Denetim bilgisi veribölütü veri uzayında fiziksel olarak taşınmaz. Bu bakımdan, denetim bilgilerine sıra numaralarını örtük olarak atamak için bazı kurallar uydurmalıyız. <literal>EŞZ</literal> ve <literal>SON</literal> bayraklarından başka bu korumaya ihtiyaç duyan denetim yoktur ve bu denetimler sadece bağlantının açılışında ve kapanışında kullanılır. Sıra numaralarının amaçlarına uygun olarak, <literal>EŞZ</literal>'nin kendisi için oluştuğu veribölütünün ilk asıl veri sekizliğinden önce oluştuğu düşünülürken, <literal>SON</literal>'un kendisi için oluştuğu veribölütünün son asıl veri sekizliğinden sonra oluştuğu düşünülür. Veribölütü uzunluğu (<literal>VBL.UZN</literal>) hem veri hem de denetimin işgal ettiği sıra numarası uzayını kapsar, Bir <literal>EŞZ</literal> olduğunda, <literal>VBL.SIRA</literal>'nın değeri <literal>EŞZ</literal>'nin sıra numarasıdır.
</para>

<sect3><title>İlk Sıra Numarasının Seçimi</title>
<para>
Protokol bir bağlantı üzerinde hiçbir sınırlama olmaksızın tekrar tekrar kullanılır. Bir bağlantı bir soket çifti ile tanımlanır. Bir bağlantının yeni örneklerine bağlantının yeniden varolmuşu gibi başvurulur. Bu noktada sorun, TCP'nin bağlantının önceki yeniden varouşlarından kalan yinelenmiş veribölütlerini nasıl tanıyacağıdır. Bu sorun bağlantı çabucak açılıp kapatılırsa veya bağlantı bellek kaybı nedeniyle kopar ve yeniden kurulursa görünür hale gelir.
</para><para>
Karışıklıktan kaçınmak için bir bağlantının yeniden oluşturulmuşundaki veribölütlerinden, ağ üzerinde hala aynı sıra numaralarıyla mevcut olanlarının kullanımını engelleyeceğiz. Bir TCP kopup kullanımdaki sıra numaralarına ait tüm bilgi kaybolsa bile bunu sağlama almak isteriz. Yeni bağlantılar oluşturulduğunda, yeni bir 32 bitlik ilk sıra numarası (İSN) seçen bir İSN üreteci devreye sokulur. Üreteç, en düşük biti kabaca her 4 mikrosaniyede bir artan 32 bitlik (muhtemelen kurgusal) bir saate  bağlıdır. Bu durumda, İSN yaklaşık her 4,55 saatte bir başa döner. Veribölütleri ağda Azami Veribölütü Ömrü'nden (AVÖ) daha fazla kalmayacağından ve AVÖ 4,55 saatten küçük olduğundan normal olarak İSN'nin eşsiz olacağını varsayarız.
</para><para>
Her bağlantı için bir gönderi sıra numarası bir de alım sıra numarası vardır. İlk gönderi sıra numarası (<literal>İGS</literal>) veriyi gönderen TCP tarafından seçilirken ilk alım sıra numarası (<literal>İAS</literal>) ise bağlantının kuruluş işlemleri sırasında öğrenilir.
</para><para>
Bir bağlantının kurulması ve ilklendirilmesi için iki TCP'nin birbirlerinin ilk sıra numaraları üzerinden eşzamanlanmaları gerekir. Bu, "<literal>EŞZ</literal>" denetim bitini ve ilk sıra numarasını taşıyan veribölütlerini oluşturan bağlantı değiştokuşunda yapılır. Bir kısaltma olarak <literal>EŞZ</literal> biti taşıyan veribölütlerine "<literal>EŞZ</literal>ler" de denilmektedir. Dolayısıyla, çözüm, ilk sıra numarasının seçimi için uygun bir mekanizma ve İSN'leri değiştokuş etmek için biraz karışık bir uzlaşım mekanizması gerektirir.
</para><para>
Eşzamanlama iki tarafın birbirlerine kendi ilk sıra numaralarını göndermelerini ve bunların alındılarılarla onaylanmasını gerektirir.
</para><orderedlist>
<listitem><literal>A --> B &nbsp; EŞZ</literal> sıra numaram X</listitem>
<listitem><literal>A &lt;-- B &nbsp; ALN</literal> sıra numaranız X</listitem>
<listitem><literal>A &lt;-- B &nbsp; EŞZ</literal> sıra numaram Y</listitem>
<listitem><literal>A --> B &nbsp; ALN</literal> sıra numaranız Y</listitem>
</orderedlist><para>
2. ve 3. adım tek bir ileti olarak birleştirilebildiğinden buna <emphasis>üçlü uzlaşım</emphasis> adı verilir.
</para><para>
Üçlü uzlaşımın gerekli olmasının sebebi sıra numaralarının ağdaki genel bir saate göre berabere kalamamaları ve TCP'lerin İSN'leri farklı mekanizmalarla seçebilmeleridir. İlk <literal>EŞZ</literal>'nin alınmasıyla, bağlantıda kullanılan son sıra numarası hatırlanmadıkça (her zaman mümkün değildir), veribölütünün eskiden kalma olup olmadığını anlamak mümkün değildir ve dolayısıyla göndericiden bu <literal>EŞZ</literal>'yi doğrulaması istenmelidir. Üçlü uzlaşım ve saatli işlem şemasının yararları [<xref linkend="rfc793-bib3"/>]'te açıklanmıştır.
</para>
</sect3>

<sect3><title>Susmayı Bilmek</title>
<para>
TCP'nin ağda eskiden kalmış bir veribölütünün yinelenmişinin sıra numarasını taşıyan bir veribölütü oluşturmadığından emin olmak için, bağlantının yenisinin başlatılması veya kullanımdaki sıra numarası belleğinin kaybından dolayı bir bozulmanın kurtarılması amacıyla bir sıra numarası atamadan önce, TCP'nin bir AVÖ boyunca sessiz kalması gerekir. Bu belirtim için AVÖ 2 dakika olarak alınmıştır. Bu bir mühendislik seçimidir ve tecrübeler başka bir değeri gerektiriyorsa değiştirilebilir. Bir nedenle TCP yeniden ilklendirildiğinde sıra numarası belleği hala kullanımdaysa hiç beklenmemesi gerekir; emin olunması gereken tek şey kullanılacak sıra numarasının son kullanılandan büyük olacağıdır.
</para>
<sect4><title>TCP Sessizlik Süresi Kavramı</title>
<para>
Bu belirtim bize gösterecek ki, Genel Ağ sisteminin bir parçası olan
konakların  etkin (kapalı olmayan) bağlantılar üzerinden aktarılan son sıra numaraları ile ilgili hiç bir bilgi kalmaksızın "çökme" leri durumunda, TCP'nin herhangi bir veribölütünü iletmesi en azından kabul edilen AVÖ değeri kadar gecikecektir. Aşağıdaki paragraflarda, bu belirtim için bir açıklama yapılmıştır. TCP gerçeklenimcileri bu "sessizlik süresi" sınırlamasını zorlayabilirler, fakat tek risk eski verilerin yeni olarak kabul edilmesine veya yeni veriyi Genel Ağ sistemindeki bazı alıcıların eskinin yinelenmişi olarak reddetmelerine sebep olmaktır.
</para><para>
TCP'ler veribölütlerinin biçimlendirilip kaynak konağın ağ çıkış kuyruğuna her atılışında sıra numarası uzayını tüketirler. TCP'deki sıralama algoritması ve yinelenmişin saptanması için güvenilen tek şey veribölütü alıcıya ulaştırılıp onay alınmadan ve veribölütünün Genel Ağ üzerinde bulunan bütün kopyaları yok edilmeden veribölütü verisinin sıra numarasının eşsizliğini sağlayan sıra numaralarının <literal>2<superscript>32</superscript></literal> değerinin hepsi tüketilmeden döngünün yeniden başlatılmayacağıdır. Böyle bir önkabul olmaksızın, iki ayrı TCP veribölütüne aynı sıra numaralarının atanmış olması veya üst üste gelmesi gibi bir olasılıklar doğar ve bu da alıcı tarafta hangi verinin yeni hangisinin eski olduğu konusunda karmaşaya yol açar. Hatırlarsanız bir veribölütünün içinde veri sekizlileri olduğu kadar çok sayıda ardışık sıra numarası da bulunuyordu.
</para><para>
Normal şartlar altında, alındılanmış ilk sıra numarasından önce bir sıra numarasının tekrar kullanılmasını önlemek için TCP'ler kullanılacak sonraki sıra numarası ile bekleyen en eski alındının kaydını tutarlar. Bu tek başına sıra numarasının, kullanılmadan önce eski yinelenmiş verinin ağ üzerinden silinmiş oluşunu garantilemez, bu nedenle başıboş bir yinelenmişin, istenmeyen bir varış olasılığını düşürmek için sıra numarası uzayı çok geniş tutulur. Sıra numarası uzayının <literal>2<superscript>32</superscript></literal> sekizlisinin kullanımı 2 megabit/saniye hızında 4.5 saat sürer. AVÖ ağ üzerinde birkaç on saniyeyi aşamayacağından veri hızı onlarca megabit/saniye hızlara tırmansa bile, bu, öngörülebilir ağlar için yeterince iyi bir koruma sayılır. 100 megabit/saniye için döngü tamamlanma süresi 5.4 dakika olur ve bu hala makul bir koruma sağlar.
</para><para>
Eğer bir kaynak TCP son kullandığı bağlantıda sıra numaraları belleğine sahip değilse, TCP'deki yineleme saptama ve sıralama algoritması yine de bozulabilir. Örneğin, bir TCP tüm bağlantıları 0 sıra numarası ile başlatıyorsa, bir çökme veya yeniden başlatma sebebiyle, bu TCP önceki bağlantıyı (muhtemelen yarı açık bağlantı çözünürlüğü sonrası) yeniden şekillendirebilir ve aynı bağlantının önceki bir varoluşunda kullanılmış paketlerden ağda halen varlığını sürdürenlerle çakışan veya onlarla aynı sıra numaralarına sahip paketler gönderebilir. Belli bir bağlantıda kullanılmış sıra numaraları ile ilgili bilginin yokluğunda, TCP belirtimi veribölütlerinin bağlantıya gönderilmeden önce, bağlantının önceki varoluşlarına ait sistemdeki veribölütlerinin kaldırılması için gereken süreyi sağlamak için, AVÖ saniyelik bir kaynak gecikmesi uygulanmasını önerir.
</para><para>
Tam gün zamanı hatırlayan ve ilk sıra numarasının seçiminde bunu kullanan konaklar bile bu sorundan bağışık değillerdir. (Örneğin, her yeni bağlantının yeniden varoluşunda ilk sıra numarasını seçerken.)
</para><para>
Varsayalım ki, örneğin, S sıra numarası ile başlayan bir bağlantı açılmış olsun. Bu bağlantının çok kullanılmadan eninde sonunda ilk sıra numarası işlevinin (İSN(t)) S1 diye, bağlantı üzerinden bu TCP'nin gönderdiği son veribölütünün sıra numarasına eşit bir değer aldığını varsayalım. Tam o anda konağın çöküp kurtarıldığını ve bağlantının yeni bir varoluşunun kurulduğunu varsayalım. Seçilen ilk sıra numarası S1 = İSN(t), bağlantının eski varoluşunda kullanılan son sıra numarası olur. Eğer kurtarma yeterince çabuk gerçekleşirse, ağdan S1'in komşu sıra numaralarını taşıyan eski yinelenmişler gelebilir ve bağlantının yeni varoluşunun alıcısı tarafından bunlar yeni paketlermiş gibi ele alınabilir.
</para><para>
Burada sorun, konağın kurtarılıncaya kadan ne kadar çökük kaldığının ve önceki bağlantı varoluşundan sistemde hala eski yinelenmişlerin kalıp kalmadığının bilinmeyişidir.
</para><para>
Bu sorunu aşmanın tek yolu, bir çökme sonucunda kurtarmanın ardından gönderilecek veribölütlerine kasıtlı olarak bir AVÖ'lük gecikme uygulamaktır (bu bir "sessizlik süresi" belirtimidir). Belli bir hedef için eski ve yeni paketlerin karışma olasılığı riskini almaya istekli olup beklemekten kaçınmayı tercih eden konaklar, "sessizlik süresi" için beklemeyi seçmeyebilirler. Gerçeklenimciler TCP kullanıcılarına, bağlantıdan bağlantıya bir çökme sonrası beklenip beklenmeyeceğini veya tüm bağlantılar için "sessizlik süresi"nin teklifsizce mi gerçekleneceğini seçme imkanı verebilirler. Besbelli, bir kullanıcı "beklemeyi" seçtiğinde bile, en azından AVÖ saniye sonra "ayağa kalkmış" bir konak için bu gerekli değildir.
</para><para>
Özet olarak: yayımlanan her veribölütü, sıra numarası uzayındaki bir veya daha fazla sıra numarasını işgal eder; bir veribölütü tarafından işgal edilen numaralar AVÖ saniyece "kullanımda" ya da "meşgul"dürler; son yayımlanan veribölütünün sekizlileri tarafından işgal edilmiş bir uzay-zaman blokunun çöküşünün ardından, eğer yeni bağlantı hemen başlatılır ve önceki bağlantı varoluşunun son veribölütünün uzay-zaman yayılımındaki sıra numaralarından biri kullanılırsa alıcı tarafta bir karışıklığa sebep olabilecek bir sıra numarası çakışması olasılığı var demektir.
</para>
</sect4>
</sect3>
</sect2>
<!-- buraya kadar sözdizimsel denetim bitti -->
<sect2 id="rfc793-s34" chunkthis="1"><title>Bağlantının Kurulması</title>
<para>
Bir bağlantı kurmak için "üçlü uzlaşım" yöntemi kullanılır. Bu yöntem normal olarak bir TCP tarafından başlatılır, diğer TCP tarafından yanıtlanır. Bu yöntem iki TCP'nin de aynı anda yöntemi başlatması durumunda da iş görür. Aynı anda başlatma durumunda, her TCP bir "<literal>EŞZ</literal>" alındıktan sonra gönderilmesi gereken alındının olmadığı, sadece "<literal>EŞZ</literal>" taşıyan birer veribölütü alır. Şüphesiz, aynı anda bağlantı başlatma durumunda alıcı tarafa eski bir yinelenmiş "<literal>EŞZ</literal>" veribölütü gelme olasılığı da vardır. "Baştan-başlat" veribölütleri bu gibi durumlarda kullanılarak sorun aşılabilir.
</para><para>
Aşağıda birkaç tane bağlantı başlatma örneği verilmiştir. Bu örneklerde, alıcı TCP'nin veriyi geçerli olduğundan emin oluncaya kadar teslim etmediği veri taşıyan veribölütleri kullanılarak yapılan bir  bağlantı eşzamanlaması gösterilmemiş olsa da, bu tamamen meşrudur. (Gösterilse de, bağlantı <literal>KURULU</literal> durumuna geçinceye kadar verinin tamponlanması gerekecekti.) Üçlü uzlaşım yöntemi yanlış bağlantı olasılığını azaltır. Bu sınama için ise bilgi sağlayan iletilerle bellek arasındaki ödünleşimin gerçeklenimidir.
</para><para>
En basit üçlü uzlaşım <xref linkend="rfc793-fig7"/>'de gösterilmiştir. Şekildeki gösterim şöyle yorumlanmalıdır: Her satır atıf yapılabilmesi için numaralanmıştır. Sağa ok (<literal>--></literal>) ile TCP A'dan TCP B'ye bir TCP veribölütünün gidişi veya bir veribölütünün A'dan B'ye varışı gösterilmiştir. Sola ok (<literal>&lt;--</literal>) ise tersini belirtir. Nokta üçlemeleri (...) bir veribölütünün hala ağda olduğunu (geciktiğini), bir "XXX" kaybolan veya reddedilen bir veribölütünü gösterir. Açıklamalar parantez içinde gösterilmiştir. TCP durumları bir veribölütünün gidişi veya varışından SONRA ki durumu gösterir (içerikler her satırın ortasında gösterilmiştir). Veribölütü içerikleri kısaltmalar kullanılarak sıra numarası, denetim bayrakları ve alındı alanı ile gösterilmiştir. Pencere, adresler, uzunluklar ve metin gibi alanlar duru bir görünüm yararına dışarda bırakılmıştır.
</para><figure id="rfc793-fig7">
<title>Bağlantı Eşzamanlamasında Üçlü Uzlaşımın En Basit Kullanımı</title>
<literallayout indent="0">
      TCP A                                                TCP B

  1.  KAPALI                                               DİNLE

  2.  EŞZ-GÖNDER --> &lt;SIRA=100>&lt;DNT=EŞZ>               --> EŞZ-ALINDI

  3.  KURULU    &lt;-- &lt;SIRA=300>&lt;ALN=101>&lt;DNT=EŞZ,ALN>   &lt;-- EŞZ-ALINDI

  4.  KURULU    --> &lt;SIRA=101>&lt;ALN=301>&lt;DNT=ALN>       --> KURULU

  5.  KURULU    --> &lt;SIRA=101>&lt;ALN=301>&lt;DNT=ALN>&lt;VERİ> --> KURULU

  Bağlantı eşzamanlamasını sağlamak için üçlü uzlaşımın basit kullanımı
</literallayout>
</figure><para>
<xref linkend="rfc793-fig7"/>'nin 2. satırında TCP A 100 ile başlayan sıra numaraları kullanacağını belirten bir <literal>EŞZ</literal> veribölütü göndererek uzlaşımı başlatır. 3. satırda, TCB B, TCB A'dan bir <literal>EŞZ</literal> aldığını belirten bir alındı (<literal>ALN</literal>) ve bir <literal>EŞZ</literal> gönderir. TCB B'nin <literal>EŞZ</literal>'yi 100 sıra numarası ile kabul ettiğini ve alındı alanında sıra numarası olarak 101 belirterek 101 sıra numaralı sekizliyi beklediğini belirttiğine dikkat ediniz.
</para><para>
4. satırda, TCP A, TCP B'nin <literal>EŞZ</literal>'si için bir <literal>ALN</literal> içeren verisiz bir veribölütüyle yanıt verir. 5. satırda ise, TCP A bir miktar veri yollar. 5. satırdaki veribölütünün sıra numarasının 4. satırdaki ile aynı oluşuna dikkat ediniz. Bunun sebebi <literal>ALN</literal>'nin sıra numarası uzayında bir yer işgal etmeyişidir (Etseydi, bir de <literal>ALN</literal> alındılaşmak için uğraşacaktık).
</para><para>
Aynı anda başlatma <xref linkend="rfc793-fig8"/>'de gösterildiği üzere biraz daha karmaşıktır. Her TCP sırayla <literal>KAPALI</literal>, <literal>EŞZ-GÖNDER</literal>, <literal>EŞZ-ALINDI</literal>, <literal>KURULU</literal> durumlarına geçer.
</para><figure id="rfc793-fig8">
<title>Aynı Anda Bağlantı Eşzamanlaması</title>
<literallayout indent="0">
      TCP A                                               TCP B

  1.  KAPALI                                              KAPALI

  2.  EŞZ-GÖNDER --> &lt;SIRA=100>&lt;DNT=EŞZ>              ...

  3.  EŞZ-ALINDI &lt;-- &lt;SIRA=300>&lt;DNT=EŞZ>              &lt;-- EŞZ-GÖNDER

  4.             ... &lt;SIRA=100>&lt;DNT=EŞZ>              --> EŞZ-ALINDI

  5.  EŞZ-ALINDI --> &lt;SIRA=100>&lt;ALN=301>&lt;DNT=EŞZ,ALN> ...

  6.  KURULU     &lt;-- &lt;SIRA=300>&lt;ALN=101>&lt;DNT=EŞZ,ALN> &lt;-- EŞZ-ALINDI

  7.             ... &lt;SIRA=101>&lt;ALN=301>&lt;DNT=ALN>     --> KURULU

               Bağlantının aynı anda eşzamanlanması
</literallayout>
</figure><para>
Üçlü uzlaşımın başlıca sebebi, eski yinelenmiş bağlantı ilklendirmelerinin karışıklığa neden olmasını önlemektir. Bunu sağlayabilmek için özel bir denetim iletisi, baştan-başlat (<literal>BŞT</literal>) icadedilmiştir. Eğer alıcı TCP eşzamanlama yapılan durumlardan birinde (<literal>EŞZ-GÖNDER</literal>, <literal>EŞZ-ALINDI</literal>) ise makul bir <literal>BŞT</literal> aldığında <literal>DİNLE</literal> durumuna döner. Eğer alıcı TCP, eşzamanlanmış durumlardan birinde (<literal>KURULU</literal>, <literal>SON-BEKLE-1</literal>, <literal>SON-BEKLE-2</literal>, <literal>KAPAT-BEKLE</literal>, <literal>KAPANIŞ</literal>, <literal>SON-ALN</literal>, <literal>ZMN-BEKLE</literal>) ise bağlantıyı terkeder ve kullanıcıyı bilgilendirir. Bu son durumu daha ileride "yarı açık" bağlantılar olarak inceleyeceğiz.
</para><figure id="rfc793-fig9">
<title>Eski <literal>EŞZ</literal> Kopyasından Kurtulma</title>
<literallayout indent="0">
      TCP A                                                 TCP B

  1.  KAPALI                                                DİNLE

  2.  EŞZ-GÖNDER   --> &lt;SIRA=100>&lt;DNT=EŞZ>              ...

  3.  (eski kopya) ... &lt;SIRA=90>&lt;DNT=EŞZ>               --> EŞZ-ALINDI

  4.  EŞZ-GÖNDER   &lt;-- &lt;SIRA=300>&lt;ALN=91>&lt;DNT=EŞZ,ALN>  &lt;-- EŞZ-ALINDI

  5.  EŞZ-GÖNDER   --> &lt;SIRA=91>&lt;DNT=BŞT>               --> DİNLE

  6.               ... &lt;SIRA=100>&lt;DNT=EŞZ>              --> EŞZ-ALINDI

  7.  EŞZ-GÖNDER   &lt;-- &lt;SIRA=400>&lt;ALN=101>&lt;DNT=EŞZ,ALN> &lt;-- EŞZ-ALINDI

  8.  KURULU       --> &lt;SIRA=101>&lt;ALN=401>&lt;DNT=ALN>     --> KURULU

                    Eski EŞZ Kopyasından Kurtulma
</literallayout>
</figure><para>
Basit bir eski kopyalardan kurtulma örneği <xref linkend="rfc793-fig9"/>'da ele alınmıştır.  3. satırda, TCB B'ye eski bir <literal>EŞZ</literal> kopyası gelmektedir. TCB B bunun eski bir kopya olduğunu bilemez ve normal şekilde yanıtlar (4. satır). TCP A, <literal>ALN</literal> alanının yanlış olduğunu saptar ve  veribölütünü güvenilir kılacak şekilde seçilmiş bir <literal>SIRA</literal> alanıyla bir <literal>BŞT</literal> (baştan-başlat) döndürür. TCB B, <literal>BŞT</literal> aldığında <literal>DİNLE</literal> durumuna geçer. Son defa olarak özgün <literal>EŞZ</literal> 6. satırda gönderildiğinde eşzamanlama normal olarak başlar. Eğer 6. satırdaki <literal>EŞZ</literal>, <literal>BŞT</literal>'den önce B'ye varırsa <literal>BŞT</literal>'nin göndericisiyle her iki yönde biraz daha karmaşık bir değiştokuş oluşabilir.
</para>
<sect3><title>Yarı Açık Bağlantılar ve Diğer Aykırılıklar</title>
<para>
Eğer TCP'lerden biri diğer ucun haberi olmaksızın kapanmış veya bağlantıyı terketmişse ya da bellek kaybı ile sonuçlanan bir çökme sonucu bağlantının iki ucu arasındaki eşzamanlama bozulmuşsa bağlantı yarı açıktır denir. Böyle bağlantılarda, uçlardan biri veri göndermeye çalışırsa uzlaşım kendiliğinden baştan başlatılır. Yine de, yarı açık bağlantılar olağandışı durumlardan olup kurtarma işlemi de sessizce yapılır.
</para><para>
Eğer A tarafında bağlantı artık mevcut değilse ve B tarafındaki kullanıcı bir veri göndermeye çalışırsa, işlem, B tarafındaki TCP'nin bir baştan-başlat denetim iletisi almasıyla sonuçlanacaktır. Böyle bir ileti B tarafındaki TCP'nin bir şeyleri yanlış yaptığını belirtir ve bağlantıyı terketmesi beklenir.
</para><para>
A ve B isimli iki kullanıcı süreci iletişim halindeyken A'da bellek kaybına sebep olan bir çökmenin yaşandığını varsayalım. İşletim sisteminin A'nın TCP'sini destekleyişine bağlı olarak bir takım hatadan kurtulma mekanizmaları mevcut olabilir. TCP tekrar ayağa kalktığında, A, görevine baştan ya da kurtarma noktasından başlayacaktır. Sonuç olarak A, muhtemelen bağlantıya ya tekrar bir <command>AÇ</command>ma işlemi uygulayacak veya açık olduğunu sandığı bağlantıdan <command>GÖNDER</command>me işlemini deneyecektir. İkinci durumda, yerel (A'nın) TCP'den "bağlantı açık değil" şeklinde bir hata iletisi alır. Bir bağlantı kurmak için A'nın TCP'si <literal>EŞZ</literal> içeren bir veribölütü gönderir. Senaryo <xref linkend="rfc793-fig10"/>'da gösterildiği gibi sürüp gider. TCP A'nın çöküşü sonrası, kullanıcısı bağlantıyı yeriden açmaya çalışırken, TCB B'nin kullanıcısı ise bağlantının açık olduğunu düşünmektedir.
</para><figure id="rfc793-fig10">
<title>Yarı Açık Bağlantının Keşfi</title>
<literallayout indent="0">
      TCP A                                           TCP B

  1.  (ÇÖKÜŞ)                                 (gönderi 300, alım 100)

  2.  KAPALI                                          KURULU

  3.  EŞZ-GÖNDER --> &lt;SIRA=400>&lt;DNT=EŞZ>          --> (??)

  4.  (!!)       &lt;-- &lt;SIRA=300>&lt;ALN=100>&lt;DNT=ALN> &lt;-- KURULU

  5.  EŞZ-GÖNDER --> &lt;SIRA=100>&lt;DNT=BŞT>          --> (Terket!!)

  6.  EŞZ-GÖNDER                                      KAPALI

  7.  EŞZ-GÖNDER --> &lt;SIRA=400>&lt;DNT=EŞZ>          -->

                 Yarı Açık Bağlantının Keşfi
</literallayout>
</figure><para>
3. satırda <literal>EŞZ</literal> vardığında, TCP B eşzamanlanmış durumdaydı ve gelen veribölütü  pencere dışındaydı. Verilecek yanıt, beklediği sıra numarasını belirten bir alındı (<literal>ALN</literal> 100) göndermek olacaktı; öyle yaptı. TCP A'nın gördüğü ise gönderdiği hiçbirşeyin alınmamış olduğuydu ve üstelik eşzamanlama da yoktu; bir baştan-başla (<literal>BŞT</literal>) gönderdi, çünkü bağlantının yarı açık olduğunu saptamıştı. TCP B'nin, 5. satırda bağlantıyı terkettiğini, TCP A'nın ise bağlantıyı kurmaya çalıştığını görürüz. Artık sorun <xref linkend="rfc793-fig7"/>'deki üçlü uzlaşıma indirgenmiştir.
</para><para>
TCP A çökerken TCP B'nin eşzamanlı olduğunu düşündüğü bağlantı üzerinden veri göndermeyi denediği durumla ilgili ilginç bir durum daha vardır.  Bu, <xref linkend="rfc793-fig11"/>'de gösterilmiştir. Bu durumda, TCP A'ya TCP B'den gelen veri (2. satır) kabul edilemez, çünkü artık bağlantı mevcut değildir; dolayısıyla TCP A bir <literal>BŞT</literal> gönderir. <literal>BŞT</literal> kabul edilebilir olduğundan TCP onu işleme sokar ve bağlantıyı terkeder.
</para><figure id="rfc793-fig11">
<title>Yarı Açık Bağlantının Açık Taraftan Keşfedilmesi</title>
<literallayout indent="0">
        TCP A                                               TCP B

  1.  (ÇÖKÜŞ)                                       (gönderi 300, alım 100)

  2.  (??)    &lt;-- &lt;SIRA=300>&lt;ALN=100>&lt;VERİ=10>&lt;DNT=ALN> &lt;-- KURULU

  3.          --> &lt;SIRA=100>&lt;DNT=BŞT>                   --> (Terket!!)

            Yarı Açık Bağlantının Açık Taraftan Keşfedilmesi
</literallayout>
</figure><para>
<xref linkend="rfc793-fig12"/>'de <literal>EŞZ</literal> bekleyen edilgen bağlantılı A ve B TCP'lerini görüyoruz. TCP B'ye 2. satırda eski bir yinelenmiş gelerek TCP B'yi telaşlandırıyor. Bir EŞZ-ALN göndererek (3. satırda) TCP A'nın bir <literal>BŞT</literal> üretmesine sebep oluyor (3. satırdaki <literal>ALN</literal> kabul edilebilir değildir). TCP B baştan başlamayı kabul ediyor ve tekrar edilgen <literal>DİNLE</literal>me durumuna geri dönüyor.
</para><figure id="rfc793-fig12">
<title>Eski <literal>EŞZ</literal> kopyasının iki Edilgen Soketi İlklendirmesi</title>
<literallayout indent="0">
      TCP A                                         TCP B

  1.  DİNLE                                         DİNLE

  2.        ... &lt;SIRA=Z>&lt;DNT=EŞZ>              -->  EŞZ-ALINDI

  3.  (??)  &lt;-- &lt;SIRA=X>&lt;ALN=Z+1>&lt;DNT=EŞZ,ALN> &lt;--  EŞZ-ALINDI

  4.        --> &lt;SIRA=Z+1>&lt;DNT=BŞT>            -->  (DİNLEme durumuna geç!)

  5.  DİNLE                                         DİNLE

      Eski EŞZ Kopyasının iki Edilgen Soketi İlklendirmesi
</literallayout>
</figure><para>
Başka durumlar da olasıdır, hesaba katılanlardan <literal>BŞT</literal> üretimi ve işlenmesi ile ilgili olanlar aşağıdadır.
</para>
</sect3>

<sect3><title>Baştan Başlatmanın İstenmesi</title>
<para>
Genel bir kural olarak, baştan başlatma (<literal>BŞT</literal>) gelen bir veribölütünün mevcut bağlantı için tasarlanmamış olması halinde gönderilmelidir. Bu durum açıkça belli değilse bir baştan başlatma gönderilmemelidir.
</para><para>
Üç grup durum vardır:
</para><orderedlist><listitem><para>
Bir bağlantı mevcut değilse (<literal>KAPALI</literal>), gelen bir veribölütüne bir <literal>BŞT</literal> içermiyorsa yanıt olarak bir <literal>BŞT</literal> gönderilir. Özellikle iki tarafın da başlatmadığı mevcut olmayan bir bağlantıya gelen <literal>EŞZ</literal>ler bu anlamda reddedilirler.
</para><para>
Gelen veribölütü bir <literal>ALN</literal> alanına sahipse, baştan başlatma için sıra numarası veribölütünün <literal>ALN</literal> alanından alınır, aksi takdirde başlan başlatma sıra numarası sıfırdır ve <literal>ALN</literal> alanının değeri gelen veribölütünün veribölütü uzunluğu ile sıra numarasının toplamı olur. Bağlantı <literal>KAPALI</literal> durumda kalır.
</para></listitem><listitem><para>
Bağlantı eşzamanlama yapılan durumlardan (<literal>DİNLE</literal>, <literal>EŞZ-GÖNDER</literal>, <literal>EŞZ-ALINDI</literal>) birinde değilse ve gelen veribölütü henüz gönderilmemiş birşeylerin alındığı bilgisini içeriyorsa (veribölütü kabul edilebilir olmayan bir <literal>ALN</literal> taşıyordur) veya gelen veribölütü bir güvenlik seviyesine ya da seviye ve bağlantı için istenen bölüm ile uyumsuz bir bölüme sahipse bir baştan-başlat gönderilir.
</para><para>
Bizim <literal>EŞZ</literal> alındılanmamışsa ve gelen veribölütünün öncelik seviyesi istenen öncelik seviyesinden daha yüksekse ya yerel öncelik seviyesi yükseltilir (sistem veya kullanıcı izin vermişse) ya da <literal>BŞT</literal> gönderilir; veya gelen veribölütünün öncelik seviyesi istenen öncelik seviyesinden daha düşükse öncelikler eşleşmiş gibi devam edilir (uzak TCP öncelik seviyesini bizimki ile eşleşmek üzere yükseltemezse bunu sonraki veribölütünü gönderirken saptamış olur ve bağlantı sonlandırılır). Eğer bizim <literal>EŞZ</literal> alındılanmışsa (tabii ki, gelen veribölütünde) ve bir baştan-başlat gönderilmeli değilse gelen veribölütünün öncelik seviyesi ile yerel öncelik seviyesi tam olarak eşleşmelidir.
</para><para>
Eğer gelen veribölütünde bir <literal>ALN</literal> alanı varsa <literal>BŞT</literal> için bu veribölütünün <literal>ALN</literal> alanındaki sıra numarası kullanılır, aksi takdirde, <literal>BŞT</literal> için sıra numarası sıfır olurken, <literal>ALN</literal> alanına sıra numarası ile gelen veribölütünün veribölütü uzunluğunun toplamı atanır. Bağlantı mevcut durumunu korur.
</para></listitem><listitem><para>
Eğer bağlantı eşzamanlanmış durumdaysa (<literal>KURULU</literal>, <literal>SON-BEKLE-1</literal>, <literal>SON-BEKLE-2</literal>, <literal>KAPAT-BEKLE</literal>, <literal>KAPANIŞ</literal>, <literal>SON-ALN</literal>, <literal>ZMN-BEKLE</literal>) kabul edilebilir olmayan bir veribölütü (pencere dışı bir sıra numarası veya kabul edilebilir olmayan bir alındı numarası), sadece o anki gönderi sıra numarasını ve alınması umulan sonraki sıra numarasını belirten bir alındı içeren verisiz bir veribölütüne sebep olmalı ve bağlantı aynı durumda kalmalıdır.
</para><para>
Eğer gelen veribölütü bağlantı için istenen seviye, bölüm veya önceliğe uymayan bir güvenlik seviyesi, bölümü veya önceliğine sahipse bir <literal>BŞT</literal> gönderilir ve bağlantı <literal>KAPALI</literal> duruma döner. <literal>BŞT</literal> sıra numarası gelen veribölütünün <literal>ALN</literal> alanından alınır.
</para></listitem></orderedlist>
</sect3>

<sect3><title>Baştan Başlama İşlemi</title>
<para>
<literal>EŞZ-GÖNDER</literal> hariç tüm durumlarda, tüm <literal>BŞT</literal> veribölütleri <literal>SIRA</literal> alanlarına bakılarak doğrulanır. Bir baştan başlatmanın geçerli olabilmesi için onun sıra numarası pencere içinde kalmalıdır. <literal>EŞZ-GÖNDER</literal> durumunda ise (bir ilk <literal>EŞZ</literal>'ye yanıt olarak bir <literal>BŞT</literal> alınması) baştan başlatmanın kabul edilebilmesi için <literal>ALN</literal> alanı <literal>EŞZ</literal> alındısını içermelidir.
</para><para>
<literal>BŞT</literal>'nin alıcısı ilk değerlendirmeyi yapar ve durumunu değiştirir. Eğer alıcı <literal>DİNLE</literal> durumundaysa onu yoksayar. Eğer alıcı <literal>EŞZ-ALINDI</literal> durumundaysa ve önceki durumu <literal>DİNLE</literal> durumu ise alıcı <literal>DİNLE</literal> durumuna geri döner, aksi takdirde, alıcı bağlantıyı terkeder ve <literal>KAPALI</literal> durumuna geçer. Eğer alıcı bunlar dışında bir durumdaysa bağlantıyı terkeder ve kullanıcıyı bilgilendirip <literal>KAPALI</literal> duruma geçer.
</para>
</sect3>
</sect2>

<sect2 id="rfc793-s35" chunkthis="1"><title>Bağlantının Kapatılması</title>
<para>
<command>KAPAT</command>, "Göndereceğim veri kalmadı" anlamına gelen bir işlemdir. Bir iki yönlü çalışan bağlantının kapatılması, alıcı tarafın bunu nasıl ele alacağı bilinemediğinden, anlamı belirsiz bir yorumlamanın konusudur, şüphesiz. Biz <command>KAPAT</command>'ı tek yönlü bir bağlantıdaymışız gibi ele alacağız. Diğer ucun <literal>KAPALI</literal> duruma geçtiğini öğrenene kadar <command>KAPAT</command>an kullanıcı <command>AL</command>maya devam edebilir. Bu durumda, bir program bir <command>KAPAT</command> öncesinde bazı <command>GÖNDER</command>ileri başlatmış olabilirdi ve öbür ucun <literal>KAPALI</literal> olmasından dolayı bir <command>AL</command>ımın başarısız olduğu sinyallenene kadar <command>AL</command>maya devam ederdi. Öbür ucun kapanmasından dolayı ortada hiçbir <command>AL</command>ım kalmasa bile, biz TCP'nin kullanıcıyı haberdar edeceğini ve böylece kullanıcının kendi tarafını sonlandırabileceğini varsayıyoruz. Bir TCP, bağlantı <literal>KAPALI</literal> duruma geçmeden önce tüm <command>GÖNDER</command> tamponlarını güvenle teslim edecektir. Böylece dönecek hiçbir veri kalmadığını uman kullanıcının duymayı beklediği tek şey tüm verisinin hedef TCP tarafından tamamen alınmasıyla öbür ucun <literal>KAPALI</literal> duruma geçtiğidir. TCP artık veri kalmadı diyene kadar kullanıcılar gönderime kapadıkları bağlantılarını okumaya açık tutmalıdırlar.
</para><para>
Başlıca üç durum sözkonusudur:
</para><orderedlist><listitem>
Kullanıcı TCP'ye bağlantıyı <command>KAPAT</command> demeye başlar.
</listitem><listitem>
Uzak TCP bir <literal>SON</literal> denetim sinyali göndermeye başlar.
</listitem><listitem>
Her iki kullanıcı aynı anda <command>KAPAT</command>ır.
</listitem></orderedlist>
<glosslist><glossentry>
<glossterm>1. durum:  <emphasis role="bold">Yerel kullanıcı kapanmayı başlatır</emphasis></glossterm>
<glossdef><para>
Bu durumda, bir <literal>SON</literal> veribölütü oluşturulur ve giden veribölütü kuyruğuna yerleştirilir. TCP tarafından kullanıcıdan artık bir <command>GÖNDER</command> kabul edilmez ve TCP <literal>SON-BEKLE-1</literal> durumuna geçer. Bu durumda <command>AL</command>ımlara izin verilir. <literal>SON</literal> içeren ve <literal>SON</literal> ile öncelenmiş tüm veribölütleri alındılanana kadar yeniden aktarılırlar. Diğer TCP, <literal>SON</literal>'un her ikisini de alındıladığında ve kendi <literal>SON</literal>'unu gönderdiğinde, ilk TCP bu <literal>SON</literal>'u <literal>ALN</literal>'leyebilir. Bir <literal>SON</literal> alan TCP'nin bunu <literal>ALN</literal>'leyeceğini fakat ek olarak kullanıcısının  bağlantısı <literal>KAPALI</literal> olana kadar kendi <literal>SON</literal>'unu göndermeyeceğine dikkat ediniz.
</para></glossdef></glossentry><glossentry>
<glossterm>2. durum:  <emphasis role="bold">TCP ağdan bir <literal>SON</literal> alır</emphasis></glossterm>
<glossdef><para>
Eğer ağdan talep edilmemiş bir <literal>SON</literal> gelirse, alıcı TCP onu <literal>ALN</literal>'leyebilir ve kullanıcıya bağlantının kapanacağını söyler. TCP'nin kalan veriyi diğer TCP'ye gönderdikten sonra bir <literal>SON</literal> göndermesi için kullanıcı bunu bir <command>KAPAT</command> ile yanıtlar. TCP bundan sonra kendi <literal>SON</literal>'unun alındılanmasını bekler ve alındıyı aldıktan sonra bağlantıyı siler. Bir <literal>ALN</literal> ulaşmazsa, bir kullanıcı zamanaşımı sonrasında bağlantı terkedilir ve kullanıcıya haber verilir.
</para></glossdef></glossentry><glossentry>
<glossterm>3. durum:  <emphasis role="bold">Her iki taraf aynı anda kapanır</emphasis></glossterm>
<glossdef><para>
Bir bağlantının her iki ucunun kullanıcılarından aynı anda <command>KAPAT</command> gelmesi <literal>SON</literal> veribölütlerinin değiştokuşuna sebep olur. <literal>SON</literal>larla öncelenmiş tüm veribölütleri işleme alınıp alındılandığında her TCP kendi aldığı <literal>SON</literal>'u <literal>ALN</literal>'leyebilir. Her ikisi de bu <literal>ALN</literal>'leri aldıktan sonra bağlantıyı silerler.
</para></glossdef></glossentry></glosslist>
<figure id="rfc793-fig13"><title>Normal Kapanma</title>
<literallayout indent="0">
      TCP A                                                TCP B

  1.  KURULU                                               KURULU

  2.  (Kapat)
      SON-BEKLE-1 --> &lt;SIRA=100>&lt;ALN=300>&lt;DNT=SON,ALN> --> KAPAT-BEKLE

  3.  SON-BEKLE-2 &lt;-- &lt;SIRA=300>&lt;ALN=101>&lt;DNT=ALN>     &lt;-- KAPAT-BEKLE

  4.                                                       (Kapat)
      ZMN-BEKLE   &lt;-- &lt;SIRA=300>&lt;ALN=101>&lt;DNT=SON,ALN> &lt;-- SON-ALN

  5.  ZMN-BEKLE   --> &lt;SIRA=101>&lt;ALN=301>&lt;DNT=ALN>     --> KAPALI

  6.  (2 AVÖ)
      KAPALI

                           Normal Kapanma
</literallayout>
</figure><figure id="rfc793-fig14"><title>Aynı Anda Kapanma</title>
<literallayout indent="0">
      TCP A                                                TCP B

  1.  KURULU                                               KURULU

  2.  (Kapat)                                              (Kapat)
      SON-BEKLE-1 --> &lt;SIRA=100>&lt;ALN=300>&lt;DNT=SON,ALN> ... SON-BEKLE-1
                  &lt;-- &lt;SIRA=300>&lt;ALN=100>&lt;DNT=SON,ALN> &lt;--
                  ... &lt;SIRA=100>&lt;ALN=300>&lt;DNT=SON,ALN> -->

  3.  KAPANIŞ     --> &lt;SIRA=101>&lt;ALN=301>&lt;DNT=ALN>     ... KAPANIŞ
                  &lt;-- &lt;SIRA=301>&lt;ALN=101>&lt;DNT=ALN>     &lt;--
                  ... &lt;SIRA=101>&lt;ALN=301>&lt;DNT=ALN>     -->

  4.  ZMN-BEKLE                                            ZMN-BEKLE
      (2 AVÖ)                                              (2 AVÖ)
      KAPALI                                               KAPALI

                           Aynı Anda Kapanma
</literallayout>
</figure>
</sect2>

<sect2 id="rfc793-s36" chunkthis="1"><title>Öncelik ve Güvenlik</title>
<para>
Burada amaç sadece, tamamıyla aynı güvenlik ve bölme değerli, iki port tarafından da talep edilen öncelik düzeyinden daha yüksek düzeydeki portlar arasında bağlantının olmasına izin verilmesini sağlamaktır
</para><para>
TCP tarafından kullanılan öncelik ve güvenlik parametrelerinin hepsi Genel Ağ Protokolü (IP) [<xref linkend="rfc793-bib2"/>] içinde tanımlanmıştır. Bu TCP tanımlaması boyunca kullanacağımız "güvenlik/bölüm" terimi ile kastedilen, güvenlik, bölüm, kullanıcı grupları ve sınırlamayı dahilinde bulunduran IP içinde kullanılan güvenlik parametreleridir.
</para><para>
Bir bağlantı girişiminin güvenlik/bölüm değerinin uyuşmaması veya daha düşük öncelikte olması durumunda, bağlantının bir baştan başlat gönderilerek reddedilmesi gerekir. Bir bağlantının çok düşük öncelikli olması nedeniyle reddedilmesi durumu, sadece <literal>EŞZ</literal> alındısı alındıktan sonra gerçekleşen bir durumdur.
</para><para>
Burada dikkat etmemiz gereken, sadece öntanımlı öncelik değerinde çalışan TCP modülerinin gelen veribölütlerinin öncelik değerine bakmasının ve imkan dahilinde ise bağlantı üzerinde kullandıkları öncelik seviyesinin yükseltilmesinin zorunlu olmasıdır.
</para><para>
Güvenlik parametreleri güvenli olmayan (değerlerin sınıflandırılmamış veri belirtmesi) bir ortamda da
kullanılmış olabilirler, bu yüzden güvenli bir ortamda olmayan konaklar güvenlik parametrelerini almaya hazır olmalı, ama tabii ki bu parametreleri göndermek zorunda değildirler.
</para>
</sect2>

<sect2 id="rfc793-s37" chunkthis="1"><title>Veri İletişimi</title>
<para>
Bağlantı bir kere kurulduktan sonra veri iletişimi veribölütlerini değiştokuş ederek gerçekleşir. Hatalar (sağlama özeti sınamalarının başarısız olması), ağda sıkışıklık gibi nedenlerden dolayı veribölütleri kaybolabildiğinden veribölütlerinin her birinin teslimatını garantiye almak için TCP yeniden aktarım (bir zamanaşımı sonrası) yapar. Bu işlemden dolayı veya ağın yapısı gereği yinelenmiş veribölütleri gelebilir. Sıra numaraları ile ilgili bölümde açıklandığı gibi TCP veribölütlerindeki sıra ve alındı numaraları üzerinde kabul edilebilirliklerini doğrulamak için bazı sınamalar yapar.
</para><para>
Verinin göndericisi kullanacağı sonraki sıra numarasının değerini <literal>GÖN.SNR</literal> değişkeninde saklar. Verinin alıcısı ise almayı umduğu sonraki sıra numarasını <literal>ALM.SNR</literal> değişkeninde saklar. Verinin göndericisi alındılanmamış en eski sıra numarasını <literal>GÖN.OLM</literal> değişkeninde tutar. Eğer gönderilmiş tüm veri alındılandıktan sonra veri akışı bir süre için boşta kalırsa üç değişkenin eşitlendiği görülür.
</para><para>
Gönderici bir veribölütünü oluşturup gönderdikten sonra <literal>GÖN.SNR</literal>'yi arttırır. Alıcı ise veribölütünü kabul ettikten sonra <literal>ALM.SNR</literal>'yi arttırır ve bir alındı yollar. Bu alındı veri göndericisine ulaştığında <literal>GÖN.OLM</literal>'yi arttırır. Bu değişkenlerin değerleri arasındaki fark iletişimdeki gecikmenin bir ölçüsüdür. Değişkenlerin arttırım miktarı veribölütündeki verinin uzunluğu kadardır. <literal>KURULU</literal> duruma geçildikten sonra tüm veribölütlerinin alındı bilgilerine dayanarak taşınması gerektiğine dikkat ediniz.
</para><para>
<command>KAPAT</command> kullanıcı çağrısı, bir gelen veribölütündeki <literal>SON</literal> denetim bayrağının yaptığı gibi bir gitsin işlemi uygular.
</para>
<sect3><title>Yeniden Aktarım Zamanaşımı</title>
<para>
Ağlar arası sistemi oluşturan ağın değişkenliği ve TCP bağlantılarının geniş çapta kullanımı sebebiyle yeniden aktarım zamanaşımının özdevimli saptanması gerekir. Burada göstermelik olarak bir yeniden aktarım zamanaşımını saptama işlemi örneklenmiştir.
</para>
<example><title>Bir Yeniden Aktarım Zamanaşımını Saptama İşlemi Örneği</title>
<para>
Beli bir sıra numarası ile bir verinin gönderilmesi ile bu sıra numarasını kapsayan bir alındının alınması (gönderilen veribölütleri ile alınanların eşleşmesi zorunlu değildir) arasında geçen süre ölçülür. Ölçülen bu süreye Gidip Gelme Zamanı (<literal>GGZ</literal>) denir. Bundan Yaklaşık Gidip Gelme Zamanı (<literal>YGGZ</literal>) hesaplanır:
</para><para>
<literallayout indent="0">
    YGGZ = ( ALFA * YGGZ ) + ((1-ALFA)) * GGZ)
</literallayout>
</para><para>
buna bağlı olarak da yeniden aktarım zamanaşımı (<literal>YAZ</literal>) hesaplanır:
</para><para>
<literallayout indent="0">
    YAZ = asg[ÜSINIR,azm[ASINIR,(BETA*YGGZ)]]
</literallayout>
</para><para>
Burada <literal>ÜSINIR</literal> zamanaşımının üst sınırını (örn, 1 dakika), <literal>ASINIR</literal> ise zamanaşımının alt sınırını (örn, 1 saniye) ifade etmektedir. <literal>ALFA</literal> bir yuvarlatma katsayısı (örn, <literal>0,8 ... 0,9</literal>), <literal>BETA</literal> ise gecikme değişim katsayısıdır (örn, <literal>1,3 ... 2,0</literal>).
</para></example>
</sect3>

<sect3><title>Acil Bilgi İletişimi</title>
<para>
TCP acil durum mekanizmasının amacı gönderen kullanıcının alan kullanıcıyı acil veriyi kabul etmesi için teşvik etmek ve alan kullanıcının bütün acıl veriyi alması durumunda alan TCP'nin bunu belirtmesine izin vermeyi mümkün kılmaktır.
</para><para>
Bu mekanizma veri akımındaki bir noktanın  acil bilgi sonu olarak tasarlanmasına izin verir. Alıcı TCP'de alım sıra numarasının (<literal>ALM.SNR</literal>) bu noktanın her önüne geçişinde, TCP kullanıcıya "acil kip"e geçmesini, alım sıra numarası aciliyet göstericisini yakaladığında ise "normal kip"e geçmesini söylemelidir. Eğer aciliyet göstericisi kullanıcı "acil kip"te iken güncellenirse, güncelleme kullanıcıya görünür olmayacaktır.
</para><para>
Bu yöntem, aktarılan tüm veribölütlerinde taşınmak üzere bir aciliyet alanı tahsis eder. <literal>ACL</literal> denetim bayrağı aciliyet alanının anlamlı olduğunu belirtir ve aciliyet göstericisini belirtmek üzere veribölütü sıra numarasına eklenmesi gerekir. Bu bayrağın yokluğu ortada acil bir verinin bulunmadığını gösterir.
</para><para>
Bir aciliyet göstericisi göndermek için kullanıcı ek olarak en azından bir veri sekizlisi göndermek zorundadır. Eğer gönderen kullanıcı ayrıca bir gitsin belirtirse hedef sürece acil bilginin teslim zamanı ileri alınır.
</para>
</sect3>

<sect3><title>Pencere Yönetimi</title>
<para>
Her veribölütünde gönderilen pencere, pencere göndericisinin (veri alıcısının) o an kabul etmeye hazır olduğu sıra numaraları aralığını gösterir. Bu bağlantıdaki veri tamponunun kullanılabilir alanı ile ilgili bir önkabul vardır.
</para><para>
Geniş bir pencere belirtilmesi aktarımı teşvik eder. Kabul edilebilecekten fazla veri gelmesi durumunda ise fazlası iptal edilir. Bu, haddinden fazla yeniden gönderime, ağa ve TCP'lere gereksiz yük eklenmesine sebep olur. Küçük bir pencere belirtilmesi, veri aktarımını, veribölütü aktarımları arasındaki gidip gelme gecikmesini başlatan noktada sınırlayabilir.
</para><para>
Sağlanan mekanizmalar bir TCP'ye büyük bir pencerenin ardından daha fazla veri kabul edilmesini zorlamaksızın daha küçük bir pencere ilan etmesini mümkün kılar. Buna "percere kırpma" denir ve kesinlikle mani olunur. Sağlamlık ilkesi gereğince, TCP'ler kendi pencerelerini kırpamazlar, fakat diğer TCP'lerde kısmen böyle bir davranışa karşı hazırlıklı olunmalıdır.
</para><para>
Gönderen TCP kullanıcıdan geleni kabule hazır olmalı ve gönderi penceresi sıfır bile olsa en azından yeni verinin bir sekizlisini göndermelidir. Gönderen TCP pencere sıfır olsa bile alıcı TCP'ye düzenli olarak veriyi yeniden aktarmalıdır. Percerenin sıfır olduğu durum için yeniden aktarım aralığı olarak 2 dakika önerilmektedir. Bu yeniden aktarımda aslolan sıfır pencereli TCP'lerle pencerenin yeniden her açılışının diğerine güvenilir şekilde raporlanacağını garanti etmektir.
</para><para>
Alan TCP'nin bir sıfır penceresi varken bir veribölütü geldiğinde, mevcut pencereyi (sıfır) ve sonraki beklediği sıra numarasını gösteren bir alındıyı yine de göndermelidir.
</para><para>
Gönderen TCP aktaracağı veriyi o anki pencereye sığacak şekilde veribölütleri olarak paketler ve yeniden aktarım kuyruğunda bu veribölütlerini yeniden paketleyebilir. Böyle yeniden paketleme gerekli değildir ama yararlı olabilir.
</para><para>
Veri akışının tek yönlü olduğu bir bağlantıda, pencere bilgisi hepsi aynı sıra numarasına sahip alındı veribölütlerinde taşınır, bu durumda sırasız bile gelseler onları yeniden sıralamak için hiçbir yol olmayacaktır. Bu ciddi bir sorun değildir, fakat pencere bilgisinin ara sıra geçici olarak veri alıcıdaki eski raporları temel alması mümkün olacaktır. Bu sorundan kaçınmak için en yüksek alındı numarasını taşıyan veribölütlerindeki (evvelce alınmış en yüksek alındı numarasına eşit veya daha büyük alındı numaralı veribölütlerindeki) pencere bilgisine göre hareket etmek en iyisidir.
</para><para>
Pencere yönetim yöntemi, iletişim başarımında önemli bir etkiye sahiptir. Aşağıdaki açıklamalar, gerçeklenimcilere önerilerdir.
</para>
<sect4><title>Pencere Yönetim Önerileri</title>
<para>
Az sayıda büyük veribölütü kullanarak daha iyi başarımın elde edildiği durumda çok küçük bir pencere ayrılması verinin çok sayıda küçük veribölütünde aktarılmasına sebep olur.
</para><para>
Küçük pencerelerden kaçınmak için bir öneri, alıcı için bir pencerenin güncellenmesini, bağlantı için olası en büyük tahsisatın en azından yüzde X'i kadar ek bir tahsis gerçekleşene kadar ertelemektir (burada X, 20 ile 40 arası olabilir).
</para><para>
Diğer bir öneri ise, göndericinin veriyi göndermeden önce pencerenin yeterince büyümesini bekleyerek küçük veribölütleri göndermekten kaçınmasıdır. Kullanıcıdan bir gitsin işlemi gelirse veribölütü küçük bile olsa veri gönderilmelidir.
</para><para>
Alındıların geciktirilmemesi gerektiğine yoksa gereksiz yeniden aktarıma yolaçılacağına dikkat ediniz. Bir strateji küçük bir veribölütü geldiğinde (pencere bilgisini güncellemeksizin) bir alındı gönderdikten sonra pencere büyük olduğunda yeni pencere bilgisi ile başka bir alındı göndermek olurdu.
</para><para>
Sıfır penceresi algılanmak üzere gönderilmiş veribölütü ek olarak aktarılan verinin giderek daha küçük veribölütlerine parçalanmasını da başlatabilir. Sıfır penceresi algılanmak üzere gönderilmiş tek bir veri sekizlisi içeren bir veribölütü kabul edilirse mevcut pencerenin tek sekizlisini tüketir. Gönderen TCP basitçe sıfırdan farklı pencere gönderdikçe aktarılan veri büyüklü küçüklü veribölütlerine bölünecektir. Zamanla, büyük veribölütlerinin biri biraz küçük diğeri biraz büyük  bir çifte bölünmesi pencere tahsis eden alıcıda arasıra beklemelerle sonuçlanır. Ve bir süre sonra veri aktarımı bilhassa küçük veribölütlerinde olmaya başlar.
</para><para>
Burada öneri; en basitini yapma eğilimindeki gerçeklenimlerde pencere yönetim mekanizmaları çok sayıda küçük pencereyle sonuçlanmak eğiliminde olduğundan, TCP gerçeklenimlerinin etkin olarak küçük pencere tahsislerini daha büyük pencereler halinde birleştirmeye çalışmaları gerektiğidir.
</para>
</sect4>
</sect3>
</sect2>

<sect2 id="rfc793-s38" chunkthis="1"><title>Arayüzler</title>
<para>
Şüphesiz işin iki arayüzü vardır: kullanıcı/TCP arayüzü ve TCP/düşük seviye arayüzü. Kullanıcı/TCP arayüzünün tarafsız olarak özenle hazırlanmış bir modeline sahibiz, fakat düşük seviyeli protokolle olan arayüzü, o protokolün belirtimi tarafından belirtileceğinden burada belirtmeden bırakacağız. Daha düşük seviyeli protokolün IP olduğu durumda, TCP'lerin kullanabileceği bazı parametre değerlerine dikkat çekeceğiz.
</para>
<sect3><title>Kullanıcı/TCP Arayüzü</title>
<para>
TCP için kullanıcı komutlarının aşağıdaki işlevsel açıklamaları, her işletim sistemi farklı oluşumlara sahip olacağından, olsa olsa kurgusaldır. Bu bakımdan, okuyucuyu farklı TCP gerçeklenimlerinin farklı kullanıcı arayüzleri olacağı konusunda uyarmamız gerekir. Yine de, tüm TCP gerçeklenimlerinin aynı protokol hiyerarşisini destekleyebilmesini garantiye almak için tüm TCP'lerin küçük de olsa aynı ortak hizmet kümesini barındırması gerekir. Bu bölümde tüm TCP gerçeklenimlerinin bulundurması gerektiği işlevsel arayüzler belirtilmiştir.
</para>
<sect4><title>TCP Kullanıcı Komutları</title>
<para>
Aşağıdaki bölümler işlevsel olarak bir Kullanıcı/TCP arayüzünü betimler. Kullanılan sözdizimi daha çok yüksek seviyeli dillerdeki işlev veya yöntem çağrılarınınkine benzemekle birlikte, bu kullanım tuzak türü hizmet çağrılarının (SVC'ler, UUO'lar, EMT'ler gibi) hariç tutulduğu anlamına gelmez.
</para><para>
Aşağıda açıklanan kullanıcı komutları TCP'nin süreçlerarası iletişimi desteklemek için uygulaması gereken temel işlevleri belirtir. Gerçeklenimlerin her biri bunların kendilerine özgü  biçimlerini tanımlamalı ve temel işlevleri birarada veya bir alt küme olarak sağlamalıdırlar. Kısmen, bazı gerçeklenimler belli bir bağlantıda kullanıcı tarafından yapılan ilk <command>GÖNDER</command> veya <command>AL</command> çağrısıyla bir bağlantının kendiliğinden <command>AÇ</command>ılmasını isteyebilirler.
</para><para>
Süreçlerarası iletişim oluşumlarını sağlamada, TCP sadece komutları kabul etmekle kalmamalı ek olarak hizmet sunduğu sürece bilgi de döndürmelidir. Sonuncusu şunlardan oluşur:
</para><orderedlist numeration="loweralpha">
<listitem><para>
bir bağlantı hakkında genel bilgi (kesmeler, uzaktan kapanma, belirsiz yabancı soketlerin bağlanması gibi).
</para></listitem><listitem><para>
kullanıcı komutlarına özgü başarı veya çeşitli türde başarısızlık belirten dönüşler..
</para></listitem></orderedlist>
<variablelist><varlistentry>
  <term><literal>AÇ</literal></term><listitem><para>
<synopsis>
<command>AÇ </command>(<emphasis>yerel-port</emphasis>, <emphasis>yabancı-soket</emphasis>, <emphasis>etkin/edilgen</emphasis>
     [, <emphasis>zamanaşımı</emphasis>] [, <emphasis>öncelik</emphasis>] [, <emphasis>güvenlik/bölüm</emphasis>] [, <emphasis>seçenekler</emphasis>])
  -> <emphasis>yerel-bağlantı-ismi</emphasis>
</synopsis>
</para><para>
Burada yerel TCP'nin hizmet verdiği sürecin farkında olduğunu ve belirtilen bağlantıyı kulanacak olan sürecin yetkili olup olmadığını sınayabileceğini farzediyoruz. TCP'nin gerçeklenime bağlı olarak yerel ağ ve kaynak adresi için TCP tanıtları ya TCP ya da düşük seviyeli protokol (IP gibi) tarafından sağlanır. Bu değerlendirmeler güvenlik kaygısının sonucudur, o kadar ki, hiçbir TCP'nin bir diğeri gibi davranması mümkün değildir. Benzer şekilde, hiçbir süreç TCP'nin hoşgörüsü olmaksızın başka bir süreç gibi davranamaz.
</para><para>
<varname>etkin/edilgen</varname> seçeneği edilgen olarak belirtilirse bu, gelen bir bağlantı için bir <literal>DİNLE</literal> çağrısıdır. Bir edilgen açık ya belli bir bağlantıyı bekleyen tamamen belirli bir yabancı soketin ya da herhangi bir bağlantıyı bekleyen belirsiz bir yabancı soketin varlığı ile tanınır. Tamamen belirli bir edilgen çağrı ardından bir <command>GÖNDER</command> çalıştırılarak etkin yapılabilir.
</para><para>
Bir aktarım denetim bloğu (ADB) oluşturulur ve <command>AÇ</command> komutunun parametrelerindeki veri ile kısmen doldurulur.
</para><para>
Etkin bir <command>AÇ</command> komutunda TCP bağlantıyı eşzamanlama işlemini hemen başlatacaktır.
</para><para>
Bir zamanaşımı varsa, çağrıcının TCP'ye teslim edilen tüm veri için bir zamanaşımı belirlemesini sağlar. Eğer veri zamanaşımı süresinde hedefe başarıyla teslim edilmezse TCP bağlantıyı terkedecektir. Şimdiki genel öntanımlı zamanaşımı değeri beş dakikadır.
</para><para>
TCP veya bir işletim sistemi bileşeni, kullanıcıların belirli bir öncelik veya güvenlik/bölüm ile bir bağlantı açma yeterliliğini doğrulayacaktır. <command>AÇ</command> çağrısında öncelik veya güvenlik/bölüm belirtiminin yokluğu öntanımlı değerlerin kullanılmasının gerektiğini gösterir.
</para><para>
TCP'nin gelen istekleri kabul etmesi için, güvenlik/bölme bilgilerinin tamamiyle aynı ve önceliğin  <command>AÇ</command> çağrısında istenen öncelikten büyük veya eşit olması gerekir.
</para><para>
<command>AÇ</command> çağrısında istenen ve gelen bir istekten alınan en büyük değerlerden yüksek olanı bağlantının öncelik değeridir ve bağlantının yaşamı boyunca sabittir. Gerçeklenimciler bu öncelik müzakeresinin denetimini kullanıcıya vermeyi isteyebilirler. Örneğin, kullanıcıya önceliğin tamamen uyuşması gerektiğini belirtebilmesi veya önceliğin terfisine kullanıcı tarafından onay verilmesi mümkün kılınabilir.
</para><para>
TCP tarafından kullanıcıya bir yerel bağlantı ismi döndürülür. Yerel bağlantı ismi <literal>&lt;yerel soket, yabancı soket></literal> çifti tarafından tanımlanın bağlantıya bir kısayol olarak kullanılabilir.
</para></listitem></varlistentry><varlistentry>
  <term><literal>GÖNDER</literal></term><listitem><para>
<synopsis>
<command>GÖNDER </command>(<emphasis>yerel-bağlantı-ismi</emphasis>, <emphasis>tampon-adresi</emphasis>, <emphasis>bayt-sayısı</emphasis>,
      <emphasis>gitsin-bayrağı</emphasis>, <emphasis>aciliyet-bayrağı</emphasis> [,<emphasis>zamanaşımı</emphasis>])
</synopsis>
</para><para>
Bu çağrı belirtilen kullanıcı tamponundaki verinin gönderilmesini sağlar. Eğer bağlantı daha önceden açılmamışsa, <command>GÖNDER</command> çağrısı bir hata olduğunu kabul eder. Bazı gerçeklenimler kullanıcının yaptığı ilk çağrının <command>GÖNDER</command> çağrısı olmasına izin verir; bu durumda gerçeklenim <command>AÇ</command> çağrısının yapılmasını kendisi sağlar. Eğer çağıran süreç bu bağlantıyı kullanmaya yetkili değilse bir hata döner.
</para><para>
Eğer <varname>gitsin-bayrağı</varname> belirtilmişse verinin alıcıya hemen aktarılması ve tampondan oluşturulan son TCP veribölütünde <literal>GİT</literal> bitinin etkin olması gerekir. Eğer <varname>gitsin-bayrağı</varname> yoksa aktarımın verimliliği adına veri ardışık <command>GÖNDER</command> çağrılarındaki veriler birleştirilerek aktarılabilir.
</para><para>
Eğer <varname>aciliyet-bayrağı</varname> belirtilmişse hedef TCP'ye gönderilen veribölütlerinde aciliyet göstericisi bulunur. Alan TCP, eğer acil göstericisinin öncelediği veri alıcı süreç tarafından henüz tüketilmediyse alıcı sürece aciliyet durumunu bildirecektir. Aciliyetin amacı, alıcıyı acil veriyi işleme almaya teşvik etmek ve acil olduğu bilinen tüm veri alındığında bunu alıcıya belirtmektir. Gönderen tarafın TCP'sinin sinyallediği aciliyet sayısının, alan kullanıcının acil verinin varlığını öğrendiği uyarı sayısına eşit olması gerekli değildir.
</para><para>
<command>AÇ</command> çağrısında yabancı soket belirtilmemişse fakat bağlantı kurulmuşsa (örn, yerel sokete yabancı bir veribölütünün gelişinden dolayı <literal>DİNLE</literal>nen bağlantının etkin duruma geçmesi), tasarlanan tampon örtük yabancı sokete gönderilir. Belirsiz yabancı soketli <command>AÇ</command> çağrısı yapan kullanıcılar yabancı soketin adresini bilmeksizin <command>GÖNDER</command> çağrısı yapabilirler.
</para><para>
Bununla birlikte, yabancı soket belirli duruma gelmeden bir <command>GÖNDER</command> çağrısı yapılırsa bir hata dönecektir. Kullanıcılar bağlantının durumunu öğrenmek için <command>DURUM</command> çağrısını kullanabilirler. Bazı gerçeklenimlerde TCP belirsiz bir soket bağlandığında kullanıcıyı uyarabilmektedir.
</para><para>
Bir zamanaşımı belirtilmeşse bağlantıya ait zamanaşımı yerine bu değer kullanılır.
</para><para>
En basit gerçeklenimde, <command>GÖNDER</command> çağrısı aktarımı tamamlamadan veya zamanaşımına uğramadan denetimi gönderen sürece bırakmayacaktır. Bununla birlikte bu basit yöntemi iki tarafın aynı anda kullanması kısırdöngüye yol açabileceğinden (örn, her iki taraf da bir <command>AL</command> çağrısı yapmaksızın <command>GÖNDER</command> çağrısı deneyebilirler ve ikisi de birbirlerini bekler) bu önerilmez. Biraz daha karmaşık gerçeklenimlerde çağrı beklemeksizin denetimi sürece bırakarak sürecin ağ G/Ç'leri ile eşzamanlı çalışmasını ve dolayısıyla çok sayıda <command>GÖNDER</command> çağrısının yapılabilmesini mümkün kılar. Çok sayıda <command>GÖNDER</command> çağrısı ilk gelen ilk gider (FIFO) ilkesiyle işlenir, yani TCP bunları hemen işleme alamaz, kuyruğa ekler.
</para><para>
Bir <command>GÖNDER</command> çağrısının sonradan bazı SİNYAL çeşitlerine veya sözde kesmelere yol açması nedeniyle örtük olarak eşzamansız bir kullanıcı arayüzü kabulü yaparız. Diğer bir seçenek hemen bir yanıtın dönmesidir. Örneğin, gönderilen veribölütü uzak TCP tarafından alındılanmamışken bile <command>GÖNDER</command> çağrıları beklemeksizin yerel alındılar döndürebilirler. İyi niyetli olarak eninde sonunda bir başarının gerçekleşeceğini varsayabiliriz. Eğer biz yanlışsak, bağlantı her halükarda zamanaşımından dolayı kapanacaktır.  Bu çeşit (eşzamanlı) gerçeklenimlerde, hala bazı eşzamansız sinyaller olacaktır fakat bunlar bağlantının kendisi tarafından bertaraf edilecek, veribölütlerine veya tamponlara etkisi olmayacaktır.
</para><para>
Sürecin farklı <command>GÖNDER</command> çağrılarından dönen başarı ve hata belirteçlerini ayırması için çağrılarla ilgili tampon adreslerine bakılır. TCP tarafından kullanıcıya verilen sinyaller, çağıran sürece dönmesi gereken bilgi belirtilerek, aşağıda açıklanmıştır.
</para></listitem></varlistentry><varlistentry>
  <term><literal>AL</literal></term><listitem><para>
<synopsis>
<command>AL </command>(<emphasis>yerel-bağlandı-ismi</emphasis>, <emphasis>tampon-adresi</emphasis>, <emphasis>bayt-sayısı</emphasis>)
  -> <emphasis>bayt-sayısı</emphasis>, <emphasis>aciliyet-bayrağı</emphasis>, <emphasis>gitsin-bayrağı</emphasis>
</synopsis>
</para><para>
Bu komut belirtilen bağlantı ile ilişkili bir tampon ayırır. Bu komuttan önce bir <command>AÇ</command> komutu yoksa veya çağıran süreç bu bağlantıyı kullanmaya yetkili değilse bir hata döner.
</para><para>
En basik gerçeklenimde, tampon dolmadıkça veya bir hata oluşmadıkça, denetim çağıran sürece dönmez fakat bu şema kısırdöngülere çok açıktır. Daha karmaşık gerçeklenimler bir kerede birden fazla AL çağrısına izin verirler. Bu tamponlar veribölütleri geldikçe doldurulur. Bu strateji bir <literal>GİT</literal>sin görüldüğünde veya bir tampon dolduğunda çağıran süreci uyaracak daha itinalı bir şema (muhtemelen eşzamansız) fiyatına işlenecek miktarı arttırmayı mümkün kılar.
</para><para>
Bir <literal>GİT</literal>sin görünmeden önce tamponu dolduracak yeterli veri gelirse <literal>GİT</literal>sin bayrağı <command>AL</command> çağrısının yanıtında etkin yapılmaz. Eğer <literal>GİT</literal>sin bayrağı tampon dolmadan önce görünürse tampon kısmen dolu döndürülür ve <varname>gitsin-bayrağı</varname> etkin kılınır.
</para><para>
Eğer acil veri varsa kullanıcı bir TCP'den kullanıcıya sinyal geliyormuş gibi uyarılacaktır. Alan kullanıcı bu nedenle "acil kip"te olmalıdır. Eğer <varname>aciliyet-bayrağı</varname> etkinse, ek olarak acil veri kalır. Eğer <varname>aciliyet-bayrağı</varname> etkin değilse, böyle bir <command>AL</command> çağrısı tüm acil veriyi döndürür, böylece kullanıcı "acil kip"i artık bırakabilir. Aciliyet göstericisinden sonra gelen veri (acil olmayan veri) önceki acil verinin sınırları kullanıcı için açıkça imlenmiş olmadıkça kullanıcıya önceki acil veriyle aynı tamponda teslim edilemez.
</para><para>
Tamponun tamamen dolmadığı durumu dikkate almak ve çözümlenmemiş <command>AL</command> çağrıları arasında ayrım yapabilmek için dönen kodun <varname>tampon-göstericisi</varname> ile alınan verinin asıl uzunluğunu belirten <varname>bayt-sayısı</varname> birlikte ele alınır.
</para><para>
Diğer bir <command>AL</command> gerçekleniminde ise tampon alanını TCP'nin ayırmasını gerektirebilir veya TCP bir döner tamponu kullanıcı ile paylaşabilir.
</para></listitem></varlistentry><varlistentry>
  <term><literal>KAPAT</literal></term><listitem><para>
<synopsis>
<command>KAPAT </command>(<emphasis>yerel-bağlantı-ismi</emphasis>)
</synopsis>
</para><para>
Bu komut bağlantının <literal>KAPALI</literal> duruma geçirileceğini belirtir. Eğer bağlantı açık değilse veya çağıran süreç bağlantıyı kullanmaya yetkili değilse bir hata döner. Veriler gönderildikten sonra  bir kapama komutu gönderilmesi, tamamlanmamış <command>GÖNDER</command>imlerin aktarılmasını (veya tekrardan aktarılmasını) sağlamak için kibarca bir uyarı görevini görür. Bu yüzden bir kaç tane <command>GÖNDER</command> komutunun verilmesinin ardından bir <command>KAPAT</command> komutu vermekle bütün verilerin hedef adrese iletildiği kanısına varmamız kabul edilebilir bir düşünce olur. <literal>KAPANIŞ</literal> durumundaki bir bağlantı üzerinde kullanıcılar hala veri <command>AL</command>maya devam ediyor olabilirler, çünkü karşı taraf verisinin son kısmını göndermeyi bu durumda iken bile deniyor olabilir. Buradan da anlıyoruz ki <command>KAPAT</command> demekle "artık veri almıyacağım" değil, "artık gönderecek bir verim yok" demiş oluyoruz. Şöyle bir şey olabilir (kullanıcı seviyesi protokol iyi tasarlanmamışsa): <command>KAPAT</command> komutunu veren taraf bütün verilerinden zamanaşımından önce kurtulamayabilir. Bu olayda, <command>KAPAT</command>, <command>TERKET</command>'e dönüşür ve kapatan TCP işlemi terkeder.
</para><para>
Kullanıcı bağlantıyı herhangi bir anda kendi inisiyatifinde <command>KAPAT</command>abileceği gibi TCP'den gelen çeşitli teşviklere (uzaktan kapatma, aktarımda zamanaşımı, hedefin erişilebilir olmayışı gibi) yanıt olarak da <command>KAPAT</command>abilir.
</para><para>
Bir bağlantının kapanması yabancı TCP ile iletişimi gerektirdiğinden bağlantılar kısa bir süre için <literal>KAPANIŞ</literal> durumunda kalabilirler. <command>KAPAT</command> komutu TCP tarafından yanıtlanmadan önce bağlantının yeniden açılmaya çalışılması, hata yanıtlarıyla sonuçlanacaktır.
</para><para>
Kapatma işlemi ayrıca gitsin işlemine de yol açar.
</para></listitem></varlistentry><varlistentry>
  <term><literal>DURUM</literal></term><listitem><para>
<synopsis>
<command>DURUM</command> (<emphasis>yerel-bağlantı-ismi</emphasis>) -> <emphasis>durum-verisi</emphasis>
</synopsis>
</para><para>
Bu gerçeklenim bağımlısı bir kullanıcı komutu olup olmayışının olumsuz bir etkisi olmayacaktır. Dönen bilgi genellikle bağlantı ile ilişkili ADB'den gelir.
</para><para>
Bu komut şu bilgileri içeren bir veri bloku ile döner:
</para><para>
<literallayout indent="0">
  yerel soket,
  yabancı soket,
  yerel bağlantı ismi,
  alım penceresi,
  gönderi penceresi,
  bağlantı durumu,
  alındı bekleyen tampon sayısı,
  alınmayı bekleyen tampon sayısı,
  aciliyet durumu,
  öncelik,
  güvenlik/bölüm,
  ve aktarım zamanaşımı.
</literallayout>
</para><para>
Aktarımın durumuna veya gerçeklenimin kendisine bağlı olarak bu bilgilerin bir kısmı mevcut veya anlamlı olmayabilir. Eğer çağrıyı yapan süreç bağlantıyı kullanmaya yetkili değilse bir hata döner. Bu, yetkisiz bir sürecin bir bağlantı hakkında bilgi edinmeye çalışmasını önler.
</para></listitem></varlistentry><varlistentry>
  <term><literal>TERKET</literal></term><listitem><para>
<synopsis>
<command>TERKET </command>(<emphasis>yerel-bağlantı-ismi</emphasis>)
</synopsis>
</para><para>
Bu komut, askıdaki tüm <command>GÖNDER</command> ve <command>AL</command>ların terkedilmesine, ADB'nin silinmesine ve bağlantının diğer tarafındaki TCP'ye özel bir baştan-başla iletisi gönderilmesine sebep olur. Gerçeklenime bağlı olarak, kullanıcılar yapılan her <command>GÖNDER</command> veya <command>AL</command> ile terketme istekleri alabilecekleri gibi basitçe <command>TERKET</command>'li alındılar da alabilirler.
</para></listitem></varlistentry></variablelist>
</sect4>

<sect4><title>TCP'nin Kullanıcıya  İletileri</title>
<para>
İşletim sisteminin TCP'ye kullanıcı programını eşzamansız olarak sinyalleyebilme ortamını sağladığı kabul edilir. TCP kullanıcı programını sinyallerken kullanıcıya bazı bilgiler aktarılılır. Belirtimde çoğunlukla bilgi bir hata iletisi olacaktır. Diğer durumlarda, bir <command>GÖNDER</command> veya <command>AL</command> ya da başka bir kullanıcı çağrısının işini tamamlamasıyla ilgili bilgiler varolacaktır.
</para><para>
Şu bilgiler sağlanır:
</para><para>
<literallayout indent="0">
  Yerel Bağlantı İsmi                    Daima
  Yanıt Dizgesi                          Daima
  Tampon Adresi                          Gönderi ve Alım
  Bayt Sayısı (alınan)                   Alım
  GİTsin Bayrağı                         Alım
  ACiL bayrağı                           Alım
</literallayout>
</para>
</sect4>
</sect3>


<sect3><title>TCP/Düşük-Seviye Arayüzü</title>
<para>
TCP çağrıları ağ üzerinden bilgileri aslında bir düşük seviyeli protokol üzerinden alır ve gönderir. ARPA ağlararası sistemindeki düşük seviyeli modül için tek seçenek Genel Ağ Protokolüdür (IP) [<xref linkend="rfc793-bib2"/>].
</para><para>
Düşük seviyeli protokol IP ise argümanlar bir hizmet türü için bir yaşam süresince sağlanır. TCP bu parametreler için şu ayarları kullanır:
</para><glosslist><glossentry>
  <glossterm>Hizmet Türü = Öncelik: sıradan, Gecikme: normal, İşlenen miktar: normal, Güvenirlik: normal; veya 00000000.</glossterm>
  </glossentry><glossentry>
  <glossterm>Yaşam Süresi = bir dakika veya 00111100.</glossterm>
  <glossdef><para>
Varsayılan Azami Veribölütü Ömrü'nün (AVÖ) iki dakika olduğuna dikkat ediniz. Burada biz açıkça bir veribölütünün Genel Ağ sisteminde bir dakika içinde teslim edilememesi halinde yokedilmesini istemiş oluyoruz.
  </para></glossdef></glossentry></glosslist><para>
Eğer düşük seviyeli protokol IP (veya aynı özellikteki başka bir protokol) ise ve kaynak yönlendirmesi kullanılmışsa, arayüz yönlendirme bilgisinin iletişimine izin vermelidir. TCP sağlama özetinde kullanılan kaynak ve hedef adreslerinin başlatan kaynak ve nihai hedef olmasından dolayı bu özellikle önemlidir. Bağlantı isteklerine yanıt olarak dönen rotanın korunması da ayrıca önemlidir.
</para><para>
Bir düşük seviyeli protokol, gerek IP'ye işlevsel olarak eşdeğer hizmeti sağlamak, gerekse TCP sağlama özetinde kullanmak için kaynak adresini, hedef adresini, protokol alanlarını ve "TCP uzunluğu"nun saptamanın bir yolunu sağlamak zorundadır.
</para>
</sect3>
</sect2>
<!-- buraya kadar imla denetimi bitti -->
<sect2 id="rfc793-s39" chunkthis="1"><title>Olay İşleme</title>
<para>
Bu bölümde betimlenen işlemler olası bir gerçeklenim örneğidir. Başka gerçeklenimlerin işlem sıraları birazcık farklı olabilir, fakat bu bölümdekilerden esasta değil sadece ayrıntıda farklı olmalıdırlar.
</para><para>
TCP etkinliğinin ayırıcı özellikleri olaylara verdiği yanıtlardır denebilir. Meydana gelen olaylar üç kategoride incelenebilir: kullanıcı çağrıları, veribölütlerinin varışı ve zamanaşımları. Bu bölümde her bir olaya TCP'nin verdiği işlemsel yanıtlar açıklanmıştır. Çoğu durumda gereken işlem bağlantının durumuna bağımlıdır.
</para><para>
Meydana gelen olaylar:
</para><variablelist><varlistentry>
<term>Kullanıcı Çağrıları</term><listitem><para>
<literallayout indent="0">
AÇ
GÖNDER
AL
KAPAT
TERKET
DURUM
</literallayout>
</para></listitem></varlistentry><varlistentry>
<term>Ulaşan Veribölütleri</term><listitem><para>
<literal>Veribölütü Varışları</literal>
</para></listitem></varlistentry><varlistentry>
<term>Zamanaşımları</term><listitem><para>
<literallayout indent="0">
Kullanıcı Zamanaşımı
Yeniden Aktarım Zamanaşımı
ZMN-BEKLE Zamanaşımı
</literallayout>
</para></listitem></varlistentry></variablelist><para>
TCP/Kullanıcı arayüzü modeli hemen bir dönüş ve bir olay veya bir sözde kesme üzerinden olası bir gecikmiş yanıt alan kullanıcı komutlarından oluşur. Aşağıdaki açıklamalarda "sinyal" bir gecikmiş yanıta sebep olan şey anlamında kullanılmıştır.
</para><para>
Hata yanıtları karakter dizgeleri olarak verilmiştir. Örneğin, mevcut olmayan bağlantılara atıf yapan kullanıcı komutları şu yanıtı alır: "hata: bağlantı açık değil".
</para><para>
Sıra numaraları, alındı numaraları, pencereler, vesaire ile ilgili tüm aritmetik işlemler 2^32'lik bir sıra numaraları uzayıyla sınırlıdır. Ayrıca "=&lt;" işareti 2^32 ile bölümden artandan küçük veya eşit oduğunu gösterir.
</para><para>
Gelen veribölütlerine uygulanan işlemlerde izlenen doğal yol, önce sıra numarasının doğruluğunun sınanması (sıra numarası uzayının beklenen "alım penceresi" aralığına düşen sıra numaralarından biri olup olmadığı) ve bu sıra numarasına göre kuyruğa alınıp işlenmesidir.
</para><para>
Bir veribölütü daha önce alınmış veribölütleri ile örtüştüğünde, veribölütünü sadece yeni veriyi içerecek şekilde yeniden oluşturur ve başlık alanlarını uygun biçimde ayarlarız.
</para><para>
Bir durum değişikliğinden bahsedilmedikçe TCP'nin aynı durumda kalacağına dikkat ediniz.
</para>
<sect3><title><literal>AÇ</literal> Çağrısı</title>
  <glosslist><glossentry>
  <glossterm><command>KAPALI</command> Durumu (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Bağlantı durum bilgisini saklamak üzere yeni bir Aktarım Denetim Bloku (ADB) oluşturulur. Yerel soket belirteci, yabancı soket, öncelik, güvenlik/bölüm ve kullanıcı zamanaşımı bilgileri doldurulur. Yabancı soketin bazı parçalarının bir edilgen <command>AÇ</command> çağrısında belirsiz olabileceğini ve gelen <literal>EŞZ</literal> veribölütündeki parametrelere göre doldurulacağına dikkat ediniz. Bu kullanıcı için istenen güvenlik ve önceliğin doğrulanmasına izin verilebilmesi için "hata: önceliğe izin verilmiyor" veya "hata: güvenlik/bölüme izin verilmiyor" şeklinde bir hata dönmemiş olması gerekir. Eğer çağrı edilgen ise <literal>DİNLE</literal> durumuna geçilir ve dönülür. Çağrı etkin ise  ve yabancı soket belirsizse, "hata: yabancı soket belirsiz" hatası döner. Çağrı etkin ise  ve yabancı soket belirliyse, bir <literal>EŞZ</literal> veribölütü hazırlanır. Bir ilk gönderi sıra nunarası (<literal>İGS</literal>) seçilip <literal>&lt;SIRA=İGS>&lt;DNT=EŞZ></literal> biçiminde bir <literal>EŞZ</literal> veribölütü gönderilir. <literal>GÖN.OLM</literal> değişkenine <literal>İGS</literal>, <literal>GÖN.SNR</literal> değişkenine <literal>İGS+1</literal> atanır, <literal>EŞZ-GÖNDER</literal> durumuna geçilir ve döner.
  </para><para>
Eğer çağrıcı belirtilen yerel sokete erişemiyorsa, "hata: bağlantı bu süreç için kuraldışı" hatası döner. Yeni bir bağlantı oluşturmak için yeterli yer yoksa, "hata: özkaynaklar yetersiz" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>DİNLE</command> Durumu</glossterm>
  <glossdef><para>
Çağrı etkin ve yabancı soket belirli ise, bağlantı edilgenden etkine döner, bir <literal>İGS</literal> seçilir. Bir <literal>EŞZ</literal> veribölütü gönderilir, <literal>GÖN.OLM</literal> değişkenine <literal>İGS</literal>, <literal>GÖN.SNR</literal> değişkenine <literal>İGS+1</literal> atanır. <literal>EŞZ-GÖNDER</literal> durumuna geçilir. <command>GÖNDER</command> ile ilişkili veri <literal>EŞZ</literal> veribölütü ile gönderileceği gibi <literal>KURULU</literal> duruma geçildikten sonraki aktarım için kuyruğa da alınabilir. Aciliyet bitinin veri ile gönderilmesi komutta istenmişse, veribölütleri bu komutun bir sonucu olarak gönderilir. İstek için kuyrukta yer yoksa, yanıt "hata: özkaynaklar yetersiz" olur. Eğer yabancı soket belirtilmemişse, "hata: yabancı soket belirsiz" hatası dönülür.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-GÖNDER</command> Durumu<sbr/> <command>EŞZ-ALINDI</command> Durumu<sbr/>
  <command>KURULU</command> Durumu<sbr/>
  <command>SON-BEKLE-1</command> Durumu<sbr/>
  <command>SON-BEKLE-2</command> Durumu<sbr/>
  <command>KAPAT-BEKLE</command> Durumu<sbr/>
  <command>KAPANIŞ</command> Durumu<sbr/>
  <command>SON-ALN</command> Durumu<sbr/>
  <command>ZMN-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"hata: bağlantı zaten mevcut" hatası döner.
  </para></glossdef></glossentry></glosslist>
</sect3>

<sect3><title><literal>GÖNDER</literal> Çağrısı</title>
  <glosslist><glossentry>
  <glossterm><command>KAPALI</command> Durumu (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Eğer kullanıcının böyle bir bağlantıya erişim izni yoksa, "hata: bağlantı bu süreç için kuraldışı" hatası döner.
  </para><para>
Aksi takdirde, "hata: bağlantı yok" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>DİNLE</command> Durumu</glossterm>
  <glossdef><para>
Yabancı soket belirliyse, bağlantı edilgenden etkine döner, bir <literal>İGS</literal> seçilir.  Bir <literal>EŞZ</literal> veribölütü gönderilir, <literal>GÖN.OLM</literal> değişkenine <literal>İGS</literal>, <literal>GÖN.SNR</literal> değişkenine <literal>İGS+1</literal> atanır. <literal>EŞZ-GÖNDER</literal> durumuna geçilir. <command>GÖNDER</command> ile ilişkili veri <literal>EŞZ</literal> veribölütü ile gönderileceği gibi <literal>KURULU</literal> duruma geçildikten sonraki aktarım için kuyruğa da alınabilir. Aciliyet bitinin veri ile gönderilmesi komutta istenmişse, veribölütleri bu komutun bir sonucu olarak gönderilir. İstek için kuyrukta yer yoksa, yanıt "hata: özkaynaklar yetersiz" olur. Eğer yabancı soket belirtilmemişse, "hata: yabancı soket belirsiz" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-GÖNDER</command> Durumu<sbr/><command>EŞZ-ALINDI</command> Durumu</glossterm>
  <glossdef><para>
<literal>KURULU</literal> duruma geçildikten sonra aktarılmak üzere veri kuyruğa alınır. Kuyrukta yer yoksa, yanıt "hata: özkaynaklar yetersiz" olur.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KURULU</command> Durumu<sbr/><command>KAPAT-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
Tampon veribölütlenir ve bir alındı bindirilip (alındı değeri = <literal>ALM.SNR</literal>) ile gönderilir. Bu tamponu hatırlamak için yeterli yer yoksa, yanıt "hata: özkaynaklar yetersiz" olur.
  </para><para>
Aciliyet bayrağı etkinse, <literal>GÖN.ACL &lt;- GÖN.SNR-1</literal> yapılır ve giden veribölütlerinde aciliyet göstericisi etkinleştirilir.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>SON-BEKLE-1</command> Durumu<sbr/><command>SON-BEKLE-2</command> Durumu<sbr/><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"hata: bağlantı kapanıyor" döner ve istek yerine getirilmez.
  </para></glossdef></glossentry></glosslist>
</sect3>

<sect3><title><literal>AL</literal> Çağrısı</title>
  <glosslist><glossentry>
  <glossterm><command>KAPALI</command> Durumu (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Eğer kullanıcının böyle bir bağlantıya erişim izni yoksa, "hata: bağlantı bu süreç için kuraldışı" hatası döner.
  </para><para>
Aksi takdirde, "hata: bağlantı yok" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>DİNLE</command> Durumu<sbr/><command>EŞZ-GÖNDER</command> Durumu<sbr/><command>EŞZ-ALINDI</command> Durumu</glossterm>
  <glossdef><para>
<literal>KURULU</literal> duruma geçildikten sonra aktarılmak üzere veri kuyruğa alınır. Kuyrukta yer yoksa, yanıt "hata: özkaynaklar yetersiz" olur.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KURULU</command> Durumu<sbr/><command>SON-BEKLE-1</command> Durumu<sbr/><command>SON-BEKLE-2</command> Durumu</glossterm>
  <glossdef><para>
İsteği yerine getirmek için gelen veribölütlerinden kuyruğa alınanlar yetersizse, istek kuyruğa alınır. <command>AL</command> çağrısını hatırlamak için kuyruk alanı yoksa, yanıt "hata: özkaynaklar yetersiz" olur.
  </para><para>
Kuyruktaki gelen veribölütleri alım tamponunda yeniden oluşturulur ve kullanıcıya dönülür. Durum uygunsa, <literal>GİT</literal>sin imlemesi yapılır.
  </para><para>
ALM.ACL kullanıcıya aktarılmakta olan verinin önündeyse kullanıcı acil veri varlığı konusunda uyarılır.
  </para><para>
TCP, verinin kullanıcıya tesliminden sorumlu olduğunda, kullanıcıyla iletişimin bir alındı üzerinden yapılması gerekir. Böyle bir alındının oluşumu, aşağıda, bir gelen veribölütünün işlenmesi konusunda ele alınacaktır.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPAT-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
Uzak taraf zaten bir <literal>SON</literal> göndermiş olduğundan, <command>AL</command> çağrıları elde mevcut olup da henüz kullanıcıya teslim edilmemiş metinden oluşmalıdır. Teslimatı bekleyen metin yoksa, <command>AL</command> çağrısı "hata: bağlantı kapanıyor" yanıtını alacaktır. Aksi takdirde, bekleyen metin <command>AL</command> çağrısını oluşturmakta kullanılabilir.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"hata: bağlantı kapanıyor" döner.
  </para></glossdef></glossentry></glosslist>
</sect3>

<sect3><title><literal>KAPAT</literal> Çağrısı</title>
  <glosslist><glossentry>
  <glossterm><command>KAPALI</command> Durumu (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Eğer kullanıcının böyle bir bağlantıya erişim izni yoksa, "hata: bağlantı bu süreç için kuraldışı" hatası döner.
  </para><para>
Aksi takdirde, "hata: bağlantı yok" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>DİNLE</command> Durumu</glossterm>
  <glossdef><para>
Askıdaki <command>AL</command> çağrıları "hata: kapanış" yanıtları ile döndürülür. ADB silinir. <literal>KAPALI</literal> durumu geçilir ve dönülür.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-GÖNDER</command> Durumu</glossterm>
  <glossdef><para>
Kuyruktaki <command>GÖNDER</command> veya <command>AL</command> çağrıları "hata: kapanış" yanıtları ile döndürülür. ADB silinir.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-ALINDI</command> Durumu</glossterm>
  <glossdef><para>
Hiç <command>GÖNDER</command> yoksa ve gönderilecek bekleyen veri de yoksa, bir <literal>SON</literal> veribölütü oluşturulup o gönderilir ve <literal>SON-BEKLE-1</literal> durumuna geçilir; aksi takdirde, <literal>KURULU</literal> duruma geçince işlenmek üzere kuyruğa alınır.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KURULU</command> Durumu</glossterm>
  <glossdef><para>
Veribölütlerine bölünerek <command>GÖNDER</command> çağrıları haline getirilmiş verilerin tümü kuyruğa alındıktan sonra bir <literal>SON</literal> veribölütü oluşturulur ve o gönderilir. Her durumda, <literal>SON-BEKLE-1</literal> durumuna geçilir.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>SON-BEKLE-1</command> Durumu<sbr/><command>SON-BEKLE-2</command> Durumu</glossterm>
  <glossdef><para>
Kesinlikle bu bir hatadır ve bir "hata: bağlantı kapanıyor" yanıtı alınmalıdır. İkinci bir <literal>SON</literal> yayınlanana  kadar (ilk <literal>SON</literal> yeniden aktarılabilirse de) bir "tamam" da kabul edilebilir bir yanıt olurdu.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPAT-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
Önceki tüm <command>GÖNDER</command> çağrıları veribölütleri haline getirilene kadar bu istek kuyruğa alınır; sonra bir <literal>SON</literal> veribölütü gönderilir, <literal>KAPANIŞ</literal> durumuna geçilir.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"hata: bağlantı kapanıyor" yanıtı alınır.
  </para></glossdef></glossentry></glosslist>
</sect3>

<sect3><title><literal>TERKET</literal> Çağrısı</title>
  <glosslist><glossentry>
  <glossterm><command>KAPALI</command> Durumu (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Eğer kullanıcının böyle bir bağlantıya erişim izni yoksa, "hata: bağlantı bu süreç için kuraldışı" hatası döner.
  </para><para>
Aksi takdirde, "hata: bağlantı yok" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>DİNLE</command> Durumu</glossterm>
  <glossdef><para>
Askıdaki <command>AL</command> çağrıları "hata: bağlantı baştan başlatılıyor" yanıtları ile döndürülür. ADB silinir. <literal>KAPALI</literal> durumu geçilir ve dönülür.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-GÖNDER</command> Durumu</glossterm>
  <glossdef><para>
Kuyruktaki <command>GÖNDER</command> veya <command>AL</command> çağrıları "hata: bağlantı baştan başlatılıyor" yanıtları ile döndürülür. ADB silinir. <literal>KAPALI</literal> durumu geçilir ve dönülür.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-ALINDI</command> Durumu<sbr/>
  <command>KURULU</command> Durumu<sbr/>
  <command>SON-BEKLE-1</command> Durumu<sbr/>
  <command>SON-BEKLE-2</command> Durumu<sbr/>
  <command>KAPAT-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
Bir <literal>BŞT</literal> veribölütü gönderilir.
  </para><para>
<literallayout indent="0">
    &lt;SIRA=GÖN.SNR>&lt;DNT=BŞT>
</literallayout>
  </para><para>
Kuyruktaki tüm <command>GÖNDER</command> veya <command>AL</command> çağrıları "hata: bağlantı baştan başlatılıyor" yanıtları ile döndürülmeli; aktarım veya yeniden aktarım için kuyruğa alınmış tüm veribölütleri (yukarıda <literal>BŞT</literal> için biçimlenmiş olan hariç) boşaltılmalı, ADB silinmeli, <literal>KAPALI</literal> duruma geçilip dönülmelidir.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"tamam" yanıtı verilip ADB silinir, <literal>KAPALI</literal> duruma geçilip dönülür.
  </para></glossdef></glossentry></glosslist>
</sect3>

<sect3><title><literal>DURUM</literal> Çağrısı</title>
  <glosslist><glossentry>
  <glossterm><command>KAPALI</command> Durumu (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Eğer kullanıcının böyle bir bağlantıya erişim izni yoksa, "hata: bağlantı bu süreç için kuraldışı" hatası döner.
  </para><para>
Aksi takdirde, "hata: bağlantı yok" hatası döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>DİNLE</command> Durumu</glossterm>
  <glossdef><para>
"durum = DİNLE" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-GÖNDER</command> Durumu</glossterm>
  <glossdef><para>
"durum = EŞZ-GÖNDER" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>EŞZ-ALINDI</command> Durumu</glossterm>
  <glossdef><para>
"durum = EŞZ-ALINDI" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KURULU</command> Durumu</glossterm>
  <glossdef><para>
"durum = KURULU" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>SON-BEKLE-1</command> Durumu</glossterm>
  <glossdef><para>
"durum = SON-BEKLE-1" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>SON-BEKLE-2</command> Durumu</glossterm>
  <glossdef><para>
"durum = SON-BEKLE-2" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPAT-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"durum = KAPAT-BEKLE" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>KAPANIŞ</command> Durumu</glossterm>
  <glossdef><para>
"durum = KAPANIŞ" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>SON-ALN</command> Durumu</glossterm>
  <glossdef><para>
"durum = SON-ALN" ve ADB göstericisi döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm><command>ZMN-BEKLE</command> Durumu</glossterm>
  <glossdef><para>
"durum = ZMN-BEKLE" ve ADB göstericisi döner.
  </para></glossdef></glossentry></glosslist>
</sect3>

<sect3><title>Veribölütü Varışları</title>
  <glosslist><glossentry>
  <glossterm>Durum, <command>KAPALI</command> ise (örn, ADB'nin olmayışı)</glossterm>
  <glossdef><para>
Gelen veribölütündeki tüm veri iptal edilir. <literal>BŞT</literal> içeren veribölütü varsa iptal edilir. Bir <literal>BŞT</literal> içermeyen bir gelen veribölütü yanıt olarak bir <literal>BŞT</literal> gönderilmesine sebep olur. Alındı ve sıra numarası alanlarının değerleri suçlu veribölütünü gönderen TCP tarafından baştan başlatma işlemi için kabul edilebilir şekilde seçilir.
    </para><para>
<literal>ALN</literal> biti etkin değilse, sıra numarası olarak sıfır kullanılır.
    </para><para>
<literallayout indent="0">
    &lt;SIRA=0>&lt;ALN=VBL.SIRA+VBL.UZN>&lt;DNT=BŞT,ALN>
</literallayout>
    </para><para>
<literal>ALN</literal> biti etkinse,
    </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
    </para><para>
Ve döner.
  </para></glossdef></glossentry><glossentry>
  <glossterm>Durum, <command>DİNLE</command> ise</glossterm>
  <glossdef><para>
İlk sınama bir <literal>BŞT</literal> için yapılır.
  </para><para>
    <glosslist><glossentry>
    <glossdef><para>Gelen <literal>BŞT</literal> yoksayılmalıdır. Dönülür.
    </para></glossdef></glossentry></glosslist>
  </para><para>
İkinci sınama bir <literal>ALN</literal> için yapılır.
  </para><para>
    <glosslist><glossentry>
    <glossdef><para>
Bir bağlantı hala <literal>DİNLE</literal> durumundayken bir alındı gelirse kötüdür. <literal>ALN</literal> kılıklı bir veribölütü gelmişse bir kabul edilebilir <literal>BŞT</literal> veribölütü oluşturulur:
  </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
    </para><para>
Dönülür.
    </para></glossdef></glossentry></glosslist>
  </para><para>
Üçüncü sınama bir <literal>EŞZ</literal> için yapılır.
 </para><para>
    <glosslist><glossentry>
    <glossdef><para>
<literal>EŞZ</literal> biti etkinse, güvenlik sınanır. Eğer gelen veribölütündeki güvenlik/bölüm ile ADB'deki tam olarak uyuşmuyorsa bir <literal>BŞT</literal> veribölütü gönderilir ve dönülür.
    </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
    </para><para>
<literal>VBL.PRC > ADB.PRC</literal> ise, kullanıcı ve sistem tarafından izin verilmişse <literal>ADB.PRC&lt;-VBL.PRC</literal> atanır; izin verilmemişse, bir <literal>BŞT</literal> veribölütü gönderilir ve dönülür.
    </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
    </para><para>
VBL.PRC &lt; ADB.PRC ise devam edilir.
    </para><para>
<literal>ALM.SNR</literal> değişkenine <literal>VBL.SIRA+1</literal> atanır, <literal>İAS</literal> değişkenine <literal>VBL.SIRA</literal> atanır ve başka her denetim ve metin daha sonra işlenmek üzere kuyruğa alınır. <literal>İGS</literal> seçilmeli ve şöyle bir <literal>EŞZ</literal> veribölütü gönderilmelidir:
    </para><para>
<literallayout indent="0">
    &lt;SIRA=İGS>&lt;ALN=ALM.SNR>&lt;DNT=EŞZ,ALN>
</literallayout>
    </para><para>
<literal>GÖN.SNR</literal> değişkenine <literal>İGS+1</literal> ve <literal>GÖN.OLM</literal> değişkenine <literal>İGS</literal> atanır. Bağlantı durumu <literal>EŞZ-ALINDI</literal> yapılır. Gelen başka her denetim ve veri (<literal>EŞZ</literal> ile birleşik) <literal>EŞZ-ALINDI</literal> durumunda işlenecektir, fakat <literal>EŞZ</literal> ve <literal>ALN</literal> tekrar işleme sokulmaz. Dinleme tamamen belli değilse (örn, yabancı sotetin tamamen belli olmaması durumu), belirsiz alanlar şimdiden doldurulmalıdır.
    </para></glossdef></glossentry></glosslist>
  </para><para>
Dördüncü sınama başka metin veya denetim için yapılır.
  </para><para>
    <glosslist><glossentry>
    <glossdef><para>
Bir başka denetim veya metin kılıklı veribölütü (<literal>EŞZ</literal> içermeyen) bir <literal>ALN</literal> içermelidir; böylece <literal>ALN</literal> işlemi tarafından iptal edilir. Bağlantının bu varoluşu tarafından gönderilmiş hiçbir şeyin yanıtı olamayacağından bir gelen <literal>BŞT</literal> veribölütü geçerli olamazdı. Bu yüzden burada böyle bir veribölütü almazsınız ama alırsanız da veribölütü iptal edilir ve dönülür.
    </para></glossdef></glossentry></glosslist>
  </para></glossdef></glossentry><glossentry>
  <glossterm>Durum, <command>EŞZ-GÖNDER</command> ise</glossterm>
  <glossdef><para>
İlk sınama <literal>ALN</literal> biti için yapılır.
  </para><para><glosslist><glossentry>
    <glossdef><para><literal>ALN</literal> biti etkinse
    </para><para>
      <glosslist><glossentry>
        <glossdef><para>
<literal>VBL.ALN =&lt; İGS</literal> veya <literal>VBL.ALN > GÖN.SNR</literal> ise, bir <literal>BŞT</literal> veribölütü gönderilir (<literal>BŞT</literal> biti etkin olmadıkça; aksi takdirde, veribölütü iptal edilip dönülür).
        </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
        </para><para>
ve veribölütü iptal edilir. Dönülür.
        </para><para>
<literal>GÖN.OLM =&lt; VBL.ALN =&lt; GÖN.SNR</literal> ise <literal>ALN</literal> kabul edilebilirdir.
      </para></glossdef></glossentry></glosslist>
    </para></glossdef></glossentry></glosslist>
  </para><para>
İkinci sınama <literal>BŞT</literal> biti için yapılır
  </para><para>
    <glosslist><glossentry>
    <glossdef><para><literal>BŞT</literal> biti etkinse
    </para><para>
      <glosslist><glossentry>
      <glossdef><para>
<literal>ALN</literal> kabul edilebilir ise kullanıcı "hata: bağlantı baştan başlatılıyor" sinyalini alır, veribölütü iptal edilir, <literal>KAPALI</literal> duruma geçilir, ADB silinir ve dönülür. Aksi takdirde (<literal>ALN</literal> yoksa), veribölütü iptal edilir ve dönülür.
      </para></glossdef></glossentry></glosslist>
    </para></glossdef></glossentry></glosslist>
  </para><para>
Üçüncü sınama güvenlik ve öncelik için yapılır.
  </para><para>
    <glosslist><glossentry>
    <glossdef><para>
Eğer veribölütündeki güvenlik/bölüm ile ADB'deki tam olarak uyuşmuyorsa bir <literal>BŞT</literal> veribölütü gönderilir.
    </para><para>
      <glosslist><glossentry>
      <glossdef><para>Bir <literal>ALN</literal> varsa
        </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
        </para><para>Aksi takdirde
        </para><para>
<literallayout indent="0">
    &lt;SIRA=0>&lt;ALN=VBL.SIRA+VBL.UZN>&lt;DNT=BŞT,ALN>
</literallayout>
        </para></glossdef></glossentry><glossentry>
        <glossterm>Bir <literal>ALN</literal> varsa</glossterm>
        <glossdef><para>
Eğer veribölütündeki öncelik ile ADB'deki tam olarak uyuşmuyorsa bir <literal>BŞT</literal> veribölütü gönderilir.
        </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
        </para></glossdef></glossentry><glossentry>
        <glossterm>Bir <literal>ALN</literal> yoksa</glossterm>
        <glossdef><para>
Eğer veribölütündeki öncelik ADB'dekinden daha yüksekse, kullanıcı ve sistem tarafından izin verilmişse, ADB'deki öncelik veribölütündekine yükseltilir; önceliğin yükseltilmesine izin verilmezse, bir <literal>BŞT</literal> veribölütü gönderilir.
        </para><para>
<literallayout indent="0">
    &lt;SIRA=0>&lt;ALN=VBL.SIRA+VBL.UZN>&lt;DNT=BŞT,ALN>
</literallayout>
        </para><para>
Eğer veribölütündeki öncelik ile ADB'dekinden daha düşükse devam edilir.
        </para></glossdef></glossentry><glossentry>
        <glossterm>Eğer bir <literal>BŞT</literal> veribölütü gönderilmişse veribölütü iptal edilir ve dönülür.</glossterm>
      </glossentry></glosslist>
    </para></glossdef></glossentry><glossentry>
    <glossterm>Dördüncü sınama <literal>EŞZ</literal> biti için yapılır</glossterm>
    <glossdef><para>
Bu adıma sadece <literal>ALN</literal> tamamsa geçilmelidir, değilse bir <literal>ALN</literal> yoktur ve veribölütü bir <literal>BŞT</literal> içermez.
    </para><para>
<literal>EŞZ</literal> biti etkinse ve güvenlik/bölüm ve öncelik kabul edilebilir ise, <literal>ALM.SNR = VBL.SIRA+1</literal> ve <literal>İAS = VBL.SIRA</literal> yapılır. <literal>GÖN.OLM</literal> değeri <literal>VBL.ALN</literal>'ye eşit olacak şekilde arttırılmalı (bir <literal>ALN</literal> varsa) ve yeniden aktarım kuyruğundaki veribölütleri alındılandıklarından silinmelidir.
    </para><para>
<literal>GÖN.OLM > İGS</literal> (bizim <literal>EŞZ</literal>, <literal>ALN</literal>'lenmişti) ise, bağlantı durumu <literal>KURULU</literal> yapılır ve bir <literal>ALN</literal> veribölütü oluşturulur ve gönderilir:
    </para><para>
<literallayout indent="0">
    &lt;SIRA=GÖN.SNR>&lt;ALN=ALM.SNR>&lt;DNT=ALN>
</literallayout>
    </para><para>
Aktarım için kuyruğa alınmış veri ve denetimler de dahil edilebilir. Veribölütünde başka veri ve denetim yoksa <literal>ACL</literal> bitinin sınandığı altıncı adımda işleme devam edilir, aksi takdirde dönülür.
    </para><para>
Aksi takdirde, <literal>EŞZ-ALINDI</literal> durumuna geçilir, bir <literal>EŞZ</literal>,<literal>ALN</literal> veribölütü oluşturulur ve gönderilir:
    </para><para>
<literallayout indent="0">
    &lt;SIRA=İGS>&lt;ALN=ALM.SNR>&lt;DNT=EŞZ,ALN>
</literallayout>
    </para><para>
Veribölütünde başka veri ve denetim varsa, <literal>KURULU</literal> duruma geçildikten sonra işlenmek üzere kuyruğa alınır ve dönülür.
    </para></glossdef></glossentry><glossentry>
    <glossterm>Beşinci sınamada, ne <literal>EŞZ</literal> ne de <literal>BŞT</literal> biti etkinse, veribölütü iptal edilip dönülür.</glossterm>
    </glossentry></glosslist>
  </para></glossdef></glossentry><glossentry>
  <glossterm>Aksi takdirde,</glossterm>
  </glossentry><glossentry>
  <glossterm>İlk sınama sıra numarası için yapılır</glossterm>
  <glossdef><para><glosslist><glossentry>
    <glossterm><command>EŞZ-ALINDI</command> Durumu<sbr/>
    <command>KURULU</command> Durumu<sbr/>
    <command>SON-BEKLE-1</command> Durumu<sbr/>
    <command>SON-BEKLE-2</command> Durumu<sbr/>
    <command>KAPAT-BEKLE</command> Durumu<sbr/>
    <command>KAPANIŞ</command> Durumu<sbr/>
    <command>SON-ALN</command> Durumu<sbr/>
    <command>ZMN-BEKLE</command> Durumu</glossterm>
    <glossdef><para>
Veribölütleri sırayla işlenir. Ulaşanlar üzerindeki ilk denemeler eski yinelenmişleri iptal etmek içindir, fakat bu işlem <literal>VBL.SIRA</literal> sırasıyla yapılır. Bir veribölütünün içeriği eski ve yeniyi birlikte içeriyorsa, sadece yeni parçalar işlenmelidir.
    </para><para>
Gelen bir veribölütünün kabul edilebilirliği için dört durum sözkonusudur:
    </para><para>
<literallayout indent="0">
  Veribölütü    Alım     Sınama
   Uzunluğu   Penceresi
  ----------  ---------  -------------------------------------------

      0           0      VBL.SIRA = ALM.SNR

      0          >0      ALM.SNR =&lt; VBL.SIRA &lt; ALM.SNR+ALM.PEN

     >0           0      kabul edilebilir değil

     >0          >0      ALM.SNR =&lt; VBL.SIRA &lt; ALM.SNR+ALM.PEN veya
                         ALM.SNR =&lt; VBL.SIRA+VBL.UZN-1 &lt; ALM.SNR+ALM.PEN
</literallayout>
    </para><para>
ALM.PEN sıfırsa, hiçbir veribölütü kabul edilmez, fakat geçerli <literal>ALN</literal>, <literal>ACL</literal> ve <literal>BŞT</literal>'leri kabul etmek için özel bir izin verilmelidir.
    </para><para>
Gelen bir veribölütü kabul edilebilir değilse, yanıtta bir alındı gönderilmelidir (<literal>BŞT</literal> biti etkin olmadıkça; etkinse veribölütü iptal edilip dönülür).
    </para><para>
<literallayout indent="0">
    &lt;SIRA=GÖN.SNR>&lt;ALN=ALM.SNR>&lt;DNT=ALN>
</literallayout>
    </para><para>
Bir alındı gönderildikten sonra kabul edilmeyen veribölütü iptal edilir ve dönülür.
    </para><para>
Onu izleyen veribölütünün <literal>ALM.SNR</literal>'de başlayan ve pencereyi aşmayan idealleştirilmiş veribölütü olduğu varsayılır. Asıl veribölütleri bu kabule sığması için pencerenin (<literal>EŞZ</literal> ve <literal>SON</literal> dahil) dışına düşen kısımları kırpılarak ve sadece <literal>ALM.SNR</literal>'de başlayan veribölütü işlenerek yeniden biçimlendirilebilir. Daha yüksek sira numaraları ile başlayan veribölütleri daha sonra işlenmek üzere tutulabilir.
    </para></glossdef></glossentry></glosslist>
  </para></glossdef></glossentry><glossentry>
  <glossterm>İkinci sınama <literal>BŞT</literal> biti için yapılır.</glossterm>
  <glossdef><para><glosslist><glossentry>
    <glossterm><command>EŞZ-ALINDI</command> Durumu</glossterm>
    <glossdef><para>
<literal>BŞT</literal> biti etkinse
    </para><para><glosslist><glossentry>
      <glossdef><para>
Bağlantı bir edilgen <command>AÇ</command> çağrısı ile başlatılmışsa (örn, <literal>DİNLE</literal> durumundan gelinip), bağlantı <literal>DİNLE</literal> durumuna geçirilir ve dönülür. Kullanıcıya bilgi verilmesine gerek yoktur. Bağlantı bir etkin <command>AÇ</command> çağrısı ile başlatılmışsa (örn, <literal>EŞZ-GÖNDER</literal> durumundan gelinip), bağlantı reddedilir ve kullanıcıya "bağlantı reddedildi" sinyali yollanır. Her durumda, yeniden aktarım kuyruğundaki tüm veribölütleri silinir. Ve etkin <command>AÇ</command> durumunda, <literal>KAPALI</literal> duruma geçilip ADB silinir ve dönülür.
      </para></glossdef></glossentry></glosslist>
    </para></glossdef></glossentry><glossentry>
    <glossterm><command>KURULU</command><sbr/><command>SON-BEKLE-1</command><sbr/><command>SON-BEKLE-2</command><sbr/><command>KAPAT-BEKLE</command></glossterm>
    <glossdef><para>
<literal>BŞT</literal> biti etkinse askıdaki <command>AL</command> ve <command>GÖNDER</command> çağrıları "baştan-başlat" yanıtları almalıdır. Tüm veribölütü kuyrukları boşaltılır. Kullanıcılar ayrıca talep edilmemiş bir genel "bağlantı yeniden başlatılıyor" sinyali almalıdır. <literal>KAPALI</literal> duruma geçildikten sonra ADB silinir ve dönülür.
    </para></glossdef></glossentry><glossentry>
    <glossterm><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command></glossterm>
    <glossdef><para>
<literal>BŞT</literal> biti etkinse <literal>KAPALI</literal> duruma geçildikten sonra ADB bilinir ve dönülür.
    </para></glossdef></glossentry></glosslist>
  </para></glossdef></glossentry><glossentry>
  <glossterm>Üçüncü sınama güvenlik ve öncelik için yapılır.</glossterm>
  <glossdef><para><glosslist><glossentry>
    <glossterm><command>EŞZ-ALINDI</command> Durumu</glossterm>
    <glossdef><para>
Eğer veribölütündeki güvenlik/bölüm ve öncelik ile ADB'dekiler tam olarak uyuşmuyorsa bir <literal>BŞT</literal> veribölütü gönderilir ve dönülür.
    </para></glossdef></glossentry><glossentry>
    <glossterm><command>KURULU</command> Durumu</glossterm>
    <glossdef><para>
Eğer veribölütündeki güvenlik/bölüm ve öncelik ile ADB'dekiler tam olarak uyuşmuyorsa bir <literal>BŞT</literal> veribölütü gönderilir ve askıdaki <command>AL</command> ve <command>GÖNDER</command> çağrıları "yeniden-başlat" yanıtları alırlar. Tüm veribölütü kuyrukları boşaltılır. Kullanıcılar ayrıca talep edilmemiş bir genel "bağlantı yeniden başlatılıyor" sinyali almalıdır. <literal>KAPALI</literal> duruma geçildikten sonra ADB silinir ve dönülür.
    </para></glossdef></glossentry></glosslist>
    </para><para>
Bu  portlar arasındaki farklı güvenlik veya öncelikli eski bir bağlantıdaki bir veribölütünün mevcut bağlantının terkedilmesine sebep olmadan engellenmesi için bu sınamanın aşağıdaki sıra numarası sınamasında yeraldığına dikkat ediniz.
    </para></glossdef></glossentry><glossentry>
    <glossterm>Dördüncü sınama <literal>EŞZ</literal> biti için yapılır.</glossterm>
    <glossdef><para><glosslist><glossentry>
      <glossterm><command>EŞZ-ALINDI</command> Durumu<sbr/>
      <command>KURULU</command> Durumu<sbr/>
      <command>SON-BEKLE-1</command> Durumu<sbr/>
      <command>SON-BEKLE-2</command> Durumu<sbr/>
      <command>KAPAT-BEKLE</command> Durumu<sbr/>
      <command>KAPANIŞ</command> Durumu<sbr/>
      <command>SON-ALN</command> Durumu<sbr/>
      <command>ZMN-BEKLE</command> Durumu</glossterm>
      <glossdef><para>
<literal>EŞZ</literal> pencere içindeyse o bir hatadır, bir <literal>BŞT</literal> veribölütü gönderilir, askıdaki <command>AL</command> ve <command>GÖNDER</command> çağrıları "baştan-başlat" yanıtları alır, tüm veribölütü kuyrukları boşaltılır, kullanıcılar ayrıca talep edilmemiş bir genel "bağlantı yeniden başlatılıyor" sinyali alır, <literal>KAPALI</literal> duruma geçildikten sonra ADB silinir ve dönülür.
      </para><para>
<literal>EŞZ</literal> pencere içinde değilse bu adıma gelinmeden, ilk adımda (sıra numarası sınaması) bir alındı gönderilirdi.
      </para></glossdef></glossentry></glosslist>
    </para></glossdef></glossentry><glossentry>
    <glossterm>Beşinci sınama <literal>ALN</literal> alanı için yapılır.</glossterm>
    <glossdef><para><glosslist><glossentry>
      <glossterm><literal>ALN</literal> biti etkin değilse veribölütü iptal edilir ve dönülür<sbr/><literal>ALN</literal> biti etkinse</glossterm>
      <glossdef><para><glosslist><glossentry>
        <glossterm><command>EŞZ-ALINDI</command> Durumu</glossterm>
        <glossdef><para>
<literal>GÖN.OLM =&lt; VBL.ALN =&lt; GÖN.SNR</literal> ise <literal>KURULU</literal> duruma geçilip işlem sürdürülür.
        </para><para><glosslist><glossentry>
          <glossdef><para>
Veribölütü alındısı kabul edilebilir değilse bir <literal>BŞT</literal> veribölütü oluşturulur:
          </para><para>
<literallayout indent="0">
    &lt;SIRA=VBL.ALN>&lt;DNT=BŞT>
</literallayout>
         </para><para>ve gönderilir.
         </para></glossdef></glossentry></glosslist>
       </para></glossdef></glossentry><glossentry>
        <glossterm><command>KURULU</command> Durumu</glossterm>
        <glossdef><para>
<literal>GÖN.OLM &lt; VBL.ALN =&lt; GÖN.SNR</literal> ise <literal>GÖN.OLM &lt;- VBL.ALN</literal> yapılır. Yeniden aktarım kuyruğundaki veribölütleri alındılandıklarından silinmelidir. Kullanıcılar <command>GÖNDER</command>ilmiş ve tamamen alındılanmış  tamponlar için olumlu alındılar almalıdır (örn, <command>GÖNDER</command> tamponu "tamam" yanıtı ile dönmelidir). <literal>ALN</literal> yinelenmişse (<literal>VBL.ALN &lt; GÖN.OLM</literal>), bu yoksayılır. Birşeylerin henüz gönderilmemiş alındıları varsa (<literal>VBL.ALN > GÖN.SNR</literal>) bir <literal>ALN</literal> gönderilir, veribölütü yokedilir ve dönülür.
         </para><para>
<literal>GÖN.OLM &lt; VBL.ALN =&lt; GÖN.SNR</literal> ise, gönderi penceresi güncellenmemelidir. (<literal>GÖN.PS1 &lt; VBL.SIRA</literal> veya (<literal>GÖN.PS1 = VBL.SIRA</literal> ve <literal>GÖN.PS2 =&lt; VBL.ALN</literal>)) ise, <literal>GÖN.PEN &lt;- VBL.PEN</literal>, <literal>GÖN.PS1 &lt;- VBL.SIRA</literal> ve <literal>GÖN.PS2 &lt;- VBL.ALN</literal> yapılır.
         </para><para>
<literal>GÖN.PEN</literal>'in, <literal>GÖN.OLM</literal>'den bir mesafe belirttiğine, <literal>GÖN.PS1</literal>'in <literal>GÖN.PEN</literal>'i güncellemekte kullanılan son veribölütünün sıra numarasını kaydettiğine ve <literal>GÖN.PS2</literal>'nin <literal>GÖN.PEN</literal>'i güncellemekte kullanılan son veribölütünün alındı numarasını kaydettiğine dikkat ediniz. Buradaki sınama eski veribölütleri kullanılarak pencerenin güncellenmesini engeller.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>SON-BEKLE-1</command> Durumu</glossterm>
        <glossdef><para>
<literal>KURULU</literal> durumdaki işlemlere ek olarak, bizim <literal>SON</literal> alındılandığı anda <literal>SON-BEKLE-2</literal> durumuna geçilir ve işleme bu durumda devam edilir.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>SON-BEKLE-2</command> Durumu</glossterm>
        <glossdef><para>
<literal>KURULU</literal> durumdaki işlemlere ek olarak, yeniden aktarım kuyruğu boşsa kullanıcının <command>KAPAT</command>'ı alındılanabilir ("tamam") fakat ADB silinmez.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>KAPAT-BEKLE</command> Durumu</glossterm>
        <glossdef><para>
<literal>KURULU</literal> durumdaki işlemlerin aynısı yapılır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>KAPANIŞ</command> Durumu</glossterm>
        <glossdef><para>
<literal>KURULU</literal> durumdaki işlemlere ek olarak, bizim <literal>SON</literal>'u alındılayan <literal>ALN</literal> varsa <literal>ZMN-BEKLE</literal> durumuna geçilir, yoksa veribölütü yoksayılır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>SON-ALN</command> Durumu</glossterm>
        <glossdef><para>
Bu durumda gelebilen tek şey bizim <literal>SON</literal>'un bir alındısıdır. Bizim <literal>SON</literal> alındılandığı anda ADB silinir, <literal>KAPALI</literal> duruma geçilir ve dönülür.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>ZMN-BEKLE</command> Durumu</glossterm>
        <glossdef><para>
Bu durumda gelebilen tek şey uzak <literal>SON</literal>'un bir yeniden aktarımıdır. O tek şey alınır ve 2 AVÖ'lük zamanaşımından sonra yeniden başlanır.
        </para></glossdef></glossentry></glosslist>
      </para></glossdef></glossentry></glosslist>
    </para></glossdef></glossentry><glossentry>
      <glossterm>Altıncı sınama <literal>ACL</literal> biti için yapılır.</glossterm>
      <glossdef><para><glosslist><glossentry>
        <glossterm><command>KURULU</command> Durumu<sbr/><command>SON-BEKLE-1</command> Durumu<sbr/><command>SON-BEKLE-2</command> Durumu</glossterm>
        <glossdef><para>
<literal>ACL</literal> biti etkinse <literal>ALM.ACL &lt;- azm(ALM.ACL,VBL.ACL)</literal> yapılır ve kullanıcıya tüketilen verinin önünde aciliyet göstericisi (<literal>ALM.ACL</literal>) varsa uzak tarafın acil veriye sahip olduğu sinyallenir. Eğer kullanıcı zaten sinyallenmişse (veya hala "acil kip"te ise), devam niteliğindeki bu acil veri için kullanıcı tekrar sinyallenmez.
      </para></glossdef></glossentry><glossentry>
        <glossterm><command>KAPAT-BEKLE</command> Durumu<sbr/><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command></glossterm>
        <glossdef><para>Uzak taraf tarafından bir <literal>SON</literal> alınmış olduğundan bu olmamalıdır. <literal>ACL</literal> yoksayılır.
      </para></glossdef></glossentry></glosslist>
    </para></glossdef></glossentry><glossentry>
      <glossterm>Yedinci sınama veribölütü metni için yapılır.</glossterm>
      <glossdef><para><glosslist><glossentry>
        <glossterm><command>KURULU</command> Durumu<sbr/><command>SON-BEKLE-1</command> Durumu<sbr/><command>SON-BEKLE-2</command> Durumu</glossterm>
        <glossdef><para>
<literal>KURULU</literal> durumdayken, veribölütü metninin kullanıcının <command>AL</command> tamponlarına teslimi mümkündür.  Gerek tampon dolana gerekse veribölütü boşalana kadar veribölütlerindeki metin tamponlara taşınabilir. Veribölütü boş ve bir <literal>GİT</literal>sin bayrağı taşıyorsa, kullanıcı bilgilendirilir, tampon döndüğünde bir <literal>GİT</literal>sin alınmış olur.
        </para><para>
TCP, verinin kullanıcıya tesliminin sorumluluğunu aldığında, ayrıca, verinin alımını da alındılamalıdır.
        </para><para>
TCP, verinin sorumluluğunu aldığı anda, <literal>ALM.SNR</literal>  kabul edilen veri kadar arttırılır ve tamponun kullanılabilirliği bakımından <literal>ALM.PEN</literal> ayarlanır. <literal>ALM.SNR</literal> ve <literal>ALM.PEN</literal> toplamı azalmamalıdır.
        </para><para>
<xref linkend="rfc793-s37"/> bölümündeki pencere yönetim önerilerini lütfen dikkate alınız.
        </para><para>Şöyle bir alındı gönderilir:
        </para><para>
<literallayout indent="0">
    &lt;SIRA=GÖN.SNR>&lt;ALN=ALM.SNR>&lt;DNT=ALN>
</literallayout>
        </para><para>
Bu alındı, mümkünse yersiz bir gecikmeye uğramasızın, aktarılmakta olan bir veribölütüne bindirilmiş olmalıdır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>KAPAT-BEKLE</command> Durumu<sbr/><command>KAPANIŞ</command> Durumu<sbr/><command>SON-ALN</command> Durumu<sbr/><command>ZMN-BEKLE</command> Durumu</glossterm>
        <glossdef><para>Uzak tarafta bir <literal>SON</literal> alınmış olduğundan bu olmamalıdır. Veribölütü metni yoksayılır.
        </para></glossdef></glossentry></glosslist>
      </para></glossdef></glossentry><glossentry>
      <glossterm>Sekizinci sınama <literal>SON</literal> biti için yapılır.</glossterm>
      <glossdef><para>
Durum <literal>KAPALI</literal>, <literal>DİNLE</literal> veya <literal>EŞZ-GÖNDER</literal> ise, VBL.SIRA doğrulanamayacağından, <literal>SON</literal> işleme alınmaz; veribölütü yokedilir ve dönülür.
      </para><para>
<literal>SON</literal> biti etkinse, kullanıcıya "bağlantı kapanıyor" denip askıdaki <command>AL</command> çağrılarına aynı ileti döndürülür, <literal>ALM.SNR</literal>, <literal>SON</literal> kadar arttırılır ve <literal>SON</literal> için bir alındı gönderilir. Kullanıcıya henüz teslim edilmemiş her veribölütü metni için <literal>SON</literal>'un <literal>GİT</literal>sin uygulayacağına dikkat ediniz.
      </para><para><glosslist><glossentry>
        <glossterm><command>KURULU</command> Durumu<sbr/><command>EŞZ-ALINDI</command> Durumu</glossterm>
        <glossdef><para><literal>KAPAT-BEKLE</literal> durumuna geçilir.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>SON-BEKLE-1</command> Durumu</glossterm>
        <glossdef><para>
Bizim <literal>SON ALN</literal>lenmişse (belki bu veribölütünde), <literal>ZMN-BEKLE</literal> durumuna geçilir, zaman-bekle zamanlayıcısı çalıştırılır, diğer zamanlayıcılar kapatılır; aksi takdirde, <literal>KAPANIŞ</literal> durumuna geçilir.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>SON-BEKLE-2</command> Durumu</glossterm>
        <glossdef><para>
<literal>ZMN-BEKLE</literal> durumuna geçilir, zaman-bekle zamanlayıcısı çalıştırılır, diğer zamanlayıcılar kapatılır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>KAPAT-BEKLE</command> Durumu</glossterm>
        <glossdef><para><literal>KAPAT-BEKLE</literal> durumunda kalınır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>KAPANIŞ</command> Durumu</glossterm>
        <glossdef><para><literal>KAPANIŞ</literal> durumunda kalınır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>SON-ALN</command> Durumu</glossterm>
        <glossdef><para><literal>SON-ALN</literal> durumunda kalınır.
        </para></glossdef></glossentry><glossentry>
        <glossterm><command>ZMN-BEKLE</command> Durumu</glossterm>
        <glossdef><para><literal>ZMN-BEKLE</literal> durumunda kalınır. 2 AVÖ'lük zaman-bekle zamanaşımı başlatılır.
        </para></glossdef></glossentry></glosslist>
      </para></glossdef></glossentry><glossentry>
      <glossterm>ve dönülür.</glossterm>
    </glossentry></glosslist>
</sect3>

<sect3><title>Kullanıcı Zamanaşımı</title>
<para>
Herhangi bir durumda, kullanıcı zamanaşımı dolarsa, tüm kuyruklar boşaltılır, kullanıcı genellikle "hata: kullanıcı zamanaşımından dolayı bağlantı terkedildi" ile ve askıdaki çağrılar için sinyallenir, ADB silinir,  <literal>KAPALI</literal> duruma geçilir ve dönülür.
</para>
</sect3>

<sect3><title>Yeniden Aktarım Zamanaşımı</title>
<para>
Herhangi bir durumda, yeniden aktarım kuyruğundaki bir veribölütünde yeniden aktarım zamanaşımı dolarsa, veribölütü tekrar yeniden aktarım kuyruğunun başına gönderilir, yeniden aktarım zamanaşımı yeniden başlatılır ve dönülür.
</para>
</sect3>

<sect3><title><literal>ZMN-BEKLE</literal> zamanaşımı</title>
<para>
Bir bağlantı üzerinde <literal>ZMN-BEKLE</literal> zamanaşımı dolarsa ADB silinir, <literal>KAPALI</literal> duruma geçilir ve dönülür.
</para>
</sect3>
</sect2>
</sect1>

<bibliography id="rfc793-gloss"><title>Kullanılan Terimler ve Kısaltmalar</title>
<para><variablelist><varlistentry>
<term>1822</term><listitem><para>
BBN Report 1822, "The Specification of the Interconnection of a Host and an IMP" ("Bir konak ile bir IMP'nin birbiriyle bağlantısının belirtimi"). Bir konak ile ARPANET  arasındaki arayüzün belirtimi.
</para></listitem></varlistentry><varlistentry>
<term>aciliyet göstericisi</term><listitem><para>
Sadece <literal>ACL</literal> biti etkin olduğunda anlamlı olan bir denetim alanı. Bu alan, gönderen kullanıcının acil çağrısı ile ilişkili veri sekizlisini belirten aciliyet göstericisinin değerini haber verir.
</para></listitem></varlistentry><varlistentry>
<term><literal>ACL</literal></term><listitem><para>
Bir sıra numarası işgal etmeyen, alan kullanıcının, aciliyet göstericisinde belirtilen değerden küçük sıra numaraları taşıyan tüketilecek bir veri olduğu sürece acilen işlem yapması için uyarılmasını gerektiğini belirten bir denetim biti.
</para></listitem></varlistentry><varlistentry>
<term>ADB</term><listitem><para>
Aktarım Denetim Bloğu. Bir bağlantının durumunun kaydedildiği veri yapısı.
</para></listitem></varlistentry><varlistentry>
<term>ADB.ÖNC</term><listitem><para>Bağlantı önceliği
</para></listitem></varlistentry><varlistentry>
<term>alım penceresi</term><listitem><para>
Almaya istekli yerel (alıcı) TCP'nin sıra numaralarını ifade eder. Böylece, yerel TCP, makbul veriyi ve denetimi taşıyan veribölütlerinin <literal>ALM.SNR</literal> ile <literal>ALM.SNR + ALM.PEN - 1</literal> arasında yeralacağını varsayar. Bu aralığın dışında sıra numaralarına sahip veribölütleri yinelenmiş sayılarak iptal edilirler.
</para></listitem></varlistentry><varlistentry>
<term><literal>ALM.ACL</literal></term><listitem><para>alım aciliyet göstericisi
</para></listitem></varlistentry><varlistentry>
<term><literal>ALM.PEN</literal></term><listitem><para>alım perceresi
</para></listitem></varlistentry><varlistentry>
<term><literal>ALM.SNR</literal></term><listitem><para>sonraki alım sıra numarası
</para></listitem></varlistentry><varlistentry>
<term><literal>ALN</literal></term><listitem><para>
Bir veribölütünün alındı alanının,  önceki tüm sıra numaralarının alındığını belirtmesi nedeniyle bu veribölütünün göndericisinin almayı umduğu sonraki sıra numarasını içerdiğini belirten ve hiçbir sıra alanı işgal etmeyen denetim bitinin ismi.
</para></listitem></varlistentry><varlistentry>
<term>ARPANET iletisi</term><listitem><para>
ARPANET'teki bir IMP ile bir konak arasındaki aktarım birimi. Azami boyu yaklaşık 1012 sekizlidir (8096 bit).
</para></listitem></varlistentry><varlistentry>
<term>ARPANET paketi</term><listitem><para>
ARPANET'teki IMP'ler arasında dahili olarak kullanılan bir aktarım birimi. Azami boyu yaklaşık 126 sekizlidir (1008 bit).
</para></listitem></varlistentry><varlistentry>
<term>AVÖ</term><listitem><para>Azami Veribölütü Ömrü. Bir TCP veribölütünün ağ üzerinde mevcut olabildiği süre. Keyfi 2 dakika olarak tanımlanmıştır..
</para></listitem></varlistentry><varlistentry>
<term>bağlantı</term><listitem><para>
Bir çift soketin varlığı ile belirlenen mantıksal bir iletişim güzergahı.
</para></listitem></varlistentry><varlistentry>
<term>başlık</term><listitem><para>
Bir iletinin, veribölütü, veridilimi, veri paketi veya veri blokunun başlangıcındaki denetim bilgisi.
</para></listitem></varlistentry><varlistentry>
<term>Betim</term><listitem><para>
Bir Genel Ağ Protokolü alanı. Bu betimleme değeri kullanıcı tarafından, bir verikatarının veridilimlerinin montajına yardımcı olması için atanır.
</para></listitem></varlistentry><varlistentry>
<term><literal>EŞZ</literal></term><listitem><para>
Bir bağlantının başlatılmasında kullanılan, sıra numaralarının başlangıcını belirten, gelen veribölütünde bir sıra numarası işgal eden bir denetim biti (eşzamanlama kısaltması olarak).
</para></listitem></varlistentry><varlistentry>
<term>FTP</term><listitem><para>("File Transfer Protocol" kısaltması) Dosya aktarım protokolü.
</para></listitem></varlistentry><varlistentry>
<term><literal>GİT</literal></term><listitem><para>
Bir sıra numarası işgal etmeyen, veribölütünün alıcı tarafa hemen gitmesi gereken veriyi içerdiğini belirten bir denetim biti.
</para></listitem></varlistentry><varlistentry>
<term><literal>GÖN.ACL</literal></term><listitem><para>gönderi aciliyet göstericisi
</para></listitem></varlistentry><varlistentry>
<term><literal>GÖN.OLM</literal></term><listitem><para>sol sıra
</para></listitem></varlistentry><varlistentry>
<term><literal>GÖN.PEN</literal></term><listitem><para>gönderi penceresi
</para></listitem></varlistentry><varlistentry>
<term><literal>GÖN.PS1</literal></term><listitem><para>son pencere güncellemesinde veribölütü sıra numarası
</para></listitem></varlistentry><varlistentry>
<term><literal>GÖN.PS2</literal></term><listitem><para>son pencere güncellemesinde veribölütü alındı numarası
</para></listitem></varlistentry><varlistentry>
<term><literal>GÖN.SNR</literal></term><listitem><para>gönderi sırası
</para></listitem></varlistentry><varlistentry>
<term>gönderi penceresi</term><listitem><para>
Almaya istekli uzak (alıcı) TCP'nin sıra numaralarını ifade eder. Uzak (veriyi alan) TCP'deki veribölütleri içinde belirtilen pencere alanının değeridir. Yeni sıra numarası aralığı bir TCP tarafından <literal>GÖN.SNR</literal> ile <literal>GÖN.OLM + GÖN.PEN - 1</literal> arasında seçilir. (Şüphesiz, sıra numaralarının yeniden aktarımlarının <literal>GÖN.OLM</literal> ile <literal>GÖN.SNR</literal> arasında olması beklenir.)
</para></listitem></varlistentry><varlistentry>
<term>gönderi sırası</term><listitem><para>
Yerel (gönderen) TCP'nin bağlantıda kullanacağı sonraki sıra numarası.  İlki bir ilk sıra numarası eğrisinden (İSN) seçilir ve aktarılan sıralı denetimin veya verinin her sekizlisi için bir arttırılır.
</para></listitem></varlistentry><varlistentry>
<term>Hedef Adres</term><listitem><para>
Genelde ağ ve konak betimleyen hedef adresi.
</para></listitem></varlistentry><varlistentry>
<term>Hizmet Türü</term><listitem><para>
Bir Genel Ağ veridilimi için hizmet türünü belirten bir Genel Ağ Protokolü alanı.
</para></listitem></varlistentry><varlistentry>
<term><literal>İAS</literal></term><listitem><para>
İlk Gelen Sıra numarası. Bir bağlantıda alıcı tarafından kullanılmış ilk sıra numarası.
</para></listitem></varlistentry><varlistentry>
<term><literal>İGS</literal></term><listitem><para>
İlk Giden Sıra numarası. Bir bağlantıda gönderici tarafından kullanılmış ilk sıra numarası.
</para></listitem></varlistentry><varlistentry>
<term>IMP</term><listitem><para>("Interface Message Processor" kısaltması). Arayüz İleti İşlemci, ARPANET'in paket anahtarlaması.
</para></listitem></varlistentry><varlistentry>
<term>Genel Ağ adresi</term><listitem><para>
Özellikle konak seviyesinde bir kaynak veya hedef adresi.
</para></listitem></varlistentry><varlistentry>
<term>Genel Ağ verikatarı</term><listitem><para>(İng.: Internet datagram) Genel Ağ başlıklı daha yüksek seviyeli bir protokol ile bir Genel Ağ modülü arasında değiştokuş edilen verinin birimi.
</para></listitem></varlistentry><varlistentry>
<term>Genel Ağ veridilimi</term><listitem><para>(İng.: Internet fragment) Genel Ağ başlıklı bir Genel Ağ verikatarının veri parçası.
</para></listitem></varlistentry><varlistentry>
<term>IP</term><listitem><para>Genel Ağ Protokolü. ("Internet Protocol" kısaltması)
</para></listitem></varlistentry><varlistentry>
<term>İSN</term><listitem><para>
İlk Sıra Numarası.  Bir bağlantıda kullanılmış ilk sıra numarası (gerek <literal>İAS</literal> gerekse <literal>İGS</literal> olarak). Saate göre sıralı/döngülü bir düzende seçilir.
</para></listitem></varlistentry><varlistentry>
<term>Kaynak Adresi</term><listitem><para>
Ağ veya konak belirten kaynak adresi
</para></listitem></varlistentry><varlistentry>
<term>konak</term><listitem><para>Bir bilgisayar. İletişim ağı bakımından iletiler için bir kaynak ya da hedef olan bilgisayar.
</para></listitem></varlistentry><varlistentry>
<term>lider</term><listitem><para>
Bir ileti veya veri blokunun başlangıcındaki denetim bilgisi. Özellikle, ARPANET'te, konak/IMP arayüzünde bir ARPANET iletisi üstündeki denetim bilgisi.
</para></listitem></varlistentry><varlistentry>
<term>modül</term><listitem><para>
Bir protokol veya başka bir yordamın genellikle yazılım olarak bir gerçeklenimi.
</para></listitem></varlistentry><varlistentry>
<term>paket</term><listitem><para>
Mantıksal olarak eksiği de olabilen bir başlığı olan bir veri paketi. Verinin mantıksal paketinden ziyade fiziksel paketi için kullanılır.
</para></listitem></varlistentry><varlistentry>
<term>port</term><listitem><para>
Veri ile ilişkili bir sürecin girdi veya çıktı kanalını belirten bir soket bölümü.
</para></listitem></varlistentry><varlistentry>
<term>RTP</term><listitem><para>
"Real Time Protocol" kısaltması. Gerçek Zamanlı Protokol:  Zamanında işlenmesi önemli olan bilgilerin iletişimi için kullanılan iki konak arası protokol.
</para></listitem></varlistentry><varlistentry>
<term>Seçenekler</term><listitem><para>
Uzunluğu bir kaç sekizlik olabilen çeşitli seçenekler içeren bir seçenek alanı. Seçenekler öncelikle sınama amaçları için kullanılır; örneğin, zaman damgalarının taşınması. Genel Ağ Protokolü ve TCP, her ikisi de seçenek alanları içerir.
</para></listitem></varlistentry><varlistentry>
<term>sekizli</term><listitem><para>(İng.: octet) Sekiz bitlik bayt. (Baytların bazı sistemlerde 8 bit olmaması yüzünden sekiz bitlik baytı belirtmek için)
</para></listitem></varlistentry><varlistentry>
<term><literal>BŞT</literal></term><listitem><para>
Bir sıra numarası işgal etmeyen, bir etkileşime girmeksizin alıcının bağlantıyı silmesi gerektiğini belirten bir denetim biti (baştan-başlat). Alıcı gelen veribölütünün alındı ve sıra numarası alanlarına bakarak bir baştan başlatma komutunu devreye alıp almayacağını saptayabilir. Yanıtında bir <literal>BŞT</literal> olmasına yolaçacak <literal>BŞT</literal> içeren bir veribölütü alımı söz konusu değildir.
</para></listitem></varlistentry><varlistentry>
<term>soket</term><listitem><para>
Özellikle bir port tanıtı içeren bir adres. Bir Genel Ağ Adresi ile bir TCP portunun birleşiminden oluşur.
</para></listitem></varlistentry><varlistentry>
<term>sol sıra</term><listitem><para>
Alan TCP tarafından alındılanacak sonraki sıra numarasıdır (veya henüz alındılanmamış en küçük sıra numarasıdır) ve bazan gönderi penceresinin sol kenarı olarak da atıfta bulunulur.
</para></listitem></varlistentry><varlistentry>
<term><literal>SON</literal></term><listitem><para>
Bir sıra numarası işgal eden, göndericinin artık veri göndermeyeceğini veya işgal edilen sıra numarası uzayının denetleneceğini belirter bir denetim biti (sonlanış).
</para></listitem></varlistentry><varlistentry>
<term>sonraki alım sıra numarası</term><listitem><para>
Yerel TCP'nin almayı umduğu sonraki sıra numarası.
</para></listitem></varlistentry><varlistentry>
<term>süreç</term><listitem><para>Çalışmakta olan bir program. TCP'nin veya bir iki konak arası protokolün bakış açısından, verinin kaynağı veya hedefi.
</para></listitem></varlistentry><varlistentry>
<term>TCP</term><listitem><para>
(Transmission Control Protocol kısaltması) Aktarım Denetim Protokolü:  Ağlararası ortamlarda güvenilir iletişim için bir iki-konakarası protokol.
</para></listitem></varlistentry><varlistentry>
<term>HT</term><listitem><para>Hizmet Türü, bir Genel Ağ Protokolü alanı.
</para></listitem></varlistentry><varlistentry>
<term><literal>VBL.ALN</literal></term><listitem><para>veribölütü alındısı
</para></listitem></varlistentry><varlistentry>
<term><literal>VBL.UZN</literal></term><listitem><para>veribölütü uzunluğu
</para></listitem></varlistentry><varlistentry>
<term><literal>VBL.PRC</literal></term><listitem><para>veribölütü öncelik değeri
</para></listitem></varlistentry><varlistentry>
<term><literal>VBL.SIRA</literal></term><listitem><para>veribölütü sırası
</para></listitem></varlistentry><varlistentry>
<term><literal>VBL.ACL</literal></term><listitem><para>veribölütü aciliyet göstericisi alanı
</para></listitem></varlistentry><varlistentry>
  <term><literal>VBL.PEN</literal></term><listitem><para>veribölütü pencere alanı
</para></listitem></varlistentry><varlistentry>
<term>veribölütü</term><listitem><para>(İng.: segment)
Mantıksal bir veri birimi. Konu özelinde, bir TCP veribölütü bir TCP modül çifti arasında aktarılan veri birimidir.
</para></listitem></varlistentry><varlistentry>
<term>veribölütü alındısı</term><listitem><para>
Gelen veribölütünün alındı alanındaki sıra numarası.
</para></listitem></varlistentry><varlistentry>
<term>veribölütü sırası</term><listitem><para>
Gelen veribölütünün sıra alanındaki numara.
</para></listitem></varlistentry><varlistentry>
<term>veribölütü uzunluğu</term><listitem><para>
Sıralama alanını işgal eden bir denetimi de içererek bir veribölütü tarafından işgal edilmiş sıra numarası alanı miktarı.
</para></listitem></varlistentry><varlistentry>
<term>veridilimi</term><listitem><para>(İng.: fragment)
Bir mantıksal veri biriminin bir parçası; bir Genel Ağ veridilimi bir Genel Ağ verikatarının bir parçasıdır.
</para></listitem></varlistentry><varlistentry>
<term>verikatarı</term><listitem><para>(İng.: datagram)
Bir paket anahtarlamalı bilgisayar ağında gönderilen bir ileti.
</para></listitem></varlistentry><varlistentry>
<term>yerel paket</term><listitem><para>
Bir yerel ağın içinde aktarım birimi
</para></listitem></varlistentry></variablelist>
</para>
</bibliography>

<bibliography id="rfc793-refs"><title>Kaynakça</title>
<para><orderedlist><listitem><para>
<biblioentry xreflabel="1" id="rfc793-bib1">
<abbrev>COM-22</abbrev>
<author><firstname>V. Cerf ve R. Kahn</firstname></author>
<title>A Protocol for Packet Network Intercommunication</title>
<edition>Paket Ağı Arailetişimi için bir Protokol</edition>
<publisher><publishername>IEEE Transactions on Communications, Vol. COM-22, No. 5, pp 637-648</publishername></publisher>
<pubdate>Mayıs 1974</pubdate>
</biblioentry>
</para></listitem><listitem><para>
<biblioentry xreflabel="2" id="rfc793-bib2">
<abbrev><link linkend="rfc791">RFC791</link></abbrev>
<author><surname>Postel (editör)</surname><firstname>J.</firstname></author>
<title>Internet Protocol - DARPA Internet Program Protocol Specification</title>
<edition>Genel Ağ Prokotolü - DARPA Internet Programı Protokol Belirtimi</edition>
<publisher><publishername>USC/Information Sciences Institute</publishername></publisher>
<pubdate>Eylül 1981</pubdate>
</biblioentry>
</para></listitem><listitem><para>
<biblioentry xreflabel="3" id="rfc793-bib3">
<abbrev>CNv2</abbrev>
<author><firstname>Y. Dalal ve C. Sunshine</firstname></author>
<title>Connection Management in Transport Protocols</title>
<edition>Aktarım Prokotollerinde Bağlantı Yönetimi</edition>
<publisher><publishername>Computer Networks, Vol. 2, No. 6, pp. 454-473</publishername></publisher>
<pubdate>Aralık 1978</pubdate>
</biblioentry>
</para></listitem><listitem><para>
<biblioentry xreflabel="4" id="rfc793-bib4">
<abbrev><link linkend="rfc790">RFC790</link></abbrev>
<author><surname>Postel</surname><firstname>J.</firstname></author>
<title>Assigned Numbers</title>
<edition>Atanmış Numaralar</edition>
<publisher><publishername>USC/Information Sciences Institute</publishername></publisher>
<pubdate>Eylül 1981</pubdate>
</biblioentry>
</para></listitem></orderedlist></para>
</bibliography>
</article>

