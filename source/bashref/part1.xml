<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: part1.xml,v 1.12 2002/12/20 23:23:58 nilgun Exp $
     ********************************************************************-->
  <part id="bashref_intro">
    <title>Giriş</title>
    <titleabbrev>Kabuğa bir bakış</titleabbrev>
    <chapter id="bashref_what.is.bash">
      <title>Bash Nedir?</title>
      <titleabbrev>Bash'in kısa bir tanımı</titleabbrev>
      <para>
Bash GNU işletim sistemi için bir kabuk ya da başka bir deyişle
komut dili yorumlayıcısıdır. <literal>Bourne-Again SHell</literal>
sözcüklerinde türetilmiş bir kısaltmadır. Bell Araştırma
Laboratuarının Unix'inin  yedinci sürümündeki, şu anki Unix kabuğu
<filename>sh</filename>'ın atasının yazarı Stephen Bourne'a
atfen bu isim verilmiştir.
      </para><para>
Bash,  <userinput>sh</userinput>'ın hemen hemen tüm özelliklerini ve
Korn kabuğu olan <userinput>ksh</userinput> ile C kabuğu olarak bilinen
<userinput>csh</userinput>'ın kullanışlı özelliklerini bir araya getirir.
IEEE POSIX belirtiminin IEEE POSIX Kabuk ve Araçları bölümüne (IEEE Standardı 1003.1) uygun bir ürün olması amaçlanmıştır. <userinput>sh</userinput>'ın hem etkileşimli hem de programlama için kullanımını işlevsel olarak arttıran geliştirmeler içerir.
      </para><para>
GNU işletim sistemi, <userinput>csh</userinput>'ın bir sürümü de dahil
olmak üzere başka kabuklarla da teçhiz edilmişse de Bash öntanımlı
kabuktur. Diğer GNU yazılımları gibi Bash'de bir çok işletim sistemine
uyarlanabilir - MS-DOS, OS/2 ve Windows platformları için
bağımsız olarak desteklenen sürümleri vardır.
      </para>
    </chapter>
    <chapter id="bashref_what.is.shell">
      <title>Kabuk Nedir</title>
      <titleabbrev>Kabuklara kısa bir giriş</titleabbrev>
      <para>
Temelinde, bir kabuk, komutları çalıştırmaya yarayan basit bir makro
işlemcisidir. Burada makro işlemcisi terimi, metinlerin ve sembollerin daha geniş ifadeler oluşturmak üzere genişletilmesi işlevini yerine getiren anlamındadır.
    </para><para>
Bir Unix kabuğu, hem bir komut yorumlayıcısı hem de bir programlama dilidir. Bir komut yorumlayıcı olarak, GNU araçlarından zengin bir demeti barındıran bir arayüzdür. Programlama dili özellikleri ise bu araçları birarada kullanabilmeyi mümkün kılar. Komutları içeren dosyalar oluşturulabilir ve bu dosyaların kendileri birer komut haline gelebilir. Bu yeni komutlar <filename>/bin</filename> dizinindeki sistem komutları gibi kullanıcılara ve gruplara ortak kullandıkları işlemleri otomatikleştiren özelleştirilebilir ortamlar sağlayabilir.
      </para><para>
Kabuklar etkileşimli ya da etkileşimsiz kullanılabilirler. Etkileşimli kipte, girdi klavyeden kabul edilirken, etkileşimsiz kipte bir dosyadan okunur.
      </para><para>
Bir kabuk, GNU komutlarını hem eşzamanlı hem de eşzamansız çalıştırabilir.
Kabuk, başka bir girdi kabul etmeden önce eşzamanlı komutların işlemlerini
bitirmesini bekleyebileceği gibi, eşzamansız komutlara paralel olarak
kabuğun ek komutları okumasını ve çalıştırmasını sağlayabilir.
Yönlendirme yapıları ile bu komutların giriş ve çıkışlarının kolayca
denetlenmesini mümkün kılar. Üstelik, komutların çalıştırıldığı
ortam üzerinde de denetimi sağlar.
      </para><para>
Kabuklar ayrıca ayrı araçlar üzerinden sağlanması sakıncalı olan ya da imkansız olan işlevselliği sağlamak üzere yerleşik komutların (yerleşikler - builtins) küçük bir demetini barındırır. Örneğin, <link linkend="bashref_bourne.shell.builtins-cd"><command>cd</command></link>, <link linkend="bashref_bourne.shell.builtins-break"><command>break</command></link>, <link linkend="bashref_bourne.shell.builtins-continue"><command>continue</command></link> ve <link linkend="bashref_bourne.shell.builtins-exec"><command>exec</command></link>) komutları doğrudan kabuğun kendisini etkilediğinden kabuk dışında gerçeklenemezler.
<link linkend="bashref_bash.history.builtins-history"><command>history</command></link>, <link linkend="bashref_bourne.shell.builtins-getopts"><command>getopts</command></link>, <link linkend="bashref_job.control.builtins-kill"><command>kill</command></link> veya <link linkend="bashref_bourne.shell.builtins-pwd"><command>pwd</command></link> yerleşikleri ise, diğerlerine karşın ayrı araçlar olarak gerçeklenebilirdi ama yerleşik komutlar olarak kullanılması daha faydalıdır. Tüm kabuk yerleşikleri kılavuzun ileri bölümlerinde anlatılmıştır.
      </para><para>
Komutlar icra edilirken kabuğun esas gücü (ve karmaşıklığı) kabuğun
gömülü programlama dilinden gelir. Diğer yüksek seviyeli programlama
dilleri gibi kabuk da değişkenler, akış denetim yapıları, işlevler içerir
ve ayrımlama yapabilir.
      </para><para>
Kabuğun özellikleri programlama dilini güçlendirmekten ziyade özellikle
etkileşimli kullanımı kuvvetlendirmeyi öne çıkarır. Bu etkileşim
özellikleri iş denetimi, komut satırı düzenlemesi, komut geçmişi ve
takma adlardır. Bu özelliklerin herbiri kılavuzun ileri bölümlerinde
açıklanmıştır.
    </para>
    </chapter>
  </part>
