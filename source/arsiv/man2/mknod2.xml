<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: mknod2.xml,v 1.1 2002/09/30 18:05:52 nilgun Exp $
     ******************************************************************** -->

<sect1 id="archive-man-2-mknod">
  <sect1info>
    <title>mknod(2)</title>
  </sect1info>
<div>
<h2>ADI</h2>
<p/>
mknod - dizin yaratir.
<h2>OZET</h2>

<pre>
<b>#include &lt;<a href="file:/usr/include/sys/types.h">sys/types.h</a>&gt;</b>
<b>#include &lt;<a href="file:/usr/include/sys/stat.h">sys/stat.h</a>&gt;</b>
<b>#include &lt;<a href="file:/usr/include/fcntl.h">fcntl.h</a>&gt;</b>
<b>#include &lt;<a href="file:/usr/include/unistd.h">unistd.h</a>&gt;</b>

<b>int mknod(const char *</b><em>pathname</em><b>, mode_t </b><em>mode</em><b>, dev_t </b><em>dev</em><b>);</b>
</pre>


<h2>TANIMLAMA</h2>
<p/>
<b>mknod</b>

Bir dosya sistemi dugumu yaratmaya calisir (file, device special file or
named pipe) (dosya, aygit ozel dosyasi veya adlandirilmis boru)
<em>pathname</em>, olarak adlandirilmis <em>mode</em> ve <em>dev</em>olarak<em>tanimlanmis.</em>

<p/>
<em>mode</em>

kullanilacak izinleri ve yaratilacak dugumun tipini tanimlar.
<p/>
Asagida listelenmis dosya tiplerinden biri ile yeni mod icin
(using bitwise OR) (  ?  ) verilen izinlerin bir kombinasyonu
olmali.
<p/>
Izinler
<b>umask</b>

prosesi tarafindan degistirilir.
genelde yaratilan dugumun izinleri:
<b>(mode &amp; ~umask)</b>dir.

<p/>
Dosya tipi asagidakilerden biri olmali:
<b>S_IFREG</b>, <b>S_IFCHR</b>, <b>S_IFBLK</b> ve <b>S_IFIFO</b>

sirasiyla,
normal bir dosyayi tanimlamak icin (bos olarak yaratilmis olan),
karakter ozel dosyasi, blok ozel dosyasi veya FIFO (named pipe),
(boru olarak isimlendirilmis),
veya normal bir dosya yaratmak icin  &quot; sifir&quot;.
<p/>
Eger dosya tipi
<b>S_IFCHR</b> veya <b>S_IFBLK</b>

ise
<em>dev</em>

yeni olarak yaratilmis olan aygitin buyuk ve kucuk numaralarini
tanimlar
ozel dosya; aksi halde taninmaz.
<p/>
Yeni yaratilan dugumun sahibi, o an prosesi calistiran kullanicidir.
Eger dugumun bulundugu dizinde grubun kimligi bit takimi seklinde
tanimlanmis ise veya dosya sistemi BSD grup isaretleri ile baglanmis
ise, grup sahipligi, yeni dizine bir ust dizinden miras kalir, aksi
takdirde o an prosesi calistiran grubun kimligi dugumun sahibi olacaktir.

<h2>GERIDONUS DEGERI</h2>
<p/>
<b>mknod</b>

basarida sifir olarak geri doner veya herhangi bir hatada -1 olarak
(bu durumda yerlestirilen,
<em>errno</em>

uygundur.)

<h2>HATALAR</h2>

<dl compact="compact">
<dt><b>EPERM</b></dt><dd>
<em>mode</em>
FIFO (named pipe)'dan farkli bir sey yaratmak istendiginde ve bunu
isteyen super kullanici degilse; ve eger
<em>pathname (yoladi)</em>
bulunan dosya sistemi istenilen dugumun tipini desteklemezse
(tanimazsa) hata verir.
<b>EINVAL</b> <em>mode</em>
normal dosyadan farkli bir sey yaratmak istendiginde, ozel aygit dosyasi
veya FIFO. <b>EEXIST</b> <em>pathname</em>
dizinde halen mevcuttur.<p/></dd>
<dt><b>EFAULT</b></dt><dd>
<em>pathname</em> disarida erisebileceginiz adres alanlarini belirtir.
<p/></dd>
<dt><b>EACCES</b></dt><dd>
Bir ust dizin prosese yazi yazma izni vermiyor veya
<em>pathname</em>(yoladi)
deki dizinlerden biri arama (calistirma) izni vermiyor.<p/></dd>
<dt><b>ENAMETOOLONG</b></dt><dd>
<em>pathname</em> yoladi cok uzun olunca.<p/></dd>
<dt><b>ENOENT</b></dt><dd>
<em>pathname (yoladindaki)</em>
deki dizinin bie elemani mevcut degildir veya sadece basit
sembolik bir baglantidir.<p/></dd>
<dt><b>ENOTDIR</b></dt><dd>
<em>pathname (yoladinda)</em>
da dizin olarak kullanilan bir eleman,
gercekte bir dizin degildir.<p/></dd>
<dt><b>ENOMEM</b></dt><dd>
Yetersiz cekirdek hafizasi mevcuttur.<p/></dd>
<dt><b>EROFS</b></dt><dd>
<em>pathname</em>
Dosya sistemindeki sadece okunabilen bir dosyaya basvurarak,
yazma erisimi talep eder.<p/></dd>
<dt><b>ELOOP</b></dt><dd>
<em>pathname  (yoladi)</em>
sembolik bir baglanti olan bir uzanti icerir. Ornegin,
bu uzantinin kullanici icin ozel bir anlami olabilir.<p/></dd>
<dt><b>ENOSPC  </b></dt><dd>
<em>pathname</em>
bulunan aygitlarin yeni dugum icin yerleri yoktur.
<p/></dd>
</dl>

<h2>HATALAR</h2>
<p/>
Linux'un bazi eski surumlerinde (ornegin, 0.99pl7) butun normal
dosya sistemleri, ayni dizin icerisinde ayni isimde iki dosyanin
yaratilmasina izin verir. Bu olay nadiren ve cok fazla yuklu
sistemlerde meydana gelir. Bu bug (  ?  ) in Linux 0.99pl8 in
Minix dosyasisteminin pre-release (  ?  ) ine yerlestirildigi
sanilmaktadir; ve diger dosya sistemlerinde ise kisaca dosyalardan
sonra yerlestirildigi umit edilmektedir.
<p/>
<b>mknod</b>

dizin ya da socket (  ?  ) dosyasi yaratmakta kullanilamaz,
super kullanici disindaki kullanicilarin normal dosya
yaratiminda da kullanilamaz.
<p/>
NFS (normal dosya sistemi) nin temelini olusturan protokolde
bircok infelicities (  ?  )  vardir.

<h2>BUNLARA DA BAKINIZ</h2>
<p/>
<b>read</b>(2),
<b>write</b>(2),
<b>fcntl</b>(2),
<b>close</b>(2),

<b>unlink</b>(2),
<b>open</b>(2),
<b>mkdir</b>(2),
<b>stat</b>(2),
<b>umask</b>(2),

<b>mount</b>(2),
<b>socket</b>(2),
<b>fopen</b>(3).

</div></sect1>
