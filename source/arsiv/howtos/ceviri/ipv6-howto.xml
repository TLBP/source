<?xml version="1.0" encoding="UTF-8"?>
<!-- *******************************************************************
       ceviri/ipv6-howto.xml
     ******************************************************************* -->
<!--DOCTYPE article SYSTEM "../../docbook/dtd/docbook.dtd" [
  <!ENTITY % belgeler.dtd SYSTEM "../../belgeler.dtd">
  %belgeler.dtd;
]-->
<article xml:id="ipv6-howto" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
 <info>
  <title>Linux IPv6 NASIL</title>
  <author>
   <personname>
    <firstname>Peter Bieringer</firstname>
   </personname>
  </author>
  <author role="translator">
   <personname>
    <firstname>Necdet Yücel</firstname>
   </personname>
  </author>
  <author role="translator">
   <personname>
    <firstname>Mesut Can Gürle</firstname>
   </personname>
  </author>
  <revhistory>
   <title>Bu çevirinin sürüm bilgileri:</title>
   <revision>
    <revnumber>1.4</revnumber>
    <date>Ekim 2008</date>
    <authorinitials>MCG</authorinitials>
    <revremark>Özgün belgenin 0.61 sürümüne güncellendi.</revremark>
   </revision>
   <revision>
    <revnumber>1.3</revnumber>
    <date>Kasım 2006</date>
    <authorinitials>NY</authorinitials>
    <revremark>Özgün belgenin 0.51 sürümüne güncellendi.</revremark>
   </revision>
   <revision>
    <revnumber>1.2</revnumber>
    <date>Ekim 2005</date>
    <authorinitials>NY</authorinitials>
    <revremark>Özgün belgenin 0.49 sürümüne güncellendi ve bazı düzeltmeler yapıldı.</revremark>
   </revision>
   <revision>
    <revnumber>1.1</revnumber>
    <date>Ağustos 2005</date>
    <authorinitials>NBB</authorinitials>
    <revremark>Nilgün Belma Bugüner tarafından docbook-xml biçeminde yeniden yazıldı.</revremark>
   </revision>
   <revision>
    <revnumber>1.0</revnumber>
    <date>Temmuz 2005</date>
    <authorinitials>NY</authorinitials>
    <revremark>İlk çeviri</revremark>
   </revision>
  </revhistory>
  <revhistory>
   <title>Özgün belgenin sürüm bilgileri:</title>
   <revision>
    <revnumber> 0.61</revnumber>
    <date>2007-10-06</date>
    <authorinitials>PB</authorinitials>
    <revremark>Ayrıntılı bilgi için <xref linkend="ipv6-howto-revision-history"/> bölümüne bakabilirsiniz</revremark>
   </revision>
  </revhistory>
  <abstract>
   <para>
    Linux IPv6 NASIL belgesinin amacı Linux işletim sisteminde IPv6
    hakkındaki temel ve ileri düzey sorulara yanıt vermektir. Bu belge Linux
    işletim sisteminde IPv6 uygulamalarının kurulum, yapılandırma ve
    kullanımı ile ilgili yeterli bilgiyi sağlamaktadır.
   </para>
  </abstract>
 </info>

 <sect1>
  <title>Yasal Açıklamalar</title>
  <para>
   Bu belgenin, <emphasis>Linux IPv6 NASIL</emphasis> çevirisinin 1.4
   sürümünün <emphasis role="bold">telif hakkı © 2005-2008 <emphasis>Necdet
   Yücel</emphasis> ve <emphasis>Mesut Can Gürle</emphasis>'ye</emphasis>,
   özgün İngilizce sürümünün  <emphasis role="bold">telif hakkı © 2001-2007
   <emphasis>Peter Bieringer</emphasis>'a</emphasis> aittir.
   &notice.gpl;
  </para>
  &notice.disc;
 </sect1>

 <sect1 xml:id="ipv6-howto-general">
  <title>Genel</title>
  <para>
   Bu belgenin çevirilerine
   <xref linkend="ipv6-howto-general-translations"/> bölümünden
   ulaşabilirsiniz.
  </para>
  <sect2 xml:id="ipv6-howto-general-author">
   <title>Yazar Hakkında</title>
   <variablelist>
    <varlistentry>
     <term>Yazar'ın Internet/IPv6 geçmişi</term>
     <listitem>
      <para>
       1993: Konsol tabanlı e-posta ve haber okuyucuları ile Internet'le
       temasa başladım (örneğin; <link
       xlink:href="http://groups.google.com/">groups.google.com</link>'daki
       "e91abier" bendim).
      </para>
      <para>
       1996: Linux işletim sistemi ile bir seminer de içeren bir IPv6 dersi hazırlamam istendi.
      </para>
      <para>
       1997: Linux işletim sisteminde IPv6 kurulum ve kullanımını anlatan
       <link xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6 &amp;
       Linux - HowTo</link> adındaki belgeyi hazırlamaya başladım (daha
       fazla bilgi için <link
       xlink:href="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-0.html#history">IPv6
       &amp; Linux - HowTo/History</link> adresine bakabilirsiniz).
      </para>
      <para>
       2001: Linux IPv6 NASIL belgesini yazmaya başladım.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>İletişim</term>
     <listitem>
      <para>
       Yazara <link xlink:href="http://www.bieringer.de/pb/">kişisel
        sayfasından</link> ulaşılabilir.
      </para>
      <para>
       Kendisi halen Almanya'nın Bavyera eyaletinin Münih kentinde
       yaşamaktadır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="ipv6-howto-general-category">
   <title>Sınıflandırma</title>
   <para>
    Bu NASIL belgesi "Ağ/Protokoller" başlığı altında listelenmelidir.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-general-history">
  <title>Sürüm, Tarihçe ve Yapılacaklar</title>
  <sect2>
   <title>Sürüm</title>
   <para>
    Belgenin geçerli sürümü başlangıçta yazmaktadır.
   </para>
   <para>
    Ulaşılabilir diğer sürümler ve çeviriler için <link
    xlink:href="http://www.bieringer.de/linux/IPv6/"/> adresine
    bakabilirsiniz.
   </para>
  </sect2>
  <sect2>
   <title>Tarihçe</title>
   <para>2001-11-30: NASIL belgesinin tasarımı başladı.</para>
   <para>2002-01-02: İçeriğin çoğu tamamlandı ve birinci bölümün halka açık
    ilk sürümü duyuruldu (sürüm 0.10).</para>
   <para>2002-01-14: Tamamlanan kısım arttı, bazı düzeltmeler yapıldı ve
    tüm belgenin ilk duyurusu yapıldı (sürüm 0.14).</para>
   <para>2002-08-16: Lehçe çeviri başladı.</para>
   <para>2002-10-31: Çince çeviri tamamlandı</para>
   <para>2002-11-10: Almanca çeviri başladı</para>
   <para>2003-02-10: Almanca çeviri tamamlandı</para>
   <para>2003-04-09: Fransızca çeviri başladı</para>
   <para>2003-05-09: Fransızca çeviri tamamlandı</para>
   <para>2003-08-15: İspanyolca çeviri başladı</para>
   <para>2003-10-16: İtalyanca çeviri başladı</para>
   <para>2004-03-12: İtalyanca çeviri tamamlandı</para>
   <para>2004-06-18: Yunanca çeviri başladı</para>
   <para>2004-08-29: İspanyolca çeviri durdu</para>
   <para>2005-06-29: Türkçe çeviri başladı</para>
   <para>2005-07-25: Türkçe çeviri tamamlandı</para>
   <para>2007-03-28: Brezilya Portekizcesi çevirisi başladı</para>
   <para>Ayrıntılı Tarihçe: Ayrıntılılı tarihçe için <link
    xlink:href="http://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/revision-history.html">asıl
    belgeye</link> bakabilirsiniz.
   </para>
  </sect2>
  <sect2>
   <title>Yapılacaklar</title>
   <para>Eksik içerik tamamlanacak.</para>
   <para>İmla denetimi tamamlanacak.</para>
  </sect2>
  <sect2 xml:id="ipv6-howto-general-translations">
   <title>Çeviriler</title>
   <para>
    Bu bölümde yazar çevirmenlerden isteklerini (hangi bölümlerin
    çevirilmeyeceğini, vb.) anlatıyor. Yazarın metnine <link
    xlink:href="http://www.tldp.org/HOWTO/html_single/Linux+IPv6-HOWTO/#GENERAL-TRANSLATIONS">
    adresinden</link> ulaşılabilir.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-general-technical">
  <title>Teknik Bilgiler</title>
  <sect2 xml:id="ipv6-howto-general-original-source">
   <title>Bu NASIL belgesinin özgün kaynağı</title>
   <para>
    Bu NASIL belgesi Fedora Core 7 üzerinde SGML şablonları kullanılarak
    LyX sürüm 1.5.1 ile yazılmaktadır. Kaynak dosyaya <link
    xlink:href="https://github.com/tLDP/Linux-IPv6"/> adresinden
    ulaşılabilir.
   </para>
   <variablelist>
    <varlistentry>
     <term>Komut satırı uzunluğunu ayarlamak</term>
     <listitem>
      <para>
       Komut satırlarının uzunlukları ayarlamak için kendi yazdığım
       "lyxcodelinewrapper.pl" aracını kullandım. Kendi kullanımınız için
       <link xlink:href="https://github.com/tLDP/Linux-IPv6/blob/master/lyxcodelinewrapper.pl">buradan</link> alabilirsiniz.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>SGML üretimi</term>
     <listitem>
      <para>
       SGML üretimi LyX'in dışa aktarma işlevi ile yapıldı.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2>
   <title>Bu NASIL belgesinin HMTL sürümüne çevrimiçi bağlantılar</title>
   <variablelist>
    <varlistentry>
     <term>Ana giriş sayfası</term>
     <listitem>
      <para>
       Genellikle bağlantıların ana giriş sayfasına verilmesi
       önerilmektedir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Adanmış sayfalar</term>
     <listitem>
      <para>
       HTML sayfaları SGML dosyasınından oluşturulduklarından isimleri
       rasgeledir. Bununla birlikte, LyX tarafından oluşturulanların
       isimleri statiktir. Bu etiketler bağlantı olarak kullanışlı
       olduklarından gelecekte de değiştirilmemelidirler.
      </para>
      <para>
       Eğer bir etiketi unutmuşsam haber verin, ekleyeyim.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-general-preface">
  <title>Giriş</title>
  <para>Önce bazı bilgiler:</para>
  <sect2 xml:id="ipv6-howto-preface-question">
   <title>Linux ve IPv6 ile ilgili kaç tane NASIL belgesi var?</title>
   <para>
    Bu belge ile birlikte (3) NASIL belgesi mevcut.
    Çok fazla ise kusura bakmayın ;-)
   </para>
   <variablelist>
    <varlistentry>
     <term>Linux IPv6 SSS/NASIL (eski)</term>
     <listitem>
      <para>
       IPv6 ile ilgili ilk belge, Eric Osborne tarafından yazılan <link
       xlink:href="http://www.linuxhq.com/IPv6/">Linux IPv6
       SSS/NASIL</link> isimli belgedir (sadece tarihi bir belge olarak
       kullanılmalıdır). Son sürümü 14 Temmuz 1997 tarihinde çıkan
       3.2.1 dir.
      </para>
      <para>
       Yardım Çağrısı: Bu NASIL belgesinin başlangıç tarihini bilenlerden bana e-posta ile göndermelerini rica ediyorum.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv6 &amp; Linux - NASIL (güncel)</term>
     <listitem>
      <para>
       Tamamen HTML ile hazırlanmış <link
       xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux -
       NASIL</link> isimli benim tarafımdan hazırlanmış (Peter Bieringer)
       ikinci bir sürüm daha mevcuttur. Nisan 1997'de başladığım bu
       belgenin ilk ingilizce sürümü Haziran 1997'de yayınlandı. Şu an
       okumakta olduğunuz belgeyi hazırladığım için revaçta olmasa da
       güncelllemeye devam edeceğim.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Linux IPv6 NASIL (bu belge)</term>
     <listitem>
      <para>
       <link xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6 &amp;
       Linux - NASIL</link> belgesi tamamen HTML ile yazıldığından <link
       xlink:href="http://www.tldp.org/">The Linux Documentation Project
       (TLDP)</link> ile uyumlu değildi. 2001 Aralık ayının sonunda <link
       xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux -
       NASIL</link> belgesini SGML ile yeniden yazmam için bir istek aldım.
       Bu NASIL belgesinin süreksizliği (<link
       xlink:href="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-0.html#history">Future
       of IPv6 &amp; Linux - HowTo</link>) ve IPv6'nın giderek daha da
       standart hale gelmesiyle temel ve ileri konuları içeren ve gelecek
       bir kaç yılda önemini koruyacak yeni bir belge yazmaya karar verdim.
       Daha dinamik ve bazı ileri konular hala ikinci NASIL belgesinde
       bulunabilir (<link
       xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux -
       NASIL</link>).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-general-glossary">
  <title>Terimler, Sözlük ve Kısaltmalar</title>
  <sect2>
   <title>Ağ ile ilgili olanlar</title>
   <variablelist>
    <varlistentry>
     <term>Alt ağ maskesi</term>
     <listitem>
      <para>
       IP ağları yerel ağları uzak olanlardan ayırmak için bit maskeleri
       kullanırlar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Arabirim/Bağdaştırıcı</term>
     <listitem>
      <para>
       Çoğunlukla "aygıt" ile aynı anlamda kullanılmıştır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Aygıt</term>
     <listitem>
      <para>
       Bu belgede, ağ bağlantısını sağlayan donanım.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Bağlantı (Link)</term>
     <listitem>
      <para>
       Bir bağlantı; ikinci katmandan paket aktarımını sağlayan bir
       ortamdır, örneğin Ethernet, Çevirmeli Ağ, PPP, SLIP, ATM, ISDN,
       Frame Relay,...
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Bayt</term>
     <listitem>
      <para>
       Genellikle 8 bit'ten oluşur (ama bu bir zorunluluk değildir,
       daha eski bilgisayar sistemlerini düşünün)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Bit</term>
     <listitem>
      <para>
       En küçük saklama birimi, doğru için (1) yanlış için (0)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Düğüm (Node)</term>
     <listitem>
      <para>
       Düğüm bir istemci ya da yönlendiricidir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IP Başlığı</term>
     <listitem>
      <para>
       IP paketinin başlığı (her ağ paketinin katmanına bağlı olan bir
       başlığı vardır)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>İki evli konak (Dual homed host)</term>
     <listitem>
      <para>
       İki evli bir konak iki farklı arabirim ile iki ağa bağlı ama bu
       arabirimler arasında paket yönlendirmesi yapmayan bir düğümdür.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Konak (Host)</term>
     <listitem>
      <para>
       Genellikle bağlantıda tek evli bir konak için kullanıldı. Normalde
       sadece bir etkin arabiriminin olması gerekir (ethernet veya PPP).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Oktet (Octet)</term>
     <listitem>
      <para>
       Sekiz gerçek bit'in birleşimidir, bayta benzer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Onaltılık Taban</term>
     <listitem>
      <para>
       Onaltılık sayı sistemi olarak da bilinen bu sistem genellikle daha
       düşük ve yüksek seviyeli yazılımlama dillerinde kullanılır. 0-9
       arasındaki rakamlar ve A-F arasındaki harfler (büyük-küçük harf
       ayrımı yoktur) ile gösterilir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Onluk Taban</term>
     <listitem>
      <para>
       En çok bilinen ondalık sayı sistemidir, 0-9 arasındaki rakamlar ile
       gösterilir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Port</term>
     <listitem>
      <para>
       TCP/UDP dağıtıcısının (4. katman) daha üst katmanlara bilgi aktarımı
       yapabilmesi için gerekli bilgidir
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Protokol</term>
     <listitem>
      <para>
       Her ağ katmanı daha üst katmanlara bilgi aktarımında hayatı
       kolaylaştırmak için çoğunlukla bir protokol alanı içerir. Örneğin
       ikinci katmanda MAC, üçüncü katmanda IP.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Seksenbeşlik Taban</term>
     <listitem>
      <para>
       85 farklı rakam ve karakter kullanılarak daha kısa diziler
       oluşturabilmesine rağmen yaygın olarak kullanılmamaktadır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Soket</term>
     <listitem>
      <para>
       Bir IP soketi kaynak ve hedefin IP adresleri ve portlarından oluşur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Tünel</term>
     <listitem>
      <para>
       Tünel başka bir protokolün verisini taşıyan paketler üzerinden
       noktadan-noktaya bağlantıdır, örneğin IPv6-in-IPv4 tüneli.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Yığıt (Stack)</term>
     <listitem>
      <para>
       Ağ ile ilgili katmanlar topluluğudur
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Yönlendirici</term>
     <listitem>
      <para>
       Bir yönlendirici iki veya daha fazla ağı fiziksel ya da mantıksal
       olarak bağlayan, arabirimleri arasında paket yönlendirmesi yapabilen
       bir düğümdür.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2>
   <title>Kısaltmalar</title>
   <para>
    <variablelist>
     <varlistentry>
      <term>ACL</term>
      <listitem>
       <para>
        Erişimi Denetleme Listesi (Access Control List)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>API</term>
      <listitem>
       <para>
        Uygulama Geliştirme Arayüzü (Application Programming Interface)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ASIC</term>
      <listitem>
       <para>
        Uygulamaya Özgü Tümleşik Devre (Application Specified Integrated
        Circuit)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>BSD</term>
      <listitem>
       <para>
        Berkeley Yazılım Dağıtımı (Berkeley Software Distribution)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>CAN-Bus</term>
      <listitem>
       <para>
        Denetleyici Alanı Ağ Veriyolu (Controller Area Network Bus) -
        fiziksel veriyolu sistemi
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ISP</term>
      <listitem>
       <para>
        İnternet Hizmet Sağlayıcı (Internet Service Provider)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>KAME</term>
      <listitem>
       <para>
        Proje ana sayfası:
        <link xlink:href="http://www.kame.net/">www.kame.net</link>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>LIR</term>
      <listitem>
       <para>
        Yerel İnternet Sicili (Local Internet Registry)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>NIC</term>
      <listitem>
       <para>
        Ağ Arabirim Kartı (Network Interface Card)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>RFC</term>
      <listitem>
       <para>
        Yorumlar için Rica (Request For Comments) - Internet hakkında
        teknik ve örgütsel notlar kümesi
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>USAGI</term>
      <listitem>
       <para>
        UniverSAl playGround for Ipv6 Project - Linux sistemi için IPv6
        protokol yığınının üretim kalitesinin arttırılması için çalışır.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>
  <sect2>
   <title>Belge ile ilgili olanlar</title>
   <variablelist>
    <varlistentry>
     <term>Uzun kod satırı bağlama işareti</term>
     <listitem>
      <para>
       "¬" özel karakteri bir kod satırının, PDF ve PS dosyalarında daha
       iyi görünmesini sağlamak üzere bölündüğünü göstermek için
       kullanılmıştır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Bağımsız değişkenler</term>
     <listitem>
      <para>
       Genel örneklerde aşağıdaki gibi ifadeler bulacaksınız:
      </para>
<literallayout><emphasis>&lt;ipadresim&gt;</emphasis></literallayout>
      <para>
       Sizin bunu komut satırından ya da betiklerinizden uygulamanız için
       uygun içerikle değiştirmeniz  gerekecektir. Sonuç örneğin şöyle
       olmalıdır:
      </para>
<screen>1.2.3.4</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Kabuk Komutları</term>
     <listitem>
      <para>
       Root olmayan kullanıcıların çalıştırabilecekleri komutlar <prompt>$</prompt> ile başlamaktadır, örneğin:
      </para>
<screen>$ <command>whoami</command></screen>
      <para>
       Root tarafından çalıştırılacak komutlar ise <prompt>#</prompt> ile
       başlamaktadır, örneğin:
      </para>
<screen># <command>whoami</command></screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-general-requirements">
  <title>Bu NASIL belgesini kullanmak için gerekenler</title>
  <sect2>
   <title>Kişisel gereklilikler</title>
   <variablelist>
    <varlistentry>
     <term>Unix araçları tecrübesi</term>
     <listitem>
      <para>
       Önemli Unix araçları ile tanışık olmalısınız, örneğin
       <command>grep, awk, find</command>, ...  komutları ve onların sık
       kullanılan komut satırı seçeneklerini biliyor olmalısınız.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ağ kurma tecrübesi</term>
     <listitem>
      <para>
       Katmanlar, protokoller, adresler, kablolar ve benzer şeyleri
       hakkında bilginiz olmalı. Eğer bu konularda yeni iseniz <link
       xlink:href="http://www.linuxports.com/howto/intro_to_networking/"/>
       başlamak için güzel bir belgedir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv4 yapılandırma tecrübesi</term>
     <listitem>
      <para>
       Neler olup bittiğini anlayabilmek için mutlaka IPv4 yapılandırma
       tecrübesine sahip olmalısınız.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Alan Adı Sistemi (DNS) tecrübesi</term>
     <listitem>
      <para>
       DNS'nin neler sağladığını ve nasıl kullanıldığını bilmelisiniz.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Ağda hata ayıklama (debugging) stratejileri tecrübesi</term>
     <listitem>
      <para>
       En azından <command>tcpdump</command> kullanımını ve neler
       gösterdiğini biliyor olmalısınız. Aksi halde ağda hata ayıklamak
       sizin için çok zor olabilir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2>
   <title>Linux işletim sistemi uyumlu donanım bilgisi</title>
   <para>
    Elbette gerçek donanım tecrübeniz olmalı, sadece bu belgeyi okumak her şeye yetmeyecektir ;-7)
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-basics">
  <title>Temel Bilgiler</title>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-basics-whatisIPv6">
   <title>IPv6 nedir?</title>
   <para>
    IPv6, IP olarak da bilinen IPv4'ün yerini alacak olan yeni bir üçüncü
    katman protolüdür (bakınız: <link xlink:href="http://www.linuxports.com/howto/intro_to_networking/c4412.htm#PAGE103HTML"
    >linuxports/howto/intro_to_networking/ISO - OSI Model</link>). IPv4'ün
    tasarlanmasından geçen bunca yıldan sonra (<link
    xlink:href="http://www.faqs.org/rfcs/rfc760.html">RFC 760 / Internet
    Protocol</link> Ocak 1980 tarihlidir) daha fazla adrese ve daha gelişmiş
    yeteneklere ihtiyaç duyulmaktadır. Son RFC <link
    xlink:href="http://www.faqs.org/rfcs/rfc2460.html">RFC 2460</link>'dır
    (Internet Protocol Version 6 Specification). IPv6'nın başlıca
    değişiklikleri, başlığın yeniden tasarlanmış olması ve adres
    büyüklüğünün 32 bitten 128 bite yükseltilmesidir. Üçüncü katman adres
    tabanlı paket yönlendirmesini kullanarak uçtan-uca paket
    ulaştırılmasından sorumludur. Bu yüzden IPv4 adresini içerdiği gibi
    kaynağın ve hedefin IPv6 adresini de içermelidir.
   </para>
   <para>
    IPv6 tarihçesi ile ilgili daha detaylı bilgi için IPv6 ile ilgili eski
    RFC'lere bakılabilir. Örneğin: <link
    xlink:href="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6
    Pilot / References</link>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-basics-history-ipv6-linux">
  <title>IPv6'nın Linux geçmişi</title>
  <para>
   1992, 1993 ve 1994 yıllarını kapsayan bir kaynak: <link
   xlink:href="http://www.laynetworks.com/IPv6.htm#CH3">IPv6 or IPng
   (IP next generation)</link> .
  </para>
  <para>
   Yapılacaklar: daha iyi zaman çizelgesi, daha çok içerik...
  </para>
  <sect2>
   <title>Başlangıç</title>
   <para>
    Linux çekirdeğine IPv6 ile ilgili ilk ağ kodu Kasım 1996'da Pedro Roque
    tarafından eklenmiştir. BSD API'sini kullanan kod:
   </para>
<screen>diff -u --recursive --new-file v2.1.7/linux/include/linux/in6.h linux/include/linux/in6.h
--- v2.1.7/linux/include/linux/in6.h Thu Jan 1 02:00:00 1970
+++ linux/include/linux/in6.h Sun Nov 3 11:04:42 1996
@@ -0,0 +1,99 @@
+/*
+ * Types and definitions for AF_INET6
+ * Linux INET6 implementation
+ * + * Authors:
+ * Pedro Roque &lt;******&gt;
+ *
+ * Source:
+ * IPv6 Program Interfaces for BSD Systems
+ * &lt;draft-ietf-ipngwg-bsd-api-05.txt&gt;
</screen>
   <para>
    Yukarıdaki satırlar 2.1.8 çekirdeğinin yamasından kopyalanmıştır.
    (e-posta adresi gölgelenmiştir).
   </para>
  </sect2>
  <sect2>
   <title>Ara dönem</title>
   <para>
    Geliştiricilerin azlığı yüzünden çekirdeğin IPv6 gelişimi yeni yazılan
    RFC'leri takip edemedi. Ekim 2000'de Japonya'da Linux'un IPv6
    desteğinin eksik ve eski yanlarını geliştirmek için <link
    xlink:href="http://www.linux-ipv6.org/">USAGI</link> isimli bir proje
    başlatıldı. Bunu FreeBSD'nin IPv6 desteğini gerçekleştiren <link
    xlink:href="http://www.kame.net/">KAME project</link> projesi takip
    etti. Zaman zaman orjinal (vanilya) Linux çekirdeği kodlarına karşı
    sürümler çıkartmaktadırlar.
   </para>
   <para>
    <link xlink:href="http://www.linux-ipv6.org/">USAGI</link> yaması çok
    büyük olduğundan 2.5.x serisi çekirdek geliştirilmeye başlanmadan önce
    Linux'un ağ desteğini sağlayanlar tarafından 2.4.x serisi çekirdeklerde
    kullanılamıyordu.
   </para>
   <para>
    2.5.x serisi çekirdeğin geliştirilmesi sürecinde <link
    xlink:href="http://www.linux-ipv6.org/">USAGI</link> kendi güncel
    eklentilerini yerleştirmeye çalışmıştır.
   </para>
   <para>
    Bunların hepsi olmasa da bazıları 2.4.x serisine port edildi ve bu
    yüzden birçok eklentileri eksik kaldığından bazı (birçok) genişlemeleri
    kaçırmakta ve güncel RFC'lere uygun olamamaktadır (bakınız <link
    xlink:href="http://www.ietf.org/html.charters/ipv6-charter.html">IP
    Version 6 Working Group (ipv6) Charter</link>). Bu da diğer işletim
    sistemleri ile ortak çalışmada bazı sorunlara yol açabilmektedir.
  </para>
  </sect2>
  <sect2>
   <title>Güncel</title>
   <para>
    <link xlink:href="http://www.linux-ipv6.org/">USAGI</link> ve başkaları
    tarafından uzun süredir geliştirilen yamalar 2.6.x serisi çekirdekte
    kullanılmaktadır.
   </para>
  </sect2>
  <sect2>
   <title>Gelecek</title>
   <para>
    <link xlink:href="http://www.linux-ipv6.org/">USAGI</link> ve diğerleri
    gezicilik (mobility) gibi daha yeni özellikleri gerçeklemek için
    çalışmaktadırlar. Zaman zaman yeni eklentiler yayınlanmakta ve
    çekirdeğe eklenmektedir.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-basics-looklike">
  <title>IPv6 adresi neye benzer?</title>
  <para>
   Önceden söylediğimiz gibi IPv6 adresleri 128 bit uzunluğundadır. Bu bit
   sayısı ile 39 basamağa kadar ulaşabilen çok büyük ondalık sayılar
   üretilmektedir.
  </para>
<literallayout>2^128-1: 340282366920938463463374607431768211455
</literallayout>
  <para>
   Böyle sayılar gerçekte hatırlanabilir adresler değildirler. Gerçekte
   IPv6 adres tasarımı bitler üzerinde yapılmıştır (IPv4 de öyledir ama
   genellikle farkedilmez). Bu yüzden böyle büyük sayıların yazımı için
   onaltılık taban daha uygundur. Onaltılık gösterimde 4 bit ("nibble"
   olarak da bilinir) bir basamakla ya da 0-9 ve a-f (10-15)
   karakterlerinden biriyle temsil edilir. Bu gösterim şekli IPv6
   adreslerinin uzunluğunu 32 karaktere düşürür:
  </para>
<literallayout>2^128-1: 0xffffffffffffffffffffffffffffffff
</literallayout>
  <para>
   Bu gösterim hala çok kullanışlı olmadığından (karışıklık hala olasıdır)
   IPv6 tasarımcıları 16 bitlik bloklardan oluşan onaltılık bir düzeni
   tercih etmişler ve yazılımlama dillerinde onaltılık değerlerin
   kullanıldığını gösteren "0x" ifadesini kaldırmışlardır.
  </para>
<literallayout>2^128-1: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
</literallayout>
  <para>
   Kullanılabilir bir adres (adres türlerinden daha sonra bahsedeceğiz)
   örneği şöyledir:
  </para>
<literallayout>2001:0db8:0100:f101:0210:a4ff:fee3:9566
</literallayout>
  <para>
   Basitlik için 16 bit'lik blokların başındaki sıfırlar ihmal edilebilir:
  </para>
<literallayout>2001:0db8:0100:f101:0210:a4ff:fee3:9566  -&gt; 2001:db8:100:f101:210:a4ff:fee3:9566
</literallayout>
  <para>
   Tamamen sıfırlardan oluşan bir 16 bit'lik blok yerine
   "<literal>::</literal>" kullanılabilir. Fakat bir seferde birden fazla
   kullanımı gösterimin özelliğini bozar.
 </para>
<literallayout>2001:0db8:100:f101:0:0:0:1  -&gt;  2001:db8:100:f101::1
</literallayout>
  <para>IPv6 ile yapılabilecek en büyük kısaltma şöyledir:</para>
<literallayout>0000:0000:0000:0000:0000:0000:0000:0001 -&gt; ::1
</literallayout>
  <para>
   Genel kullanımı olmayan bir diğer gösterim de 1 Nisan 1996 da <link
   xlink:href="http://www.faqs.org/rfcs/rfc1924.html">RFC 1924 / A Compact
   Representation of IPv6 Addresses</link>'te yayınlanan
   <literal>compact</literal> isimli gösterimdir. Belki de bir 1 nisan
   şakasıdır ama bir örneği şöyledir:
  </para>
<screen># <command>ipv6calc --addr_to_base85 2001:0db8:0100:f101:0210:a4ff:fee3:9566 </command>
9R}vSQZ1W=9A_Q74Lz&amp;R
</screen>
  <note>
   <title>Bilgi</title>
   <para>
    <command>ipv6calc</command>, IPv6 adres düzenini hesaplayabilen ve
    dönüştürebilen bir programdır ve şu adreslerden edinilebilir: <link
    xlink:href="http://www.deepspace6.net/projects/ipv6calc.html">ipv6calc
    ana sayfası</link> (<link
    xlink:href="http://mirrors.bieringer.de/www.deepspace6.net/projects/ipv6calc.html">Yansı</link>)
   </para>
  </note>
 </sect1>
 <sect1 xml:id="ipv6-howto-basics-sss-basic">
  <title>SSS (Temel düzey)</title>
  <qandaset defaultlabel="number">
   <qandaentry>
    <question>
     <para>Neden IPv4'ün takipçisinin adı IPv5 değil de IPv6?</para>
    </question>
    <answer>
     <para>
      Herhangi bir IP başlığının ilk dört bit'i protokol sürümüne
      ayrılmıştır. Teorik olarak 0 ile 15 arasında bir protokol numarası
      mümkündür:
     </para>
     <para><literal>4</literal>: halen IPv4 için kullanılmaktadır.</para>
     <para>
      <literal>5</literal>: Stream Protocol için saklanmaktadır (STP, <link
      xlink:href="http://www.faqs.org/rfcs/rfc1819.html">RFC 1819 /
      Internet Stream Protocol Version 2</link>) (aslında asla genel
      kullanıma açılmamıştır).
     </para>
     <para>
      Sıradaki kullanılmayan sayı 6 olduğundan IPv6 doğmuştur!
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>IPv6 adreslemede neden bu kadar çok bit kullanıldı?</para>
    </question>
    <answer>
     <para>
      IPv4'ün tasarımı aşamasında 32 bit'in dünyaya yeteceği düşünülüyordu.
      Aslında 32 bit bugüne kadar yeterli olduğu olduğu gibi bir kaç yıl
      daha da kullanılabilir. Fakat 32 bit, gelecekteki her ağ cihazını
      adreslemek için yeterli değildir. Cep telefonlarını, otomobilleri,
      tost makinelerini, buzdolaplarını ve diğerlerini düşünün...
     </para>
     <para>
      Bu nedenle tasarımcılar IPv4'ten 4 kat daha uzun, 2^96 kat daha büyük
      olan 128 bit'i seçtiler.
     </para>
     <para>
      Aslında kullanıldığında büyüklüğü göründüğünden daha küçüktür. Bu,
      yukarıda tanımlanan adres şemasından kaynaklanmaktadır; 64 bit ağ
      arabirimlerini tanımlamak için kullanılırken, ikinci 64 bit
      yönlendirme için kullanılmaktadır. Güncel kümeleme (/48, /32, ...)
      seviyeleri kabul edilerek "yer kazanmak" da mümkündür ama bunun yakın
      gelecekte olması beklenmemektedir.
     </para>
     <para>
      Daha fazla bilgi için <link
      xlink:href="http://www.faqs.org/rfcs/rfc1715.html">RFC 1715 / The H
      Ratio for Address Assignment Efficiency</link> ve <link
      xlink:href="http://www.faqs.org/rfcs/rfc3194.html">RFC 3194 / The
      Host-Density Ratio for Address Assignment Efficiency</link>
      belgelerine bakılabilir.
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>IPv6 adreslemede neden bu kadar az bit kullanıldı?</para>
    </question>
    <answer>
     <para>
      İnternette IPv8 ve IPv16 hakkında düşünen insanlar olsa da
      geliştirilmeleri kabul edilebilirlikten hayli uzaktır. Başlık bilgisi
      ve veri aktarımı gözönüne alındığında 128 bit (belki de) en iyi
      seçimdir. En küçük Maksimum Aktarım Birimini (MTU) düşünelim. Bu
      IPv4'te 576 oktet, IPv6'da 1280 oktet'tir. Başlık bilgisi ise IPv4
      için 20 oktet (IPv4 seçeneklerine göre 60'a kadar çıkabilir) iken
      IPv6'da sabit 48 oktet'tir. Bu değerler IPv4'de MTU'nun % 3.4'üne
      IPv6'da ise % 3.8'ine karşılık geldiğinden yaklaşık aynı kabul
      edilebilir. Daha çok bit daha büyük başlık bilgisi anlamına
      geleceğinden daha fazla alan kaplayacaktır. Şimdi de normal
      bağlantılardaki en çok MTU'yu (örneği etherneti) düşünelim: 1500
      oktet. Sonuç olarak; iletilen verinin % 10 ya da % 20'sinin adres
      bilgisi olması uygun bir tasarım olmayacaktır.
     </para>
    </answer>
   </qandaentry>
  </qandaset>
 </sect1>

 <sect1 xml:id="ipv6-howto-addresstypes">
  <title>Adres Türleri</title>
  <para>
   IPv4'te olduğu gibi IPv6 adresleri de alt ağ maskeleri kullanarak ağ ve
   konak kısmı olarak ayrıştırılabilirler.
  </para>
  <para>
   Bir arabirime farklı amaçlar için (alias, multi-cast) birden çok IP
   adresinin verilebilmesinin gerektiğini IPv4 tecrübesinden biliyoruz.
   Gelecekte de genişletilebilir kalmak için IPv6 daha ileri giderek bir
   arabirime birden çok IPv6 adresinin verilmesine olanak sağlamaktadır.
   Adres sayısının RFC ile tanımlanmış bir sınırlaması olmasa da (DoS
   ataklarını önlemek için) IPv6 uygulamalarının getirdiği bir sınırı
   vardır.
  </para>
  <para>
   IPv6, çok fazla bit kullanmanın avantajıyla adres tiplerini bazı özel
   bitleri kullanarak tanımlar. Asla IPv4'ün A, B ce C sınıfı adreslerine
   benzemeyecektir.
  </para>
  <para>
   Ayrıca, otomatik ayarlamayı kolaylaştırmak için adresler 64 bit'lik ağ
   bölümü ve 64 bit'lik istemci bölümü olarak ayrılmıştır.
  </para>
 </sect1>
 <sect1 xml:id="ipv6-howto-addresstypes-wo-prefix">
  <title>Özel bir öneki olmayan adresler</title>
  <sect2>
   <title>Localhost adresi</title>
   <para>
    IPv4'te 127.0.0.1 olan geridönüş arabiriminin adresi IPv6'da şöyledir:
   </para>
<literallayout>0000:0000:0000:0000:0000:0000:0000:0001</literallayout>
    <para>ya da kısaca:</para>
<literallayout>::1</literallayout>
   <para>
    Kaynağı ya da hedefi bu adres olan paketler göndericiyi terkedemezler.
   </para>
  </sect2>
  <sect2>
   <title>Belirsiz Adres</title>
   <para>
    IPv4'ün "any" ya da "0.0.0.0" adreslerine karşılık gelen IPv6 adresi
    şöyledir:
   </para>
<literallayout>0000:0000:0000:0000:0000:0000:0000:0000</literallayout>
   <para>ya da:</para>
<literallayout>::</literallayout>
   <para>
    Bu adresler çoğunlukla soket bağlamada ya da yönlendirme tablolarında
    kullanılırlar.
   </para>
   <note>
    <para>
     Belirsiz adresler hedef adresi olarak kullanılamazlar.
    </para>
   </note>
  </sect2>
  <sect2>
   <title>Gömülü olarak IPv4 içeren IPv6 adresleri</title>
   <para>
    IPv4 adreslerini içeren iki tür adres vardır.
   </para>
   <variablelist>
    <varlistentry>
     <term>IPv4 eşlemli IPv6 adresleri</term>
     <listitem>
      <para>
       IPv6 eşlemli IPv4 adresleri bazen IPv6 tarafından etkinleştirilmiş
       artalan süreçleri tarafından sadece IPv4 adreslerini bağlamakta
       kullanılır.
      </para>
      <para>
       Bu adresler 96 karakter uzunluğunda özel bir önek ile tanımlanırlar (<literal>a.b.c.d</literal> IPv4 adresidir):
      </para>
<literallayout>0:0:0:0:0:ffff:a.b.c.d/96</literallayout>
      <para>ya da kısaca:</para>
<literallayout>::ffff:a.b.c.d/96</literallayout>
      <para>
       Örneğin <literal>1.2.3.4</literal> IPv4 adresi şu hali alır:
      </para>
<literallayout>::ffff:1.2.3.4</literallayout>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv4 uyumlu IPv6 adresleri</term>
     <listitem>
      <para>
       Otomatik tünelleme için kullanılmaktadır (<link
       xlink:href="http://www.faqs.org/rfcs/rfc2893.html">RFC 2893 /
       Transition Mechanisms for IPv6 Hosts and Routers</link>), bu <link
       linkend="ipv6-howto-tunelling-6to4">6'ya 4 tünelleme</link>nin
       yerini almıştır.
      </para>
<literallayout>0:0:0:0:0:0:a.b.c.d/96</literallayout>
      <para>ya da kısaca</para>
<literallayout>::a.b.c.d/96</literallayout>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-addresstypes-w-prefix">
  <title>Adresin ağ parçası; önek diye de bilinir</title>
  <para>
   Tasarımcılar bazı adres türlerini tanımlayıp geri kalan büyük alanı
   gelecekte öngöremedikleri ihtiyaçlarda kullanılması için boş
   bırakmışlardır. <link
   xlink:href="http://www.faqs.org/rfcs/rfc2373.html">RFC 2373
   [July 1998] / IP Version 6 Addressing Architecture</link> güncel
   adresleme şemasını tanımlasa da yeni bir taslak da mevcuttur: <link
   xlink:href="ftp://ftp.ietf.org/internet-drafts/">draft-ietf-ipngwg-addr-arch-*.txt</link>
  </para>
  <para>
   Şimdi farklı öneklere ve dolayısıyla adres türlerine göz atalım:
  </para>
  <sect2>
   <title>Bağlantılı yerel adres türü</title>
   <para>
    Bu adresler sadece bir arabirim bağlantısı üzerinde geçerli olacak özel
    adreslerdir. Eğer hedef adresi olarak kullanılırsa paketler
    yönlendiriciyi asla geçemezler. Sadece aşağıdaki gibi bağ iletişimleri
    için kullanılır:
   </para>
   <simplelist>
    <member>Bu bağlantıda başka biri var mı?</member>
    <member>
     Burada özel adrese sahip birisi var mı?
     (yani, yönlendiriciyi arıyorum)
    </member>
   </simplelist>
   <para>
    Bu adresler aşağıdaki gibi başlarlar (burada <literal>x</literal>
    herhangi bir onaltılık rakamdır, genellikle <literal>0</literal>
    kullanılır).
   </para>
<literallayout>fe8x:  &lt;== şu anda sadece bu, kullanımda
fe9x:
feax:
febx:
</literallayout>
   <para>
    Bu öneke sahip bir adres IPv6 ile yapılandırılmış her arabirimde
    bulunur.
   </para>
  </sect2>
  <sect2>
   <title>Site yerel adres türü</title>
   <para>
    Bu adresler bugün IPv4 ile kullandığımız <link
    xlink:href="http://www.faqs.org/rfcs/rfc1918.html">RFC 1918 / Address
    Allocation for Private Internets</link> adreslerine benzerler. Bir
    avantajı bu adres türünü kullananların adresin 16 bit'lik kısmını, en
    fazla, 65536 alt ağ için kullanabilmeleridir. Bu IPv4'ün 10.0.0.0/8
    adresleri ile karşılaştırılabilir bir büyüklüktür.
   </para>
   <para>
    Bir diğer avantajı ise: IPv6 kullanılarak bir arabirime birden çok
    adres atanabildiğinden bir arabirime onun global adresinin yanı sıra
    site yerel adresinin verilebilmesidir.
   </para>
   <para>
    Bu adresler aşağıdaki gibi başlarlar:
   </para>
<literallayout>fecx:  &lt;== en yaygın kullanılan
fedx:
feex:
fefx:
</literallayout>
   <para>
    (burada <literal>x</literal> herhangi bir onaltılık rakamdır,
    genellikle <literal>0</literal> kullanılır)
   </para>
   <para>
    Bazı sorunları olduğundan bu tür adreslere karşı çıkışların sürdüğü
    dikkate alınmalıdır. Daha fazlası için güncel taslak okunabilir:
    <link xlink:href="http://www.ietf.org/internet-drafts/"
    >draft-ietf-ipv6-deprecate-site-local-XY.txt</link>.
   </para>
   <para>
    Laboratuar testleri için bu tür adresler bence hala uygundur.
   </para>
  </sect2>
  <sect2>
   <title>Yerel IPv6 Tekil Gönderim (unicast) Adresleri</title>
   <para>
    Tanımlanan site yerel adres türleri eşsiz değildir. Eğer iki ayrı
    bağımsız ağ daha sonra bağlanacaksa (çakışan altağlar), bu daha büyük
    sorunların oluşmasına neden olabilir. Bu ve diğer konular için bkz:
    <link xlink:href="http://www.faqs.org/rfcs/rfc4193.html">RFC 4193 /
    Unique Local IPv6 Unicast Addresses</link>
   </para>
   <para>Adres başlangıcı:</para>
<literallayout>fdxx:
fcxx:
</literallayout>
   <para>
    Önekin bir kısmı (40 bit) sözde rastgele algoritması kullanarak
    üretilir ve iki üretilen değer beklenmedik bir şekilde birbirine
    eşit olur.
   </para>
   <para>
    Bir önek örneği (http tabanlı bir araçla üretildi: <link
    xlink:href="http://www.goebel-consult.de/ipv6/createLULA">Goebel
    Consult / createLULA): </link>
   </para>
<literallayout>fd0f:8b72:ac90::/48</literallayout>
  </sect2>
  <sect2>
   <title>Küresel adres türü "(Aggregatable) global unicast"</title>
   <para>
    Günümüzde tanımlı tek bir küresel adres türü vardır (ilk tasarım olan
    "üretici tabanlı" adres türünden yıllar önce vazgeçilmiştir <link
    xlink:href="http://www.faqs.org/rfcs/rfc1884.html">RFC 1884 / IP
    Version 6 Addressing Architecture [obsolete]</link>, Linux çekirdeğinin
    eski sürümlerinin kodlarında izleri bulunabilir).
   </para>
   <para>
    Bu adresler aşağıdaki gibi başlarlar (burada <literal>x</literal>
    herhangi bir onaltılık rakamdır)
   </para>
<literallayout>2xxx:
3xxx:</literallayout>
   <note>
    <para>
     "aggregatable" öneki güncel belgelerden çıkartılmıştır. Aşağıda bazı alt türler tanımlanmıştır:
    </para>
    <variablelist xml:id="ipv6-howto-addresstypes-6bone">
     <varlistentry>
      <term>Salt6 (6bone) deneme adresleri</term>
      <listitem>
       <para>
        Bu adresler ilk olarak tanımlanan ve kullanılan küresel adreslerdir. Bu adreslerin tümü aşağıdaki gibi başlar:
       </para>
<literallayout>3ffe:</literallayout>
       <para>Örneğin:</para>
<screen>3ffe:ffff:100:f102::1</screen>
       <para>Otomatik hesaplananlar (durumsuz olarak da bilinir)</para>
       <para>
        Bir özel salt6 deneme adresi asla genel kullanımda olmayacak olan
       </para>
<literallayout>3ffe:ffff:</literallayout>
       <para>
        ile başlayan adrestir. Bir çok örnekte kullanılır, çünkü eğer
        gerçek adres kullanılırsa birisi kopyala yapıştır yaparken olduğu
        gibi bırakabilir. Gerçek bir adres vermeyerek tekrarlı kullanımının
        önüne geçilmektedir. Tekrarlı kullanım asıl konak (host) için ciddi
        sorunlara yol açabilir. (örneğin; hiç göndermediği paketlerin
        yanıtını alabilir). IPv6 kullanımda olduğundan bu önekten artık
        bahsedilmeyecek ve muhtemelen 6.6.2006 tarihinden itibaren
        yönlendirmeden çıkarılacaktır (bakınız <link
        xlink:href="http://www.faqs.org/rfcs/rfc3701.html">RFC 3701 / 6bone Phaseout </link>).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>6'ya 4 adresler</term>
      <listitem>
       <para>
        Bu adresler özel bir tünelleme mekanizması için tasarlanmıştır
        [<link xlink:href="http://www.faqs.org/rfcs/rfc3056.html">RFC 3056
        / Connection of IPv6 Domains via IPv4 Clouds</link> ve <link
        xlink:href="http://www.faqs.org/rfcs/rfc2893.html">RFC 2893 /
        Transition Mechanisms for IPv6 Hosts and Routers</link>], verilen
        bir IPv4 adresini ve mümkün olan alt ağı kodlar ve
       </para>
<literallayout>2002:</literallayout>
       <para>
        ile başlarlar. Örneğin, 192.168.1.1/5 adresini göstermek için:
       </para>
<literallayout>2002:c0a8:0101:5::1</literallayout>
       <para>
        Verilen bir IPv4 adresinden böyle bir adres üretmek için aşağıdaki
        kabuk komutu kullanılabilir:
       </para>
<screen>ipv4="1.2.3.4"; sla="5"; printf "2002:%02x%02x:%02x%02x:%04x::1" `echo $ipv4 | tr "." " "` $sla
</screen>
       <para>
        Ayrıca, <xref linkend="ipv6-howto-tunelling-6to4"/> ve
        <xref linkend="ipv6-howto-information-joinipv6-6to4-tunelling"/>
        bölümlerine de bakınız.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Hiyerarşik yönlendirme için üretici tarafından atanmış adresler</term>
      <listitem>
       <para>
        Bu adresler İnternet Hizmet Sağlayıcılara tahsis edilmiştir ve
       </para>
<literallayout>2001:</literallayout>
       <para>
        ile başlarlar. LIRs olarak da bilinen büyük ISS'lere 32 bitlik
        önekler verilmiştir:
        <xref linkend="ipv6-howto-information-majorregionregistries"/>
       </para>
       <para>
        Herhangi bir ISS müşterisi 48 bit uzunluğunda bir önek alabilir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Örnekler ve belgelendirme için ayrılmış adresler</term>
      <listitem>
       <para>
        Hali hazırda, iki adres aralığı örnekler ve belgelendirme için ayrılmıştır:
       </para>
<literallayout>3ffe:ffff::/32
2001:0DB8::/32 EXAMPLENET-WF
</literallayout>
       <para>
        Bu adres aralıkları yönlendiricilerde süzülerek mümkünse internete çıkarılmamalıdır.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </note>
  </sect2>
  <sect2>
   <title>Çoğa Gönderim (Multicast) adresleri</title>
   <para>
    Çoğa gönderim adresleri ilgili hizmetler için kullanılır.
   </para>
   <para>
    Her zaman aşağıdaki gibi başlarlar (<literal>xx</literal> değerleri
    değişebilir):
   </para>
<literallayout>ffxy:</literallayout>
   <para>
    Etki bölgelerine ve türlerine göre ayrılırlar:
   </para>
   <variablelist>
    <varlistentry>
     <term>Çoğa Gönderim Bölgeleri</term>
     <listitem>
      <para>
       Çoğa gönderim bölgesi bir çoğa gönderim paketinin gidebileceği azami
       uzaklığı belirleyen bir değerdir.
      </para>
      <para>
       Hali hazırda aşağıdaki bölgeler tanımlanmıştır:
      </para>
      <simplelist>
       <member>
        <literal>ffx1</literal>: düğüm-içi, paketler düğümden ayrılamaz.
       </member>
       <member>
        <literal>ffx2</literal>: bağlantı-içi, paketler yönlendiriciler
        tarafından dışarı yönlendirilmediklerinden asla belirlenen
        bağlantıdan ayrılamazlar.
       </member>
       <member>
        <literal>ffx5</literal>: alan-içi, paketler alandan ayrılamazlar.
       </member>
       <member>
        <literal>ffx8</literal>: kurum-içi, paketler kurumdan ayrılamazlar.
       </member>
       <member><literal>ffxe</literal>: küresel bölge</member>
       <member>diğerleri yedeğe alınmıştır.</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Çoğa Gönderim Türleri</term>
     <listitem>
      <para>
       Tanımlanımış/ayrılmıştır pek çok tür vardır (ayrıntılar için <link
       xlink:href="http://www.faqs.org/rfcs/rfc2373.html">RFC 2373 / IP
       Version 6 Addressing Architecture</link> belgesine bakabilirsiniz).
       Bazı örnekler:
      </para>
      <simplelist>
       <member>
        Tüm düğümlerin adresi: <literal>ID = 1h</literal>, yerel düğüm
        üzerindeki tüm konakların adresleri
        (<literal>ff01:0:0:0:0:0:0:1</literal>) ya da bağlantı üzerindeki
        tüm konakların adresleri (<literal>ff02:0:0:0:0:0:0:1</literal>).
       </member>
       <member>
        Tüm yönlendiriciler adresi: <literal>ID = 2h</literal>,
        yerel düğüm üzerindeki tüm yönlendiricilerin adresleri
        (<literal>ff01:0:0:0:0:0:0:2</literal>), bağlantı üzerindeki
        (<literal>ff02:0:0:0:0:0:0:2</literal>) veya yerel alan üzerindeki
        (<literal>ff05:0:0:0:0:0:0:2</literal>) tüm yönlendiricilerin
        adresleri
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>İstemli düğüm bağlantı-içi çoğa gönderim adresleri</term>
     <listitem>
      <para>
       IPv6'da, IPv4'te bulunan ARP olmadığından komşuların
       araştırılmasında hedef adresi olarak özel çoğa gönderim adresleri
       kullanılır.
      </para>
      <para>Bu adresler aşağıdaki örnekteki gibidir:</para>
<literallayout>ff02::1:ff00:1234</literallayout>
      <para>
       Kullanılan önek bu adresin bağlantı-içi çoğa gönderim adresi
       olduğunu göstermektedir. Sonek ise hedef adresinden oluşturulmuştur.
       Bu örnekte, bir paket <literal>fe80::1234</literal> adresine
       gönderilmekte fakat ağ yığıtı (stack) ikinci katman MAC adresini
       bilmemektedir. İlk 24 bit aynı bırakılarak son 104 bit
       <literal>ff02:0:0:0:0:1:ff00::/104</literal> ile değiştirilir. Bu
       adres artık yanıt gönderebilecek ikinci katman MAC adresini içeren
       uygun düğümü bulmak için kullanılabilir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2>
   <title>Rasgele gönderim adresleri</title>
   <para>
    Rasgele gönderim (anycast) adresleri en yakın DNS sunucusu, DHCP
    sunucusu veya benzer dinamik grupları bulmak için kullanılan
    adreslerdir. Bu adresler tekil gönderim (unicast) adres alanından
    çıkartılırlar. Rasgele gönderim mekanizması (istemci tarafında) dinamik
    yönlendirme protokolleri ile idare edilir.
   </para>
   <note>
    <para>
     Rasgele gönderim adresleri kaynak adresi olarak kullanılamazlar,
     sadece hedef adresi olabilirler.
    </para>
   </note>
   <sect3>
    <title>Alt ağ-yönlendirici rasgele gönderim adresi</title>
    <para>
     Rasgele gönderim adresine en basit örnek alt ağ-yönlendirici rasgele
     gönderim adresidir. Bir düğümün aşağıdaki küresel IPv6 adresine sahip
     olduğunu kabul edelim:
    </para>
<literallayout>2001:db8:100:f101:210:a4ff:fee3:9566/64 &lt;== Düğüm adresi
</literallayout>
    <para>
     Alt ağ-yönlendirici rasgele gönderim adresi en azından sondan 64
     bitlik bölümün tamamiyle boş bırakılmasıyla elde edilir:
    </para>
<literallayout>2001:db8:100:f101::/64   &lt;== alt ağ-yönlendirici rasgele gönderim adresi
</literallayout>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-addresstypes-hostpart">
  <title>Adres Türleri (konak parçası)</title>
  <para>
   Otomatik yapılandırma ve gezicilik sağlayabilmek için adres
   türlerinin çoğunda adresin son 64 bitlik kısmının konak adresi olarak
   ayrılmasına karar verilmiştir. Bu nedenle her bir alt ağ çok fazla
   miktarda adrese sahip olabilmektedir.
  </para>
  <para>
   Konak adresleri ayrıca irdelenebilir:
  </para>
  <sect2 xml:id="ipv6-howto-addresstypes-stateless" userlevel="chunkthis">
   <title>Otomatik hesaplananlar (durumsuz olarak da bilinir)</title>
   <para>
    Otomatik yapılandırma ile adresin konak kısmı, arabirimin MAC adresinin
    (eğer varsa) EUI-64 yöntemiyle bir IPv6 adresine dönüştürülmesi ile
    elde edilir. Eğer bu aygıt için bir MAC adresi mevcut değilse (örneğin
    bir sanal aygıtsa) IPv4 adresi veya fiziksel arabirimin MAC adresi gibi
    başka bir değer kullanılır.
   </para>
   <para>Tekrar ilk örneği ele alalım:</para>
<literallayout>2001:0db8:0100:f101:0210:a4ff:fee3:9566</literallayout>
   <para>burada,</para>
<literallayout>0210:a4ff:fee3:9566</literallayout>
   <para>
    parçası konak kısmıdır ve ağ arabirim kartının MAC adresinden:
   </para>
<literallayout>00:10:A4:E3:95:66</literallayout>
   <para>
    hesaplanmıştır. Bunun için <link xlink:href="eui-64.html">IEEE-Tutorial
    EUI-64</link> kullanılmıştır.
   </para>
   <sect3>
    <title>Otomatik hesaplanan adresler ile ilgili gizlilik sorunu ve bir çözüm</title>
    <para>
     Adresin "otomatik hesaplanan" bölümü küresel olarak benzersiz
     olduğundan (NIC üreticisinin aynı MAC adresini birden çok kullanması
     durumu hariç) eğer konakta bir çeşit vekil sunucu kullanılmıyor ise
     istemcinin izini sürmek mümkündür.
    </para>
    <para>
     Bilinen bir sorun ve çözümü <link
     xlink:href="http://www.faqs.org/rfcs/rfc3041.html">RFC 3041 / Privacy
     Extensions for Stateless Address Autoconfiguration in IPv6</link>
     belgesinde tanımlanan gizlilik genişletmesidir. (Daha yeni bir belge:
     <link xlink:href="ftp://ftp.ietf.org/internet-drafts/"
     >draft-ietf-ipngwg-temp-addresses-*.txt</link>). Belirli zamanlarda
     biri rastgele biri de statik değer kullanılarak yeni bir sonek
     yaratılır<footnote><para>Bu yöntem sadece dışa giden istemcilerin
     bağlantıları için uygundur, adresleri zaten bilinen sunucularda işe
     yaramayacaktır.</para></footnote>.
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-addresstypes-manually-set">
   <title>Elle atanan adresler</title>
   <para>
    Sunucular için basit adresler daha kolay hatırlanabildiklerinden bunu
    da ayarlamak mümkündür. Bir arabirime ilave bir IPv6 adresi atamak
    mümkündür, örneğin:
   </para>
<literallayout>2001:0db8:100:f101::1</literallayout>
   <para>
    Yukarıdaki gibi elle atanan <literal>::1</literal> gibi sonekler için
    yedinci önemli bit'in 0 olarak atanması gerekir. Bu işlem için ayrılan
    başka bit birleişmleri de vardır.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-addresstypes-prefix-length">
  <title>Yönlendirme için önek uzunlukları</title>
  <para>
   Geliştirmenin ilk aşamalarında yönlendirme tablolarının büyüklüğünü en
   aza indirmek için bütünüyle hiyerarşik bir yönlendirme yaklaşımı
   kullanılması planlandı. Bu yaklaşımın ardındaki nedenler; merkezi
   yönlendiricilerdeki IPv4 yönlendirme girdilerinin sayısının çok fazla
   olması (Mayıs 2001'de 104 binden fazla) ve donanım yönlendiricilerinin
   hafıza gereksinimlerinin azaltılarak hızlarının arttırılmasıdır.
  </para>
  <para>
   Bugün ise yönlendirmenin sadece bir hizmet sağlayıcısı olan ağlar için
   hiyerarşik olarak tasarlandığı görülmektedir. Birden çok ISP bağlantısı
   olanlar için bu mümkün değildir. Bu konu çoklu-hedef arama
   (multi-homing) olarak bilinmektedir (çoklu-hedef arama için bakınız:
   <link xlink:href="http://www.ietf.org/internet-drafts/">drafts
   *multi6*</link>; <link
   xlink:href="http://arneill-py.sacramento.ca.us/ipv6mh/">IPv6 Multihoming
   Solutions</link>)
  </para>
  <sect2>
   <title>Önek uzunlukları (ağ maskesi olarak da bilinir)</title>
   <para>
    IPv4'te olduğu gibi yönlendirme için yönledirilebilir ağ yolu
    kullanılır. 128 bit için standart ağ maskesi gösterimi hoş
    durmadığından tasarımcılar CIDR (<link
    xlink:href="http://www.faqs.org/rfcs/rfc1519.html">RFC 1519 /
    Classless Inter-Domain Routing</link>) isimli IP adresinin kaç bitinin
    yönlendirme için kullanıldığını belirleyen gösterimi geliştirdiler.
    Bu gösterim "bölü çizgisi" gösterimi olarak da bilinmektedir. Örnek:
   </para>
<literallayout>2001:0db8:100:1:2:3:4:5/48</literallayout>
   <para>Bu gösterim genişletilebilir:</para>
   <itemizedlist>
    <listitem>
     <para>Ağ:</para>
<literallayout>2001:0db8:0100:0000:0000:0000:0000:0000</literallayout>
    </listitem>
    <listitem>
     <para>Ağ maskesi:</para>
<literallayout>ffff:ffff:ffff:0000:0000:0000:0000:0000</literallayout>
    </listitem>
   </itemizedlist>
  </sect2>
  <sect2>
   <title>Rotayı takip etmek</title>
   <para>
    Normal şartlar altında (QoS yok ise) yönlendirme tablosunun kontrolü
    ile yönlendirmedeki en önemli adres bitleri görülür.
   </para>
   <para>
    Örneğin bir yönledirme tablosu aşağıdaki girdileri gösteriyor ise
    (listenin tamamı değil):
   </para>
<screen>2001:0db8:100::/48       ::            U  1 0 0 sit1
2000::/3               ::192.88.99.1 UG 1 0 0 tun6to4
</screen>
   <para>
    IPv6 paketleri gösterilen aygıt üzerinden hedef adreslerine
    yönlendirilmişlerdir.
   </para>
<literallayout>2001:0db8:100:1:2:3:4:5/48   -&gt;  <emphasis>sit1 aygıtı üzerinden</emphasis>
2001:0db8:200:1:2:3:4:5/48   -&gt;  <emphasis>tun6to4 aygıtı üzerinden</emphasis>
</literallayout>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-systemcheck">
  <title>Sistemin IPv6 Kullanımına Hazırlanması</title>
  <para>
   Bir Linux istemcide IPv6 kullanmadan önce sistemin IPv6'ya hazır olup
   olmadığına bakmanız gerekir. Etkin hale getirmeniz için biraz çalışmanız
   gerekebilir.
  </para>
  <sect2 xml:id="ipv6-howto-systemcheck-kernel">
   <title>Çekirdeğin IPv6'ya hazırlanması</title>
   <para>
    Modern Linux dağıtımlarının tümü zaten IPv6'ya hazır çekirdekler
    kullanmaktadır. Bu özellik genellikle modül olarak çekirdeğe
    eklenmektedir, ama başlangıçta otomatik yüklenmiyor olabilir.
   </para>
   <para>
    En güncel bilgiyi <link
    xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html"
    >IPv6+Linux-Status-Distribution</link> belgesinde bulabilirsiniz.
   </para>
   <warning>
    <para>
     IPv6'ya hazır olmayan 2.2.x serisi çekirdekleri kullanmamalısınız.
     Aynı zamanda 2.4.x serisi çekirdekler de RFC'lerdeki son
     değişikliklerle uyumlu değildir. Şu an 2.6.x serisinin kullanılması
     önerilmektedir.
    </para>
   </warning>
  </sect2>
  <sect2>
   <title>Çalışan çekirdeğin IPv6 desteğini kontrol edin</title>
   <para>
    Çalışan çekirdeğinizin IPv6 desteğinin olup olmadığını kontrol etmek
    için <filename>/proc</filename> dosya sistemine bakın. Aşağıdaki girdi
    mutlaka olmalıdır:
   </para>
<screen>/proc/net/if_inet6</screen>
   <para>Hızlı bir deneme şöyle yapılabilir:</para>
<screen># <command>test -f /proc/net/if_inet6 &amp;&amp; echo "Çalışan çekirdek IPv6 kullanımına hazır"</command>
</screen>
   <para>
    Eğer bir hata ile karşılaşırsanız büyük ihtimalle IPv6 modülü
    yüklenmemiştir.
   </para>
  </sect2>
  <sect2>
   <title>IPv6 modülünü yüklemeye çalışın</title>
   <para>
    Aşağıdaki komutu çalıştırarak IPv6 modülünü yüklemeye çalışabilirsiniz:
   </para>
<screen># <command>modprobe ipv6</command></screen>
   <para>
    Eğer işe yararsa modül yüklenir ve aşağıdaki komutun sonucunda görünür:
   </para>
<screen># <command>lsmod |grep -w 'ipv6' &amp;&amp; echo "IPv6 modülü başarıyla yüklendi"</command>
</screen>
   <para>Artık modülün yüklendiğini görmeniz gerekir.</para>
   <important>
    <para>
     Modül desteğini kaldırmak şimdilik desteklenmediğinden, böyle bir
     durum çekirdeğin çökmesine sebep olabilir.
    </para>
   </important>
  </sect2>
  <sect2>
   <title>Modülün kendiliğinden yüklenmesi</title>
   <para>
    İhtiyaç durumunda modülün kendiliğinden yüklenmesini sağlamak
    mümkündür. Bunun için çekirdek modül yükleyicisinin yapılandırma
    dosyasına (genellikle <filename>/etc/modules.conf</filename> ya da
    <filename>/etc/conf.modules</filename>) aşağıdaki satırın eklenmesi
    yeterli olacaktır:
   </para>
<screen>alias net-pf-10 ipv6  # gerektiğinde IPv6 modülünü yükler</screen>
   <para>
    Kendi kendine yüklemenin iptal edilmesi için aynı dosyaya aşağıdaki
    satırın eklenmesi yeterli olacaktır:
   </para>
<screen>alias net-pf-10 off   # gerektiğinde IPv6 modülünü yüklenmesini önler</screen>
   <note>
    <para>
     2.5 ve sonrası çekirdeklerde modül yükleme mekanizması değiştiğinden
     yapılandırma dosyası olarak <filename>/etc/modules.conf</filename>
     yerine <filename>/etc/modprobe.conf</filename> kullanılıyor.
    </para>
   </note>
  </sect2>
  <sect2>
   <title>IPv6 desteğine sahip bir çekirdek derleyin</title>
   <para>
    Yukarıda anlatılanlar sonuç vermemişse ve çekirdeğinizin IPv6 desteği
    yoksa aşağıdakileri deneyebilirsiniz:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Kullandığınız dağıtımı kutudan IPv6'ya hazır çıkan yenisine güncelleyin (acemiler için tavsiye edilir). Dağıtımların IPv6'ya hazır olma durumları için: <link
       xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html"
       >IPv6+Linux-Status-Distribution</link>
     </para>
    </listitem>
    <listitem>
     <para>
      Güncel (vanilya) çekirdeği ihtiyaçlarınıza uygun bir şekilde
      derleyebilirsiniz (hangi seçeneklere ihtiyacınız olduğunu
      biliyorsanız kolaydır).
     </para>
    </listitem>
    <listitem>
     <para>
      Dağıtımınız ile birlikte gelen çekirdeği ihtiyaçlarınıza uygun bir
      şekilde tekrar derleyebilirsiniz (her zaman kolay değildir)
     </para>
    </listitem>
    <listitem>
     <para>
      Çekirdeği USAGI yaması ile derleyin
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Yeni bir çekirdek derlemeye karar verirseniz bunun tecrübe
    gerektirdiğini düşünerek <link
    xlink:href="http://www.tldp.org/HOWTO/Kernel-HOWTO.html">Linux Kernel
    HOWTO</link> belgesini okuyabilirsiniz.
   </para>
   <para>
    Orjinal çekirdekle USAGI yaması arasındaki güncel farklılıklar <link
    xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html"                                                                          >IPv6+Linux-Status-Kernel</link> adresinde bulunabilir.
   </para>
   <sect3>
    <title>Güncel (vanilya) çekirdeği derlemek</title>
    <para>
     IPv6 destekli çekirdek derlemek ile ilgili ayrıntılı bilgi için
     bakınız: <link
     xlink:href="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-2.html#kernel"
     >IPv6-HOWTO-2#kernel</link>.
    </para>
    <note>
     <para>
      Mümkün olduğunca güncel 2.6.x ve yukarısı çekirdek sürümleri
      kullanılmalıdır. Çünkü 2.4.x serisinin IPv6 desteği kısmi olarak
      mevcuttur ve 2.2.x sersinin IPv6 desteği ise güncel değildir.
     </para>
    </note>
   </sect3>
   <sect3>
    <title>USAGI yamaları ile çekirdek derlemek</title>
    <para>
     Orjinal çekirdek derlemekte olduğu gibi sadece IPv6 ve çekirdek
     derleme konularında tecrübeli kullanıcılara önerilmektedir. <link
     xlink:href="http://www.linux-ipv6.org/faq.html">USAGI project /
     FAQ</link> ve <link
     xlink:href="http://www.deepspace6.net/docs/best_ipv6_support.html"
     >Obtaining the best IPv6 support with Linux (Article)</link> (<link
     xlink:href="http://mirrors.bieringer.de/www.deepspace6.net/docs/best_ipv6_support.html"
     >Yansı</link>) belgelerini okumak faydalı olacaktır.
    </para>
   </sect3>
  </sect2>
  <sect2>
   <title>IPv6 kullanımına hazır ağ aygıtları</title>
   <para>
    Piyasadaki ağ aygıtlarının tümünün IPv6 paketlerini taşıma kabiliyeti
    yoktur. Güncel bir durum tespiti için bakınız: <link
    xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#transport"/>.
   </para>
   <para>
    Çekirdeğin IPv6 paketini işleyişinin ağ katman yapısında yarattığı
    farklılığın IP başlık (header) numarasından anlaşılamaması önemli bir
    sorundur. Bu fark ikinci katmandaki taşıma protokolün protokol
    numarasından anlaşılabilmektedir. Bu yüzden bu protokol numaralarını
    kullanmayan herhangi bir taşıma protokolü IPv6 paketlerini ayırt
    edemez<footnote><para>Paket ağ üzerinden taşınır ama alan taraf
    işleyemez (bunu <command>tcpdump</command> kullanarak görebilirsiniz).
    </para></footnote>.
   </para>
   <sect3>
    <title>Asla IPv6 kabiliyeti olmayacak bağlantılar</title>
    <itemizedlist>
     <listitem>
      <para>
       Seri Hat IP (SLIP, <link
       xlink:href="http://www.faqs.org/rfcs/rfc1055.html">RFC 1055 /
       SLIP</link>), SLIPv4 olarak adlandırmak daha doğru olacaktır,
       aygıt adı: slX
      </para>
     </listitem>
     <listitem>
      <para>
       Paralel Hat IP (PLIP), SLIP'e benzer, aygıt adı: plipX
      </para>
     </listitem>
     <listitem>
      <para>
       <command>rawip</command> sarmalamalı ISDN, aygıt adı: isdnX
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3>
    <title>Şimdilik IPv6 kabiliyeti olmayan bağlantılar</title>
    <para>
     <command>syncppp</command> sarmalamalı ISDN, aygıt adı: ipppX
    </para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-systemcheck-nettools">
  <title>IPv6'ya hazır ağ yapılandırma araçları</title>
  <para>
   Eğer IPv6 desteği olan bir çekirdekle çalışıyorsanız yapılandırma aracı
   olarak varolan bir çok paketten birini kullanabilirsiniz.
  </para>
  <sect2>
   <title><literal>net-tools</literal> paketi</title>
   <para>
    Net-tool paketi ağ arabirimlerinin IPv6 yapılandırmasına yardımcı
    olacak <command>ifconfig</command> ve <command>route</command> gibi
    araçlar içerir. Eğer <command>ifconfig -?</command> ya da
    <command>route -?</command> komutlarının çıktılarında IPv6 veya inet6
    ifadelerini görüyorsanız bu, araçların IPv6'ya hazır olduğu anlamına
    gelir.
   </para>
   <para><command>ifconfig</command>'i kontrol için:</para>
<screen># <command>/sbin/ifconfig -? 2&gt;&amp; 1 | grep -qw 'inet6' &amp;&amp; echo "'ifconfig' IPv6'ya hazır"</command>
</screen>
   <para><command>route</command>'u kontrol için:</para>
<screen># <command>/sbin/route -? 2&gt;&amp; 1|grep -qw 'inet6' &amp;&amp; echo "'route' IPv6'ya hazır"</command>
</screen>
  </sect2>
  <sect2>
   <title><literal>iproute</literal> paketi</title>
   <para>
    Alexey N. Kuznetsov (halen Linux ağ geliştiricilerinden birisidir)
    netlink aygıtı üzerinden ağı yapılandıran bir araç seti oluşturdu. Bu
    set net-tools paketinden daha fazla işlevsel olmasına rağmen iyi
    belgelendirilmemiştir.
   </para>
<screen># <command>/sbin/ip 2&gt;&amp;1 |grep -qw 'inet6' &amp;&amp; echo "'ip' IPv6'ya hazır"</command>
</screen>
   <para>
    Eğer <command>/sbin/ip</command> komutu yoksa
    <literal>iproute</literal> paketini kurmanızı şiddetle öneririm:
   </para>
   <itemizedlist>
    <listitem><para>
     Kullanıdığınız Linux dağıtımından (eğer dağıtıma dahil edilmişse)
     </para></listitem>
    <listitem><para>
     Kaynak kodu indirip yeniden derleyerek:
     <link xlink:href="ftp://ftp.inr.ac.ru/ip-routing/">Asıl FTP
     adresi</link>
    </para></listitem>
    <listitem><para>
     Eğer RPM paket yöneticisini kullanabileceğiniz bir dağıtım
     kullanıyorsanız <link
    xlink:href="http://rpmfind.net/linux/rpm2html/search.php?query=iproute"
     >RPMfind/iproute</link> adresinden uygun bir rpm paketi alarak (bazen
     SRPM paketini alıp RPM paketini sizin oluşturmanız daha iyi olabilir).
    </para></listitem>
   </itemizedlist>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-systemcheck-debugging">
  <title>IPv6'ya hazır deneme/hata ayıklama uygulamaları</title>
  <para>
   Sisteminizi IPv6'ya hazırladıktan sonra onu ağ iletişiminde kullanmak
   isteyeceksiniz. Bunun için ilk olarak bir dinleme (sniffer) programı
   yardımıyla IPv6 paketlerini sorgulamayı öğrenmelisiniz. Bunu, hata
   ayıklama/sorun çözme konularında çok zaman kazandırıcı olduğundan
   şiddetle öneriyorum.
  </para>
  <sect2 xml:id="ipv6-howto-systemcheck-ping6">
   <title>IPv6 <literal>ping6</literal></title>
   <para>
    Bu program normal olarak <literal>iputils</literal> paketine dahildir.
    Basitçe <literal>ICMPv6 echo-request</literal> paketlerini gönderip
    <literal>ICMPv6 echo-reply</literal> paketlerini alarak aktarım
    denemeleri yapar.
   </para>
   <para>Kullanımı:</para>
<synopsis><command>ping6 </command><emphasis>ipv6adreslikonakismi</emphasis>
<command>ping6 </command><emphasis>ipv6adresi</emphasis>
<command>ping6 </command>[<command>-I </command><emphasis>aygıt</emphasis>] <emphasis>yerel-ipv6adresi</emphasis>
</synopsis>
   <example>
    <title><literal>ping6</literal> kullanımı</title>
<screen># <command>ping6 -c 1 ::1</command>
PING ::1(::1) from ::1 : 56 data bytes
64 bytes from ::1: icmp_seq=0 hops=64 time=292 usec
--- ::1 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max/mdev = 0.292/0.292/0.292/0.000 ms
</screen>
   </example>
   <tip>
    <para>
     <command>ping6</command> soket'e alt seviye (raw) erişime,
     dolayısıyla root yetkilerine ihtiyaç duyar. Bu nedenle eğer root
     olmayan kullanıcılar eğer <command>ping6</command> komutunu
     kullanamıyorlarsa aşağıdaki iki sorundan birisi var demektir:
    </para>
    <simplelist>
     <member>
      <command>ping6</command> kullanıcının dosya arama yollarında
      (path) değildir (<command>ping6</command> genellikle
      <filename>/usr/sbin</filename> dizininde olduğundan kullanıcının
      dosya arama yollarında yer almaması büyük olasılıktır, bu dizin
      kullanıcının yoluna eklenebilir ama tavsiye edilmez).
     </member>
     <member>
      <command>ping6</command>'nın düzgün çalışmamasının sebebi
      genellikle yeterli izinlere sahip olmamasından kaynaklanır;
      çözümü: <command>chmod u+s /usr/sbin/ping6</command>
     </member>
    </simplelist>
   </tip>
   <sect3>
    <title>IPv6 ping için arabirimin belirtilmesi</title>
    <para>
     IPv6 ping için yerel-bağlantı adresinin kullanılması durumunda
     çekirdek hangi fiziksel veya mantıksal arabirimi kullanarak paketleri
     göndereceğini bilmediğinden aşağıdaki gibi bir hata ortaya çıkar:
    </para>
<screen><prompt># </prompt><command>ping6 fe80::212:34ff:fe12:3456</command>
connect: Invalid argument
</screen>
    <para>
     Böyle bir durumda arabirimi aşağıdaki gibi belirtebilirsiniz:
    </para>
<screen><prompt># </prompt><command>ping6 -I eth0 -c 1 fe80::2e0:18ff:fe90:9205</command>
PING fe80::212:23ff:fe12:3456(fe80::212:23ff:fe12:3456) from fe80::212:34ff:fe12:3478 eth0: 56 data bytes
64 bytes from fe80::212:23ff:fe12:3456: icmp_seq=0 hops=64 time=445 usec
--- fe80::2e0:18ff:fe90:9205 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss round-trip min/avg/max/mdev = 0.445/0.445/0.445/0.000 ms
</screen>
   </sect3>
   <sect3>
    <title>Çoğa gönderim adreslerinde <literal>ping6</literal> kullanımı</title>
    <para>
     Bir bağlantıdaki etkin IPv6 istemcilerini sınamanın bir yolu ağdaki
     tüm düğümler için <command>ping6</command> kullanmaktır:
    </para>
<screen># <command>ping6 -I eth0 ff02::1</command>
PING ff02::1(ff02::1) from fe80:::2ab:cdff:feef:0123 eth0: 56 data bytes
64 bytes from ::1: icmp_seq=1 ttl=64 time=0.104 ms
64 bytes from fe80::212:34ff:fe12:3450: icmp_seq=1 ttl=64 time=0.549 ms (DUP!)
</screen>
    <para>
     IPv4'de çoğa gönderim adreslerine <command>ping</command> cevabı
     gönderilmesi iptal edilebilirken bu işlemi IPv6'da sadece yerel
     güvenlik duvarı ile yapmak mümkündür.
    </para>
   </sect3>
  </sect2>
  <sect2>
   <title>IPv6 <literal>traceroute6</literal></title>
   <para>
    Bu program normal olarak <literal>iputils</literal> paketine dahildir.
    IPv4'de kullanılan <command>traceroute</command> programına benzer.
    Aşağıda örnek bir kullanımı bulunmaktadır:
   </para>
<screen># <command>traceroute6 www.6bone.net</command>
traceroute to 6bone.net (3ffe:b00:c18:1::10) from 3ffe:ffff:0000:f101::2, 30 hops max, 16 byte packets
1 localipv6gateway (2001:0db8:0000:f101::1) 1.354 ms 1.566 ms 0.407 ms
2 swi6T1-T0.ipv6.switch.ch (3ffe:2000:0:400::1) 90.431 ms 91.956 ms 92.377 ms
3 3ffe:2000:0:1::132 (3ffe:2000:0:1::132) 118.945 ms 107.982 ms 114.557 ms
4 3ffe:c00:8023:2b::2 (3ffe:c00:8023:2b::2) 968.468 ms 993.392 ms 973.441 ms
5 3ffe:2e00:e:c::3 (3ffe:2e00:e:c::3) 507.784 ms 505.549 ms 508.928 ms
6 www.6bone.net (3ffe:b00:c18:1::10) 1265.85 ms * 1304.74 ms
</screen>
   <note>
    <para>
     IPv4 ile kullanılan hem <literal>ICMPv4 echo-request</literal>
     paketlerini hem de UDP paketlerini kullanabilen
     <command>traceroute</command>'un son sürümlerinin aksine, güncel
     <command>traceroute6</command> sadece UDP paketlerini
     gönderebilmektedir. Bildiğiniz gibi güvenlik duvarları veya
     yönlendiriciler için <literal>ICMP echo-request</literal> paketleri
     UDP paketlerine göre daha fazla kabul edilen paketlerdir.
    </para>
   </note>
  </sect2>
  <sect2>
   <title>IPv6 <literal>tracepath6</literal></title>
   <para>
    Bu program normal olarak <literal>iputils</literal> paketine dahildir.
    <command>traceroute6</command> programına benzer şekilde verilen bir
    hedefe ulaşmak için gerekli MTU'yu hesaplayarak yolu izler. Aşağıda
    kullanımına bir örnek verilmiştir:
   </para>
<screen><prompt># </prompt><command>tracepath6 www.6bone.net</command>
1?: [LOCALHOST] pmtu 1480
1: 3ffe:401::2c0:33ff:fe02:14 150.705ms
2: 3ffe:b00:c18::5 267.864ms
3: 3ffe:b00:c18::5 asymm 2 266.145ms pmtu 1280
3: 3ffe:3900:5::2 asymm 4 346.632ms
4: 3ffe:28ff:ffff:4::3 asymm 5 365.965ms
5: 3ffe:1cff:0:ee::2 asymm 4 534.704ms
6: 3ffe:3800::1:1 asymm 4 578.126ms !N
Resume: pmtu 1280
</screen>
  </sect2>
  <sect2>
   <title>IPv6 <literal>tcpdump</literal></title>
   <para>
    Linux'da paket yakalamak için kullanılan en önemli araç
    <command>tcpdump</command>'tır. Aşağıda kullanımıyla ilgili örnekler
    bulacaksınız. IPv6 desteği 3.6 sürümünden itibaren gömülü olarak
    gelmektedir.
   </para>
   <para>
    tcpdump gürültüyü (noise) engellemek için bazı ifadeler kullanır:
   </para>
   <simplelist>
    <member>
     <literal>icmp6</literal>: doğal ICMPv6 trafiğini filtreler
    </member>
    <member>
     <literal>ip6</literal>: doğal IPv6 trafiğini filtreler (ICMPv6 dahil)
    </member>
    <member>
     <literal>proto ipv6</literal>: tünellenmiş IPv6-in-IPv4 trafiğini
     filtreler
    </member>
    <member>
     <literal>not port ssh</literal>: uzak SSH oturumu için akan SSH
     paketlerini gizler
    </member>
   </simplelist>
   <para>
    Daha çok ICMPv6 paketlerini yakalamakta ve paketler hakkında daha fazla
    bilgi edinmeyi sağlamakta yararlı olan bazı komut satırı seçenekleri de
    mevcuttur:
   </para>
   <simplelist>
    <member>
     <literal>-s 512</literal>: paket yakalamak için kullanılan kopma
     (snap) uzunluğunu 512 bayta çıkartır.
    </member>
    <member>
     <literal>-vv</literal>: oldukça ayrıntılı bilgi verilir.
    </member>
    <member>
     <literal>-n</literal>: adresleri isme çevirmez, eğer ters DNS
     çözümlemesi iyi çalışmıyorsa faydalıdır.
    </member>
   </simplelist>
   <example>
    <title><literal> 2001:0db8:100:f101::1</literal> adresine yerel bir
     bağlantı üzerinden IPv6 ping</title>
<screen># <command>tcpdump -t -n -i eth0 -s 512 -vv ip6 or proto ipv6</command>
tcpdump: listening on eth0
2001:0db8:100:f101:2e0:18ff:fe90:9205 &gt; 2001:0db8:100:f101::1: icmp6: echo request (len 64, hlim 64)
2001:0db8:100:f101::1 &gt; 2001:0db8:100:f101:2e0:18ff:fe90:9205: icmp6: echo reply (len 64, hlim 64)
</screen>
   </example>
   <example>
    <title><literal>2001:0db8:100::1</literal> adresine IPv6-in-IPv4 tüneli
     üzerinden yönlendirilmiş IPv6 ping</title>
    <para>
     1.2.3.4 ve 5.6.7.8 adresleri tünelin iki ucunu göstermektedir (elbette adresler örnektir)
    </para>
<screen># <command>tcpdump -t -n -i ppp0 -s 512 -vv ip6 or proto ipv6</command>
tcpdump: listening on ppp0
1.2.3.4 &gt; 5.6.7.8: 2002:ffff:f5f8::1 &gt; 2001:0db8:100::1: icmp6: echo request (len 64, hlim 64) (DF) (ttl 64, id 0, len 124)
5.6.7.8 &gt; 1.2.3.4: 2001:0db8:100::1 &gt; 2002:ffff:f5f8::1: icmp6: echo reply (len 64, hlim 61) (ttl 23, id 29887, len 124)
1.2.3.4 &gt; 5.6.7.8: 2002:ffff:f5f8::1 &gt; 2001:0db8:100::1: icmp6: echo request (len 64, hlim 64) (DF) (ttl 64, id 0, len 124)
5.6.7.8 &gt; 1.2.3.4: 2001:0db8:100::1 &gt; 2002:ffff:f5f8::1: icmp6: echo reply (len 64, hlim 61) (ttl 23, id 29919, len 124)
</screen>
   </example>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-systemcheck-progs">
  <title>IPv6'ya hazır uygulamalar</title>
  <para>
   Güncel dağıtımlar ihtiyaç duyulan istemci ve sunucu uygulamalarının
   çoğunun IPv6'ya hazır hallerini içermektedirler. Aradığınız uygulama eğer
   <link xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html"                                                                                   >IPv6+Linux-Status-Distribution</link> adresinde yoksa, bu uygulamanın
   Linux ve IPv6 ile kullanılıp kullanılamadığını <link
   xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html">IPv6
   &amp; Linux - Current Status - Applications</link> adresinden kontrol
   edebilirsiniz. Sık kullanılan uygulamalar ve ipuçları <link
   xlink:href="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-3.html">IPv6
   &amp; Linux - HowTo - Part 3</link> ve <link
   xlink:href="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-4.html">IPv6
   &amp; Linux - HowTo - Part 4</link> belgelerinde bulunabilir.
 </para>
 </sect1>

 <sect1 xml:id="ipv6-howto-systemcheck-clientprgs">
  <title>IPv6'ya hazır istemci uygulamaları (seçmeler)</title>
  <para>
   Aşağıdaki sınamaları çalıştırabilmeniz için sisteminizin IPv6'ya hazır
   olması gerekmektedir. Bazı örneklerdeki adreslere ancak bir salt6
   bağlantısı olduğunda erişmek mümkündür.
  </para>
  <sect2>
   <title>IPv6 adreslerini çözümlemek için DNS kontrolü</title>
   <para>
    Son yıllardaki güvenlik güncellemeleri yüzünden tüm DNS sunucuları IPv6
    adres türü olan AAAA'yı anlayan güncel uygulamalar çalıştırmalıdır (daha
    yeni olan A6 ismi ise sadece BIND9 desteği olduğundan ve IP6.ARPA alanı
    desteklenmediğinden şimdilik sıklıkla kullanılmamaktadır). Sistemin
    IPv6 adreslerini çözümlemesi ile ilgili basit bir sınama aşağıdaki gibi
    yapılabilir:
   </para>
<screen># <command>host -t AAAA www.join.uni-muenster.de</command></screen>
   <para>çıktı aşağıdaki gibi olmalıdır:</para>
<screen>www.join.uni-muenster.de. is an alias for tolot.join.uni-muenster.de.
tolot.join.uni-muenster.de. has AAAA address 2001:638:500:101:2e0:81ff:fe24:37c6
</screen>
  </sect2>
  <sect2>
   <title>IPv6'ya hazır telnet istemcileri</title>
   <para>
    IPv6'ya hazır telnet istemcileri mevcuttur ve basitçe sınanabilir:
   </para>
<screen>$ <command>telnet 3ffe:400:100::1 80</command>
Trying 3ffe:400:100::1...
Connected to 3ffe:400:100::1.
Escape character is '^]'.
HEAD / HTTP/1.0
HTTP/1.1 200 OK
Date: Sun, 16 Dec 2001 16:07:21
GMT Server: Apache/2.0.28 (Unix)
Last-Modified: Wed, 01 Aug 2001 21:34:42 GMT
ETag: "3f02-a4d-b1b3e080"
Accept-Ranges: bytes
Content-Length: 2637
Connection: close
Content-Type: text/html; charset=ISO-8859-1
Connection closed by foreign host.
</screen>
   <para>
    Eğer telnet istemcisi IPv6 adreslerinden anlamıyor ve "cannot resolve
    hostname" gibi bir hata döndürüyorsa IPv6 ile uyumlu değildir.
   </para>
  </sect2>
  <sect2>
   <title>IPv6'ya hazır ssh istemcileri</title>
   <variablelist>
    <varlistentry>
     <term>
      <literal>openssh</literal>
     </term>
     <listitem>
      <para>
       Openssh'ın güncel sürümleri IPv6 ile çalışabilmektedir. Derlemeden
       önceki yapılandırmasına bağlı olarak iki farklı davranış sergiler
      </para>
      <glosslist>
       <glossentry>
        <glossterm>
         <command>--without-ipv4-default</command>
        </glossterm>
        <glossdef>
         <para>
          İstemci önce otomatik olarak IPv6 bağlantısını dener olmazsa IPv4 bağlantısına düşer
         </para>
        </glossdef>
       </glossentry>
       <glossentry>
        <glossterm>
         <command>--with-ipv4-default</command>
        </glossterm>
        <glossdef>
         <para>
          Öntanımlı bağlantı IPv4 ile olur. IPv6 bağlantısı aşağıdaki
          örnekte gösterildiği gibi zorlanmalıdır:
         </para>
<screen>$ <command>ssh -6 ::1</command>
user@::1's password: ******
[user@ipv6host user]$
</screen>
         <para>
          Eğer istemciniz <option>-6</option> seçeneğini anlamıyorsa IPv6
          uyumlu değildir.
         </para>
        </glossdef>
       </glossentry>
      </glosslist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ssh.com</literal></term>
     <listitem>
      <para>
       SSH.com'un IPv6'ya hazır SSH istemci ve sunucu programları kişisel
       ve ticari kullanım için Linux ve FreeBSD sistemlerinde özgürce kullanılabilmektedir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2>
   <title>IPv6'ya hazır tarayıcılar</title>
   <para>
    IPv6 ile çalışabilen tarayıcıların güncel durumu <link
    xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#HTTP"
    >IPv6+Linux-status-apps.html#HTTP</link> adresinde bulunmaktadır.
   </para>
   <para>Sorunların çoğu henüz çözülememiştir. </para>
   <orderedlist>
    <listitem>
     <para>
      Eğer sadece IPv4 ile çalışabilen bir vekil sunucu kullanıyorsanız,
      istek vekil sunucuya gönderilecek ama o isteği anlamadığı için cevap
      veremeyecektir. Çözüm: vekil sunucu programınızı güncelleyin.
     </para>
    </listitem>
    <listitem>
     <para>
      Otomatik vekil sunucu ayar dosyaları (<filename>*.pac</filename>)
      yapılarından dolayı (java-script ile yazılmışlardır) IPv6 isteklerini
      de (örneğin; vekil sunucu kullanma) yorumlayacak şekilde
      genişletilememektedirler.
     </para>
    </listitem>
   </orderedlist>
   <para>
    Ayrıca daha eski sürümler IPv6 ile kodlanmış
    <link xlink:href="http://[3ffe:400:100::1]/"/> veya
    <link xlink:href="http://[::1]/"/> (localhost)
    gibi URL'leri de yorumlayamamaktadırlar (<emphasis>bu URL sadece IPv6
    uyumlu bir tarayıcıyla çalışır!</emphasis>).
   </para>
   <para>
    Basit bir sınama için tarayıcınıza vekil sunucu kullanmadan yukarıdaki gibi bir adresi yazmayı deneyebilirsiniz.
   </para>
   <sect3>
    <title>Sınamak için URL'ler</title>
    <para>
     IPv6 testi için <link xlink:href="http://www.kame.net/"/> adresi
     uygun bir başlangıç noktasıdır. Eğer sayfadaki kaplumbağa hareket
     ediyorsa bağlantı IPv6 ile yapılmış demektir, aksi durumda kaplumbağa
     hareketsiz kalacaktır.<footnote><para>Ç.N.: Sistemizin dışa bakan ağ
     yapılandırması IPv6'ya uygun değilse (genelde IPv4'tür) IPv6 ile yerel
     ağınıza (örneğin modeminize veya cep telefonunuza) bile ulaşamazsınız.
     Belgenin ileri bölümlerinde IPv6 ile  makinenizden dışarı nasıl
     çıkabileceğiniz anlatılıyor. Şimdilik sisteminizde httpd çalışıyorsa,
     localhost için şunu deneyebilirsiniz:
     <link xlink:href="http://[::1]/"/></para></footnote>
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-systemcheck-daemons">
   <title>IPv6'ya hazır sunucu programları</title>
   <para>
    Belgenin bu bölümünde istemcilerle ilgili konulardan bahsedilmektedir.
    Bu yüzden <command>sshd, httpd, telnetd</command> gibi sunucularla
    ilgili ipuçları için <xref linkend="ipv6-howto-hints-daemons"/> bölümüne
    bakmalısınız.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-systemcheck-sss">
  <title>SSS (Sistemin IPv6'ya hazır olması hakkında)</title>
  <sect2>
   <title>Araçların kullanımı</title>
   <qandaset defaultlabel="number">
    <qandaentry>
     <question>
      <para>
       Yerel adreslerde <command>ping6</command> kullanılamıyorum
      </para>
     </question>
     <answer>
      <para>
       Hata iletisi: <literal>connect: Invalid argument</literal>
      </para>
      <para>
       Çekirdek bu ICMPv6 paketlerini hangi fiziiksel veya mantıksal
       arabirimi kullanarak göndermek istediğinizi bilmediği için bu
       hatayı döndürüyor.
      </para>
      <para>
       <emphasis>Çözüm</emphasis>: Kullanmak istediğiniz arabirimi,
       <command>ping6 -I eth0 fe80::2e0:18ff:fe90:9205</command> gibi
       belirtin, <xref linkend="ipv6-howto-systemcheck-ping6"/> bölümüne de
       bakın.
      </para>
     </answer>
    </qandaentry>
    <qandaentry>
     <question>
      <para>
       Sıradan bir kullanıcıyla <command>ping6</command> veya
       <command>traceroute6</command> komutlarını çalıştıramıyorum.
      </para>
     </question>
     <answer>
      <para>
       Hata iletisi: <literal>icmp socket: Operation not permitted</literal>
      </para>
      <para>
       Bu araçlar özel ICMPv6 paketleri oluşturur ve onları gönderirler. Bu
       işlem çekirdekte sadece "root" kullanıcısının erişebildiği dolaysız
       soketler ile yapılabilir. Sonuç olarak normal kullanıcılar bu hata
       iletisini alırlar.
      </para>
      <para>
       <emphasis>Çözüm</emphasis>: Eğer gerçekten tüm kullanıcıların bu
       araçları kullanmaları gerekiyorsa,
       <command>chmod u+s /path/to/uygulama</command> komutunu kullanarak
       uygulamaya <literal>suid</literal> erişim yetkisini verebilirsiniz.
       <link linkend="ipv6-howto-systemcheck-ping6">ping6 kullanımına</link>
       da bakmanız faydalı olabilir. Tüm kullanıcılara bu yetkiyi vermek
       yerine uygulamanın grubunu değiştirdikten sonra (örneğin
       <literal>wheel</literal>), uygulamayı çalıştırması için
       yetkilendireceğiniz kullanıcıları bu gruba dahil edebilirsiniz. Diğer
       kullanıcıların uygulamayı çalıştırmalarını
       <command>chmod o-rwx /path/to/program</command> komutu ile
       önleyebilirsiniz. Ya da <command>sudo</command>yu güvenlik politikanız
       doğrultusunda yapılandırmayı seçebilirsiniz.
      </para>
     </answer>
    </qandaentry>
   </qandaset>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuration-interface">
  <title>Arabirimlerin Yapılandırması</title>
  <sect2 xml:id="ipv6-howto-configuration-interface-diff">
   <title>Farklı ağ aygıtları</title>
   <para>
    Bir düğümde farklı ağ aygıtları mevcuttur. Bunlar aşağıdaki sınıflara
    ayrılabilir
   </para>
   <simplelist>
    <member>
      Fiziksel aygıtlar: <literal>eth0</literal>, <literal>tr0</literal> gibi
    </member>
    <member>
     Sanal aygıtlar: <literal>ppp0</literal>, <literal>tun0</literal>,
     <literal>tap0</literal>, <literal>sit0</literal>,
     <literal>isdn0</literal>, <literal>ippp0</literal> gibi
   </member>
   </simplelist>

   <sect3>
    <title>Fiziken sınırlandırılmış aygıtlar</title>
    <para>
     Fiziksel olarak sınırlandırılmış Ethernet veya Token-Ring gibi
     arabirimler özel bir muameleye ihtiyaç duymazlar.
    </para>
   </sect3>

   <sect3>
    <title>Sanal olarak sınırlandırılmış aygıtlar</title>
    <para>
     Sanal olarak sınırlandırılmış arabirimler her zaman özel destek isterler.
    </para>
    <variablelist>
     <varlistentry>
      <term>IPv4 içinde IPv6 tüneli arabirimleri</term>
      <listitem>
       <para>
        Bu arabirimler genellikle <literal>sitx</literal> olarak
        adlandırılırlar. <literal>sit</literal> ismi Simple Internet
        Transition (basit internet geçişi) baş harflerinin kısaltmasıdır. Bu
        aygıt IPv6 paketlerini IPv4 paketlerinin içine kapsülleyerek başka bir
        uç noktaya tüneller.
       </para>
       <para>
        <literal>sit0</literal> özel bir anlama sahiptir ve adanmış tünellerde
        kullanılamaz.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PPP arabirimleri</term>
      <listitem>
       <para>
        PPP arabirimleri IPv6 kabiliyetlerini IPv6 uyumlu artalan
        süreçlerinden alırlar.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ISDN HDLC arabirimleri</term>
      <listitem>
       <para>
        HDLC arabirimlerinin IPv6 kabiliyetleri çekirdekte hazır gelmektedir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ISDN PPP arabirimleri</term>
      <listitem>
       <para>
        ISDN PPP arabirimlerinin (<literal>ippp</literal>) IPv6 desteği
        çekirdekte olmadığı gibi bu destek için bir plan dahi yoktur çünkü
        daha genel bir <literal>ppp</literal> arabirim katmanı ile
        değiştirilmesi planlanmaktadır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SLIP + PLIP</term>
      <listitem>
       <para>
        Daha önce söylendiği gibi bu arabirimlerin IPv6 destekleri yoktur
        (gönderme yapılabilmesine rağmen alma çalışmamaktadır).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Ether-tap aygıtı</term>
      <listitem>
       <para>
        Ether-tap aygıtları IPv6 uyumludur ve kullanılabilmesi için önce
        <literal>ethertap</literal> modülünün yüklenmesi gerekmektedir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>tun aygıtları</term>
      <listitem>
       <para>Henüz denemedim.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ATM</term>
      <listitem>
       <para>
        01/2002: Çekirdekte desteklenmiyor fakat USAGI yaması ile destekliyor.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Diğerleri</term>
      <listitem>
       <para>Unuttuğum bir arabirim var mı?...</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuration-interface-updown">
  <title>Arabirimlerin etkin/edilgen hale getirilmesi</title>
  <para>
   Arabirimleri etkin ve edilgen duruma getirmek için iki yöntem
   kullanılabilir.
  </para>
  <variablelist>
   <varlistentry>
    <term><literal>ip</literal> kullanarak</term>
    <listitem>
     <para>Kullanım:</para>
<synopsis><command>ip link set dev </command><emphasis>arabirim </emphasis> <command>up</command>
<command>ip link set dev </command><emphasis>arabirim </emphasis><command>down</command>
</synopsis>
     <example>
      <title><literal>ip</literal> kullanımı</title>
<screen># <command>ip link set dev eth0 up</command>
# <command>ip link set dev eth0 down</command>
</screen>
     </example>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>ifconfig</literal> kullanarak</term>
    <listitem>
     <para>Kullanım:</para>
<synopsis><command>/sbin/ifconfig </command><emphasis>arabirim </emphasis><command>up</command>
<command>/sbin/ifconfig </command><emphasis>arabirim </emphasis><command>down</command>
</synopsis>
     <example>
      <title><literal>ifconfig</literal> kullanımı</title>
<screen># <command>/sbin/ifconfig eth0 up</command>
# <command>/sbin/ifconfig eth0 down</command>
</screen>
     </example>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuration-address">
  <title>IPv6 Adreslerinin Yapılandırılması</title>
  <para>
   Bir arabirim üzerinde IPv6 adresi yapılandırmak için farklı yöntemler
   vardır. <command>ifconfig</command> veya <command>ip</command> komutları
   kullanılabilir.
   </para>

  <sect2 xml:id="ipv6-howto-configuration-address-monitoring">
   <title>IPv6 Adreslerinin Görüntülenmesi</title>
   <para>
    İlk olarak IPv6 adres yapılandırılmasının yapılıp yapılmadığı kontrol
    edilmelidir (belki de otomatik yapılandırılmıştır).
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>ip -6 addr show dev </command><emphasis>arabirim</emphasis>
</synopsis>
      <example>
       <title>Elle yapılandırılmış konak için kullanım örneği</title>
<screen># <command>/sbin/ip -6 addr show dev eth0</command>
2: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_ fast qlen 100
inet6 fe80::210:a4ff:fee3:9566/10 scope link
inet6 2001:0db8:0:f101::1/64 scope global
inet6 fec0:0:0:f101::1/64 scope site
</screen>
      </example>
      <example>
       <title>Otomatik yapılandırılmış konak için kullanım örneği</title>
       <para>
        Burada otomatik-büyülü (auto-magically) yapılandırılmış IPv6
        adreslerini ve yaşam sürelerini görmektesiniz.
       </para>
<screen># <command>/sbin/ip -6 addr show dev eth0</command>
3: eth0: &lt;BROADCAST,MULTICAST,PROMISC,UP&gt; mtu 1500 qdisc pfifo_fast qlen 100
inet6 2002:d950:f5f8:f101:2e0:18ff:fe90:9205/64 scope global dynamic
valid_lft 16sec preferred_lft 6sec
inet6 3ffe:400:100:f101:2e0:18ff:fe90:9205/64 scope global dynamic
valid_lft 2591997sec preferred_lft 604797sec inet6 fe80::2e0:18ff:fe90:9205/10 scope link
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ifconfig</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ifconfig </command><emphasis>arabirim</emphasis>
</synopsis>
      <example>
       <title><literal>ifconfig</literal> kullanımı</title>
       <para>
        Örnek (çıktı sadece IPv6 adreslerini göstermesi için
        <command>grep</command> ile filtrelenmiştir). Farklı faaliyet alanları
        için farklı IPv6 adresleri görüntülenmektedir:
       </para>
<screen># <command>/sbin/ifconfig eth0 |grep "inet6 addr:"</command>
inet6 addr: fe80::210:a4ff:fee3:9566/10 Scope:Link
inet6 addr: 2001:0db8:0:f101::1/64 Scope:Global
inet6 addr: fec0:0:0:f101::1/64 Scope:Site
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-configuration-address-adding">
   <title>Bir IPv6 Adresinin Eklenmesi</title>
   <para>
    Linux'ta bir IPv6 adresinin eklenmesi IPv4 adresli arabirime "IP ALIAS"
    adresinin eklenmesi ile benzer bir işleyişe sahiptir.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 addr add </command><emphasis>ipv6adres</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>dev </command><emphasis>arabirim</emphasis>
</synopsis>
      <example>
       <title>IPv6 adresini eklemek için <literal>ip</literal>
        kullanımı</title>
<screen># <command>/sbin/ip -6 addr add 2001:0db8:0:f101::1/64 dev eth0</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ifconfig</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ifconfig </command><emphasis>arabirim </emphasis><command>inet6 add </command><emphasis>ipv6adres</emphasis>/<emphasis>önek_uzunluğu</emphasis>
</synopsis>
      <example>
       <title>IPv6 adresini eklemek için <literal>ifconfig</literal>
        kullanımı</title>
<screen># <command>/sbin/ifconfig eth0 inet6 add 2001:0db8:0:f101::1/64 </command>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="ipv6-howto-configuration-address-removing">
   <title>IPv6 Adreslerinin Kaldırılması</title>
   <para>
    Pek sık ihtiyaç duyulmaz ama varolmayan IPv6 adreslerinin kaldırılması,
    eski çekirdeklerde sistemin çökmesine neden olabileceğinden dikkatli
    kullanılmalıdır.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 addr del </command><emphasis>ipv6adres</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>dev </command><emphasis>arabirim</emphasis>
</synopsis>
     <example>
      <title>IPv6 adresini kaldırmak için <literal>ip</literal>
       kullanımı</title>
<screen># <command>/sbin/ip -6 addr del 2001:0db8:0:f101::1/64 dev eth0</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ifconfig</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ifconfig </command><emphasis>arabirim </emphasis><command>inet6 del </command><emphasis>ipv6adres</emphasis>/<emphasis>önek_uzunluğu</emphasis>
</synopsis>
     <example>
      <title>IPv6 adresini kaldırmak için <literal>ifconfig</literal>
       kullanımı</title>
<screen># <command>sbin/ifconfig eth0 inet6 del 2001:0db8:0:f101::1/64</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuration-route">
  <title>Normal IPv6 rotalarının yapılandırılması</title>
  <para>
   Eğer kendi bağlantınızın dışına çıkıp IPv6-internetine paket göndermek
   isterseniz yönlendirme yapmanız gerekir. Eğer hali hazırda IPv6 uyumlu
   bir yönlendiriciniz varsa IPv6 rotaları eklemek mümkün olacaktır.
  </para>
  <sect2 xml:id="ipv6-howto-configuration-route-monitoring">
   <title>Varolan IPv6 rotalarının görüntülenmesi</title>
   <para>
    İlk olarak hangi IPv6 adreslerinin yapılandırılmış oldukları kontrol
    edilmelidir (belki de otomatik yapılandırılma ile yapılandırılmışlardır).
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 route show </command>[<command>dev </command><emphasis>aygıt</emphasis>]
</synopsis>
     <example><title/>
<screen># <command>/sbin/ip -6 route show dev eth0</command>
2001:0db8:0:f101::/64 proto kernel metric 256 mtu 1500 advmss 1440
fe80::/10             proto kernel metric 256 mtu 1500 advmss 1440
ff00::/8              proto kernel metric 256 mtu 1500 advmss 1440
default               proto kernel metric 256 mtu 1500 advmss 1440
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>route</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/route -A inet6</command>
</synopsis>
     <example><title/>
      <para>
       Çıktı sadece <literal>eth0</literal> arabirimini gösterecek şekilde
       filtrelenmiştir. Bir arabirim üzerindeki farklı adresler için farklı
       IPv6 rotaları görmektesiniz.
      </para>
<screen># <command>/sbin/route -A inet6 |grep -w "eth0"</command>
2001:0db8:0:f101 ::/64 :: UA  256 0 0 eth0 &lt;== <emphasis>küresel adres için arabirim rotası</emphasis>
fe80::/10        ::       UA  256 0 0 eth0 &lt;== <emphasis>yerel adres için arabirim rotası</emphasis>
ff00::/8         ::       UA  256 0 0 eth0 &lt;== <emphasis>tüm çoğa gönderim adresleri için arabirim rotası</emphasis>
::/0             ::       UDA 256 0 0 eth0 &lt;== <emphasis>öntanımlı rota</emphasis>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-configuration-route-adding">
   <title>Bir ağ geçidi üzerinden bir IPv6 rotası eklemek</title>
   <para>
    Genellikle IPv6 ile bağlantınızın dışına ulaşmak istediğinizde ihtiyaç
    duyulur.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 route add </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>via </command><emphasis>ipv6adres </emphasis>[<command>dev </command><emphasis>aygıt</emphasis>]
</synopsis>
     <example><title/>
<screen># <command>/sbin/ip -6 route add 2000::/3 via 2001:0db8:0:f101::1</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>route</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/route -A inet6 add </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>gw </command><emphasis>ipv6adres </emphasis>[<command>dev </command><emphasis>aygıt</emphasis>]
</synopsis>
      <para>
       Eğer ağ geçidinin IPv6 adresi yerel bir adrese bağlantı ise
       bir aygıta da ihtiyacınız olabilir.
      </para>
      <para>
       Aşağıdaki örnekte tüm küresel adreslere (<literal>2000::/3</literal>),
       <literal>2001:0db8:0:f101::1</literal> ağ geçidi eklenmektedir:
      </para>
      <example><title/>
<screen># <command>/sbin/route -A inet6 add 2000::/3 gw 2001:0db8:0:f101::1</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-configuration-route-removing">
   <title>Bir ağ geçidi üzerinden IPv6 rotasını kaldırmak</title>
   <para>
    Genellikle elle yapılmasına gerek olmaz. Bu işlem arabirimlerin kapanışı
    sırasında ağ yapılandırma betikleri tarafından yapılır.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 route del </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>via </command><emphasis>ipv6adres </emphasis>[<command>dev </command><emphasis>aygıt</emphasis>]
</synopsis>
      <example><title/>
<screen># <command>/sbin/ip -6 route del 2000::/3 via 2001:0db8:0:f101::1</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>route</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/route -A inet6 del </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis>[<command>dev </command><emphasis>aygıt</emphasis>]
</synopsis>
      <example>
       <title>Yukarıdaki örnekte eklenen rotanın kaldırılması</title>
<screen># <command>/sbin/route -A inet6 del 2000::/3 gw 2001:0db8:0:f101::1</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-configuration-route-addingviainterface">
   <title>Bir arabirim üzerinden IPv6 rotası eklemek</title>
   <para>
    Adanmış noktadan-noktaya bağlantılar haricinde genellikle ihtiyaç
    duyulmaz.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 route add </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>dev </command><emphasis>aygıt </emphasis><command>metric 1</command>
</synopsis>
      <example><title/>
<screen># <command>/sbin/ip -6 route add 2000::/3 dev eth0 metric 1</command>
</screen>
       <para>
        <command>ip</command> komutu için öntanımlı metrik "1024"
        olduğundan rotanın metriği ile uyumluluğu sağlamak için "1" metriği
        kullanılmıştır.
       </para>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>route</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/route -A inet6 add </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>dev </command><emphasis>aygıt</emphasis>
</synopsis>
      <example><title/>
<screen># <command>/sbin/route -A inet6 add 2000::/3 dev eth0</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-configuration-route-removingviainterface">
   <title>Bir arabirim üzerinden IPv6 rotası kaldırmak</title>
   <para>
    Genellikle elle yapılması gerekmez. Bu işlem kapanış sırasında
    yapılandırma betikleri tarafından yapılır.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 route del </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>dev </command><emphasis>aygıt</emphasis>
</synopsis>
      <example><title/>
<screen># <command>/sbin/ip -6 route del 2000::/3 dev eth0</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>route</literal> kullanarak</term>
     <listitem>
      <para>Kullanım:</para>
<synopsis><command>/sbin/route -A inet6 del </command><emphasis>ipv6ağı</emphasis>/<emphasis>önek_uzunluğu </emphasis><command>dev </command><emphasis>aygıt</emphasis>
</synopsis>
      <example><title/>
<screen># <command>/sbin/route -A inet6 del 2000::/3 dev eth0</command>
</screen>
      </example>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-configuration-route-sss">
   <title>IPv6 rotaları ile ilgili SSS</title>
   <sect3>
    <title>Öntanımlı IPv6 yönlendirme desteği</title>
    <para>
     IPv6 fikirlerinden biri hiyerarşik yönlendirmedir, bu nedenle
     yönlendiricilerde sadece eksik yönlendirme girdilerine ihtiyaç duyulur.
    </para>
    <para>
     Güncel Linux çekirdekleri ile ilgili bazı sorunlar mevcuttur:
    </para>
    <qandaset defaultlabel="number">
     <qandaentry>
      <question>
       <para>İstemciler (hiç bir paket yönlendirilmiyor!)</para>
      </question>
      <answer>
       <para>
        İstemciler <literal>::/0</literal> gibi bir öneke sahip öntanımlı
        yönlendirme atayabilirler. Bunu otomatik yapılandırma ile de
        öğrenebilirler. Aşağıda bağlantıda <command>radvd</command>
        kullanılan bir örnek bulunmaktadır:
       </para>
       <example><title/>
<screen># <command>ip -6 route show | grep ^default</command>
default via fe80::212:34ff:fe12:3450 dev eth0 proto kernel metric 1024 expires 29sec mtu 1500 advmss 1440
</screen>
       </example>
      </answer>
     </qandaentry>
     <qandaentry>
      <question>
       <para>Yönlendiriciler (paket yönlendirme durumunda)</para>
      </question>
      <answer>
       <para>
        Güncel Linux çekirdekleri (en azından &lt;= 2.4.17) öntanımlı
        yönlendirmeleri desteklememektedir. Atanmalarında problem olmamasına
        rağmen paket yönlendirmede (yönlendiricilerin asli görevidir)
        başarısız olmaktadırlar.
       </para>
       <para>
        Bu yüzden şimdilik "öntanımlı yönlendirme" sadece
        <literal>2000::/3</literal> adres öneki kullanılarak atanabilmektedir.
       </para>
       <para>
        USAGI projesi hali hazırda bunu desteklemektedir.
       </para>
       <caution>
        <para>
         Kenar yönlediriciler üzerinde adres filtreleme yapmadan öntanımlı
         yönlendirme yaparken dikkatli olun, aksi halde istenmeyen çoğa
         gönderimler veya alan-içi trafiğin dışarı çıkması gibi durumlarla
         karşılaşırsınız.
        </para>
       </caution>
      </answer>
     </qandaentry>
    </qandaset>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-neighbor-discovery">
  <title>Komşuların Araştırılması</title>
  <para>
   Komşuların araştırılması (neighbor discovery) IPv4'deki ARP'nin (Adres
   Çözümleme Protokolü) IPv6'daki devamıdır. Etkin komşular hakkında bilgi
   alabildiğiniz gibi girdileri silebilir veya değiştirebilirsiniz. Çekirdek
   IPv4'deki ARP'da olduğu gibi komşuların tespitinde başarılıdır.
   <command>ip</command> komutu kullanılarak edinilen bilgiler incelenebilir.
  </para>
  <sect2 xml:id="ipv6-howto-neighbor-discovery-wip">
   <title><literal>ip</literal> kullanılarak komşuların görüntülenmesi</title>
   <para>
    Aşağıdaki komutu kullanarak öğrenilen veya yapılandırılmış olan IPv6
    komşularını görüntüleyebilirsiniz:
   </para>
<synopsis><command>ip -6 neigh show </command>[<command>dev </command><emphasis>aygıt</emphasis>]
</synopsis>
   <example><title/>
    <para>
     Aşağıdaki örnekte ulaşılabilen tek komşu bir yönlendiricidir:
    </para>
<screen># <command>ip -6 neigh show</command>
fe80::201:23ff:fe45:6789 dev eth0 lladdr 00:01:23:45:67:89 router nud reachable
</screen>
   </example>
  </sect2>

  <sect2 xml:id="ipv6-howto-neighbor-discovery-table">
   <title><literal>ip</literal> kullanılarak komşu tablosunun değiştirilmesi</title>
   <sect3>
    <title>Girdiyi elle eklemek</title>
    <para>
     Aşağıdaki komutu kullanarak kendiniz bir girdi ekleyebilirsiniz:
    </para>
<synopsis><command>ip -6 neigh add </command><emphasis>ipv6adres </emphasis><command>lladdr </command><emphasis>ağkatmanı_adresi </emphasis><command>dev </command><emphasis>aygıt</emphasis>
</synopsis>
    <example><title/>
<screen># <command>ip -6 neigh add fec0::1 lladdr 02:01:02:03:04:05 dev eth0</command>
</screen>
    </example>
   </sect3>

   <sect3>
    <title>Girdiyi elle silmek</title>
    <para>Girdi eklediğiniz gibi silebilirsiniz de:</para>
<synopsis><command>ip -6 neigh del </command><emphasis>ipv6adres </emphasis><command>lladdr </command><emphasis>ağkatmanı_adresi </emphasis><command>dev </command><emphasis>aygıt</emphasis>
</synopsis>
    <example><title/>
<screen># <command>ip -6 neigh del fec0::1 lladdr 02:01:02:03:04:05 dev eth0</command>
</screen>
    </example>
   </sect3>

   <sect3>
    <title>Daha ileri seçenekler</title>
    <para>
     <command>ip</command> komutu yeterince belgelendirilmemesine rağmen
     oldukça güçlüdür. Diğer seçenekler hakkında bilgi almak için
     <option>help</option> kullanılabilir:
    </para>
<screen><prompt># </prompt><command>ip -6 neigh help</command>
Usage: ip neigh { add | del | change | replace }
                { ADDR [ lladdr LLADDR ] [ nud STATE ] | proxy ADDR } [ dev DEV ]
                [ router ] [ extern_learn ] [ protocol PROTO ]

        ip neigh { show | flush } [ proxy ] [ to PREFIX ] [ dev DEV ] [ nud STATE ]
                                  [ vrf NAME ]
        ip neigh get { ADDR | proxy ADDR } dev DEV

STATE := { permanent | noarp | stale | reachable | none |
           incomplete | delay | probe | failed }
</screen>
    <para>
     Bazı seçenekler sadece IPv4 için geçerli gibi görünüyorlar. Eğer
     seçenekler veya gelişmiş kullanımlar hakkında katkıda bulunabilirseniz
     lütfen bana ulaştırın.
    </para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuring-6in4-tunnels">
  <title>IPv4 içinde IPv6 tüneli yapılandırmak</title>
  <para>
   Eğer IPv6 internetine erişmek için uygun bir IPv6 ağınız yoksa,
   IPv4 içinde IPv6 tüneline ihitiyacınız var demektir.
  </para>
  <para>
   Birkaç tünel mekanizması ve tünel yapılandırma yönetimi vardır.
  </para>

  <sect2 xml:id="ipv6-howto-configuring-6in4-tunnels-types">
   <title>Tünel türleri</title>
   <para>
    IPv4 ağlarında IPv6 paketlerini tünellemenin birden çok yöntemi vardır.
   </para>
   <sect3>
    <title>Statik noktadan-noktaya tünelleme: <literal>salt6</literal></title>
    <para>
     Noktadan-noktaya tünel, son noktaya adanmış tüneldir. Bu son nokta sizin
     IPv6 ağınızı (geri yönlendirme için) ve tünelinizin son noktasının IPv4
     adresini bilmeli ve <link
     xlink:href="http://www.faqs.org/rfcs/rfc2893.html">RFC 2893 / Transition
     Mechanisms for IPv6 Hosts and Routers</link> belgesinde tanımlandığı gibi
     olmalıdır. Gereksinimler:
    </para>
    <simplelist>
     <member>
      Tünelinizin son noktasının IPv4 adresi statik olmalı ve tünel dışından
      ulaşılabilir olmalıdır.
     </member>
     <member>
      Size bir küresel IPv6 öneki tahsis edilmiş olmalıdır (<link
      linkend="ipv6-howto-addresstypes-6bone">salt6 kaydına bakın</link>).
     </member>
     <member>
      IPv6 önekinizi tünelinizin sonuna yönlendirebilecek bir dış tünel son
      noktası gereklidir (çoğunlukla uzaktan elle yapılandırma gerekir).
     </member>
    </simplelist>
   </sect3>

   <sect3>
    <title>Otomatik tünelleme</title>
    <para>
     Otomatik tünelleme ancak bir düğüm diğerinin IPv4 adresini önceden
     alarak doğrudan ona bağlanıyorsa oluşur.
    </para>
   </sect3>

   <sect3 xml:id="ipv6-howto-tunelling-6to4">
    <title>6'ya 4 Tünelleme</title>
    <para>
     6'ya 4 tünelleme (<link
     xlink:href="http://www.faqs.org/rfcs/rfc3056.html">RFC 3056 / Connection
     of IPv6 Domains via IPv4 Clouds</link>) otomatik tünelleme için basit
     bir mekanizma kullanır. Küresel emsalsiz bir IPv4 adresine sahip her
     düğüm 6'ya 4 tünelinin son noktası olabilir (elbette IPv4 güvenlik
     duvarının trafiği engellememesi gerekir). 6'ya 4 tünelleme çoğunlukla
     bire-bir tünel değildir. Bu tünelleme yukarı ve aşağı tünelleme olarak
     ikiye ayrılabilir. Ayrıca, özel bir IPv6 adresinin bu düğümün IPv6 ağına
     bağlanmak için 6'ya 4 tünellemesi kullanacağını gösterir.
    </para>
    <variablelist>
     <varlistentry>
      <term>6'ya 4 önekinin oluşturulması</term>
      <listitem>
       <para>
        6'ya 4 adresi aşağıdaki gibi tanımlanır (şema <link
        xlink:href="http://www.faqs.org/rfcs/rfc3056.html">RFC 3056 /
        Connection of IPv6 Domains via IPv4 Clouds</link> adresinden
        alınmıştır):
       </para>
<screen>|   3+13   |    32     |    16  |            64 bits             |
+---+------+-----------+--------+--------------------------------+
|  FP+TLA  |  V4ADDR   | SLA ID |           Interface ID         |
|  0x2002  |           |        |                                |
+---+------+-----------+--------+--------------------------------+
</screen>
        <para>
         FP ve TLA birlikte (16 bit) <literal>0x2002</literal> değerine
         sahiptirler. V4ADDR düğümün onaltılık gösterimde küresel emsalsiz
         IPv4 adresidir. SLA ise alt ağ kimliğidir (65536 yerel alt ağ
         mümkündür) ve bu değerler sizin yerel ağ yapınızı belirlerler.
        </para>
        <para>
         Bu değerler, ağ geçitleri için genellikle SLA <literal>0000</literal>
         ve sonek <literal>::1</literal> alınarak oluşturulurlar (bu zorunlu
         değildir, yerel nedenlerle başka türlü de alınabilirler) ve 6'ya 4
         tünel arabirimine atanırlar. Microsoft Windows'un V4ADDR değerini
         sonek için de kullandığını unutmayın.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>6'ya 4 yukarı tünelleme</term>
       <listitem>
        <para>
         Düğüm, tünelin IPv6 paketlerini göndereceği dış son noktasını
         bilmelidir. 6'ya 4 tünellemenin "ilk" dönemlerinde, yukarı
         yönlendirmeyi kabul eden adanmış yönlendiriciler tanımlanıyordu.
         Yönlendiricilerin listesi için: <link
         xlink:href="http://www.kfu.com/%7Ensayer/6to4/">NSayer's 6to4
         information</link>
        </para>
        <para>
         Bugünlerde, 6'ya 4 yönlendiricileri <literal>192.88.99.1</literal>
         adresi kullanılarak otomatik olarak bulunabiliyor. Bunu yönlendirme
         protokollerinin arka planı idare etmektedir, ayrıntılar için: <link
         xlink:href="http://www.faqs.org/rfcs/rfc3068.html">RFC 3068 / An
         Anycast Prefix for 6to4 Relay Routers</link> belgesine
         bakabilirsiniz.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>6'ya 4 aşağı tünelleme</term>
       <listitem>
        <para>
         Aşağı yönlendirme (salt6'dan 6'ya 4 uyumlu düğüme) aslında sabit
         değildir ve asıl paketlerin gönderildiği konağa göre değişebilir. İki
         farklı durum söz konusudur:
        </para>
        <simplelist>
         <member>
          Yabancı konak 6'ya 4 kullanmaktadır ve paketleri doğrudan sizin
          düğümünüze geri göndermektedir (aşağıya bakınız)
         </member>
         <member>
          Yabancı konak paketleri geriye IPv6 ağı üzerinden göndermektedir
          ve dinamik yönlendirmeye bağlı olarak bir aktarım (relay)
          yönlendiricisi düğümünüze geri dönüş için otomatik tünel
          yaratmaktadır.
         </member>
        </simplelist>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Olası 6'ya 4 trafik</term>
       <listitem>
        <simplelist>
         <member>
          6'ya 4'ten 6'ya 4'e: iki 6to4 uyumlu konak arasında doğrudan
          tünellenir.
         </member>
         <member>
          6'ya 4'ten 6'ya 4 olmayana: yukarı tünelleme ile gönderilir.
         </member>
         <member>
          6'ya 4 olmayandan 6'ya 4'e: aşağı tünelleneme ile gönderilir.
         </member>
        </simplelist>
       </listitem>
      </varlistentry>
     </variablelist>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuring-6in4-tunnels-monitoring">
  <title>Varolan tünellerin görüntülenmesi</title>
  <variablelist>
   <varlistentry>
    <term><literal>ip</literal> kullanarak</term>
    <listitem>
     <para>Kullanım:</para>
<synopsis><command>/sbin/ip -6 tunnel show </command>[<emphasis>aygıt</emphasis>]
</synopsis>
     <example><title/>
<screen># <command>/sbin/ip -6 tunnel show</command>
sit0: ipv6/ip remote any local any ttl 64 nopmtudisc
sit1: ipv6/ip remote 195.226.187.50 local any ttl 64
</screen>
     </example>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>route</literal> kullanarak</term>
    <listitem>
     <para>Kullanım:</para>
<synopsis><command>/sbin/route -A inet6</command>
</synopsis>
     <example><title/>
      <para>
       Çıktı sadece sanal <literal>sit0</literal> arabirimi üzerindeki
       tünelleri gösterecek şekilde filtrelenmiştir.
      </para>
<screen># <command>/sbin/route -A inet6 | grep "\Wsit0\W*$"</command>
::/96      ::               U   256  2  0  sit0
2002::/16  ::               UA  256  0  0  sit0
2000::/3   ::193.113.58.75  UG    1  0  0  sit0
fe80::/10  ::               UA  256  0  0  sit0
ff00::/8   ::               UA  256  0  0  sit0
</screen>
     </example>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuring-6in4-tunnels-configuring">
   <title>Noktadan-noktaya tünel yapılandırması</title>
   <para>
    Noktadan-noktaya tünellerin eklenmesi ve kaldırılması üç farklı şekilde
    yapılabilmektedir.
   </para>
   <para>
    <command>ip</command> komutunu kullanarak tünel yapılandırması hakkında iyi bir kaynak: <link
    xlink:href="http://www.deepspace6.net/docs/iproute2tunnel-en.html"
    >Configuring tunnels with iproute2 (article)</link> (<link
    xlink:href="http://mirrors.bieringer.de/www.deepspace6.net/docs/iproute2tunnel-en.html">yansı</link>).
   </para>
   <sect2>
    <title> Noktadan-noktaya tüneli eklemek</title>
    <variablelist>
     <varlistentry>
      <term><literal>ip</literal> kullanarak</term>
      <listitem>
       <para>
        Hali hazırdaki küçük boyutlu tünelleri oluşturmak için kullanılan
        yaygın yöntemdir.
       </para>
       <para>
        Tünel aygıtı oluşturmak için kullanımı şöyledir (öntanımlı TTL değeri
        0 olduğundan yenisi tayin edilmelidir).
       </para>
<synopsis><command>/sbin/ip tunnel add </command><emphasis>aygıt </emphasis><command>mode sit ttl </command><emphasis>öntanımlı_ttl </emphasis><command>remote </command><emphasis>yabancı_tünelin_ipv4adresi </emphasis><command>local </command><emphasis>yerel_ipv4adres</emphasis>
</synopsis>
       <para>Kullanım (üç tünel için genel örnek):</para>
       <para>
<synopsis><command>/sbin/ip tunnel add sit1 mode sit ttl </command><emphasis>öntanımlı_ttl </emphasis><command>remote </command><emphasis>1inci_yabancı_tünelin_ipv4adresi </emphasis><command>local </command><emphasis>yerel_ipv4adres</emphasis>
<command>/sbin/ip link set dev sit1 up</command><command>/sbin/ip -6 route add </command><emphasis>1inci_rotanın_öneki </emphasis><command>dev sit1 metric 1</command>
<command>/sbin/ip tunnel add sit2 mode sit ttl </command><emphasis>öntanımlı_ttl 2nci_yabancı_tünelin_ipv4adresi </emphasis><command>local </command><emphasis>yerel_ipv4adres</emphasis>
<command>/sbin/ip link set dev sit2 up</command><command>/sbin/ip -6 route add </command><emphasis>2nci_rotanın_öneki </emphasis><command>dev sit2 metric 1</command>
<command>/sbin/ip tunnel add sit3 mode sit ttl </command><emphasis>öntanımlı_ttl 3üncü_yabancı_tünelin_ipv4adresi </emphasis><command>local </command><emphasis>yerel_ipv4adres</emphasis>
<command>/sbin/ip link set dev sit3 up</command><command>/sbin/ip -6 route add </command><emphasis>3üncü_rotanın_öneki </emphasis><command>dev sit3 metric 1</command>
</synopsis>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ifconfig</literal> ve <literal>route</literal>
       kullanarak (önerilmez)</term>
      <listitem>
       <para>
        Bu yöntem biraz tuhaf olduğundan önerilmemektedir. Bir tünel
        eklenirse sorun olmazken, eğer birden çok tünel yapılandırısanız,
        ilk yapılandırdıklarınızı kapatıp diğerlerini çalışır halde
        bırakmanız kolay olmamaktadır.
       </para>
       <para>Kullanım (üç tünel için genel örnek):</para>
<synopsis><command>/sbin/ifconfig sit0 up</command>
<command>/sbin/ifconfig sit0 tunnel </command><emphasis>1inci_yabancı_tünelin_ipv4adresi</emphasis>
<command>/sbin/ifconfig sit1 up</command>
<command>/sbin/route -A inet6 add </command><emphasis>1inci_rotanın_öneki </emphasis><command>dev sit1</command>
<command>/sbin/ifconfig sit0 tunnel </command><emphasis>2nci_yabancı_tünelin_ipv4adresi</emphasis>
<command>/sbin/ifconfig sit2 up</command>
<command>/sbin/route -A inet6 add </command><emphasis>2nci_rotanın_öneki </emphasis><command>dev sit2</command>
<command>/sbin/ifconfig sit0 tunnel </command><emphasis>3üncü_yabancı_tünelin_ipv4adresi</emphasis>
<command>/sbin/ifconfig sit3 up</command>
<command>/sbin/route -A inet6 add </command><emphasis>3üncü_rotanın_öneki </emphasis><command>dev sit3</command>
</synopsis>
       <warning>
        <title>Önemli Uyarı</title>
        <para>
         BU YÖNTEMİ KULLANMAYIN, çünkü böyle bir yapılandırma internetin
         her yerinden ulaşılabilen bir "otomatik tünelleme" sağlamaktadır.
         Bu göze alınamaz bir risktir.
        </para>
       </warning>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Sadece <literal>route</literal> kullanarak</term>
      <listitem>
       <para>
        Tünel yapılandırmasını NBMA (Non Broadcast Multiple Access) tarzında
        da yapmak mümkündür. Birden çok tüneli aynı anda eklemenin kolay bir
        yoludur. Fakat tünelleri numaralandırmak mümkün değildir (bu istenilen
        bir durum değildir).
       </para>
       <para>Kullanım (üç tünel için genel örnek):</para>
<synopsis><command>/sbin/ifconfig sit0 up</command>
<command>/sbin/route -A inet6 add </command><emphasis>1inci_rotanın_öneki </emphasis><command>gw ::</command><emphasis>1inci_yabancı_tünelin_ipv4adresi </emphasis><command>dev sit0</command>
<command>/sbin/route -A inet6 add </command><emphasis>2nci_rotanın_öneki </emphasis><command>gw ::</command><emphasis>2nci_yabancı_tünelin_ipv4adresi </emphasis><command>dev sit0</command>
<command>/sbin/route -A inet6 add </command><emphasis>3üncü_rotanın_öneki </emphasis><command>gw ::</command><emphasis>3üncü_yabancı_tünelin_ipv4adresi </emphasis><command>dev sit0</command>
</synopsis>
       <warning>
        <title>Önemli Uyarı</title>
        <para>
         BU YÖNTEMİ KULLANMAYIN, çünkü böyle bir yapılandırma internetin
         her yerinden ulaşılabilen bir "otomatik tünelleme" sağlamaktadır.
         Bu göze alınamaz bir risktir.
        </para>
       </warning>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2>
    <title>Noktadan-noktaya tüneli iptal etmek</title>
    <para>
     Genellikle elle yapılması gerekmez, IPv6 yapılandırmasının düzgünce
     kapatılması veya yeniden başlatılması için betikler tarafından
     kullanılır.
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>ip</literal> kullanarak</term>
      <listitem>
       <para>
        Bir tünel aygıtının kaldırılması aşağıdaki gibi yapılır:
       </para>
<synopsis><command>/sbin/ip tunnel del </command><emphasis>aygıt</emphasis>
</synopsis>
       <para>Kullanım (üç tünel için genel örnek):</para>
<synopsis><command>/sbin/ip -6 route del </command><emphasis>1inci_rotanın_öneki </emphasis><command>dev sit1
/sbin/ip link set sit1 down
/sbin/ip tunnel del sit1
/sbin/ip -6 route del </command><emphasis>2nci_rotanın_öneki </emphasis><command>dev sit2
/sbin/ip link set sit2 down
/sbin/ip tunnel del sit2
/sbin/ip -6 route del </command><emphasis>3üncü_rotanın_öneki </emphasis><command>dev sit3
/sbin/ip link set sit3 down
/sbin/ip tunnel del sit3</command>
</synopsis>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ifconfig</literal> ve <literal>route</literal>
       kullanarak (önerilmez)</term>
      <listitem>
       <para>
        Durdurulması da oluşturulması kadar tuhaftır. Tüneller geriye doğru
        bir sıra ile kaldırılmalıdır, yani en son yaratılan ilk sırada
        kaldırılmalıdır.
       </para>
       <para>Kullanım (üç tünel için genel örnek):</para>
<synopsis><command>/sbin/route -A inet6 del </command><emphasis>3üncü_rotanın_öneki </emphasis><command>dev sit3
/sbin/ifconfig sit3 down
/sbin/route -A inet6 del </command><emphasis>2nci_rotanın_öneki </emphasis><command>dev sit2
/sbin/ifconfig sit2 down
/sbin/route -A inet6 add </command><emphasis>1inci_rotanın_öneki </emphasis><command>dev sit1
/sbin/ifconfig sit1 down
/sbin/ifconfig sit0 down</command>
</synopsis>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Sadece <literal>route</literal> kullanarak</term>
      <listitem>
       <para>Normal IPv6 yönlendirmelerini kaldırmak gibidir.</para>
       <para>Kullanım (üç tünel için genel örnek):</para>
<synopsis><command>/sbin/route -A inet6 del </command>
<emphasis>1inci_rotanın_öneki </emphasis><command>gw ::</command><emphasis>1inci_yabancı_tünelin_ipv4adresi </emphasis><command>dev sit0
/sbin/route -A inet6 del </command><emphasis>2nci_rotanın_öneki </emphasis><command>gw ::</command><emphasis>2nci_yabancı_tünelin_ipv4adresi </emphasis><command>dev sit0
/sbin/route -A inet6 del </command><emphasis>3üncü_rotanın_öneki </emphasis><command>gw ::</command><emphasis>3üncü_yabancı_tünelin_ipv4adresi </emphasis><command>dev sit0
/sbin/ifconfig sit0 down</command>
</synopsis>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2>
    <title>Noktadan-noktaya numaralandırılmış tüneller</title>
    <para>
     Bazen IPv6 adresleriyle IPv4 gibi noktadan-noktaya tünel yapılandırmak
     gerekebilir. Bu sadece ikinci (ifconfig+route) ve üçüncü (ip+route) tür
     yapılandırmalar ile mümkündür. Bu durumlarda tünel arabirimine IPv6
     adresini arabirim yapılandırmasında gösterildiği gibi ekleyebilirsiniz.
    </para>
   </sect2>
  </sect1>

  <sect1 xml:id="ipv6-howto-configuring-6in4-tunnels-setting">
   <title>6'ya 4 tünellerin ayarları</title>
   <para>
    2.2.x serisi çekirdeklerin 6'ya 4 tünel desteği olmadığını unutmayın
    (daha fazla bilgi <xref linkend="ipv6-howto-systemcheck-kernel"/>
    bölümünde mevcut). Dikkat edilmesi gereken bir başka konu ise 6'ya 4
    adresinin önek uzunluğunun 16 olduğudur. Diğer tüm 6'ya 4 uyumlu konaklar
    aynı ikinci katmandadırlar.
   </para>
   <sect2>
    <title>6'ya 4 tüneli eklemek</title>
    <para>
     İlk olarak yönlendirilebilir IPv4 adresinizi kullanarak 6'ya 4 önekinizi
     hesaplamalısınız (eğer istemcinizin küresel yönlendirilebilir IPv4 adresi
     yoksa, özel durumlarda sınır ağ geçitlerinde NAT kullanılabilir):
    </para>
    <para>IPv4 adresiniz aşağıdaki gibi ise</para>
<literallayout>1.2.3.4</literallayout>
    <para>oluştracağınız 6'ya 4 öneki şöyle olacaktır:</para>
<literallayout>2002:0102:0304::</literallayout>
    <para>
     Yerel 6'ya 4 ağ geçitleri <literal>::1</literal> ile sonlanmalıdır,
     (eğer daha iyi hissedecekseniz başka bir şekilde sonlandırmayı tercih
     edebilirsiniz) bu yüzden yerel 6'ya 4 adresiniz aşağıdaki gibi olacaktır:
    </para>
 <literallayout>2002:0102:0304::1</literallayout>
    <para>Otomatik üretim aşağıdakine benzemelidir:</para>
<screen>ipv4="1.2.3.4"; printf "2002:%02x%02x:%02x%02x::1" `echo $ipv4 | tr "." " "`
</screen>
    <para>6to4 tüneli yapılandırmak için iki yöntem vardır.</para>
    <variablelist>
     <varlistentry>
      <term><literal>ip</literal> kullanarak ve adanmış tünel aygıtı ile</term>
      <listitem>
       <para>
        Önerilen yöntem budur (öntanımlı TTL değeri 0 olduğundan yenisi atanmalıdır).
       </para>
       <para>Yeni bir tünel aygıtı oluşturun:</para>
<screen># <command>/sbin/ip tunnel add tun6to4 mode sit ttl </command><emphasis>öntanımlı_ttl </emphasis><command>remote any local </command><emphasis>yerel_ipv4adres</emphasis>
</screen>
       <para>Arabirimi etkinleştirin:</para>
<screen># <command>/sbin/ip link set dev tun6to4 up</command>
</screen>
       <para>Arabirime yerel 6'ya 4 adresini atayın.</para>
       <note>
        <para>Önekin uzunluğunun 16 olması önemlidir!</para>
       </note>
<screen># <command>/sbin/ip -6 addr add </command><emphasis>yerel_6ya4_adres </emphasis><command>/16 dev tun6to4</command>
</screen>
       <para>
        6ya4 yönlendiricilerini kullanarak küresel IPv6 ağına (öntanımlı)
        yönlendirme ekleyin.
       </para>
<screen># <command>/sbin/ip -6 route add 2000::/3 via ::192.88.99.1 dev tun6to4 metric 1</command>
</screen>
       <para>
        <command>ip</command> komutunun bazı sürümlerinin (örneğin SuSE Linux
        9.0'da yeralan sürüm) IPv4-uyumlu IPv6 adreslerini ağ geçidi olarak
        desteklemediği raporlanmıştır. Bu gibi durumlarda ilgili IPv6 adresi
        kullanılmalıdır:
       </para>
<screen># <command>/sbin/ip -6 route add 2000::/3 via 2002:c058:6301::1 dev tun6to4 metric 1</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ifconfig</literal> ve <literal>ip</literal>kullanarak
       ve genel tünel aygıtı <literal>sit0</literal> ile (önerilmez)</term>
      <listitem>
       <para>
        Genel tünel aygıtı <literal>sit0</literal> aygıt başına filtreleme
        tanımlamaya izin vermediğinden bu yöntem önerilmemektedir.
       </para>
       <para>
        Genel tünel aygıtı <literal>sit0</literal>'ı etkinleştirin:
       </para>
<screen># <command>/sbin/ifconfig sit0 up</command>
</screen>
       <para>Arabirime yerel 6ya4 adresini ekleyin:</para>
<screen># <command>/sbin/ifconfig sit0 add </command><emphasis>yerel_6ya4_adres</emphasis><command>/16</command>
</screen>
       <para>
        Tümü 6ya4 röleli IPv4 adreslerini kullanarak küresel IPv6 ağına
        yönlendirme ekleyin:
       </para>
<screen># <command>/sbin/route -A inet6 add 2000::/3 gw ::192.88.99.1 dev sit0</command>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2>
    <title>6ya4 tünelini iptal etmek</title>
    <variablelist>
     <varlistentry>
      <term><literal>ip</literal> kullanarak ve adanmış tünel aygıtı ile</term>
      <listitem>
       <para>
        Adanmış tünel aygıtı üzerindeki tüm yönlendirmeleri kaldırın:
       </para>
<screen># <command>/sbin/ip -6 route flush dev tun6to4</command>
</screen>
       <para>Arabirimi kapatın:</para>
<screen># <command>/sbin/ip link set dev tun6to4 down</command>
</screen>
       <para>Mevcut tünel aygıtını kaldırın:</para>
<screen># <command>/sbin/ip tunnel del tun6to4</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ifconfig</literal> ve <literal>route</literal>kullanarak
       ve genel tünel aygıtı <literal>sit0</literal> ile (önerilmez)</term>
      <listitem>
       <para>
        6ya4 tünel arabirimi üzerindeki (öntanımlı) yönlendirmeyi kaldırın:
       </para>
<screen># <command>/sbin/route -A inet6 del 2000::/3 gw ::192.88.99.1 dev sit0</command>
</screen>
       <para>Arabirimin yerel 6ya4 adresini kaldırın:</para>
<screen># <command>/sbin/ifconfig sit0 del </command><emphasis>yerel_6ya4_adres </emphasis><command>/16</command>
</screen>
       <para>
        Genel tünel aygıtını kapatın (dikkatli olun, belki hala
        kullanılıyordur):
       </para>
<screen># <command>/sbin/ifconfig sit0 down</command>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-configuring-ipv4-in-ipv6-tunnels">
  <title>IPv6 içinde IPv4 Tüneli Yapılandırması</title>
  <para>
   Mart 2004 itibariyle bu tip tüneller deneme ortamlarında kullanılmakta ve
   Linux'un bu konudaki desteği eksik görünmektedir.
  </para>
  <para>
   Daha fazla bilgi için
   <link xlink:href="http://www.faqs.org/rfcs/rfc2473.html">RFC 2473 /
    Generic Packet Tunneling in IPv6 Specification</link> adresine bakılabilir.
   </para>
  </sect1>

 <sect1 xml:id="ipv6-howto-kernel-settings">
  <title><filename>/proc</filename> dosya sisteminde çekirdek ayarlamaları</title>
  <para/>
  <note>
   <para>
    Bu bölümün kaynağı büyük oranda <filename>ip-sysctl.txt</filename>
    dosyasıdır. Bu dosya çekirdeğin kaynak kodunda,
    <filename>Documentation/networking</filename> dizininde bulunmaktadır.
    Bu dosyanın IPv6 ile ilgili kısmını Pekka Savola hazırlamıştır. Başka
    belgelerden de kopyala/yapıştır yapılmıştır.
   </para>
  </note>
  <sect2 xml:id="ipv6-howto-kernel-settings-proc">
   <title><filename>/proc</filename> dosya sistemine erişim</title>
   <sect3>
    <title><literal>cat</literal> ve <literal>echo</literal> kullanarak</title>
    <para>
     <filename>/proc</filename> dosya sistemine erişmenin en kolay yolu
     <command>cat</command> ve <command>echo</command> kullanmaktır, bunun
     için bazı gereklilikler vardır:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <filename>/proc</filename> dosya sistemi çekirdekte yetkilendirilmiş olmalıdır, yani aşağıdaki değer ile derlenmiş olmalıdır:
      </para>
<literallayout>CONFIG_PROC_FS=y</literallayout>
     </listitem>
     <listitem>
      <para>
       <filename>/proc</filename> dosya sistemi önceden bağlanmış olmalıdır.
       Aşağıdaki gibi sınayabilirsiniz:
      </para>
<screen># <command>mount | grep "type proc"</command>
none on /proc type proc (rw)
</screen>
     </listitem>
     <listitem>
      <para>
       <filename>/proc</filename> dosya sisteminde okuma ve bazen yazma
       haklarına (elbette root için) sahip olmalısınız.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Normalde, <filename>/proc/sys/*</filename> içine yazabilirsiniz, diğer
     kayıtlar salt okunurdur ve sadece bilgi almak için kullanılırlar.
    </para>
    <variablelist>
     <varlistentry>
      <term>Bir değeri öğrenmek</term>
      <listitem>
       <para>
        Bir kaydın değeri <command>cat</command> kullanılarak öğrenilebilir:
       </para>
<screen># <command>cat /proc/sys/net/ipv6/conf/all/forwarding</command>
0
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Bir değer atamak</term>
      <listitem>
       <para>
        Yeni bir değer <command>echo</command> kullanılarak atanabilir
        (eğer kayıt yazılabilir ise):
       </para>
<screen># <command>echo "1" &gt;/proc/sys/net/ipv6/conf/all/forwarding</command>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3>
    <title><literal>sysctl</literal> kullanarak</title>
    <para>
     <command>sysctl</command> uygulaması çekirdeğe erişmek için modern bir
     yöntem kullanmaktadır. <filename>/proc</filename> dosya sistemi bağlı
     olmasa dahi kullanılması mümkündür ama bu durumda sadece
     <filename>/proc/sys/*</filename> dizinine erişim mümkün olabilmektedir!
    </para>
    <para>
     <command>sysctl</command> uygulaması (Red Hat Linux sistemlerinde)
     <filename>procps</filename> paketine dahildir.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>sysctl</literal> arayüzü çekirdekte yetkilendirilmiş
       olmalıdır, yani çekirdek aşağıdaki değer ile derlenmiş olmalıdır:
      </para>
<literallayout>CONFIG_SYSCTL=y</literallayout>
     </listitem>
    </itemizedlist>
    <variablelist>
     <varlistentry>
      <term>Bir değeri öğrenmek</term>
      <listitem>
       <para>Bir kaydın değerini öğrenmek için:</para>
<screen># <command>sysctl net.ipv6.conf.all.forwarding</command>
net.ipv6.conf.all.forwarding = 0
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Bir değer atamak</term>
      <listitem>
       <para>Bir değer atamak için (eğer kayıt yazılabilir ise):</para>
<screen># <command>sysctl -w net.ipv6.conf.all.forwarding=1</command>
net.ipv6.conf.all.forwarding = 1
</screen>
       <note>
        <para>
         Değer atarken "=" den önce veya sonra boşluk kullanmayın. Bir
         satırda çoklu değer atanacak ise bu aşağıdaki gibi yapılmalıdır:
        </para>
<screen># <command>sysctl -w net.ipv4.ip_local_port_range="32768 61000"</command>
net.ipv4.ip_local_port_range = 32768 61000
</screen>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Ek bilgi</term>
      <listitem>
       <note>
        <para>
         Bazı <command>sysctl</command> sürümleri "." yerine "/"
         göstermektedir.
        </para>
        <para>
         Daha fazla ayrıntı için <command>sysctl</command>'nin kılavuz
         sayfasına bakabilirsiniz.
        </para>
       </note>
       <tip>
        <para>
         Ayarlara hızlıca göz atmak için <option>-a</option> (tüm kayıtları
         göster) seçeneğini <command>grep</command> ile birlikte kullanın.
        </para>
       </tip>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title><filename>/proc</filename> dosya sisteminde bulunan değerler</title>
    <para>
     <filename>/proc</filename> dosya sisteminde farklı biçimlere
     rastlanabilir:
    </para>
    <simplelist>
     <member>MANTIKSAL: basitçe "0" (yanlış) ya da "1" (doğru)</member>
     <member>TAMSAYI: bir tamsayı değeri</member>
     <member>
      Çoklu değerler içeren daha karmaşık satırlar: bazen bir başlık satırı
      da görüntülenir, eğer bu açıklama satırı yoksa çekirdeğin kaynak
      koduna bakarak her değerin anlamını öğrenebilirsiniz...
     </member>
    </simplelist>
   </sect3>
  </sect2>

  <sect2 xml:id="ipv6-howto-kernel-settings-proc-sys-net-ipv6">
   <title><filename>/proc/sys/net/ipv6/</filename> dizinindeki kayıtlar</title>
   <variablelist>
    <varlistentry>
     <term><filename>conf/default/*</filename></term>
     <listitem>
      <para>Bir arabirime özgü öntanımlı değerleri değiştirir.  </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>conf/all/*</filename></term>
     <listitem>
      <para>Tüm arabirimlere özgü değerleri değiştirir.  </para>
      <para>
       İstisna: <filename>conf/all/forwarding</filename> farklı bir anlam
       içerir.
      </para>
      <variablelist>
       <varlistentry>
        <term><filename>conf/all/forwarding</filename></term>
        <listitem>
         <para>Veri türü: MANTIKSAL</para>
         <para>
          Tüm arabirimler arasındaki IPv6 iletimine (forwarding) izin verir.
         </para>
         <para>
          IPv6'da iletimini aygıt başına denetleyemezsiniz, iletim denetimi
          (ip6tables tarafından denetlenen) IPv6-netfilter kural kümeleri
          kullanılarak yapılmalıdır (daha fazlası <xref
          linkend="ipv6-howto-firewalling-netfilter6"/> bölümündedir).
          Bu durum iletimi her aygıt için ayrı ayrı denetleyebildiğiniz
          (karar paketin geldiği arabirimde verilir) IPv4'den farklıdır.
         </para>
         <para>
          Böylece tüm arabirimler için belirlenen değer
          <filename>forwarding</filename>e atanmış olur.
          Aşağıda daha fazla ayrıntı bulacaksınız.
         </para>
         <para>
          Eğer bu değer 0 ise hiçbir IPv6 iletimi yapılmıyor demektir.
          Paketler ne fiziksel ne de mantıksal başka bir arabirime asla
          ulaşamazlar.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>conf/interface/*</filename></term>
     <listitem>
      <para>Her arabirim için özel ayarlamalar yapar.</para>
      <para>
       Belirli bir ayarlama için yerel iletimin yetkilendirilme durumuna göre
       farklı davranışlar sergilenebilir.
      </para>
      <variablelist>
       <varlistentry>
        <term><literal>accept_ra</literal></term>
        <listitem>
         <para>Veri türü: MANTIKSAL </para>
         <para>
          Öntanımlı işlevselliği: yerel iletim kapalı ise etkindir, aksi
          takdirde etkin değildir.
         </para>
         <para>
          Yönlendirici bildirimlerini kabul eder ve aldığı veri ile arabirimi
          otomatik yapılandırır.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>accept_redirects</literal></term>
        <listitem>
         <para>Veri türü: MANTIKSAL </para>
         <para>
          Öntanımlı işlevselliği: yerel iletim kapalı ise etkindir, aksi
          takdirde etkin değildir.
         </para>
         <para>
          IPv6 yönlendiricinin gönderdiği yeniden yönlendirmeleri kabul eder.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>autoconf</literal></term>
        <listitem>
         <para>Veri türü: MANTIKSAL </para>
         <para>Öntanımlı değer: TRUE (doğru) </para>
         <para>
          L2 donanım adreslerini kullanarak yerel-bağlantı
          (<xref linkend="ipv6-howto-addresstypes"/> bölümüne bakabilirsiniz)
          adreslerini yapılandırır. Örneğin L2-MAC adresinden
          <literal>fe80::201:23ff:fe45:6789</literal> gibi bir adresi
          otomatik olarak üretir.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>dad_transmits</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 1</para>
         <para>
          Algılanan DAD (Duplicate Address Detection - Yinelenmiş Adres
          Tespiti) miktarını gösterir.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>forwarding</literal></term>
        <listitem>
         <para>Veri türü: MANTIKSAL </para>
         <para>
          Öntanımlı değer: eğer küresel iletim etkin değilse FALSE (yanlış),
          aksi halde TRUE
         </para>
         <para>
          Arabirime özgü Konak/Yönlendirici davranışını yapılandırır.
         </para>
         <note>
          <para>
           Tüm arabirimler için aynı değerlerin olması tavsiye edilir.
           Karışık yönlendirici/konak senaryoları pek nadirdir.
          </para>
         </note>
         <itemizedlist>
          <listitem>
           <para>
            YANLIŞ değeri için: Öntanımlı Konak davranışı kabul edilir.
            Yani:
           </para>
           <itemizedlist>
            <listitem>
             <para>
              Komşu Bildiriminde, IsRouter bayrağı atanmaz.
             </para>
            </listitem>
            <listitem>
             <para>
              Yönlendirici Talepleri ihtiyaç olduğunda gönderilir.
             </para>
            </listitem>
            <listitem>
             <para>
              Eğer <literal>accept_ra</literal> DOĞRU ise (öntanımlı),
              Yönlendirici Bildirimlerini kabul eder
              (ve otomatik yapılandırma yapar).
             </para>
            </listitem>
            <listitem>
             <para>
              Eğer <literal>accept_redirects</literal> DOĞRU ise (öntanımlı),
              Yeniden yönlendirmeleri kabul eder.
             </para>
            </listitem>
           </itemizedlist>
          </listitem>
          <listitem>
           <para>
            DOĞRU değeri için: Yerel iletim etkin ise Yönlendirici davranışı
            kabul edilir. Bu yukarıdakilerin tam tersi demektir:
           </para>
           <itemizedlist>
            <listitem>
             <para>
              Komşu bildiriminde IsRouter bayrağı atanır.
             </para>
            </listitem>
            <listitem>
             <para>
              Yönlendirici Talepleri gönderilmez.
             </para>
            </listitem>
            <listitem>
             <para>
              Yönlendirici bildirimleri görmezden gelinir.
             </para>
            </listitem>
            <listitem>
             <para>
              Yeniden yönlendirmeler görmezden gelinir.
             </para>
            </listitem>
           </itemizedlist>
          </listitem>
         </itemizedlist>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>hop_limit</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 64</para>
         <para>Kullanılacak öntanımlı Hop Limit değeri.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>mtu</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI </para>
         <para>
          Öntanımlı değer: 1280 (IPv6'nın ihtiyacı olan asgari değer)
         </para>
         <para>Öntanımlı Azami Aktarım Birimi </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>router_solicitation_delay</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI </para>
         <para>Öntanımlı değer: 1 </para>
         <para>
          Bir arabirim etkin olduktan sonra Yönlendirici Talebi göndermeden
          kaç saniye bekleyecek.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>router_solicitation_interval</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI </para>
         <para>Öntanımlı değer: 4 </para>
         <para>Yönlendirici talepleri arasında kaç saniye beklenecek. </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>router_solicitations</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI </para>
         <para>Öntanımlı değer: 3 </para>
         <para>
          Etkin yönlendirici bulunamadığını kabul etmeden önce gönderilecek
          yönlendirici talebi sayısı.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>neigh/default/*</literal></term>
     <listitem>
      <para>
       Öntanımlı değerleri komşuları tespit etmek için değiştirebilirsiniz:
      </para>
      <variablelist>
       <varlistentry>
        <term><literal>gc_thresh1</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 128</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_thresh2</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 512</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_thresh3</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 1024</para>
         <para>
          Komşu tablosunun büyüklüğünü belirleyen bağımsız değişkendir.
         </para>
         <para>
          Eğer fazlaca arabiriminiz varsa ve yönledirmenin başlaması sorun
          oluyorsa veya başlamıyorsa bu değeri arttırın. Sorun olduğu durumda
          <link xlink:href="http://www.zebra.org/">Zebra (yönlendirme
          programı)</link> aşağıdaki gibi bir hata raporu verir:
        </para>
<screen>ZEBRA: netlink-listen error: No buffer space available, type=RTM_NEWROUTE(24), seq=426, pxml:id=0
</screen>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_interval</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 30</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>neigh/interface/*</literal></term>
     <listitem>
      <para>
       Komşuların araştırılması için her arabirimde özel ayarları değiştirin.
      </para>
      <variablelist>
       <varlistentry>
        <term><literal>anycast_delay</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 100</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_stale_time</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 60</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>proxy_qlen</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 64</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>unres_qlen</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 3</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>app_solicit</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 0</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>locktime</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 0</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>retrans_time</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 100</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>base_reachable_time</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 30</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>mcast_solicit</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI </para>
         <para>Öntanımlı değer: 3</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <literal>ucast_solicit</literal>
        </term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 3</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>delay_first_probe_time</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 5</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>proxy_delay</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 80</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>route/*</literal></term>
     <listitem>
      <para>Yönlendirme için küresel ayarları değiştirin.</para>
      <variablelist>
       <varlistentry>
        <term><literal>flush</literal></term>
        <listitem>
         <para>Yeni çekirdek sürümlerinden kaldırıldı.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_interval</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 30</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_thresh</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 1024</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>mtu_expires</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 600</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_elasticity</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 0</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_min_interval</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 5</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>gc_timeout</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 60</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>min_adv_mss</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI</para>
         <para>Öntanımlı değer: 12</para>
         <para>Açıklama yazılacak.</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>max_size</literal></term>
        <listitem>
         <para>Veri türü: TAMSAYI </para>
         <para>Öntanımlı değer: 4096</para>
         <para> Açıklama yazılacak. </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="ipv6-howto-kernel-settings-proc-sys-net-ipv4">
   <title><filename>/proc/sys/net/ipv4/</filename> dizininde IPv6 kayıtları</title>
   <para>
Şimdilik (ve IPv4 tamamen bağımsız bir çekirdek modülü olana dek) IPv6 için bazı seçenekler kullanılmaktadır:
  </para>
   <variablelist>
    <varlistentry>
     <term><literal>ip_*</literal></term>
     <listitem>
      <variablelist>
       <varlistentry>
        <term><literal>ip_local_port_range</literal></term>
        <listitem>
         <para>
          Bu denetim ayarları IPv6 tarafından da kullanılmaktadır.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>tcp_*</literal></term>
     <listitem>
      <para>Bu denetim ayarları IPv6 tarafından da kullanılmaktadır.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>icmp_*</literal></term>
     <listitem>
      <para>
       Bu denetim ayarları IPv6 tarafından kullanılmamaktadır. ICMPv6
       oranını kısıtlayabilmek için (ICMPv6 fırtınasından korunmak için
       şiddetle önerilmektedir) netfilter-v6 kuralları kullanılmalıdır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>diğerleri</term>
     <listitem>
      <para>Büyük ihtimalle IPv6 tarafından kullanılmıyor.  </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="ipv6-howto-kernel-settings-proc-net">
   <title><filename>/proc/net/</filename> dizininde IPv6 kayıtları</title>
   <para>
    <filename>/proc/net</filename> dizininde pek çok salt okunur kayıt
    bulunmaktadır. Bu dizinde <command>sysctl</command> kullanarak bilgi
    alamayacağınızdan <command>cat</command> gibi görüntüleme araçlarını
    kullanmalısınız.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>if_inet6</literal></term>
     <listitem>
      <para>
       Biçimi: çoklu değerli her adres için bir satır
      </para>
      <para>
       Burada yapılandırılmış tüm IPv6 adresleri özel bir biçimde gösterilir.
       Örnekte sadece geridönüş arabirimi gösterilmektedir (daha fazlası için
       <filename>net/ipv6/addrconf.c</filename>).
      </para>
<screen># <command>cat /proc/net/if_inet6</command>
00000000000000000000000000000001 01 80 10 80 lo
+------------------------------+ ++ ++ ++ ++ ++
|                                |  |  |  |  |
1                                2  3  4  5  6
</screen>
      <orderedlist>
       <listitem><simpara>
        32 onaltılık karekter ile yazılmış ve ayırıcı kullanılmamış
        IPv6 adresi.
       </simpara></listitem>
       <listitem><simpara>
        Onaltılık gösterimde Netlink aygıt numarası (arabirim indisi)
        (bakınız "ip addr").
       </simpara></listitem>
       <listitem><simpara>Onaltılık olarak önek uzunluğu.</simpara></listitem>
       <listitem><simpara>
        Faaliyet alanı değeri (çekirdek kaynak kodunda
        <filename>include/net/ipv6.h</filename> ve
        <filename>net/ipv6/addrconf.c</filename> dosyalarına da
        bakabilirsiniz).
       </simpara></listitem>
       <listitem><simpara>
        Arabirim bayrakları (<filename>include/linux/rtnetlink.h</filename>
        ve <filename>net/ipv6/addrconf.c</filename> dosyalarına da
        bakabilirsiniz).
       </simpara></listitem>
       <listitem><simpara>Aygıt adı</simpara></listitem>
      </orderedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ipv6_route</literal></term>
     <listitem>
      <para>Biçimi: Çoklu değer içeren her rota için bir satır</para>
      <para>
       Burada yapılandırılmış tüm IPv6 yönlendirmeleri özel bir biçimde
       gösterilmektedir. Örnekte sadece geridönüş arabirimi gösterilmektedir.
       Aşağıda açıklamaları verilmiştir (ayrıntılı bilgi için
       <filename>net/ipv6/route.c</filename>).
      </para>
<screen># <command>cat /proc/net/ipv6_route</command>
00000000000000000000000000000000 00 00000000000000000000000000000000 00
+------------------------------+ ++ +------------------------------+ ++
|                                |  |                                |
1                                2  3                                4
¬ 00000000000000000000000000000000 ffffffff 00000001 00000001 00200200 lo
¬ +------------------------------+ +------+ +------+ +------+ +------+ ++
¬ |                                |        |        |        |        |
¬ 5                                6        7        8        9        10
</screen>
      <orderedlist>
       <listitem><simpara>
         32 onaltılık karakter ile yazılmış ve ayırıcı kullanılmamış
         hedef IPv6 ağı
       </simpara></listitem>
       <listitem><simpara>
         Onaltılık gösterimde IPv6 hedef önek uzunluğu
       </simpara></listitem>
       <listitem><simpara>
         32 onaltılık karekter ile yazılmış ve ayırıcı kullanılmamış
         kaynak IPv6 ağı
       </simpara></listitem>
       <listitem><simpara>
         Onaltılık gösterimde IPv6 kaynak önek uzunluğu
       </simpara></listitem>
       <listitem><simpara>
         32 onaltılık karekter ile yazılmış ve ayırıcı kullanılmamış
         sıradaki IPv6 sıçrama noktası
       </simpara></listitem>
       <listitem><simpara>Onaltılık ölçü</simpara></listitem>
       <listitem><simpara>Referans sayacı</simpara></listitem>
       <listitem><simpara>Kullanım sayacı</simpara></listitem>
       <listitem><simpara>Bayraklar</simpara></listitem>
       <listitem><simpara>Aygıt adı</simpara></listitem>
      </orderedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>sockstat6</literal></term>
     <listitem>
      <para>
       Biçimi: Tanımı ve değeri ile her satırda bir protokol
      </para>
      <para>
       Kullanılmış olan IPv6 soketleri hakkında istatistikler. Örneğin:
      </para>
<screen># <command>cat /proc/net/sockstat6</command>
TCP6: inuse 7
UDP6: inuse 2
RAW6: inuse 1
FRAG6: inuse 0 memory 0
</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>tcp6</literal></term>
     <listitem>
      <para>Yazılacak.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>udp6</literal></term>
     <listitem>
      <para>Yazılacak.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>igmp6</literal></term>
     <listitem>
      <para>Yazılacak.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>raw6</literal></term>
     <listitem>
      <para>Yazılacak.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ip6_flowlabel</literal></term>
     <listitem>
      <para>Yazılacak.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>rt6_stats</literal></term>
     <listitem>
      <para>Yazılacak.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>snmp6</literal></term>
     <listitem>
      <para>Biçimi: Her SNMP tanımı ve değeri için bir satır</para>
      <para>
       SNMP istatistikleri, ağ yönetim yazılımları kullanarak SNMP
       sunucusundan ve ilgili MIB tablosundan alınabilir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ip6_tables_names</literal></term>
     <listitem>
      <para>Kullanılabilir netfilter6 tabloları</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-netlink">
  <title>Çekirdeğe Netlink-Arabirimi</title>
  <para>
Yazılacak...Bunula ilgili hiç tecrübem yok...
  </para>
 </sect1>

 <sect1 xml:id="ipv6-howto-network-debugging">
  <title>Ağda hata ayıklama</title>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-network-debugging-binding">
   <title>Sunucu soketi ataması (binding)</title>
   <sect3>
    <title>Sunucu soket atamasını denetlemek için <literal>netstat</literal>
     kullanımı</title>
    <para>
     Bir düğümdeki hangi sunucu soketlerinin etkin olduğunun incelenmesi
     ilgi çekicidir. <command>netstat</command> ile bu bilgi kolayca elde
     edilebilir:
    </para>
    <para>Kullanılan seçenekler: <option>-nlptu</option></para>
    <example><title/>
<screen># <command>netstat -nlptu</command>
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:32768           0.0.0.0:*               LISTEN      1258/rpc.statd
tcp        0      0 0.0.0.0:32769           0.0.0.0:*               LISTEN      1502/rpc.mountd
tcp        0      0 0.0.0.0:515             0.0.0.0:*               LISTEN      22433/lpd Waiting
tcp        0      0 1.2.3.1:139             0.0.0.0:*               LISTEN      1746/smbd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1230/portmap
tcp        0      0 0.0.0.0:6000            0.0.0.0:*               LISTEN      3551/X
tcp        0      0 1.2.3.1:8081            0.0.0.0:*               LISTEN      18735/junkbuster
tcp        0      0 1.2.3.1:3128            0.0.0.0:*               LISTEN      18822/(squid)
tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN      30734/named
tcp        0      0 ::ffff:1.2.3.1:993      :::*                    LISTEN      6742/xinetd-ipv6
tcp        0      0 :::13                   :::*                    LISTEN      6742/xinetd-ipv6
tcp        0      0 ::ffff:1.2.3.1:143      :::*                    LISTEN      6742/xinetd-ipv6
tcp        0      0 :::53                   :::*                    LISTEN      30734/named
tcp        0      0 :::22                   :::*                    LISTEN      1410/sshd
tcp        0      0 :::6010                 :::*                    LISTEN      13237/sshd
udp        0      0 0.0.0.0:32768           0.0.0.0:*                           1258/rpc.statd
udp        0      0 0.0.0.0:2049            0.0.0.0:*                           -
udp        0      0 0.0.0.0:32770           0.0.0.0:*                           1502/rpc.mountd
udp        0      0 0.0.0.0:32771           0.0.0.0:*                           -
udp        0      0 1.2.3.1:137             0.0.0.0:*                           1751/nmbd
udp        0      0 0.0.0.0:137             0.0.0.0:*                           1751/nmbd
udp        0      0 1.2.3.1:138             0.0.0.0:*                           1751/nmbd
udp        0      0 0.0.0.0:138             0.0.0.0:*                           1751/nmbd
udp        0      0 0.0.0.0:33044           0.0.0.0:*                           30734/named
udp        0      0 1.2.3.1:53              0.0.0.0:*                           30734/named
udp        0      0 127.0.0.1:53            0.0.0.0:*                           30734/named
udp        0      0 0.0.0.0:67              0.0.0.0:*                           1530/dhcpd
udp        0      0 0.0.0.0:67              0.0.0.0:*                           1530/dhcpd
udp        0      0 0.0.0.0:32858           0.0.0.0:*                           18822/(squid)
udp        0      0 0.0.0.0:4827            0.0.0.0:*                           18822/(squid)
udp        0      0 0.0.0.0:111             0.0.0.0:*                           1230/portmap
udp        0      0 :::53                   :::*                                30734/named
</screen>
    </example>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-network-debugging-tcpdump">
   <title>Tcpdump ile paket inceleme örnekleri</title>
   <para>
    Aşağıda sizin hata ayıklamanızda da yardımcı olabilecek, yakalanan
    paketler ile ilgili örnekler verilmiştir.
   </para>
   <sect3>
    <title>Yönlendirici araştırması</title>
    <example>
     <title>Yönlendirici bildirimi</title>
<screen>15:43:49.484751 fe80::212:34ff:fe12:3450 &gt; ff02::1: icmp6: router
¬ advertisement(chlim=64, router_ltime=30, reachable_time=0,
¬ retrans_time=0)(prefix info: AR valid_ltime=30, preffered_ltime=20,
¬ prefix=2002:0102:0304:1::/64)(prefix info: LAR valid_ltime=2592000,
¬ preffered_ltime=604800, prefix=2001:0db8:0:1::/64)(src lladdr:
¬ 0:12:34:12:34:50) (len 88, hlim 255)
</screen>
     <para>
      Yerel bağlantı adresi <literal>fe80::212:34ff:fe12:3450</literal> olan
      yönlendirici ağdaki tüm düğümlerin çoğa gönderim adresi olan
      <literal>ff02::1</literal> adresine iki önek
      <literal>2002:0102:0304:1::/64</literal> (yaşam süresi 30 s) ve
      <literal>2001:0db8:0:1::/64</literal> (yaşam süresi 2592000 s) ve kendi
      MAC adresini <literal>0:12:34:12:34:50</literal> içeren bir
      bilgilendirme göndermektedir.
     </para>
    </example>
    <example>
     <title>Yönlendirici talebi</title>
<screen>15:44:21.152646 fe80::212:34ff:fe12:3456 &gt; ff02::2: icmp6: router solicitation
¬ (src lladdr: 0:12:34:12:34:56) (len 16, hlim 255)
</screen>
     <para>
      MAC adresi <literal>0:12:34:12:34:56</literal> ve yerel bağlantı adresi
      <literal>fe80::212:34ff:fe12:3456</literal> olan bir düğüm bağlantısında
      bir yönlendirici arıyor, bu nedenle <literal>ff02::2</literal> çoğa
      gönderim adresine istekte bulunuyor.
    </para>
    </example>
   </sect3>
   <sect3>
    <title>Komşuların araştırılması</title>
    <example>
     <title>Aynı adresi kullanan komşuların varlığının araştırılması</title>
     <para>
      Aşağıdaki paketler <literal>0:12:34:12:34:56</literal> MAC adresli bir
      düğüm tarafından otomatik yapılandırma sırasında başka bir düğümün aynı
      adresi kullanıp kullanmadığını kontrol etmek için çoğa gönderim adresine
      gönderilmektedir.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Düğüm yerel bağlantı adresini
        <literal>fe80::212:34ff:fe12:3456</literal> olarak yapılandırmak
        istiyor ve çifte kullanımı kontrol ediyor.
       </para>
<screen>15:44:17.712338 :: &gt; ff02::1:ff12:3456: icmp6: neighbor sol: who has
¬ fe80::212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim 255)
</screen>
      </listitem>
      <listitem>
       <para>
        Düğüm küresel adresini
        <literal>2002:0102:0304:1:212:34ff:fe12:3456</literal> olarak
        (yukarıdaki bilgilendirmeyi aldıktan sonra) yapılandırmak istiyor
        ve çifte kullanımı kontrol ediyor.
       </para>
<screen>15:44:21.905596 :: &gt; ff02::1:ff12:3456: icmp6: neighbor sol: who has
¬ 2002:0102:0304:1:212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32,
¬ hlim 255)
</screen>
      </listitem>
      <listitem>
       <para>
        Düğüm küresel adresini
        <literal>3ffe:ffff:0:1:212:34ff:fe12:3456</literal> olarak
        (yukarıdaki bilgilendirmeyi aldıktan sonra) yapılandırmak istiyor
        ve çifte kullanımı kontrol ediyor.
       </para>
<screen>15:44:22.304028 :: &gt; ff02::1:ff12:3456: icmp6: neighbor sol: who has
¬ 3ffe:ffff:0:1:212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim
¬ 255)
</screen>
      </listitem>
     </itemizedlist>
    </example>
    <example>
     <title>Aranılan bir konak veya ağ geçidi için komşuların araştırılması</title>
     <itemizedlist>
      <listitem>
       <para>
        Düğüm <literal>3ffe:ffff:0:1::10</literal> adresine paket göndermek
        istiyor ama paketleri göndereceği ikinci katman MAC adresini
        bilmediğinden istek gönderiyor.
       </para>
<screen>13:07:47.664538 2002:0102:0304:1:2e0:18ff:fe90:9205 &gt; ff02::1:ff00:10: icmp6:
¬ neighbor sol: who has 3ffe:ffff:0:1::10(src lladdr: 0:e0:18:90:92:5) (len 32,
¬ hlim 255)
</screen>
      </listitem>
      <listitem>
       <para>Düğüm <literal>fe80::10</literal> adresini arıyor.</para>
<screen>13:11:20.870070 fe80::2e0:18ff:fe90:9205 &gt; ff02::1:ff00:10: icmp6: neighbor
¬ sol: who has fe80::10(src lladdr: 0:e0:18:90:92:5) (len 32, hlim 255)
</screen>
      </listitem>
     </itemizedlist>
    </example>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-support-persistent-configuration">
  <title>Linux dağıtımlarının IPv6 yapılandırma destekleri</title>
  <para>
   Bazı Linux dağıtımlarının hali hazırda IPv6 yapılandırma desteği
   bulunmaktadır. Bu destek bazılarında hazır bulunan veya yeni oluşturulan
   yapılandırma dosyaları ile diğerlerinde ise IPv4 betiklerinin
   değiştirilmesi ile sağlanmaktadır.
  </para>

  <sect2 xml:id="ipv6-howto-support-persistent-configuration-rh">
   <title>Red Hat Linux ve "türevleri"</title>
   <para>
    <link xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6 &amp; Linux -
    Nasıl</link> belgesini hazırlamaya başladığımdan bu yana sadece-konak,
    sadece-yönlendirici, iki-evli-konak, ikinci bir ağı olan yönlendirici,
    normal tüneller, 6ya4 tüneller gibi istenen tüm durumları karşılayacak
    kalıcı bir IPv6 yapılandırması hazırlamak niyetim vardı. Bugünlerde bu işi
    gerektiği gibi yapan (hiç gerçekbir sorun duymadım ama kaç kişinin
    kullandığını da bilmiyorum) yapılandırma ve betik dosyaları bulunmaktadır.
    Bu dosyalar zaman zaman genişletildiklerinden kendi adreslerinde yer
    almaktadırlar: <link
    xlink:href="http://www.deepspace6.net/projects/initscripts-ipv6.html"
    >initscripts-ipv6 homepage</link> (<link
    xlink:href="http://mirrors.bieringer.de/www.deepspace6.net/projects/initscripts-ipv6.html">Yansı</link>).
    IPv6 tecrübem bir Red Hat Linux 5.0 ile başladığından IPv6 geliştirme
    sistemlerim çoğunlukla Red Hat Linux'u temel almaktadır, buradaki betikler
    bu tip dağıtımlar için hazırlanmıştır. Bazı yapılandırma dosyalarının
    genişletilmesi, yenilerinin oluşturulması ve IPv4 için olanların IPv6'ya
    dönüştürülmeleri son derece kolaydır.
   </para>
   <para>
    Red Hat Linux 7.1 sürümünden bu yana benim IPv6 betiklerimi içermektedir.
    Başlangıcından beri Pekka Savola yardımcı olmuştur.
   </para>
   <para>
    Mandrake 8.0 sürümünden itibaren IPv6 uyumlu başlangıç betikleri paketi
    içermesine rağmen küçük bir hata ("ifconfig" misses "inet6" before "add")
    yüzünden bu paket kullanılamamaktadır.
   </para>

   <sect3>
    <title>Ağ yapılandırma betiklerinin IPv6 desteğinin sınanması</title>
    <para>
     Aşağıdaki betik kütüphanesi sizde mevcut ise benim hazırladığım seti
     kullanarak dağıtımınızın IPv6 desteğinin olup olmadığını test
     edebilirsiniz. Bu betik kütüphanesi mevcut olmalı:
    </para>
<literallayout>/etc/sysconfig/network-scripts/network-functions-ipv6
</literallayout>
    <para>Basit bir sınama:</para>
<screen># <command>test -f /etc/sysconfig/network-scripts/network-functions-ipv6 &amp;&amp; echo "Ana IPv6 betik kütüphanesi mevcut"</command>
</screen>
    <para>
     Bazı özellikler eksik ise bu kütüphanenin sürümü yüzünden olabilir.
     Sürümü aşağıdaki gibi öğrenebilirsiniz (ya da daha kolayı dosyanın
     başına bir gözatın):
    </para>
<screen># <command>source /etc/sysconfig/network-scripts/network-functions-ipv6 &amp;&amp; getversion_ipv6_functions</command>
20011124
</screen>
    <para>
     Yukarıdaki örnekte kullanılan sürüm 20011124'tür. Kullanıdığınız
     sürümden sonra nelerin değiştiğini <link
     xlink:href="http://www.deepspace6.net/projects/initscripts-ipv6.html"
     >initscripts-ipv6</link> (<link
     xlink:href="http://mirrors.bieringer.de/www.deepspace6.net/projects/initscripts-ipv6.html">yansı</link>)
     adresinden öğrenebilirsiniz. Bu adreste değişiklikleri gösteren bir
     kayıt dosyası bulabilirsiniz.
    </para>
   </sect3>

   <sect3>
    <title>RHL 7.1, 7.2, 7.3 sürümlerinde IPv6'yı kullanılabilir hale getirmek için ipucu</title>
    <itemizedlist>
     <listitem>
      <para>
       Çalışan sistemde IPv6 modülünün yüklenip yüklenmediğine bakın:
      </para>
<screen>># <command>modprobe -c | grep net-pf-10</command>
alias net-pf-10 off
</screen>
     </listitem>
     <listitem>
      <para>
       Eğer sonuç "off" ise aşağıdaki satırı
       <filename>/etc/sysconfig/network</filename> dosyasına ekleyerek
       IPv6'yı hazır hale getirin.
      </para>
<screen>NETWORKING_IPV6=yes</screen>
     </listitem>
     <listitem>
      <para>
       Yeniden başlatmak yerine aşağıdaki komut ile ağ yapılandırmasını
       yeniden başlatabilirsiniz.
      </para>
<screen># <command>service network restart</command></screen>
     </listitem>
     <listitem>
      <para>Artık IPv6 modülü yüklenmiş olmalıdır.</para>
<screen># <command>modprobe -c | grep ipv6</command>
alias net-pf-10 ipv6
</screen>
     </listitem>
    </itemizedlist>
    <para>
     Eğer sisteminizin bağlı olduğu ağda yönlendirici bilgisi gönderiliyorsa
     otomatik olarak yapılandırma yapılacaktır. Başka hangi ayarlamaların
     desteklendiği bilgisi için
     <filename>/usr/share/doc/initscripts-$version/sysconfig.txt</filename>
     dosyasına bakabilirsiniz.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="ipv6-howto-support-persistent-configuration-suse">
   <title>SuSE Linux</title>
   <para>
    7.x serisinde gerçekten tamamlanmamış bir destek mevcuttur,
    <filename>/etc/rc.config</filename> dosyasında daha ayrıntılı bilgi
    bulunabilir.
   </para>
   <para>
    Yapılandırma ve betik dosya yapısındaki önemli farklılıklar dolayısıyla
    Red Hat Linux için kullanılan seti bu dağıtım ile kullanmak oldukça zordur
    (veya imkansızdır). 8.x sürümlerinde yapılandırma düzeneği tamamen
    değiştirildi.
   </para>

   <sect3>
    <title>SuSE Linux 7.3</title>
    <para>
     <link xlink:href="http://www.feyrer.de/IPv6/SuSE73-IPv6+6to4-setup.html">How to setup 6to4 IPv6 with SuSE 7.3</link>
    </para>
   </sect3>

   <sect3>
    <title>SuSE Linux 8.0</title>
    <variablelist>
     <varlistentry>
      <term>IPv6 adres yapılandırması</term>
      <listitem>
       <para>
        <filename>/etc/sysconfig/network/ifcfg-</filename><varname>arabirim-ismi</varname>
        dosyasını düzenleyerek aşağıdaki değeri ayarlayın:
       </para>
<literallayout>IP6ADDR="<emphasis>ipv6-adres</emphasis>/<emphasis>önek</emphasis>"
</literallayout>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>İlave bilgi</term>
      <listitem>
       <para>
        <filename>/usr/share/doc/packages/sysconfig/README</filename>
        dosyasını okuyun.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>

   <sect3>
    <title>SuSE Linux 8.1</title>
    <variablelist>
     <varlistentry>
      <term>IPv6 adres yapılandırması</term>
      <listitem>
       <para>
        <filename>/etc/sysconfig/network/ifcfg-</filename><varname>arabirim-ismi</varname>
        dosyasını düzenleyerek aşağıdaki değeri ayarlayın:
       </para>
<literallayout>IPADDR="<emphasis>ipv6-adres</emphasis>/<emphasis>önek</emphasis>"
</literallayout>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>İlave bilgi</term>
      <listitem>
       <para>
        <filename>/usr/share/doc/packages/sysconfig/Network</filename>
        dosyasını okuyun.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="ipv6-howto-support-persistent-configuration-debian">
   <title>Debian Linux</title>
   <para>
    Aşağıdaki bilgi Stephane Bortzmeyer tarafından eklendi.
   </para>
   <orderedlist>
    <listitem>
     <para>
      İster modül olarak yüklensin isterse çekirdeğin içinde olsun, IPv6'nın
      yüklendiğinden emin olun. Üç seçenekten birini kullanabilirsiniz;
      <filename>/etc/modules</filename> dosyasına ekleyebilir,
      <command>kmod</command> kullanabilir veya aşağıda anlatılacak ipucunu
      kullanabilirsiniz.
     </para>
    </listitem>
    <listitem>
     <para>
      Arabirimi yapılandırın. Burada eth0 arabirimine
      <literal>3ffe:ffff:1234:5::1:1</literal> adresini atamak istediğinizi
      varsayıyoruz. <filename>/etc/network/interfaces</filename> dosyasınında
      aşağıdaki değişiklikleri yapın:
     </para>
<screen>iface eth0 inet6 static
pre-up modprobe ipv6
address 3ffe:ffff:1234:5::1:1
# To suppress completely autoconfiguration:
# up echo 0 &gt; /proc/sys/net/ipv6/conf/all/autoconf
netmask 64
# The router is autoconfigured and has no fixed address.
# It is magically
# found. (/proc/sys/net/ipv6/conf/all/accept_ra). Otherwise:
#gateway 3ffe:ffff:1234:5::1
</screen>
     <para>
      Bundan sonra bilgisayarı yeniden başlatmanız ya da kısaca
     </para>
<screen># <command>ifup --force eth0</command></screen>
     <para>
      komutunu çalıştırmanız yeterli olacaktır.
      Artık statik bir adresiniz var.
     </para>
    </listitem>
   </orderedlist>

   <sect3>
    <title>Daha fazla bilgi</title>
    <itemizedlist>
     <listitem>
      <para>
       Craig Small tarafından yazılan <link
       xlink:href="http://people.debian.org/%7Ecsmall/ipv6/">IPv6 on
       Debian Linux</link>.
      </para>
     </listitem>
     <listitem>
      <para>
       Jean-Marc V. Liotier'in <link
       xlink:href="http://www.ruwenzori.net/ipv6/Jims_LAN_IPv6_global_connectivity_howto.html">HOWTO
       for Freenet6 &amp; Debian Users</link> (24.12.2002 tarihinde users (at)
       ipv6.org <link linkend="ipv6-howto-information-maillists">e-posta
       listesinde</link> duyuruldu).
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-autoconfiguration">
  <title>Otomatik Yapılandırma ve Gezicilik</title>
  <bridgehead renderas="sect3">Sadeleştirilmiş otomatik yapılandırma</bridgehead>
  <para>Desteklenmektedir. Örneğin:</para>
<screen># <command>ip -6 addr show dev eth0 scope link</command>
2: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 qlen1000
    inet6 fe80::211:d8ff:fe6b:f0f5/64 scope link
        valid_lft forever preferred_lft forever
</screen>
  <bridgehead renderas="sect3"><literal>radvd</literal> kullanılarak kapsamlı otomatik yapılandırma</bridgehead>
  <para>
   Henüz yazılmadı.
   <xref linkend="ipv6-howto-hints-daemons-radvd"/> bölümüne bakınız.
  </para>
  <bridgehead renderas="sect3">Dinamik Konak Yapılandırma Protokolü v6 (DHCPv6)</bridgehead>
  <para>
   Uzun süren tartışmalardan sonra <link
   xlink:href="http://www.faqs.org/rfcs/rfc3315.html">RFC 3315 / Dynamic Host
   Configuration Protocol for IPv6 (DHCPv6)</link> tamamlandı. Ekim 2005
   itibariyle iki uygulama mevcuttur:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <link xlink:href="http://klub.com.pl/dhcpv6/">Dibbler</link>
     Tomasz Mrugalski
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://dhcpv6.sourceforge.net/">DHCPv6
      on Sourceforge</link>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="ipv6-howto-mobility">
  <title>Gezicilik</title>
  <sect2 xml:id="ipv6-howto-mobility-intro">
   <title>Genel Bilgi</title>
   <sect3>
    <title>Gezen Düğümler</title>
    <para>
     Linux'a Gezici IPV6 ile ilgili destek <link
     xlink:href="http://www.mobile-ipv6.org/"/>'dan temin edilebilen
     MIPL2 ile kullanılabilir.
    </para>
    <para>
     Bu uygulama RFC 3775 ile uyumludur. Bir çekirdek yaması ile
     <command>mip6d</command> olarak bilinen bir gezicilik uygulamasının birleşimidir. 2.6.15 Linux çekirdeğinde 2.0.1 sürümü mevcuttur.
    </para>
    <para>
     Kurulum ve yapılandırması <link
     xlink:href="http://&site-aa;/howto/mobil-ipv6-howto.html">Linux Gezici
     IPv6 HOWTO</link>'da  bulunabilir.
    </para>
   </sect3>
   <sect3>
    <title>Gezici Ağı</title>
    <para>
     Linux'da gezici ağı için, MIPL tabanlı NELP isimli bir uygulama
     mevcuttur. <link xlink:href="http://www.mobile-ipv6.org/"/> adresinden
     indirilebilir.
    </para>
    <para>
     Kurulumu ve yapılandırmasının bulunduğu NASIL (HOWTO) belgesi
     <link xlink:href="http://www.nautilus6.org/doc/nepl-howto/"/>
     adresinde mevcuttur.
    </para>
   </sect3>
   <sect3>
    <title>Bağlantılar</title>
    <itemizedlist>
     <listitem><para>Mobile IPv6 for Linux (MIPL) projesi:
      <link xlink:href="http://www.mobile-ipv6.org/"/>
     </para></listitem>
     <listitem><para>Nautilus6 çalışma grubu:
      <link xlink:href="http://nautilus6.org/"/>
     </para></listitem>
     <listitem><para>Fast Handovers for Mobile IPv6 for Linux projesi:
      <link xlink:href="http://www.fmipv6.org/"/>
     </para></listitem>
     <listitem><para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc3775.html">RFC 3775 /
       Mobility Support in IPv6</link>
     </para></listitem>
     <listitem><para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc3776.html">RFC 3776 /
      Using IPsec to Protect Mobile IPv6 Signaling Between Mobile Nodes and
      Home Agents</link>
     </para></listitem>
     <listitem><para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc3963.html">RFC 3963 /
      Network Mobility (NEMO)</link>
     </para></listitem>
     <listitem><para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc4068.html">RFC 4068 /
       Fast Handovers for Mobile IPv6</link>
     </para></listitem>
    </itemizedlist>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-firewalling-security">
  <title>Güvenlik Duvarı Oluşturmak</title>
  <para>
   IPv6 güvenlik duvarı oluşturmak özellikle eğer iç ağınızda küresel IPv6
   adresleri kullanıyorsanız çok önemlidir. Çünkü IPv4 ağlarında genellikle
   ağın içindeki konaklar özel IPv4 adresleri (<link
   xlink:href="http://www.faqs.org/rfcs/rfc1918.html">RFC 1918 / Address
   Allocation for Private Internets</link> veya <link
   xlink:href="http://www.google.com/search?q=apipa+microsoft">Automatic
   Private IP Addressing (APIPA)</link>) kullanılarak otomatik olarak
   korunmasına rağmen IPv6 ağlarında küresel IPv6 adresleri kullanıldığı için
   IPv6 erişimi olan herhangi biri ağ içindeki IPv6 kullanan tüm konaklara
   erişebilir.
  </para>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-firewalling-netfilter6">
   <title><literal>netfilter6</literal> kullanarak güvenlik duvarı
    oluşturmak</title>
   <para>
    IPv6 güvenlik duvarı oluşturmak 2.4 ve üstü çekirdekler tarafından
    desteklenmektedir. Daha eski olan 2.2 serisinde sadece IPv4 içinde IPv6
    filtrelenebilmektedir.
   </para>
   <caution>
    <para>
     Buradaki kuralların veya örneklerin sisteminizi koruma garantisi yoktur!
    </para>
   </caution>
   <para>
    Kurulumdan sonra kural kümenizi gözden geçirin,
    <xref linkend="ipv6-howto-security-auditing"/> daha fazla bilgi
    içermektedir.
   </para>
   <para>
    USAGI projesi IPv6 için bağlantı takibini bitirmek üzeredir.
    Gelecekte kural kümeleri daha basit ve daha güvenli olacaktır!
   </para>

   <sect3>
    <title>Daha fazla bilgi</title>
    <itemizedlist>
     <listitem><para>
      <link xlink:href="http://www.netfilter.org/">Netfilter projesi</link>
     </para></listitem>
     <listitem><para><link
      xlink:href="https://lists.netfilter.org/mailman/listinfo/netfilter"
      >netfilter kullanıcıları e-posta listesi arşivi</link>
     </para></listitem>
     <listitem><para><link
      xlink:href="https://lists.netfilter.org/mailman/listinfo/netfilter-devel"
      >netfilter geliştiricileri e-posta listesi arşivi</link>
     </para></listitem>
     <listitem><para><link
      xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#netfilter6"
      >Resmi olmayan durum bilgisi</link>
     </para></listitem>
    </itemizedlist>
   </sect3>
  </sect2>

  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-firewalling-preparation">
   <title>Hazırlık</title>
   <sect3>
    <title>Kaynak kodları alın</title>
    <para>
     En yeni çekirdek kaynak kodu: <link xlink:href="http://www.kernel.org/"/>
    </para>
    <para>En yeni iptables paketinin kaynak kodu:</para>
    <para>
     Kaynak tar paketi (çekirdek yamaları için):
     <link xlink:href="http://www.netfilter.org/"/>
    </para>
   </sect3>
   <sect3>
    <title>Kodları açın</title>
    <para>Kodun bulunduğu dizine geçin:</para>
<screen># <command>cd /path/to/src</command></screen>
    <para>
     Çekirdeğin kaynak kodunu açın ve oluşan dizinin adını değiştirin:
    </para>
<screen># <command>tar z|jxf kernel-sürüm.tar.gz|bz2</command>
# <command>mv linux linux-sürüm-iptables-sürüm+IPv6</command>
</screen>
    <para><command>iptables</command> kaynak kodunu açın:</para>
<screen># <command>tar z|jxf iptables-sürüm.tar.gz|bz2</command></screen>
   </sect3>
   <sect3>
    <title>Çekirdeğin kaynak koduna en yeni iptables/IPv6 yamasını uygulayın</title>
    <para><command>iptables</command> dizinine geçin:</para>
<screen># <command>cd iptables-sürüm</command></screen>
    <para>Yamayı uygulayın:</para>
<screen># <command>make pending-patches KERNEL_DIR=/path/to/src/linux-sürüm-iptables-sürüm/</command>
</screen>
    <para>
     IPv6 ile ilgili ilave yamayı uygulayın (hala asıl çekirdeğe dahil
     edilmedi):
    </para>
<screen># <command>make patch-o-matic KERNEL_DIR=/path/to/src/linux-sürüm-iptables-sürüm/</command>
</screen>
    <para>
     Aşağıdaki seçeneklere evet deyin (<filename>iptables-1.2.2</filename>)
    </para>
    <simplelist>
     <member>ah-esp.patch</member>
     <member>masq-dynaddr.patch (sadece dinamik IP atanmış WAN bağlantılı
      (PPP veya PPPoE) sistemlerde ihtiyaç duyulur)</member>
     <member>ipv6-agr.patch.ipv6</member>
     <member>ipv6-ports.patch.ipv6</member>
     <member>LOG.patch.ipv6</member>
     <member>REJECT.patch.ipv6</member>
    </simplelist>
    <para>IPv6 eklentilerini kontrol edin:</para>
<screen># <command>make print-extensions</command>
Extensions found: IPv6:owner IPv6:limit IPv6:mac IPv6:multiport
</screen>
   </sect3>
   <sect3>
    <title>Yeni çekirdeği yapılandırın, derleyin ve kurun</title>
    <para>Çekirdek kaynak kodunun bulunduğu dizine geçin:</para>
<screen># <command>cd /path/to/src/linux-sürüm-iptables-sürüm/</command>
</screen>
    <para><filename>Makefile</filename> dosyasını düzenleyin:</para>
<screen>- EXTRAVERSION =
+ EXTRAVERSION = -iptables-sürüm+IPv6-try
</screen>
    <para>
     <command>configure</command> komutunu çalıştırın ve IPv6 ile ilgili
     yapılandırmayı yapın:
    </para>
<screen>Code maturity level options
  Prompt for development and/or incomplete code/drivers : yes
Networking options
  Network packet filtering: yes
  The IPv6 protocol: module
    IPv6: Netfilter Configuration
      IP6 tables support: module
      All new options like following:
        limit match support: module
        MAC address match support: module
        Multiple port match support: module
        Owner match support: module
        netfilter MARK match support: module
        Aggregated address check: module
        Packet filtering: module
          REJECT target support: module
          LOG target support: module
        Packet mangling: module
        MARK target support: module
</screen>
    <para>Sisteminizle ilgili diğer yapılandırmaları da yapın.</para>
    <para>
     Derleme ve kurulum: buradaki çekirdekle ilgili bölüme veya diğer NASIL
     belgelerine bakın.
    </para>
   </sect3>
   <sect3>
    <title><literal>iptables</literal>'ın ikilik paketlerinin yeniden
     derlenip kurulması</title>
    <para>
     Çekirdek kod dizininin (<filename>/usr/src/linux</filename>)
     kullanılabilir olduğundan emin olun.
    </para>
    <para>Eski dizinin adını değiştirin:</para>
<screen># <command>mv /usr/src/linux /usr/src/linux.old</command></screen>
    <para>Yeni bir sembolik bağ oluşturun:</para>
<screen># <command>ln -s /usr/src/linux-sürüm-iptables-sürüm /usr/src/linux</command>
</screen>
    <para>SRPM'leri yeniden oluşturun:</para>
<screen># <command>rpm --rebuild /SRPM-dizini/iptables-sürüm-release.src.rpm</command>
</screen>
    <para>
     Yeni iptables paketlerini (<filename>iptables</filename> +
     <filename>iptables-ipv6</filename>) kurun.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       RH 7.1 sistemlerinde zaten eski sürümü kurulu olduğundan "tazele"
       (<literal>freshen</literal>) seçeneğini kullanın:
      </para>
<screen># <command>rpm -Fhv /RPM-dizini/işlemci/iptables*-sürüm-sıra.işlemci.rpm</command>
</screen>
     </listitem>
     <listitem>
      <para>
       Eğer daha önce kurulmamışsa <literal>install</literal> seçeneğini
       kullanın:
      </para>
<screen># <command>rpm -ihv /RPM-dizini/işlemci/iptables*-sürüm-sıra.işlemci.rpm</command>
</screen>
     </listitem>
     <listitem>
      <para>
       RH 6.2 sistemlerinde 2.4.x çekirdek kurulu olmadığından paket
       bağımlılıkları yerine getirilemez. Kurmak için
       <option>--nodeps</option> seçeneğini kullanın:
      </para>
<screen># <command>rpm -ihv --nodeps /RPM-dizini/işlemci/iptables*-sürüm-sıra.işlemci.rpm</command>
</screen>
     </listitem>
    </itemizedlist>
    <para>
     <command>iptables</command> kütüphaneleri için bir sembolik bağ
     oluşturmak gerekebilir:
    </para>
<screen># <command>ln -s /lib/iptables/ /usr/lib/iptables</command>
</screen>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-firewalling-usage">
   <title>Kullanım</title>
   <sect3>
    <title>Desteğin kontrol edilmesi</title>
    <para>Modül olarak derlenmişse, modülü yükleyin:</para>
<screen># <command>modprobe ip6_tables</command></screen>
    <para>Yeteneklerini kontrol edin:</para>
<screen># <command>[ ! -f /proc/net/ip6_tables_names ] &amp;&amp; echo "Kullandığınız çekirdeğin 'ip6tables' güvenlik duvarı (IPv6) desteği yok!"</command>
</screen>
   </sect3>
   <sect3>
    <title><literal>ip6tables</literal> nasıl kullanılır öğrenin</title>
    <variablelist>
     <varlistentry>
      <term>Tüm IPv6 netfilter girdilerini listele</term>
      <listitem>
       <itemizedlist>
        <listitem>
         <para>Kısa</para>
<screen># <command>ip6tables -L</command></screen>
        </listitem>
        <listitem>
         <para>Genişletilmiş</para>
<screen># <command>ip6tables -n -v --line-numbers -L</command></screen>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Belli bir kural kümesini listele</term>
      <listitem>
<screen># <command>ip6tables -n -v --line-numbers -L INPUT</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Gelen kural kümesine bir kayıt kuralı ekle</term>
      <listitem>
<screen># <command>ip6tables --table filter --append INPUT -j LOG --log-prefix "INPUT:" --log-level 7</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Gelen kural kümesine bir durdurma kuralı ekle</term>
      <listitem>
<screen># <command>ip6tables --table filter --append INPUT -j DROP</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Bir kuralı numarasıyla sil</term>
      <listitem>
<screen># <command>ip6tables --table filter --delete INPUT 1</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ICMPv6'ya izin ver</term>
      <listitem>
       <para>
        Eski çekirdekleri kullanarak (yamanmamış 2.4.5 çekirdek ve
        iptables-1.2.2) tür belirtmek mümkün değildir.
       </para>
       <itemizedlist>
        <listitem>
         <para>Tünelden gelen ICMPv6'yı kabul et:</para>
<screen># <command>ip6tables -A INPUT -i sit+ -p icmpv6 -j ACCEPT</command>
</screen>
        </listitem>
        <listitem>
         <para>Tünele giden ICMPv6'ya izin ver:</para>
<screen># <command>ip6tables -A OUTPUT -o sit+ -p icmpv6 -j ACCEPT</command>
</screen>
         <para>
          Yeni çekirdekler ICMPv6 türlerini belirtmeye izin verirler.
         </para>
<screen># <command>ip6tables -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT</command>
</screen>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Hız sınırlama</term>
      <listitem>
       <para>
        ICMPv6 fırtınası olabileceğinden (yazar bunu iki kez görmüştür) en
        azından ICMPv6 kural seti için hız kısıtlamasını kullanmanız
        gerekebilir. Buna ek olarak DoS ataklarından korunmak için de
        kısıtlamalar kullanmanız gerekebilir. Kısıtlanmış ICMPv6 örneği
        aşağıdakine benzer:
       </para>
<screen># <command>ip6tables -A INPUT --protocol icmpv6 --icmpv6-type echo-request -j ACCEPT --match limit --limit 30/minute</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SSH isteklerine izin verin</term>
      <listitem>
       <para>
        Aşağıdaki örnekte belirlenen bir IPv6 adresinden gelen SSH isteklerine
        izin verilmektedir.
       </para>
       <para>
        <literal>2001:0db8:100::1/128</literal> adresinden gelen SSH
        isteklerine izin ver:
       </para>
<screen># <command>ip6tables -A INPUT -i sit+ -p tcp -s 2001:0db8:100::1/128 --sport 512:65535 --dport 22 -j ACCEPT</command>
</screen>
       <para>
        Yanıt paketlerine izin ver (şimdilik IPv6 bağlantısının izini sürmek
        netfilter6 tarafından gerçekleştirilememektedir)
       </para>
<screen># <command>ip6tables -A OUTPUT -o sit+ -p tcp -d 2001:0db8:100::1/128 --dport 512:65535 --sport 22 ! --syn j ACCEPT</command>
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>IPv4 içinde IPv6 tünelini etkinleştir</term>
      <listitem>
       <para>
        IPv4 içinde IPv6 tünellenmiş paketleri kabul etmek için, IPv4
        güvenlik duvarı yapılandırmanıza bu paketlerle ilgili kurallar
        eklemeniz gerekir.
       </para>
       <example>
        <title>ppp0 arabiriminde IPv4 içinde IPv6 tünelinden gelen paketlere izin ver</title>
<screen>># <command>iptables -A INPUT -i ppp0 -p ipv6 -j ACCEPT</command>
</screen>
       </example>
       <example>
        <title>ppp0 arabiriminde IPv4 içinde IPv6 tünelinden giden paketlere izin ver</title>
<screen># <command>iptables -A OUTPUT -o ppp0 -p ipv6 -j ACCEPT</command>
</screen>
       </example>
       <para>
        Eğer sadece bir statik tüneliniz varsa IPv4 adresini de
        belirleyebilirsiniz, örneğin;
       </para>
       <example>
        <title>ppp0 arabiriminde tünel son noktası 1.2.3.4 olan IPv4 içinde
         IPv6 tünelinden gelen paketlere izin ver</title>
<screen># <command>iptables -A INPUT -i ppp0 -p ipv6 -s 1.2.3.4 -j ACCEPT</command>
</screen>
       </example>
       <example>
        <title>ppp0 arabiriminde tünel son noktası 1.2.3.4 olan IPv4 içinde
         IPv6 tünelinden giden paketlere izin ver</title>
<screen># <command>iptables -A OUTPUT -o ppp0 -p ipv6 -d 1.2.3.4 -j ACCEPT</command>
</screen>
       </example>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Gelen TCP bağlantı isteklerine karşı koruma</term>
      <listitem>
       <para>
        MUTLAKA ÖNERİLİR! Güvenlik gerekçeleriyle gelen TCP bağlantı
        isteklerini durduran bir kural eklemelisiniz. Eğer başka bir arabirim
        kullanıyorsanız <option>-i</option> seçeneğiyle bunu ayarlayın.
       </para>
       <para>Bu konak'a gelen TCP bağlantı isteklerini durdur:</para>
<screen># <command>ip6tables -I INPUT -i sit+ -p tcp --syn -j DROP</command>
</screen>
       <para>
        Bu yönlendiricinin arkasındaki konaklara gelen TCP bağlantı
        isteklerini durdur:
       </para>
<screen># <command>ip6tables -I FORWARD -i sit+ -p tcp --syn -j DROP</command>
</screen>
       <para>
        Belkide bu kurallar aşağıda başkalarıyla değiştirilecektir, ama bunun
        üzerinde düşünmeniz gerekir. En iyi yöntem bir betik hazırlayıp
        kuralları belirlenen sıra ile çalıştırmaktır.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Gelen UDP bağlantı isteklerine karşı koruma</term>
      <listitem>
       <para>
        MUTLAKA ÖNERİLİR! Güvenlik duvarı bilgisinde söylediğim gibi giden
        UDP/TCP oturumlarında portları kontrol etmek mümkündür. Eğer tüm yerel
        IPv6 sistemleriniz örneğin 32768-60999 arası portları kullanıyorsa UDP
        bağlantılarını aşağıdaki gibi durdurmanız mümkündür:
       </para>
       <para>
        Bu konaktan giden isteklerin yanıtı olamayacak gelen UDP paketlerini durdur:
       </para>
<screen># <command>ip6tables -I INPUT -i sit+ -p udp ! --dport 32768:60999 -j DROP</command>
</screen>
       <para>
        Bu yönlendiricinin arkasındaki konaklardan yapılan isteklerin yanıtı
        olamayacak gelen UDP paketlerini durdur:
       </para>
<screen># <command>ip6tables -I FORWARD -i sit+ -p udp ! --dport 32768:60999 -j DROP</command>
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>Fedora Core için basit bir örnek</title>
    <para>
     Aşağıda Fedora Core 6 (2.6.20 çekirdek sürümü için) basit bir güvenlik
     duvarı yapılandırması gösterilmektedir. Bağlantı izlenmesini destekleyen,
     ICMPv6 paketlerini geri çeviren varsayılan (sistem güvenlik duvarı
     tarafından oluşturulan) güvenlik duvarının değiştirilmişidir. Gelen SSH
     (22. port) bağlantılarına izin verilmiştir.
    </para>
<screen>Dosya: <command>/etc/sysconfig/ip6tables</command>
    *filter :INPUT ACCEPT [0:0]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [0:0]
    :RH-Firewall-1-INPUT - [0:0]
    -A INPUT -j RH-Firewall-1-INPUT
    -A FORWARD -j RH-Firewall-1-INPUT
    -A RH-Firewall-1-INPUT -i lo -j ACCEPT
    -A RH-Firewall-1-INPUT -p icmpv6 -j ACCEPT
    -A RH-Firewall-1-INPUT -p 50 -j ACCEPT
    -A RH-Firewall-1-INPUT -p 51 -j ACCEPT
    -A RH-Firewall-1-INPUT -p udp --dport 5353 -d ff02::fb -j ACCEPT
    -A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
    -A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT
    -A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    -A RH-Firewall-1-INPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT
    -A RH-Firewall-1-INPUT -j REJECT --reject-with icmp6-adm-prohibited
    COMMIT
</screen>
    <para>Bütünlük açısından IPv4 yapılandırması da aşağıdadır.</para>
<screen>Dosya: <command>/etc/sysconfig/ip6tables</command>
    *filter :INPUT ACCEPT [0:0]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [0:0]
    :RH-Firewall-1-INPUT - [0:0]
    -A INPUT -j RH-Firewall-1-INPUT
    -A FORWARD -j RH-Firewall-1-INPUT
    -A RH-Firewall-1-INPUT -i lo -j ACCEPT
    -A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT
    -A RH-Firewall-1-INPUT -p 50 -j ACCEPT
    -A RH-Firewall-1-INPUT -p 51 -j ACCEPT
    -A RH-Firewall-1-INPUT -p udp --dport 5353 -d 224.0.0.251 -j ACCEPT
    -A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
    -A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT
    -A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    -A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
    -A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
    COMMIT
</screen>
    <para>Kullanım:</para>
    <itemizedlist>
     <listitem>
      <para>Yapılandırma dosyalarını oluşturun ve düzenleyin.</para>
     </listitem>
     <listitem>
      <para>IPv4 &amp; IPv6 güvenlik duvarlarını aktif hale getirin.</para>
     </listitem>
    </itemizedlist>
<screen># service iptables start
# service ip6tables start
</screen>
    <itemizedlist>
     <listitem>
      <para>
       Sistemin yeniden başlatılmasından sonra kendiliğinden başlamasını
       sağlayın
      </para>
     </listitem>
    </itemizedlist>
<screen># chkconfig iptables on
# chkconfig ip6tables on
</screen>
   </sect3>
   <sect3>
    <title> Açıklayıcı örnek</title>
    <para>
     Aşağıdaki satırlar daha karmaşık bir yapılandırma örneğini göstermektedir. Mutlu netfilter6 kural setleri hazırlamalar...
    </para>
<screen># <command>ip6tables -n -v -L</command>
Chain INPUT (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 extIN      all      sit+   *       ::/0                 ::/0
    4   384 intIN      all      eth0   *       ::/0                 ::/0
    0     0 ACCEPT     all      *      *       ::1/128              ::1/128
    0     0 ACCEPT     all      lo     *       ::/0                 ::/0
    0     0 LOG        all      *      *       ::/0                 ::/0          LOG flags 0 level 7 prefix `INPUT-default:'
    0     0 DROP       all      *      *       ::/0                 ::/0

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 int2ext    all      eth0   sit+    ::/0                 ::/0
    0     0 ext2int    all      sit+   eth0    ::/0                 ::/0
    0     0 LOG        all      *      *       ::/0                 ::/0         LOG flags 0 level 7 prefix `FORWARD-default:'
    0     0 DROP       all      *      *       ::/0                 ::/0

Chain OUTPUT (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 extOUT     all      *      sit+    ::/0                 ::/0
    4   384 intOUT     all      *      eth0    ::/0                 ::/0
    0     0 ACCEPT     all      *      *       ::1/128              ::1/128
    0     0 ACCEPT     all      *      lo      ::/0                 ::/0
    0     0 LOG        all      *      *       ::/0                 ::/0         LOG flags 0 level 7 prefix `OUTPUT-default:'
    0     0 DROP       all      *      *       ::/0                 ::/0

Chain ext2int (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0
    0     0 ACCEPT     tcp       *      *       ::/0                 ::/0        tcp spts:1:65535 dpts:1024:65535 flags:!0x16/0x02
    0     0 LOG        all       *      *       ::/0                 ::/0        LOG flags 0 level 7 prefix `ext2int-default:'
    0     0 DROP       tcp       *      *       ::/0                 ::/0
    0     0 DROP       udp       *      *       ::/0                 ::/0
    0     0 DROP       all       *      *       ::/0                 ::/0

Chain extIN (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     tcp       *      *       3ffe:400:100::1/128  ::/0        tcp spts:512:65535 dpt:22
    0     0 ACCEPT     tcp       *      *       3ffe:400:100::2/128  ::/0        tcp spts:512:65535 dpt:22
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0
    0     0 ACCEPT     tcp       *      *       ::/0                 ::/0        tcp spts:1:65535 dpts:1024:65535 flags:!0x16/0x02
    0     0 ACCEPT     udp       *      *       ::/0                 ::/0        udp spts:1:65535 dpts:1024:65535
    0     0 LOG        all       *      *       ::/0                 ::/0        limit: avg 5/min burst 5 LOG flags 0 level 7 prefix `extIN-default:'
    0     0 DROP       all       *      *       ::/0                 ::/0

Chain extOUT (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     tcp       *      *       ::/0                3ffe:ffff:100::1/128tcp spt:22 dpts:512:65535 flags:!0x16/0x02
    0     0 ACCEPT     tcp       *      *       ::/0                3ffe:ffff:100::2/128tcp spt:22 dpts:512:65535 flags:!0x16/0x02
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0
    0     0 ACCEPT     tcp       *      *       ::/0                 ::/0        tcp spts:1024:65535 dpts:1:65535
    0     0 ACCEPT     udp       *      *       ::/0                 ::/0        udp spts:1024:65535 dpts:1:65535
    0     0 LOG        all       *      *       ::/0                 ::/0        LOG flags 0 level 7 prefix `extOUT-default:'
    0     0 DROP       all       *      *       ::/0                 ::/0

Chain int2ext (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0
    0     0 ACCEPT     tcp       *      *       ::/0                 ::/0        tcp spts:1024:65535 dpts:1:65535
    0     0 LOG        all       *      *       ::/0                 ::/0        LOG flags 0 level 7 prefix `int2ext:'
    0     0 DROP       all       *      *       ::/0                 ::/0
    0     0 LOG        all       *      *       ::/0                 ::/0        LOG flags 0 level 7 prefix `int2ext-default:'
    0     0 DROP       tcp       *      *       ::/0                 ::/0
    0     0 DROP       udp       *      *       ::/0                 ::/0
    0     0 DROP       all       *      *       ::/0                 ::/0

Chain intIN (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     all       *       *       ::/0                fe80::/ffc0::
    4   384 ACCEPT     all       *       *       ::/0                ff02::/16

Chain intOUT (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     all       *      *       ::/0                 fe80::/ffc0::
    4   384 ACCEPT     all       *      *       ::/0                 ff02::/16
    0     0 LOG        all       *      *       ::/0                 ::/0        LOG flags 0 level 7 prefix `intOUT-default:'
    0     0 DROP       all       *      *       ::/0                 ::/0
</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-security">
  <title>Güvenlik</title>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-security-node">
   <title>Düğüm güvenliği</title>
   <para>
    Gerekli tüm yamaları yapın ve ihtiyacınız olmayan hizmetleri kapatın.
    Hizmetleri ihtiyaç duyduğunuz IPv4/IPv6 adreslerine bağlayarak, yerel
    güvenlik duvarı uygulamanızı kurun.
  </para>
   <para>Daha fazla yazılacak...</para>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-security-access">
   <title>Erişim kısıtlamaları</title>
   <para>
    Hizmetlerin çoğu erişim denetim için <literal>tcp_wrapper</literal>
    kütüphanelerini kullanır.
    <xref linkend="ipv6-howto-hints-daemons-tcp_wrapper"/> bölümünde
    anlatılmıştır.
   </para>
   <para>Daha fazla yazılacak...</para>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-security-auditing">
   <title>IPv6 güvenlik gözden geçirmeleri</title>
   <para>
    Hali hazırda bir sistemin IPv6 güvenliğini ağ üzerinden sınayabilecek
    araçlar bulunmamaktadır.
    Ne <link xlink:href="http://www.nessus.org/">Nessus</link> ne de başka
    bir ticari güvenlik aracı benim bilebildiğim kadarıyla IPv6 adreslerini
    tarayamamaktadır.
   </para>
   <sect3>
    <title>Hukuki konular</title>
    <caution>
     <para>
      Sadece kendi sistemlerinizi veya yazılı izin aldığınız sistemleri
      tarayabilirsiniz. Aksi durumda yasal problemlerle karşılaşabilirsiniz.
      Bu nedenle tarama yapmaya başlamadan hedef IPv6 adreslerini İKİ KEZ
      KONTROL EDİN.
     </para>
    </caution>
   </sect3>
   <sect3>
    <title>IPv6 uyumlu <literal>netcat</literal> kullanarak güvenlik
     denetimi</title>
    <para>
     IPv6 uyumlu <command>netcat</command> ile (ayrıntılı bilgi için <link
     xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#security-auditing"
     >IPv6+Linux-status-apps/security-auditing</link> adresine bakabilirsiniz)
     bir port taraması yapabilirsiniz. Aşağıdaki gibi kullanılır:
    </para>
<screen><prompt># </prompt><command>nc6 ::1 daytime</command>
13 JUL 2002 11:22:22 CEST
</screen>
   </sect3>
   <sect3>
    <title>IPv6 uyumlu <literal>nmap</literal> kullanarak güvenlik denetimi</title>
    <para>
     Dünyanın en iyi port tarayıcılarından biri olan <link
     xlink:href="http://www.insecure.org/nmap/">NMap</link> 3.10ALPHA1
     sürümünden itibaren IPv6'yı desteklemektedir. Aşağıdaki gibi kullanılır:
    </para>
<screen># <command>nmap -6 -sT ::1</command>
Starting nmap V. 3.10ALPHA3 ( www.insecure.org/nmap/ )
Interesting ports on localhost6 (::1):
(The 1600 ports scanned but not shown below are in state: closed)
Port       State       Service
22/tcp     open        ssh
53/tcp     open        domain
515/tcp    open        printer
2401/tcp   open        cvspserver
Nmap run completed -- 1 IP address (1 host up) scanned in 0.525 seconds
</screen>
   </sect3>
   <sect3>
    <title>IPv6 uyumlu <literal>strobe</literal> kullanarak güvenlik denetimi</title>
    <para>
     <command>strobe</command> (NMap ile kıyaslandığında) daha küçük bütçeli
     bir port tarayıcıdır. Buna rağmen bir IPv6 yaması bulunmaktadır.
     (ayrıntılı bilgi için <link
     xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#security-auditing"
     >IPv6+Linux-status-apps/security-auditing</link>). Aşağıdaki gibi
     kullanılır:
    </para>
<screen># <command>strobe ::1</command>
strobe 1.05 (c) 1995-1999 Julian Assange &lt;proff@iq.org&gt;.
::1 2401 unassigned unknown
::1 22 ssh Secure Shell - RSA encrypted rsh
::1 515 printer spooler (lpd)
::1 6010 unassigned unknown
::1 53 domain Domain Name Server
</screen>
    <note>
     <para>
      <command>strobe</command>'un geliştirilmesi devam etmediğinden, sürüm
      numarası da doğru değildir.
     </para>
    </note>
   </sect3>
   <sect3>
    <title>Dinleme sonuçları</title>
    <para>
     Eğer dinlemeden elde ettiğiniz sonuçlar IPv6 güvenlik politikanızla
     uyuşmuyorsa, IPv6 güvenlik duvarı uygulamalarını, örneğin
     <command>netfilter6</command>, kullanarak açıklarınızı kapatın.
     (Ayrıntılı bilgiyi <xref linkend="ipv6-howto-firewalling-netfilter6"/>
     bölümünde bulabilirsiniz).
    </para>
    <para>
     IPv6 güvenliği ile ilgili daha ayrıntılı bilgiyi aşağıdaki adreslerde
     bulabilirsiniz:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <link xlink:href="http://www.ietf.org/ids.by.wg/v6ops.html">IETF
       drafts - IPv6 Operations (v6ops)</link>
      </para>
     </listitem>
     <listitem>
      <para>
       <link xlink:href="http://www.faqs.org/rfcs/rfc3964.html">RFC 3964 /
       Security Considerations for 6to4</link>
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-encryption-authentication">
  <title>Şifreleme ve Kimlik Denetimi</title>
  <para>
   IPv4'ün aksine, şifreleme ve kimlik denetimi IPv6'nın olmazsa olmaz
   özelliğidir. Bu özellikler IPsec (IPv4 ile de kullanılabilir) kullanılarak
   yerine getirilirler.
  </para>
  <sect2 xml:id="ipv6-howto-encryption-authentication-modes">
   <title>Şifreleme ve kimlik denetimi kipleri</title>
   <para>
    Bağlantının şifrenlemesi ve kimlik denetimi için iki farklı kip mümkündür:
   </para>
   <variablelist>
    <varlistentry>
     <term>Taşıma kipi</term>
     <listitem>
      <para>
       Taşıma kipi gerçek uçtan-uca bağlantı kipidir. Burada sadece ICMP, TCP
       veya UDP şifrelenir, IP başlığı şifrelenmez (ama genellikle kimlik
       denetimine dahil edilir).
      </para>
      <para>
       Şifreleme için AES-128, kimlik denetimi için SHA1 kullanılır. Bu kip
       MTU'yu 42 oktete düşürür.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Tünel kipi</term>
     <listitem>
      <para>
       Tünel kipi uçtan-uca bağlantılarda kullanılabileceği gibi ağ
       geçidinden-ağ geçidine bağlantılarda da kullanılabilir. Burada IP
       paketinin tamamı şifrelenir ve yeni bir IP başlığı elde edilir. Böylece
       yeni bir IP paketi oluşturulmuş olur (bu mekanizma "encapsulation"
       olarak da bilinir.).
      </para>
      <para>
       Bu kipteki MTU taşıma kipindeki MTU'dan 40 oktet daha azdır. Yani
       şifreleme için AES-128 ve kimlik denetimi için SHA1 kullanarak normal
       MTU'dan 82 oktet daha az kullanılmış olur.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 xml:id="ipv6-howto-encryption-authentication-esp">
   <title>Çekirdekteki destek (ESP ve AH)</title>
   <bridgehead renderas="sect3">2.4.x serisi çekirdekteki destek</bridgehead>
   <para>
    Bu belge hazırlandığında 2.4.28 çekirdeğine kadar destek verilmemişti.
    Linux çekirdeğinde şifreleme kodunu bulundurmakla ilgili
    (ithalat/ihracat-denetim-yasaları) bir sorun vardır. Bu aynı zamanda
    <link xlink:href="http://www.freeswan.org/">FreeS/WAN projesinin</link>
    çekirdeğe dahil edilmeme sebeplerinden birisidir. Belki gelecekte 2.6.x
    serisinden geri taşıma yapılabilir.
   </para>
   <sect3>
    <title>2.6.x serisi çekirdekteki destek</title>
    <para>
     Güncel sürümlerde (bu belge yazılırken 2.6.9 ve yukarı sürümlerde)
     IPv4 ve IPv6 için doğal destek bulunmaktadır.
    </para>
    <para>
     Bu destek USAGI projesinin yardımıyla sürdürülmektedir.
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-encryption-authentication-ike">
   <title>Otomatik anahtar değişimi (IKE)</title>
   <para>
    IPsec anahtar değişiminin gizli yapılmasına ihtiyaç duyar. Bu çoğunlukla
    IKE artalan süreçleri tarafından yapılır. Bu süreçler taraflar arasındaki
    kimlik değişimini de ya karşılıklı bilinen bir sır ("önceden paylaşılan
    sır") ile ya da RSA anahtarlarıyla sağlarlar.
   </para>
   <para>
    Linux için halen birbirinden yapılandırma ve kullanım olarak tamamen iki
    farklı IKE artalan süreci mevcuttur.
   </para>
   <para>
    Ben *S/WAN yerine daha basit ve bir kez yapılandırmanın yeterli olduğu
    "pluto"yu tercih ediyorum.
   </para>
   <sect3>
    <title>IKE artalan süreci: <literal>racoon</literal></title>
    <para>
     IKE artalan süreci <command>racoon</command> KAME projesinden alınmış ve
     Linux'a uyarlanmıştır. Modern Linux dağıtımları bu programcığı
     <literal>ipsec-tools</literal> paketiyle içerirler. Düzgün IPsec
     yapılandırması için iki çalışabilir dosyaya ihtiyaç vardır. <link
     xlink:href="http://lartc.org/howto/lartc.ipsec.html">Linux Advanced
     Routing &amp; Traffic Control HOWTO / IPSEC</link> adresine bakmanız
     faydalı olacaktır.
    </para>
    <variablelist>
     <varlistentry>
      <term>IPsec SA/SP veri tabanının <literal>setkey</literal> aracı ile idare edilmesi</term>
      <listitem>
       <para>
        <command>setkey</command> çekirdek için güvenlik politikasının (SP)
        tanımlanmasında önemlidir.
       </para>
       <para>Dosya: <filename>/etc/racoon/setkey.sh</filename></para>
       <example>
        <title>Taşıma kipinde uçtan-uca şifreli bağlantı</title>
<screen>#!/sbin/setkey -f
flush;
spdflush;
spdadd 2001:db8:1:1::1 2001:db8:2:2::2 any -P out ipsec esp/transport//require;
spdadd 2001:db8:2:2::2 2001:db8:1:1::1 any -P in  ipsec esp/transport//require;
</screen>
       </example>
       <example>
        <title>Tünel kipinde uçtan-uca şifreli bağlantı</title>
<screen>#!/sbin/setkey -f
flush;
spdflush;
spdadd 2001:db8:1:1::1 2001:db8:2:2::2 any -P out ipsec esp/tunnel/2001:db8:1:1::1-2001:db8:2:2::2/require;
spdadd 2001:db8:2:2::2 2001:db8:1:1::1 any -P in  ipsec esp/tunnel/2001:db8:2:2::2-2001:db8:1:1::1/require;
</screen>
        <para>
         Diğer eş için <literal>in</literal> ile <literal>out</literal> yer
         değiştirmelidir.
        </para>
       </example>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>IKE artalan süreci <literal>racoon</literal>'un yapılandırması</term>
      <listitem>
       <para>
        <command>racoon</command> düzgün çalışabilmek için bir yapılandırma
        dosyasına ihtiyaç duyar. Bu dosyada daha önce
        <command>setkey</command> kullanılarak atanmış olan güvenlik
        politikası ile ilgili ayarlar bulunur.
       </para>
       <para>Dosya: <filename>/etc/racoon/racoon.conf</filename></para>
<screen># Racoon IKE daemon configuration file.
# See 'man racoon.conf' for a description of the format and entries.
path include "/etc/racoon";
path pre_shared_key "/etc/racoon/psk.txt";
listen
{
 isakmp 2001:db8:1:1::1;
}
remote 2001:db8:2:2::2
{
 exchange_mode main;
 lifetime time 24 hour;
 proposal
 {
   encryption_algorithm 3des;
   hash_algorithm md5;
   authentication_method pre_shared_key;
   dh_group 2;
 }
}
# gateway-to-gateway
sainfo address 2001:db8:1:1::1 any address 2001:db8:2:2::2 any
{
 lifetime time 1 hour;
 encryption_algorithm 3des;
 authentication_algorithm hmac_md5;
 compression_algorithm deflate;
}
sainfo address 2001:db8:2:2::2 any address 2001:db8:1:1::1 any
{
 lifetime time 1 hour;
 encryption_algorithm 3des;
 authentication_algorithm hmac_md5;
 compression_algorithm deflate;
}
</screen>
       <para>Önceden paylaşılan sır da ayarlanmalıdır:</para>
       <para>Dosya: <filename>/etc/racoon/psk.txt</filename></para>
<screen># file for pre-shared keys used for IKE authentication
# format is: 'identifier' 'key'
2001:db8:2:2::2 verysecret
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>IKE artalan süreci <literal>racoon</literal> ile IPsec'in birlikte çalıştırılması</term>
      <listitem>
       <para>
        En azından artalan süreci çalıştırılmış olmalıdır. İlk çalıştırmada
        hata ayıklama ve ön planda çalışma kiplerini kullanın. Aşağıdaki örnek
        IKE safha 1 (ISAKMP-SA) ve 2'nin (IPsec-SA) başarılı bir şekilde
        çalıştırılmasını göstermektedir:
       </para>
<screen># <command>racoon -F -v -f /etc/racoon/racoon.conf</command>
Foreground mode.
2005-01-01 20:30:15: INFO: @(#)ipsec-tools 0.3.3 (http://ipsec-tools.sourceforge.net)
2005-01-01 20:30:15: INFO: @(#)This product linked OpenSSL 0.9.7a Feb 19 2003 (http://www.openssl.org/)
2005-01-01 20:30:15: INFO: 2001:db8:1:1::1[500] used as isakmp port (fd=7)
2005-01-01 20:31:06: INFO: IPsec-SA request for 2001:db8:2:2::2 queued due to no phase1 found.
2005-01-01 20:31:06: INFO: initiate new phase 1 negotiation: 2001:db8:1:1::1[500]&lt;=&gt;2001:db8:2:2::2[500]
2005-01-01 20:31:06: INFO: begin Identity Protection mode.
2005-01-01 20:31:09: INFO: ISAKMP-SA established 2001:db8:1:1::1[500]-2001:db8:2:2::2[500] spi:da3d3693289c9698:ac039a402b2db401
2005-01-01 20:31:09: INFO: initiate new phase 2 negotiation: 2001:6f8:900:94::2[0]&lt;=&gt;2001:db8:2:2::2[0]
2005-01-01 20:31:10: INFO: IPsec-SA established: ESP/Tunnel 2001:db8:2:2::2-&gt;2001:db8:1:1::1 spi=253935531(0xf22bfab)
2005-01-01 20:31:10: INFO: IPsec-SA established: ESP/Tunnel 2001:db8:1:1::1-&gt;2001:db8:2:2::2 spi=175002564(0xa6e53c4)
</screen>
       <para>
        Her yön IPsec standartlarında belirtildiği gibi kendi IPsec-SA'sına
        sahiptir. İlgili arabirimde <command>tcpdump</command> ile IPv6 ping
        sonucunu görürsünüz:
       </para>
<screen>20:35:55.305707 2001:db8:1:1::1 &gt; 2001:db8:2:2::2: ESP(spi=0x0a6e53c4,seq=0x3)
20:35:55.537522 2001:db8:2:2::2 &gt; 2001:db8:1:1::1: ESP(spi=0x0f22bfab,seq=0x3)
</screen>
       <para>Beklendiği gibi burada SPI'lar kullanılmışlardır.</para>
       <para>
        <command>setkey</command> kullanılarak etkin bağımsız değişkenler
        görüntülenir:
       </para>
<screen># <command>setkey -D</command>
2001:db8:1:1::1 2001:db8:2:2::2
       esp mode=tunnel spi=175002564(0x0a6e53c4) reqxml:id=0(0x00000000)
       E: 3des-cbc  bd26bc45 aea0d249 ef9c6b89 7056080f 5d9fa49c 924e2edd
       A: hmac-md5  60c2c505 517dd8b7 c9609128 a5efc2db
       seq=0x00000000 replay=4 flags=0x00000000 state=mature
       created: Jan  1 20:31:10 2005   current: Jan  1 20:40:47 2005
       diff: 577(s)    hard: 3600(s)   soft: 2880(s)
       last: Jan  1 20:35:05 2005      hard: 0(s)      soft: 0(s)
       current: 540(bytes)     hard: 0(bytes)  soft: 0(bytes)
       allocated: 3    hard: 0 soft: 0
       sadb_seq=1 pxml:id=22358 refcnt=0
2001:db8:2:2::2 2001:db8:1:1::1
       esp mode=tunnel spi=253935531(0x0f22bfab) reqxml:id=0(0x00000000)
       E: 3des-cbc  c1ddba65 83debd62 3f6683c1 20e747ac 933d203f 4777a7ce
       A: hmac-md5  3f957db9 9adddc8c 44e5739d 3f53ca0e
       seq=0x00000000 replay=4 flags=0x00000000 state=mature
       created: Jan  1 20:31:10 2005   current: Jan  1 20:40:47 2005
       diff: 577(s)    hard: 3600(s)   soft: 2880(s)
       last: Jan  1 20:35:05 2005      hard: 0(s)      soft: 0(s)
       current: 312(bytes)     hard: 0(bytes)  soft: 0(bytes)
       allocated: 3    hard: 0 soft: 0
       sadb_seq=0 pxml:id=22358 refcnt=0
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>IKE artalan süreci: <literal>pluto</literal></title>
    <para>
     IKE artalan süreci <command>pluto</command>, *S/WAN projesinin
     dağıtımlarına dahil edilmektedir. *S/WAN projesi
     <link xlink:href="http://www.freeswan.org/">FreeS/WAN</link> adıyla
     başlamıştır. FreeS/WAN projesinin geliştirmesi malesef 2004 yılında
     durduruldu. Geçmişteki yavaş geliştirilme süreci yüzünden proje ikiye
     bölünerek devam etmektedir: <link
     xlink:href="http://www.strongswan.org/">strongSwan</link> ve <link
     xlink:href="http://www.openswan.org/">Openswan</link>. Bugün Openswan
     kurulabilir paketler hazırlamıştır (Fedora Core 3 içinde yeralmaktadır).
    </para>
    <para>
     <command>racoon</command> ile temel farklılığı sadece tek bir
     yapılandırma dosyasına ihtiyaç duymasıdır. Ayrıca, açılışta otomatik
     yapılandırma yapabilen açılış betikleri de mevcuttur.
    </para>
    <variablelist>
     <varlistentry>
      <term>IKE artalan süreci <literal>pluto</literal>'nun yapılandırması</term>
      <listitem>
       <para>
        Yapılandırma IPv4'dekine oldukça benzerdir, sadece bir önemli seçenek
        gereklidir.
       </para>
       <para>Dosya: <filename>/etc/ipsec.conf</filename></para>
<screen>/etc/ipsec.conf - Openswan IPsec configuration file
#
# Manual:     ipsec.conf.5
version 2.0     # conforms to second version of ipsec.conf specification
# basic configuration
config setup
       # Debug-logging controls:  "none" for (almost) none, "all" for lots.
       # klipsdebug=none
       # plutodebug="control parsing"
#Disable Opportunistic Encryption
include /etc/ipsec.d/examples/no_oe.conf
conn ipv6-p1-p2
       connaddrfamily=ipv6       # Important for IPv6!
       left=2001:db8:1:1::1
       right=2001:db8:2:2::2
       authby=secret
       esp=aes128-sha1
       ike=aes128-sha-modp1024
       type=transport
       #type=tunnel
       compress=no
       #compress=yes
       auto=add
       #auto=start
</screen>
       <para>Önceden paylaşılan sırrın ayarlanması unutulmamalıdır.</para>
       <para>Dosya: <filename>/etc/ipsec.secrets</filename></para>
<screen>2001:db8:1:1::1 2001:db8:2:2::2 : PSK      "verysecret"</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>IKE artalan süreci <literal>pluto</literal> ile IPsec'in birlikte çalıştırılması</term>
      <listitem>
       <para>
        Eğer Openswan kurulumu başarılı oldu ise IPsec'i başlatmak için bir
        betik hazır olmalıdır. Onu çalıştırın:
       </para>
<screen># <command>/etc/rc.d/init.d/ipsec start</command></screen>
       <para>
        Daha sonra bağlantıyı başlatın. Eğer "IPsec SA established" satırını
        görüyorsanız herşey yolunda demektir.
       </para>
<screen># <command>ipsec auto --up ipv6-peer1-peer2</command>
104 "ipv6-p1-p2" #1: STATE_MAIN_I1: initiate
106 "ipv6-p1-p2" #1: STATE_MAIN_I2: sent MI2, expecting MR2
108 "ipv6-p1-p2" #1: STATE_MAIN_I3: sent MI3, expecting MR3
004 "ipv6-p1-p2" #1: STATE_MAIN_I4: ISAKMP SA established
112 "ipv6-p1-p2" #2: STATE_QUICK_I1: initiate
004 "ipv6-p1-p2" #2: STATE_QUICK_I2: sent QI2, IPsec SA established {ESP=&gt;0xa98b7710 &lt;0xa51e1f22}
</screen>
       <para>
        *S/WAN ve <command>setkey</command>/<command>racoon</command> Linux
        çekirdeğinde aynı IPsec yapılandırmasına sahip olduklarından
        <command>setkey</command> burada da etkin bağımsız değişkenleri görüntülemek
        için kullanılabilir.
       </para>
<screen># <command>setkey -D</command>
2001:db8:1:1::1 2001:db8:2:2::2
       esp mode=transport spi=2844489488(0xa98b7710) reqxml:id=16385(0x00004001)
       E: aes-cbc  082ee274 2744bae5 7451da37 1162b483
       A: hmac-sha1  b7803753 757417da 477b1c1a 64070455 ab79082c
       seq=0x00000000 replay=64 flags=0x00000000 state=mature
       created: Jan  1 21:16:32 2005   current: Jan  1 21:22:20 2005
       diff: 348(s)    hard: 0(s)      soft: 0(s)
       last:                           hard: 0(s)      soft: 0(s)
       current: 0(bytes)       hard: 0(bytes)  soft: 0(bytes)
       allocated: 0    hard: 0 soft: 0
       sadb_seq=1 pxml:id=23825 refcnt=0
2001:db8:2:2::2 2001:db8:1:1::1
       esp mode=transport spi=2770214690(0xa51e1f22) reqxml:id=16385(0x00004001)
       E: aes-cbc  6f59cc30 8d856056 65e07b76 552cac18
       A: hmac-sha1  c7c7d82b abfca8b1 5440021f e0c3b335 975b508b
       seq=0x00000000 replay=64 flags=0x00000000 state=mature
       created: Jan  1 21:16:31 2005   current: Jan  1 21:22:20 2005
       diff: 349(s)    hard: 0(s)      soft: 0(s)
       last:                           hard: 0(s)      soft: 0(s)
       current: 0(bytes)       hard: 0(bytes)  soft: 0(bytes)
       allocated: 0    hard: 0 soft: 0
       sadb_seq=0 pxml:id=23825 refcnt=0
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-encryption-authentication-info">
   <title>İlave bilgiler</title>
   <para>
    2.6.x Linux çekirdeklerinde <command>ip</command> komutunu kullanarak
    IPsec politikasını ve durumunu öğrenebilirsiniz:
   </para>
<screen># <command>ip xfrm policy</command>
...
# <command>ip xfrm state</command>
...
</screen>
  </sect2>
 </sect1>

 <sect1 xml:id="ipv6-howto-qos">
  <title>Hizmet Kalitesi (QoS)</title>
  <para>
   IPv6, Akış Etiketlerinin (Flow Labels) ve Trafik Sınıflarının (Traffic
   Classes) kullanımıyla QoS'u destekler ve <command>tc</command>
   (<literal>iproute</literal> paketindedir) kullanılarak denetlenebilir.
  </para>
  <para>
   İlave bilgiler:
   <link xlink:href="http://www.faqs.org/rfcs/rfc3697.html">RFC 3697 / IPv6
    Flow Label Specification</link>
  </para>
 </sect1>

 <sect1 xml:id="ipv6-howto-hints-daemons">
  <title>IPv6 uyumlu Artalan Süreçleri İçin İpuçları</title>
  <para>
   Bu bölümde IPv6 uyumlu artalan süreçleri için bazı ipuçları verilecektir.
  </para>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-hints-daemons-bind">
   <title>Berkeley Internet Name Daemon BIND (<literal>named</literal>)</title>
   <para>
    IPv6 desteği bind'ın 9 sürümünden itibaren verilmektedir. 9.1.3'ten önceki
    sürümler güvenlik açıkları içerdiğinden en azından 9.1.3 sürümü ya da daha
    iyisi son sürümü kullanılmalıdır.
   </para>
   <sect3>
    <title>IPv6 Adreslerinde Dinlemek</title>
    <note>
     <para>
      IPv4'ün aksine IPv6'nın güncel sürümleri adanmış bir IPv6 adresine bir
      sunucu soketi bağlamaya izin vermemektedir. Bu yüzden sadece
      <literal>any</literal> ya da <literal>none</literal>
      kullanılabilmektedir. Bu bir güvenlik konusu olabileceğinden, aşağıdaki
      Erişim Denetim Listeleri (ACL) bölümünü de okumanız uygun olabilir!
     </para>
    </note>
    <variablelist>
     <varlistentry>
      <term>BIND named'in IPv6 adreslerinde dinlemesinin sağlanması</term>
      <listitem>
       <para>
        IPv6 adreslerinde dinlemek için aşağıdaki seçenek değiştirilmelidir.
       </para>
<screen>options {
   # sure other options here, too
   listen-on-v6 { any; };
};
</screen>
       <para>
        <command>named</command> yeniden başlatıldığında aşağıdaki örnekteki
        gibi bir çıktı üretmelidir:
       </para>
<screen># <command>netstat -lnptu |grep "named\W*$"</command>
tcp 0 0 :::53         :::*      LISTEN 1234/named # incoming TCP requests
udp 0 0 1.2.3.4:53    0.0.0.0:*        1234/named # incoming UDP requests to IPv4 1.2.3.4
udp 0 0 127.0.0.1:53  0.0.0.0:*        1234/named # incoming UDP requests to IPv4 localhost
udp 0 0 0.0.0.0:32868 0.0.0.0:*        1234/named # dynamic chosen port for outgoing queries
udp 0 0 :::53         :::*             1234/named # incoming UDP request to any IPv6
</screen>
       <para>Basit bir deneme:</para>
<screen># <command>dig localhost @::1</command></screen>
       <para>Bu, bir sonuç göstermelidir.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>BIND named'in IPv6 adreslerinde dinlemesinin iptal edilmesi</term>
      <listitem>
       <para>
        IPv6 adreslerinde dinlemenin iptali için aşağıdaki seçenek
        değiştirilmelidir:
       </para>
<screen>options {
   # sure other options here, too
   listen-on-v6 { none; };
};
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>IPv6 destekli Erişim Kontrol Listeleri (ACL)</title>
    <para>
     IPv6 destekli ACL'ler hazırlamak mümkündür ve imkan olan heryerde
     kullanılmalıdır. Aşağıda bir örnek verilmiştir:
    </para>
<screen>acl internal-net {
    127.0.0.1;
    1.2.3.0/24;
    2001:0db8:100::/56;
    ::1/128;
    ::ffff:1.2.3.4/128;
};
acl ns-internal-net {
    1.2.3.4;
    1.2.3.5;
    2001:0db8:100::4/128;
    2001:0db8:100::5/128;
};
</screen>
    <para>
     Bu ACL'ler istemcilerin sorguları ya da ikincil alan adı sunucularına
     bölge aktarımı gibi amaçlar için kullanılabilir. Bu aynı zamanda
     arabellekli isim sunucunuzun dışarıdan IPv6 ile kullanılmasını da önler.
    </para>
<screen>options {
    # sure other options here, too
    listen-on-v6 { none; };
    allow-query { internal-net; };
    allow-transfer { ns-internal-net; };
};
</screen>
    <para>
     Alan tanımlamalarının çoğunda <option>allow-query</option> ve
     <option>allow-transfer</option> seçeneklerini de eklemek mümkündür.
    </para>
   </sect3>
   <sect3>
    <title>Adanmış bir IPv6 adresi ile sorguların gönderilmesi</title>
    <para>
     Bu seçeneğe gerek olmamakla birlikte, eğer ihtiyaç duyulursa aşağıdaki
     gibi kullanılabilir:
    </para>
<literallayout>query-source-v6 address <emphasis>ipv6adres</emphasis>|* port <emphasis>port</emphasis>|*;
</literallayout>
   </sect3>
   <sect3>
    <title>Alan başına tanımlanmış adanmış IPv6 adresleri</title>
    <para>
     Bölge başına bazı IPv6 adreslerini tanımlamak da mümkündür.
    </para>
    <variablelist>
     <varlistentry>
      <term>Kaynak adres aktarımı</term>
      <listitem>
       <para>
        Kaynak adres aktarımı giden bölge aktarımlarında kullanılır:
       </para>
<literallayout>transfer-source-v6 <emphasis>ipv6adres</emphasis>|* [port <emphasis>port</emphasis>];
</literallayout>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Kaynak adres bildirimi</term>
      <listitem>
       <para>
        Kaynak adres bildirimi giden bildirim iletileri için kullanılır:
       </para>
<literallayout>notify-source-v6 <emphasis>ipv6adres</emphasis>|* [port <emphasis>port</emphasis>];
</literallayout>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>IPv6 DNS alan dosyası örnekleri</title>
    <para>
     Bu konu için <link
     xlink:href="http://www.isi.edu/%7Ebmanning/v6DNS.html">IPv6 DNS Setup
     Information (article)</link> adresine bakılabilir. <link
     xlink:href="http://tools.fpsn.net/ipv6-inaddr/">IPv6 Reverse DNS zone
     builder for BIND 8/9 (webtool)</link> adresi de yardımcı olabilir.
    </para>
   </sect3>
   <sect3>
    <title>IPv6 ilişkili DNS bilgisinin sunulması</title>
    <para>
     IPv6'da ters DNS kaydı aramaları için yeni türler ve kök bölgeler
     tanımlanmıştır:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       AAAA ve ters IP6.INT: BIND 4.9.6 sürümünden itibaren
       kullanılabilmektedir ve <link
       xlink:href="http://www.faqs.org/rfcs/rfc1886.html">RFC 1886 / DNS
       Extensions to support IP version 6</link> ile tanımlanmıştır.
      </para>
     </listitem>
     <listitem>
      <para>
       A6, DNAME (ARTIK ÖNERİLMİYOR) ve ters IP6.ARPA: BIND 9'dan itibaren
       kullanılabilmektedir ve <link
       xlink:href="http://www.faqs.org/rfcs/rfc2874.html">RFC 2874 / DNS
       Extensions to Support IPv6 Address Aggregation and Renumbering</link>
       ile tanımlanmıştır, güncel bilgi için bakınız: <link
       xlink:href="http://www.ietf.org/internet-drafts/"
       >draft-ietf-dnsext-ipv6-addresses-00.txt</link>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Yukarıda verilen RFC'lerin yanısıra aşağıdaki belgeler de yardımcı
     olacaktır:
    </para>
    <itemizedlist>
    <listitem>
     <para>
      AAAA ve ters IP6.INT: <link
      xlink:href="http://www.isi.edu/%7Ebmanning/v6DNS.html">IPv6 DNS Setup
      Information</link>
     </para>
    </listitem>
    <listitem>
     <para>
      A6, DNAME (ARTIK ÖNERİLMİYOR) ve ters IP6.ARPA: BIND 9 kodu ile
      birlikte dağıtılan Administrator Reference Manual (ARM) belgesinin 4.
      ve 6. bölümlerine bakılabilir, aynı belgeye <link
      xlink:href="http://www.nominum.com/content/documents/bind9arm.pdf">BIND
      version 9 ARM (PDF)</link> adresinden de ulaşılabilir.
     </para>
    </listitem>
    </itemizedlist>
    <para>
     IP6.INT'e karşı çıkılsa da halen kullanımda olduğu için, IPv6 bilgisini
     destekleyen DNS'ler her iki ters alan bilgisini de sunmalıdır.
    </para>
    <sect4>
     <title>Güncel en iyi uygulama</title>
     <para>
      Yeni biçimlerin kullanımında sorunlar olduğundan, güncel uygulamaların
      en iyisi şöyledir:
     </para>
     <para>Düz arama desteği: AAAA</para>
     <para>Ters arama desteği:</para>
     <itemizedlist>
      <listitem>
       <simpara>
        ip6.int alanı için ters biçim (GERİYE UYUMLULUK İÇİN)
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        bölgesel ip6.arpa alanı için ters biçim (ÖNERİLEN)
       </simpara>
      </listitem>
     </itemizedlist>
    </sect4>
   </sect3>
   <sect3>
    <title>IPv6-uyumlu bağlantı kontrolü</title>
    <para>
     BIND'ın IPv6 soketini dinleyerek bilgi gönderip göndermediği aşağıdaki
     örneklerdeki yöntemlerle sınanabilir.
    </para>
    <variablelist>
     <varlistentry>
      <term>IPv6 bağlanıyor fakat ACL ile reddediliyor</term>
      <listitem>
       <para>
        Sorgu için bir sunucu tahsis edilerek IPv6 bağlantısı zorlanabilir:
       </para>
<screen>$ <command>host -t aaaa www.6bone.net 2001:0db8:200:f101::1</command>
Using domain server:
Name: 2001:0db8:200:f101::1
Address: 2001:0db8:200:f101::1#53
Aliases:
Host www.6bone.net. not found: 5(REFUSED)
</screen>
       <para>Bununla ilgili günlük (log) girdisi aşağıdaki gibidir:</para>
<screen>Jan 3 12:43:32 gate named[12347]: client 2001:0db8:200:f101:212:34ff:fe12:3456#32770:
query denied
</screen>
       <para>
        Günlükte böyle girdiler görüyorsanız bu istemcinin taleplerine izin
        verilip verilmediğine bakmanız ve gerekiyorsa ACL yapılandırmanızı
        gözden geçirmeniz uygun olur.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Başarılı IPv6 bağlantısı</term>
      <listitem>
       <para>Başarılı bir IPv6 bağlantısı aşağıdaki gibidir:</para>
<screen>$ <command>host -t aaaa www.6bone.net 2001:0db8:200:f101::1 </command>
Using domain server:
Name: 2001:0db8:200:f101::1
Address: 2001:0db8:200:f101::1#53
Aliases:
www.6bone.net. is an alias for 6bone.net.
6bone.net. has AAAA address 2001:0db8:200:f101::1
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-xinetd" userlevel="chunkthis">
   <title>Internet süper artalan süreci (xinetd)</title>
   <para>
    IPv6 desteği <link xlink:href="http://www.xinetd.org/">xinetd</link>
    sürüm 1.8.9'dan itibaren verilmektedir. Daha eski sürümleri güvenlik
    açıkları taşıdığından en azından 2.3.3 sürümü ya da daha iyisi son sürümü
    kullanılmalıdır.
   </para>
   <para>
    Bazı Linux dağıtımları IPv6 uyumlu <command>xinetd</command> için ilave
    paketler içerirken bazı dağıtımlar
    <filename>/etc/sysconfig/network</filename> (dağıtımlara göre farklı
    dosyalar olabilir) dosyasında <literal>NETWORKING_IPV6="yes"</literal>
    değişkeninin atanmasıyla IPv6 uyumlu hale gelmektedirler. Güncel
    sürümlerde tek bir dosya hem IPv4'ü hem de IPv6'yı desteklemektedir.
   </para>
   <para>
    Eğer zaman (daytime) gibi gömülü bir hizmeti IPv6 uyumlu hale
    getirecekseniz <filename>/etc/xinetd.d/daytime</filename> yapılandırma
    dosyası aşağıdaki gibi değiştirilmelidir.
   </para>
<screen># diff -u /etc/xinetd.d/daytime.orig /etc/xinetd.d/daytime
--- /etc/xinetd.d/daytime.orig Sun Dec 16 19:00:14 2001
+++ /etc/xinetd.d/daytime Sun Dec 16 19:00:22 2001
@@ -10,5 +10,5 @@
        protocol = tcp
        user = root
        wait = no
-       disable = yes
+       disable = no
 }
</screen>
   <para>
    <command>xinetd</command>'yi yeniden başlattığınızda aşağıdaki gibi
    olumlu bir sonuç almalısınız:
   </para>
<screen># <command>netstat -lnptu -A inet6 |grep "xinetd*"</command>
tcp 0 0 ::ffff:192.168.1.1:993  :::*  LISTEN  12345/xinetd-ipv6
tcp 0 0 :::13                   :::*  LISTEN  12345/xinetd-ipv6 &lt;== service daytime/tcp
tcp 0 0 ::ffff:192.168.1.1:143  :::*  LISTEN  12345/xinetd-ipv6
</screen>
   <para>
    Yukarıdaki örnek aynı zamanda "sadece IPv4 uyumlu" bir IMAP ve IMAP-SSL
    dinleyen bir <command>xinetd</command>'yi de göstermektedir.
   </para>
   <note>
    <para>
     <command>xinetd</command>'nin 2.3.11'den önceki sürümlerinde bununla
     ilgili sorunlar olduğu bilinmesine rağmen bu sorunlar giderilmiştir.
    </para>
   </note>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-hints-daemons-httpd2">
   <title>Apache2 (httpd2)</title>
   <para>
    Apache IPv6'yı 2.0.14 sürümünden itibaren doğal olarak desteklemektedir.
    Eski sürümlerin güvenlik sorunları olabileceği düşünülerek her zaman son
    sürüm kullanılmalıdır.
   </para>
   <sect3>
    <title>IPv6 Adreslerinde Dinlemek</title>
    <variablelist>
     <varlistentry>
      <term>Sadece IPv6 adreslerinden dinleyen sanal konak</term>
      <listitem>
 <screen>Listen [2001:0db8:100::1]:80
 &lt;VirtualHost [2001:0db8:100::1]:80&gt;
       ServerName ipv6only.example.com
       # ...diğer satırlar
 &lt;/VirtualHost&gt;
 </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>IPv6 ve IPv4 adreslerinden dinleyen sanal konak</term>
      <listitem>
<screen>Listen [2001:0db8:100::2]:80
 Listen 1.2.3.4:80
 &lt;VirtualHost [2001:0db8:100::2]:80 1.2.3.4:80&gt;
       ServerName ipv6veipv4.example.com
       # ...diğer satırlar
 &lt;/VirtualHost&gt;
 </screen>
       <para>
        Apache yeniden başlatıldığında aşağıdakine benzer bir sonuç
        alınmalıdır:
       </para>
<screen># <command>netstat -lnptu |grep "httpd2\W*$"</command>
 tcp 0 0 1.2.3.4:80          0.0.0.0:* LISTEN 12345/httpd
 tcp 0 0 2001:0db8:100::1:80 :::*      LISTEN 12345/httpd
 tcp 0 0 2001:0db8:100::2:80 :::*      LISTEN 12345/httpd
 </screen>
       <para>Basit sınamalar için telnet örneği kullanılabilir.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Ek bilgiler</term>
      <listitem>
       <para>
        Apache2 veri sunmayı hızlandıran <literal>sendfile</literal> isimli
        bir yöntemi desteklemektedir. Bazı NIC sürücüleri çevrimiçi sağlamayı
        (checksumming) da desteklemektedirler. Böyle durumlar bağlantı
        sorunlarına ve geçersiz TCP sağlamalarına neden olabildiğinden
        <literal>sendfile</literal> özelliği, Apache ya yeniden
        <option>--without-sendfile</option> seçeneğiyle derlenerek ya da
        yapılandırma dosyasında <literal>EnableSendfile off</literal>
        yapılarak etkisiz duruma getirilmelidir.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-radvd">
   <title>Rota Bilgilendirme Sunucusu (radvd)</title>
   <para>
    Rota Bilgilendirme Sunucusu, eğer istemciler otomatik yapılandırılacaklar
    ise yerel ağda çok kullanışlıdır. Artalan sürecinin kendisi Linux'ta
    öntanımlı IPv6 ağ geçidinde çalışmalıdır (bunun aynı zamanda öntanımlı
    IPv4 ağ geçidi olması gerekmediğinden yerel alan ağınızdaki yönledirici
    bilgisinin kim tarafından gönderildiğine dikkat edin).
   </para>
   <para>
    Bilgilendirme için bazı bilgiler ve bayraklar belirtilebilir. Sıkça
    kullanılanlar şunlardır:
   </para>
   <simplelist>
    <member>Önek (gerekli)</member>
    <member>Önekin yaşam süresi</member>
    <member>Bilgilendirme gönderme sıklığı (isteğe bağlı)</member>
   </simplelist>
   <para>
    Uygun bir yapılandırmadan sonra <command>radvd</command> belirlenen
    arabirim üzerinden bilgilendirmeleri gönderir ve istemciler bunları
    alarak aldıkları önek ve öntanımlı ağ geçidi ile otomatik
    yapılandırılırlar.
   </para>
   <sect3>
    <title><literal>radvd</literal>'nin yapılandırılması</title>
    <sect4>
     <title>Basit yapılandırma</title>
     <para>
      <command>radvd</command>'nin yapılandırma dosyası genellikle
      <filename>/etc/radvd.conf</filename>'dır ve basit örnek dosya aşağıdaki
      gibidir:
     </para>
<screen>interface eth0
{
    AdvSendAdvert on;
    MinRtrAdvInterval 3;
    MaxRtrAdvInterval 10;
    prefix 2001:0db8:0100:f101::/64
    {
        AdvOnLink on;
        AdvAutonomous on;
        AdvRouterAddr on;
    };
};
</screen>
     <para>Bunun istemci tarafındaki sonucu:</para>
<screen># <command>ip -6 addr show eth0</command>
3: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast qlen 100
    inet6 2001:0db8:100:f101:2e0:12ff:fe34:1234/64 scope global dynamic
       valid_lft 2591992sec preferred_lft 604792sec
    inet6 fe80::2e0:12ff:fe34:1234/10 scope link
</screen>
     <para>
      Yaşam süresi belirtilmediğinden çok büyük bir değer kullanılmıştır.
     </para>
    </sect4>
    <sect4>
     <title>Özel 6ya4 yapılandırma</title>
     <para>
      0.6.2pl3 sürümünden bu yana belirli bir arabirimin IPv4 adresine bağlı
      önekin (yeniden)-oluşturulması desteklenmektedir. Bu 6ya4 tünellemesi
      değiştirildiğinde bu bilginin yerel ağa duyurulmasında kullanılabilir.
      Genellikle dinamik istek olduğunda bağlantı yapan Linux
      yönlendiricilerde kullanılır. Böyle bir önekin yaşam süresi göreceli
      kısa olacağından (her yeni bağlantıda yeni bir önek geçerli olacaktır)
      yaşam süresi asgari değerler ile yapılandırılmıştır:
     </para>
<screen>interface eth0
{
    AdvSendAdvert on;
    MinRtrAdvInterval 3;
    MaxRtrAdvInterval 10;
    prefix 0:0:0:f101::/64
    {
        AdvOnLink off;
        AdvAutonomous on;
        AdvRouterAddr on;
        Base6to4Interface ppp0;
        AdvPreferredLifetime 20;
        AdvValidLifetime 30;
    };
};
</screen>
     <para>
      Bunun istemci tarafındaki sonucu (ppp0'ın yerel IPv4 adresi olarak
      1.2.3.4 kullanıdığı varsayılmıştır):
     </para>
<screen># <command>/sbin/ip -6 addr show eth0</command>
3: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast qlen 100
   inet6 2002:0102:0304:f101:2e0:12ff:fe34:1234/64 scope global dynamic
      valid_lft 22sec preferred_lft 12sec
   inet6 fe80::2e0:12ff:fe34:1234/10 scope link
</screen>
     <para>
      Kısa yaşam süresi tanımlandığından, eğer ilgili bir bilgi alınmazsa bu
      önekten kısa zamanda vazgeçilir.
     </para>
     <note>
      <para>
       Eğer başlangıç betiklerinde özel 6ya4 desteği kullanmazsanız,
       yönlendiricinin dahili bir arabiriminde özel bir rota belirlemeniz
       gerekir. Aksi halde bazı geri yönlendirme sorunlarıyla
       karşılaşırsınız. Buradaki örnek için:
      </para>
<screen># <command>/sbin/ip -6 route add 2002:0102:0304:f101::/64 dev eth0 metric 1</command>
</screen>
      <para>
       Bu rota önekin her değişmesinde yenilenmelidir, çünkü yeni bağlantıda
       dial-up arabirimine yeni IPv4 adresi atanır.
      </para>
     </note>
    </sect4>
   </sect3>
   <sect3>
    <title>Hata ayıklama</title>
    <para>
     <command>radvdump</command> isimli uygulama gönderilen ya da alınan
     bilgilendirmeyi incelemenize yardımcı olur. Kullanımı basitçe:
    </para>
<screen># <command>radvdump</command>
Router advertisement from fe80::280:c8ff:feb9:cef9 (hoplimit 255)
        AdvCurHopLimit: 64
        AdvManagedFlag: off
        AdvOtherConfigFlag: off
        AdvHomeAgentFlag: off
        AdvReachableTime: 0
        AdvRetransTimer: 0
        Prefix 2002:0102:0304:f101::/64
                AdvValidLifetime: 30
                AdvPreferredLifetime: 20
                AdvOnLink: off
                AdvAutonomous: on
                AdvRouterAddr: on
        Prefix 3ffe:ffff:100:f101::/64
                AdvValidLifetime: 2592000
                AdvPreferredLifetime: 604800
                AdvOnLink: on
                AdvAutonomous: on
                AdvRouterAddr: on
        AdvSourceLLAddress: 00 80 12 34 56 78
</screen>
    <para>
     Çıktı her bilgilendirme paketini okunabilir şekilde göstermektedir.
     Yapılandırdığınız değerleri burada görmelisiniz, aksi halde
     bilgilendirmeyi gönderen sizin <command>radvd</command>'niz olmayabilir.
     Bağlantıda başka bir yönlendirici olup olmadığına bakın. Bunun izini
     sürmeniz için bir MAC adresi olan <literal>AdvSourceLLAddress</literal>
     değeri size yardımcı olacaktır.
    </para>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-dhcpv6">
   <title>Dinamik Konak Yapılandırma Protokolü v6 Sunucusu (<literal>dhcp6s</literal>)</title>
   <para>
    DHCPv6 kapsamlı yapılandırmalar için kullanılabilir. Artalan sürecinin
    kendisinin Linux öntanımlı IPv6 yönlendiricisi üzerinde çalışması
    gerekmez.
   </para>
   <para>
    Radvd kullanırken yaptığınızdan daha fazla tanımlama yapabilirsiniz. Bu
    tanımlamalar çoğunlukla IPv4 DHCP sunucusundakilere benzer.
   </para>
   <para>
    Artalan süreci uygun bir yapılandırmanın ardından, ICMPv6 çoğa gönderim
    paketleri gönderen istemcilere ff02::16 adresini göndererek karşılık
    verir.
   </para>
   <sect3>
    <title>DHCPv6 sunucusunun (<literal>dhcp6s</literal>) yapılandırılması </title>
    <sect4>
     <title>Basit Yapılandırma</title>
     <para>
      <command>dhcp6s</command>'nin yapılandırma dosyası normalde
      <filename>/etc/dhcp6s.conf</filename> dosyasıdır. Basit bir örnek
      aşağıdaki gibidir:
     </para>
<screen>interface eth0 {
        server-preference 255;
        renew-time 60;
        rebind-time 90;
        prefer-life-time 130;
        valid-life-time 200;
        allow rapid-commit;
        option dns_servers 2001:db8:0:f101::1 sub.domain.example;
        link AAA {
                range 2001:db8:0:f101::1000 to 2001:db8:0:f101::ffff/64;
                prefix 2001:db8:0:f101::/64;
        };
};
</screen>
    </sect4>
   </sect3>
   <sect3>
    <title>DHCPv6 istemcisinin (<literal>dhcp6c</literal>) yapılandırılması</title>
    <sect4>
     <title>Basit Yapılandırma</title>
     <para>
      <command>dhcp6c</command>'nin yapılandırma dosyası normalde
      <filename>/etc/dhcp6c.conf</filename> dosyasıdır. Basit bir örnek
      aşağıdaki gibidir:
     </para>
<screen>interface eth0 {
        send rapid-commit;
        request domain-name-servers;
};
</screen>
    </sect4>
   </sect3>
   <sect3>
    <title>Kullanım</title>
    <sect4>
     <title>dhcpv6 sunucu</title>
     <para>Aşağıdaki komut sunucuyu başlatır:</para>
<screen># <command>service dhcp6s start</command></screen>
    </sect4>
    <sect4>
     <title>dhcpv6 istemci</title>
     <para>Aşağıdaki komut istemciyi arka planda başlatır:</para>
<screen># <command>dhcp6c -f eth0</command></screen>
    </sect4>
   </sect3>
   <sect3>
    <title>Hata Ayıklama</title>
    <sect4>
     <title>dhcpv6 sunucu</title>
     <para>
      Sunucunun bir önplanda çalışan iki de hata ayıklamada kullanılan (her
      ikisi de hata ayıklama için kullanılmalıdır) seçeneği vardır,
      bir örnek:
     </para>
<screen># <command>dhcp6c -d -D -f eth0</command></screen>
    </sect4>
    <sect4>
     <title>dhcpv6 istemci</title>
     <para>
      İstemcinin bir önplanda çalışan iki de hata ayıklamada kullanılan seçeneği vardır, bir örnek:
     </para>
<screen># <command>dhcp6c -d -f eth0</command>
    Oct/03/2005 17:18:16 dhcpv6 doesn't support hardware type 776
    Oct/03/2005 17:18:16 doesn't support sit0 address family 0
    Oct/03/2005 17:18:16 netlink_recv_rtgenmsg error
    Oct/03/2005 17:18:16 netlink_recv_rtgenmsg error
    Oct/03/2005 17:18:17 status code for this address is: success
    Oct/03/2005 17:18:17 status code: success
    Oct/03/2005 17:18:17 netlink_recv_rtgenmsg error
    Oct/03/2005 17:18:17 netlink_recv_rtgenmsg error
    Oct/03/2005 17:18:17 assigned address 2001:db8:0:f101::1002 prefix len is not in any RAs prefix length using 64 bit instead
    Oct/03/2005 17:18:17 renew time 60, rebind time 9
</screen>
     <para>
      Netlink hata iletilerinin bir etkisinin olmadığına dikkat edin.
     </para>
    </sect4>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-tcp_wrapper">
   <title>
    <literal>tcp_wrapper</literal>
   </title>
   <para>
    <command>tcp_wrapper</command> sizi hizmetlerin hatalı kullanımından koruyan bir kütüphanedir.
  </para>
   <sect3>
    <title>Süzme yetenekleri</title>
    <para>
     <command>tcp_wrapper</command>'ı iki şekilde kullanabilirsiniz:
    </para>
    <simplelist>
     <member>Kaynak adresine göre süzme (IPv4 veya IPv6)</member>
     <member>
      Kullanıcılara göre süzme (istemcide <command>ident</command> artalan
      sürecinin çalışmasını gerektirir)
     </member>
    </simplelist>
   </sect3>
   <sect3>
    <title><literal>tcp_wrapper</literal> kullanan uygulamalar</title>
    <para>
     <command>tcp_wrapper</command> kullandığı bilinen iki uygulama:
    </para>
    <simplelist>
     <member>
      <command>xinetd</command> tarafından çağrılan tüm hizmetler (eğer
      <command>xinetd</command>, <command>tcp_wrapper</command>
      kütüphanelerini kullanacak şekilde derlenmişse)
     </member>
     <member>
      <command>sshd</command> (eğer <command>tcp_wrapper</command>
      kullanılarak derlenmişse)
     </member>
    </simplelist>
   </sect3>
   <sect3>
    <title>Kullanım</title>
    <para><command>tcp_wrapper</command> iki dosya ile kontrol edilir;
     <filename>/etc/hosts.allow</filename> ve
     <filename>/etc/hosts.deny</filename>. Daha fazla bilgi için:
    </para>
<screen># <command>$ man hosts.allow</command></screen>
    <example>
     <title>Örnek <filename>/etc/hosts.allow</filename> dosyası</title>
     <para>
      Bu dosyada bağlantısı kabul edilecek her hizmet için bir satır
      bulunmalıdır.
     </para>
<screen>sshd:           1.2.3. [2001:0db8:100:200::]/64
daytime-stream: 1.2.3. [2001:0db8:100:200::]/64
</screen>
     <note>
      <para>
       IPv6 ağ tanımlaması hatalı olan bazı gösterimler de vardır:
       <literal>[3ffe:ffff:100:200::/64]</literal>.
      </para>
     </note>
    </example>
    <example>
     <title>Örnek <filename>/etc/hosts.deny</filename> dosyası</title>
     <para>
      Bu dosya tüm olumsuz filtreleme girdilerini barındırmalı ve kalan
      herşeyi,
     </para>
<screen>ALL: ALL</screen>
     <para>ile reddetmelidir.</para>
     <para>
      Eğer bu düğüm daha duyarlıysa yukarıdaki satır aşağıdaki ile
      değiştirilebilir ama kısa zamanda çok fazla bağlantı olması durumunda
      DoS saldırısına neden olabilir. Bir günlük kaydı böyle işler için daha
      iyidir.
     </para>
<screen>ALL: ALL: spawn (echo "Attempt from %h %a to %d@`date`"
 | tee -a /var/log/tcp.deny.log | mail root@localhost)
</screen>
    </example>
   </sect3>
   <sect3>
    <title>Günlük Kayıtları</title>
    <para>
     Syslog'un yapılandırma dosyası olan
     <filename>/etc/syslog.conf</filename> içindeki girdiye bağlı olarak
     değişebilse de <command>tcp_wrapper</command> kayıtlarını normal olarak
     <filename>/var/log/secure</filename> dizininde tutar.
    </para>
    <variablelist>
     <varlistentry>
      <term>Reddedilen bağlantı</term>
      <listitem>
       <para>
        Kayıt dosyasında <literal>daytime-stream</literal> hizmeti tarafından
        reddedilen her bağlantı için aşağıdakine benzer bir satır bulunur:
       </para>
<screen>Jan 2 20:40:44 gate xinetd-ipv6[12346]: FAIL: daytime-stream libwrap from=::ffff:1.2.3.4
Jan 2 20:32:06 gate xinetd-ipv6[12346]: FAIL: daytime-stream libwrap  from=2001:0db8:100:200::212:34ff:fe12:3456
</screen>
       <para>
        Kayıt dosyasında <command>sshd</command> hizmeti tarafından
        reddedilen her bağlantı için aşağıdakine benzer bir satır bulunur:
       </para>
<screen>Jan 2 20:24:17 gate sshd[12345]: refused connect from ::ffff:1.2.3.4 (::ffff:1.2.3.4)
Jan 2 20:39:33 gate sshd[12345]: refused connect from 2001:0db8:100:200::212:34ff:fe12:3456    (2001:0db8:100:200::212:34ff:fe12:3456)
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>İzin verilen bağlantı</term>
      <listitem>
       <para>
        Kayıt dosyasında <literal>daytime-stream</literal> hizmeti tarafından
        izin verilen bağlantılar için aşağıdakine benzer bir satır bulunur:
       </para>
<screen>Jan 2 20:37:50 gate xinetd-ipv6[12346]: START: daytime-stream pxml:id=0 from=::ffff:1.2.3.4
Jan 2 20:37:56 gate xinetd-ipv6[12346]: START: daytime-stream pxml:id=0 from=2001:0db8:100:200::212:34ff:fe12:3456
</screen>
       <para>
        Kayıt dosyasında <command>sshd</command> hizmeti tarafından izin verilen bağlantılar için aşağıdakine benzer bir satır bulunur:
       </para>
<screen>Jan 2 20:43:10 gate sshd[21975]: Accepted password for user from ::ffff:1.2.3.4 port 33381 ssh2
Jan 2 20:42:19 gate sshd[12345]: Accepted password for user from 2001:0db8:100:200::212:34ff:fe12:3456 port 33380 ssh2
</screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-vsftpd">
   <title><literal>vsftpd</literal></title>
   <sect3>
    <title>IPv6 adreslerinde dinlemek</title>
    <para>
     Yapılandırma dosyası olan <filename>/etc/vsftpd/vsftpd.conf</filename>
     dosyasını düzenleyerek aşağıdaki seçeneği aktif hale getirin:
    </para>
<screen>listen_ipv6=yes</screen>
    <para>Hepsi bu kadar.</para>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-proftpd">
   <title>
    <literal>proftpd</literal>
   </title>
   <sect3>
    <title>IPv6 adreslerinde dinlemek</title>
    <para>
     Yapılandırma dosyası olan <filename>/etc/proftpd.conf</filename>
     dosyasını düzenleyerek aşağıdaki kısmı ekleyin:
    </para>
<screen>&lt;VirtualHost 192.0.2.1&gt;
        ...
        Bind 2001:0DB8::1
        ...
&lt;/VirtualHost&gt;
</screen>
    <para>Hepsi bu kadar.</para>
   </sect3>
  </sect2>
  <sect2 xml:id="ipv6-howto-hints-daemons-others">
   <title>Diğer artalan süreçleri</title>
   <para>
    Bir komut satırı seçeneğinin ya da yapılandırma değerinin IPv6 uyumlu
    olup olmadığını kolayca öğrenebilirsiniz. Sürecin kılavuz dosyasına veya
    SSS belgesine bakmak yeterlidir. Bazen yetersiz destek yüzünden bir
    sürecin adanmış bir IPv6 adresine atanamadığı veya sadece (::) adresine
    atanabildiği gibi durumlar olmaktadır.
  </para>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-programming-using-api">
  <title>Yazılım Geliştirme (Uygulama Geliştirme Arayazü ile)</title>
  <sect2>
   <title>C kütüphanesini kullanarak uygulama geliştirme</title>
   <para>İlgili RFC'ler </para>
   <itemizedlist>
    <listitem>
     <para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc3493.html">RFC 3493 /IPv6
       için temel yuva(socket) arayüz eklentileri</link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc3542.html">RFC 3542 /
      IPv6 için ileri yuva uygulama geliştirme arayüzü</link>
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Aşağıdaki bölüm John Wenker<link xlink:href="http://www.pt.com"/>
    tarafından hazırlanmıştır.
    </para>
    <para>
     Bu bölümde Linux işletim sisteminde nasıl IPv6 sunucu-istemci uygulaması
     geliştirileceği açıklanmaktadır.Bu bölümde anlatılanlar Jun-ichiro
     itojun Hagino tarafından yazılan "IPv6 Network Programming" kitabının 2,
     3 ve 4. bölümlerinden derlenerek hazırlanmıştır. Daha ayrıntılı bilgi
     için bu kitabı okuyabilirsiniz. Bu kitap IPv4 uygulamalarının iletişim
     kurallarından (protocol) bağımsız bir şekilde nasıl IPv6 uyumlu hale
     getirileceğini ve bu çevrimde sık karşılaşılan sorunlar ve çözümlerini
     içermektedir. Bu yazının hazırlanması sırasında, nasıl IPv6 uygulamaları
     geliştirileceğini anlatan tek kitap budur[aynı zamanda bu yazı
     hazırlanırken uygulamaların nasıl IPv6'ya uyarlanacağı aynı yazarın
     yazısında bulunabilir: <link
     xlink:href="http://jungla.dit.upm.es/~ecastro/IPv6-web/ipv6.html"/>].
     Fakat 360 sayfalık bu kitabın yaklaşık 60 bölümü kullanışlı. Bununla
     birlikte bu kitabın yol göstermesiyle bu yazı yazıldı ve yazarın
     işlerini yapmasında yardımcı oldu. Hagino kitabındaki bilgilerin çoğu
     (fakat hepsi değil) Linux "man" sayfalarında mevcuttur, uygulama
     geliştiriciler "man" sayfalarında arayarak kaybedecekleri büyük zamanı
     bu kitabın ilgili bölümlerini okuyarak kazanabilirler.
    </para>
    <para>
     Hagino kitabından başka bu NASIL belgesinde verilen bilgiler de hatalı
     veya eksik olabilir. Bazı kısımlar ve açıklamalar IPv6 için tamamen
     doğru niteliği taşımamaktadır, fakat kullanışlı uygulamalarda çalıştığı
     gözlenmektedir.
    </para>
    <para>
     Bu kısımda okuyucunun TCP/IP soket uygulama geliştirme arayüzüyle (API)
     tecrübesinin olduğu varsayılmaktadır. Daha fazla bilgi için Comer &amp;
     Stevens' ın "Internetworking with TCP/IP"(ISBN 0-13-032071-4) serisi
     dökümanları incelenebilir, özellikle 3. cilt: istemci-sunucu
     uygulamaları, Linux/POSIX soket sürümleri. Bu NASIL belgesinde
     okuyucunun temel IPv6 bilgisinin olduğu ve ağ adresleme yapısını iyi
     bildiği varsayılmaktadır.
    </para>
   <sect3>
    <title>Adres yapıları</title>
    <para>
     Bu bölüm bir sunucu-istemci uygulamasındaki İnternet iletişim
     kurallarını kullanırken, ağ adreslerini temsil eden soket uygulama
     geliştirme arayüzünde sağlanan yapıları tanıtmayı amaçlamaktadır.
    </para>
    <sect4>
     <title>IPv4 <literal>sockaddr_in</literal></title>
     <para>
      IPv4'te ağ adresleri 32 bit uzunluğundadır ve bir ağ düğümünü tanımlar.
      Adresler noktalı onluk sistemde yazılmıştır, 192.0.2.1 gibi, burada her
      sayı bir adresin sekiz bitlik bir bölümünü göstermektedir. Örnek IPv4
      adresi &lt;netinet/in.h&gt;'da tanımlanmış sockaddr_in veri yapısıyla
      gösterilmektedir.
     </para>
<screen>struct sockaddr_in
{
   sa_family_t    sin_family;
   in_port_t      sin_port;
   struct in_addr sin_addr;
   /* Ayrıca uyum için bazı yardımcılar */
};
</screen>
     <para>
      <literal>sin_family</literal> bileşeni adres ailesini belirtmektedir.
      IPv4 adresleri için bu her zaman AF_INET'e ayarlanmıştır.
      <literal>sin_addr</literal> alanı 32 bitlik ağ adresini barındırır. Son
      olarak, <literal>sin_port</literal> bileşeni taşıma katmanı port
      numarasını gösterir. Okurlar bu yapıyla zaten tanışmış olmalıdırlar,
      çünkü bu standart IPv4 adres yapısıdır.
    </para>
    </sect4>
    <sect4>
     <title>IPv6 <literal>sockaddr_in6</literal></title>
     <para>
      IPv6'daki en büyük yenilik adres uzunluğunun artmasıdır. 32 bit ağ
      adreslerinin yerine IPv6'da 128 bit ayrılmıştır. Adresler
      <literal>fe80::2c0:8cff:fe01:2345</literal> örneğindeki gibi 16'lık
      düzendedir.Bu adres iki nokta üstüste ile ayrılan her biri 16 bit
      uzunluğundaki 16'lık düzendeki sayıları içermektedir. Ardışık iki tane
      iki nokta üstüste ardışık sıfırların kısa gösterimidir, ve bir adreste
      sadece bir ardışık iki nokta üst üste bulunabilir. IPv6 adresleri
      <filename>&lt;netinet/in.h&gt;</filename>'de tanımlanmış
      <literal>sockaddr_in6</literal> veri yapısıyla gösterilmektedir.
     </para>
<screen>struct sockaddr_in6
{
   sa_family_t     sin6_family;
   in_port_t       sin6_port;
   uint32_t        sin6_flowinfo;
   struct in6_addr sin6_addr;
   uint32_t        sin6_scope_id;
};
</screen>
     <para>
      <literal>sin6_family</literal>, <literal>sin6_port</literal> ve
      <literal>sin6_addr</literal> bileşenleri <literal>sockaddr_in</literal>
      yapısındaki karşılıklarıyla aynı anlamdadır. Fakat
      <literal>sin6_family</literal> üyesi AF_INET6'ya ayarlanmıştır, ve
      <literal>sin6_addr</literal> alanı 32 bit yerine 128 bit uzunluğundaki
      bir adresi gösterir.
     </para>
     <para>
      <literal>sin6_flowinfo</literal> alanı akış kontrolü için
      kullanılmaktadır fakat henüz standartlaştırılamamıştır ve ihmal
      edilebilir.
     </para>
     <para>
      <literal>sin6_scope_id</literal> alanın ise tek bir kullanımı vardır,
      IPv6 tasarımcılarının bu alanı geriye uyumluluk için düzenledikleri
      düşünülmektedir. Görünüşe göre 128 bit IPv6 adresleri tek değildir.
      Örneğin farklı ağlarda aynı yerel bağlantı adresine sahip iki düğüm
      olması mümkündür (Şekil 1'e bakın). Bir düğüme veri göndermek için ağ
      adresinden daha fazlası gerekmektedir; alan belirleyicisi
      belirtilmelidir. Linux'ta ağ arayüz ismi alan belirleyicisi olarak
      kullanılmaktadır (mesela <literal>eth0</literal>) [alan
      belirleyicilerinin belirlenmesi uygulama bağımlıdır]. Geçerli ağ
      arayüzlerini görüntülemek için <command>ifconfig</command> kullanın.
     </para>
     <para>
      16'lık ağ adresleri, kapsamlı bir adres üretmek için alan
      belirleyicileriyle genişletilebilir. Yüzde işareti(%) ağ adreslerinden
      alan belirleyicilerini ayırmak için kullanılır. Örneğin
      <literal>fe80::1%eth0</literal>, 128 bit ağ adresini içeren
      <literal>fe80::1</literal> IPv6 adresini ve <literal>eth0</literal> da
      bir ağ arayüzünü (alan belirleyicisi) göstermektedir. Bu yüzden eğer
      bir düğüm iki ağda bulunacaksa, örnekteki B düğümü gibi, kullanıcı
      belli bir düğüme ulaşmak için hangi yolu izlemesi gerektiğini
      bilmelidir. Birinci şekilde, B düğümü A düğümünü
      <literal>fe80::1%eth0</literal> kapsamlı adresiyle adreslemiş, C düğümü
      de <literal>fe80::1%eth1</literal> ile adreslenmiştir.
     </para>
<literallayout>Host A (fe80::1) ---- eth0 ---- Host B ---- eth1 ---- Host C (fe80::1)
</literallayout>
     <para>
      <literal>sockaddr_in6</literal> yapısına geri dönersek,
      <literal>sin6_scope_id</literal> alanı bulunduğu düğümün ağ
      arayüzlerinin listesini içerir. Sunucu uygulamalarında bu alan bir
      bağlantı kabul edildiğinde veya bir veri alındığında soket uygulama
      geliştirme arayüzü (API) tarafından kendiliğinden doldurulur. İstemci
      uygulamalarında eğer bir kapsamlı adres
      <literal>getaddrinfo</literal>(3)'ya (Bu belgede daha ileride
      açıklanmıştır) düğüm bağımsız değişkeni olarak geçerse,
      <literal>sin6_scope_id</literal> alanı işlevden geri dönen değer ile
      doldurulur; eğer bir kapsamlı adres gelmemişse
      <literal>sin6_scope_id</literal> alanı daha önce bağlanılmaya çalışılan
      sunucu olarak atanır. <literal>if_nametoindex</literal>(3) işlevi bir
      ağ arayüzünü onun uygun kısmına çevirmek için kullanılır. Bu
      <literal>&lt;net/if.h&gt;</literal>'da tanımlanmıştır.
     </para>
    </sect4>
    <sect4>
     <title>Genel adresler </title>
     <para>
      Her klasik TCP/IP soket uygulama geliştirme arayüzü geliştiricisinin
      bildiği gibi, yapısal göstericilerle ilgilenen çok sayıda soket yöntemi
      vardır. Örneğin genel <literal>sockaddr</literal> veri yapısını
      adresleyen bir gösterici bazı soket yöntemlerine bağımsız değişken olarak
      aktarılabilir (örneğin <literal>connect</literal>(2) veya
      <literal>bind</literal>(2)). Genel <literal>sockaddr_in6</literal>
      yapısı, genel <literal>sockaddr</literal> yapısından daha büyük
      olduğuna dikkat edilmelidir. Bu yüzden eğer uygulamanız türü bilinen
      bir adres alırsa ( mesela IPv4 adres yapısı veya IPv6 adres yapısı),
      ona uygun saklayıcıyı seçmeniz gerekir.
      <literal>sockaddr_storage</literal> veri yapısı
      <literal>&lt;bits/socket.h&gt;</literal>'da bu amaç için
      tanımlanmıştır. (Bu dosyayı projenize dahil etmeyin (#include), her
      zamanki <literal>&lt;sys/socket.h&gt;</literal>'ı kullanın, dolayısıyla
      <literal>&lt;bits/socket.h&gt;</literal> zaten dahil olur.)
     </para>
     <para>
      Örneğin uzak bir görevdeşten (peer) ileti almak için kullanılan
      <literal>recvfrom</literal>(2) sistem çağrısını düşünün. İşlev
      sözdizimi aşağıdaki gibidir.
     </para>
<screen> ssize_t recvfrom( int              s,
                  void            *buf,
                  size_t           len,
                  int              flags,
                  struct sockaddr *from,
                  socklen_t       *fromlen );
</screen>
     <para>
      <parameter>from</parameter> bağımsız değişkeni genel bir
      <literal>sockaddr</literal> yapısını göstermektedir. Eğer veri
      <parameter>s</parameter> ile gösterilen IPv6 eşinden alınmışsa,
      <parameter>from</parameter> <literal>sockaddr_storage</literal>
      yapısını gösterecektir. Aşağıda örnek bir uygulama bulunmaktadır.
     </para>
<screen>
/*
** Uzak bir görevdeşten ileti okur ve tampon göstericisini
** döndürür.
**
** 's' soket için dosya tanıtıcısıdır
*/
char *rcvMsg( int s )
{
    static char bfr[ 1025 ]; /* İletinin saklandığı yer. */
    ssize_t count;
    struct sockaddr_storage ss; /* görevdeşten adresinin bulunduğu kısım. */
    socklen_t sslen;
    sslen = sizeof( ss );
    count = recvfrom( s,
                      bfr,
                      sizeof( bfr ) - 1,
                      0,
                      (struct sockaddr*) &amp;s,
                      &amp;sslen );
    bfr[ count ] = '\0'; /* İletiyi sonlandırır. */
    return bfr;
} /* rcvMsg()'ın sonu */
</screen>
     <para>
      Yukarıda görüldüğü gibi <literal>ss</literal>
      (<literal>sockaddr_storage</literal> veri yapısı nesnesi) görevdeşin
      bilgisini almak için kullanılmıştır.
     </para>
    </sect4>
   </sect3>
   <sect3>
    <title>Arama Yöntemleri</title>
    <para>
     Çoğunlukla düğüm ismi ve hizmet ismi çözümlemesi <function>gethostbyname</function>(3) ve
     <function>getservbyname</function>(3) işlevleriyle yapılmaktadır. Bu
     işlevler kullanılmaya uygundur, fakat IPv6'ya ileri uyumlulukları
     yoktur. Onun yerine IPv6 soket uygulama geliştirme arayüzünde yeni arama
     işlevleri bulunmaktadır. Bu arama işlevleri aynı zamanda IPv4'e geri
     uyumludur, bu yüzden geliştiriciler aynı algoritmayı uygulamalarında hem
     IPv4 hem de IPv6 iletişim kuralları için kullanabilirler. Bu önemli bir
     gelişmedir, çünkü IPv6 altyapısı birdenbire bir yere
     yerleştirilmemektedir. Bu yüzden, IPv4'ten IPv6'ya geçiş sürecince,
     istemci-sunucu uygulamaları her iki iletişim kuralı için uyumlu olarak
     tasarlanmalıdır. Bu bölümün sonundaki örnek uygulama tam olarak bu işi
     yapmaktadır.
    </para>
    <para>
     Yeni soket uygulama geliştirme arayüzündeki birincil arama işlevi
     <function>getaddrinfo</function>(3)'dur. Aşağıda sözdizimi
     bulunmaktadır.
    </para>
<screen>int getaddrinfo( const char             *node,
                 const char             *service,
                 const struct addrinfo  *hints,
                 struct addrinfo       **res );
</screen>
    <para>
     <parameter>node</parameter> bağımsız değişkeni bir düğüm ismine veya IP
     adresine götericidir. Belirtilen dizge bir düğüm ismi, bir IPv4 adresi
     veya IPv6 adresi olabilir. <parameter>service</parameter> bağımsız değişkeni
     taşıyıcı katmanın hizmet ismine veya port numarasına göstericidir. Bu
     <filename>/etc/services</filename>'te bulunan bir isim veya ondalık bir
     sayıdır. <function>getaddrinfo</function>(3) düğüm/hizmet birleşimini
     çözer ve adres kayıtlarını içeren bir liste döndürür;
     <parameter>res</parameter> ile gösterilen konuma bu listeyi gösteren bir
     gösterici koyar. Örneğin bir düğüm hem IPv4 hem de IPv6 ile adreslenmiş
     olsun ve ilgili hizmetin <filename>/etc/services</filename>'te hem TCP
     hem de UDP girdisi olsun. Bu örnekte anlaşılamayan 4 adres geri döner;
     biri TCP/IPv6 için, biri UDP/IPv6 için, biri TCP/IPv4 için ve biri de
     UDP/IPv6 için.
    </para>
    <para>
     <type>addrinfo</type> yapısının tanımı
     <filename>&lt;netdb.h&gt;</filename> içinde bulunabilir
     (<function>getaddrinfo</function>(3)'ün tanımı ve bu bölümde anlatılan
     diğer işlev tanımları da bulunabilir). Yapı aşağıdaki şekildedir.
    </para>
<screen>struct addrinfo
{
   int              ai_flags;
   int              ai_family;
   int              ai_socktype;
   int              ai_protocol;
   socklen_t        ai_addrlen;
   struct sockaddr *ai_addr;
   char            *ai_canonname;
   struct addrinfo *ai_next;
};
</screen>
    <para>
     <function>getaddrinfo</function>(3) ve çeşitli alanlarla ilgili ayrıntılı
     bilgi "man" sayfalarında mevcuttur; Bu belge sadece bunların bir
     altkümesini içermektedir ve IPv6 ile uygulama geliştirme için temel
     bilgileri içermektedir.
    </para>
    <para>
     <literal>ai_family</literal>, <literal>ai_socktype</literal>, ve
     <literal>ai_protocol</literal> alanları <function>socket</function>(2)
     sistem çağrısındakilerle tamamen aynı anlamlara gelmektedir.
     <literal>ai_family</literal> alanı kayıtla ilişkili iletişim kural
     ailesini belirtmektedir (adres ailesini değil) ve IPv6 için
     <literal>PF_INET6</literal> veya IPv4 için <literal>PF_INET</literal>
     olmalıdır. <literal>ai_socktype</literal> alanı kaydı karşılayan yuvanın
     türünü bildirir; Güvenilir bağlantı temelli veri akışı için
     <literal>SOCK_STREAM</literal> veya bağlantısız iletişim için
     <literal>SOCK_DGRAM</literal>. <literal>ai_protocol</literal> alanı
     kaydın öncelikli taşıma soketini belirtmektedir.
    </para>
    <para>
     <literal>ai_addr</literal> alanı genel <literal>sockaddr</literal> yapı
     nesnesini göstermektedir. <literal>ai_family</literal> alanındaki değere
     göre bir <literal>sockaddr_in</literal> (<literal>PF_INET</literal>)
     yapısını veya bir <literal>struct sockaddr_in6</literal>
     (<literal>PF_INET6</literal>) yapısını gösterecektir.
     <literal>ai_addrlen</literal> alanı ise <literal>ai_addr</literal> alanı
     tarafından gösterilen nesnenin boyutunu tutmaktadır.
    </para>
    <para>
     Bahsedildiği gibi <function>getaddrinfo</function>(3) kayıtların adres
     listesini geri döndürür. <literal>ai_next alanı</literal> listedeki bir
     sonraki kaydı gösterir.
    </para>
    <para>
     <function>getaddrinfo</function>(3) işlevine gönderilen
     <parameter>hints</parameter> bağımsız değişkeni <literal>addrinfo</literal>
     yapı türünde ve <parameter>res</parameter>'e dönen kayıtların adres
     filtreleri olarak iş görür. Eğer <parameter>hints</parameter> boş
     (<literal>NULL</literal>) ise, bütün eşleşen kayıtlar geri döner; fakat
     <parameter>hints</parameter> <literal>NULL</literal> değilse, belirtilen
     yapı <function>getaddrinfo</function>(3)'ya
     <parameter>hints</parameter>'i aktararak hangi kayıtların döneceğini
     belirtir. <parameter>hints</parameter> yapısında sadece
     <literal>ai_flags</literal>, <literal>ai_family</literal>,
     <literal>ai_socktype</literal> ve <literal>ai_protocol</literal> alanları
     önemlidir ve diğer bütün alanlara sıfır atanmalıdır.
    </para>
    <para>
     Uygulamalar iletişim kural ailesini belirlemek için
     <literal>hints-&gt;ai_family</literal> alanını kullanır. Mesela eğer
     alana <literal>PF_INET6</literal> atanmışsa bundan sonra sadece IPv6
     adresleri dönecektir. Aynı şekilde <literal>hints-&gt;ai_family</literal>
     alanına <literal>PF_INET</literal> atanması sadece IPv4 adreslerinin
     dönmesini sağlayacaktır. Eğer bir uygulama hem IPv4 hem de IPv6
     adreslerinin kayıtlarını istiyorsa, bu alana <literal>PF_UNSPEC</literal>
     atanmalıdır.
    </para>
    <para>
     <literal>hints-&gt;socktype</literal> alanına, eğer sadece bağlantı
     temelli veri akışı isteniyorsa <literal>SOCK_STREAM</literal>, eğer
     bağlantısız iletişimle ilgili kayıtlar isteniyorsa
     <literal>SOCK_DGRAM</literal> atanmalıdır, her iki durum için ise
     <literal>0</literal> atanmalıdır.
    </para>
    <para>
     İnternet iletişim kuralları için bağlantı temelli soketlerle ilişkili bir
     iletişim kuralı (TCP) vardır ve bağlantısız soketler için de bir tanedir
     (UDP), bu yüzden <literal>hints-&gt;ai_socktype</literal> alanına
     <literal>SOCK_STREAM</literal> atamak "Bana sadece TCP kayıtlarını ver"
     <literal>SOCK_DGRAM</literal>atamak ise "Bana sadece UDP kayıtlarını ver"
     demektir. İnternet iletişim kurallarında
     <literal>hints-&gt;ai_protocol</literal> ve
     <literal>hints-&gt;ai_socktype</literal> alanları çok da önemli değildir.
     Yine de <literal>hints-&gt;ai_protocol</literal> alanına sadece TCP
     kayıtları için <literal>IPPROTO_TCP</literal> veya sadece UDP kayıtları
     için <literal>IPPROTO_UDP</literal> veya her ikisi için de
     <literal>0</literal> atanabilir.
    </para>
    <para>
     <function>gethostbyname</function>(3)'deki <parameter>node</parameter>
     veya <parameter>service</parameter> bağımsız değişkenlerinden yalnızca biri
     <literal>NULL</literal> olabilir. Eğer <parameter>node</parameter>
     <literal>NULL</literal> ise <parameter>hints</parameter> bağımsız değişkeninin
     <literal>ai_flags</literal> alanı, ağ adresinin dönen bir kayıtta nasıl
     ayarlanacağını belirtir (örneğin dönen kaydın <literal>ai_addr</literal>
     bileşeninin gösterdiği nesnenin <literal>sin_addr</literal> veya
     <literal>sin6_addr</literal> alanı). Eğer <parameter>hints</parameter>'de
     <literal>AI_PASSIVE</literal> bayrağı kurulmuşsa dönen ağ adresi soldan
     çözümlenir (hepsi sıfır). Bu, sunucu uygulamalarının
     <function>getaddrinfo</function>(3)'yu nasıl kullanacağını belirler. Eğer
     bayrak kurulmamışsa adres yerel geri dönüş adresine ayarlanır (IPv6 için
     <literal>::1</literal> veya IPv4 için <literal>127.0.0.1</literal>). Bu
     bir istemci uygulaması tarafından aynı sistem üzerindeki hedef sunucunun
     çalışıp çalışmadığını belirlemek için kullanır. Eğer
     <parameter>service</parameter> bağımsız değişkeni <literal>NULL</literal> ise
     dönen adresteki port numarası çözümlenmez.
    </para>
    <para>
     <function>getaddrinfo</function>(3) işlevi başarılı olursa sıfır
     değerini, aksi takdirde hata numarasını döndürür. Bir hata oluşması
     durumunda hata koduna karşılık gelen iletinin göstericisini döndüren
     <function>gai_strerror</function>(3) işlevi kullanılabilir (standart C
     kütüphanesindeki <function>strerror</function>(3) gibi).
    </para>
    <para>
     Eğer adres listesine ihtiyaç kalmadıysa uygulama tarafından yok
     edilmelidir. Bu işlem <function>freeaddrinfo</function>(3) işlevi ile
     yapılabilir.
    </para>
    <para>
     Bu bölümde bahsedilecek son işlev
     <function>getnameinfo</function>(3)'dur.
     Bu işlev <function>getaddrinfo</function>(3) işlevinin tersidir;
     <literal>sockaddr</literal> veri yapısı nesnesinden bir düğüm ismi veya
     hizmet dizgesi yaratmakta kullanılır. Aşağıda tanımı mevcuttur.
    </para>
<screen>int getnameinfo( const struct sockaddr *sa,
                 socklen_t              salen,
                 char                  *host,
                 size_t                 hostlen,
                 char                  *serv,
                 size_t                 servlen,
                 int                    flags );
</screen>
    <para>
     <parameter>sa</parameter> bağımsız değişkeni sorgudaki adres yapısını
     göstermektedir ve <parameter>salen</parameter> ise onun boyutunu
     tutmaktadır. <parameter>host</parameter> bağımsız değişkeni sıfır sonlandırmalı
     konak adı tamponuna göstericidir, <parameter>hostlen</parameter>
     bağımsız değişkeni ise bu tamponun boyunu tutmaktadır. Eğer adrese karşılık
     gelen bir konak ismi yoksa, ağ adresi düğüme yerleştirilir. Ayrıca
     <parameter>ser</parameter> bağımsız değişkeni yine sıfır sonlandırmalı hizmet
     adı tamponuna gösterici olup <parameter>servlen</parameter> bağımsız değişkeni
     bu tamponun boyunu vermektedir. <parameter>flags</parameter> bağımsız değişkeni
     ise işlevin davranışını değiştirmektedir;
     <literal>NI_NUMERICHOST</literal> seçeneği çevrilen düğüm isimlerinin
     sayısal biçimde olacağını belirtir ve
     <literal>NI_NUMERICSERV</literal> seçeneği ise çevrilmiş hizmetin
     sayısal biçimde olacağını belirtir (port numarası).
    </para>
    <para>
     <literal>NI_MAXHOST</literal> ve <literal>NI_MAXSERV</literal>
     seçenekleri uygulamalarda dönen düğüm isimlerinin veya hizmet isimlerinin
     en çok kaç bayt olacağını belirtir. <function>getnameinfo</function>(3)
     için çıkış tamponları belirtirken bunları kullanınız.
    </para>
   </sect3>
   <sect3>
    <title>Karşılaşılan Durumlar </title>
    <para>
     Yazılım örneğine geçmeden önce okuyucunun IPv6 ile ilgili bilmesi gereken
     bir kaç durum söz konusudur. Bu durumların çok karşılaşılanları (daha
     önce anlatılan IPv6 ağ adreslerinin tekilliği konusuna ek olarak)
     aşağıda açıklanmıştır.
    </para>
    <sect4>
     <title>IPv4 eşlemli adresler</title>
     <para>
      Güvenlik nedeniyle IPv6 uyumlu sunucu uygulamalarında IPv4 eşlemli
      adreslerin kullanımına izin verilmemektedir. Herkesin anlayabileceği bir
      şekilde ifade etmek gerekirse bu bir IPv6 soketine gelen IPv4 trafiğinin
      kabul edilmeyeceği anlamına gelir. IPv4 eşlemli adresler karmaşık
      biçimde oluşturulmuş adreslerdir.
     </para>
<literallayout>::ffff:192.0.2.1</literallayout>
     <para>
      İlk bölüm IPv6 onaltılık tabanda iken son kısım IPv4 onluk tabandadır.
      Noktalı onluk düzendeki IPv6 adresi gerçek bir ağ adresidir fakat IPv6
      uyumlu eşlenmiş biçimdedir.
     </para>
     <para>
      Bir IPv6 soketinde IPv4 eşlemli adreslerin kabul edildiğini varsayarsak,
      sunucu uygulamalarında oluşturulan bütün IPv6 soketlerinin
      <literal>IPV6_V6ONLY</literal> soket yapısı seçeneğine ayarlanması
      gerektiği ortaya çıkar [Hagino kitabında bu durumun sadece sunucu
      uygulamalarını ilgilendirdiği belirtilmektedir. Fakat eğer bir istemci
      uygulaması hedefi belirlerken IPv4 eşlemli adresini kullanırsa, hedef
      sunucunun IPv4 eşlemli adresleri kabul etmeyeceği düşünülürse de,
      bağlantının yine de sağlandığı yapılan denemelerde gözlenmiştir. Sunucu
      tarafında bağlantı bitim noktası IPv4 soketidir; fakat istemci tarafında
      ise bağlantının bitim noktası bir IPv6 soketidir. Hem sunucu tarafında
      hem de istemci tarafında <literal>IPV6_V6ONLY</literal> soket seçeneği
      kullanılırsa herhangi bir bağlantının kabul edilmesi önlenmiş olur].
      Burada ufak bir sorun var. Görünen o ki <literal>IPV6_V6ONLY</literal>
      seçeneği bütün sistemlerde tanımlı değildir [en azından 2005'te Hagino
      kitabında yazılana göre]. Bu bölümün soundaki sunucu örneği bu sorunla
      nasıl başa çıkılacağını götermektedir.
     </para>
     <para>
      Eğer IPv4 trafiği IPv6 soketlerine uygun değilse, bir sunucu uygulaması
      eğer her iletişim kuralından gelen isteklere cevap vermek istiyorsa,
      ilgili ağ hizmeti için hem IPv4 hem de IPv6 soketi kullanmalıdır. Bu
      daha önce açıklanan esneklik konusuna bizi götürmektedir. Eğer
      <function>getaddrinfo</function>(3) çoklu adres kayıtları geri
      döndürüyorsa, sunucu uygulamaları bir liste oluşturmalı ve elde edilen
      her adres için ona uygun soketi atamalıdır.
     </para>
    </sect4>
    <sect4>
     <title><filename>/etc/hosts</filename> dosyasında alan tanımlayıcıların belirtilmesi</title>
     <para>
      <filename>/etc/hosts</filename> dosyasında bir IPv6 ağ adresini bir
      alan adına atamak mümkündür. Örneğin yazarın kullandığı sistemin
      <filename>/etc/hosts</filename> dosyasından bir alıntı aşağıda
      mevcuttur.
     </para>
<screen>::1                        localhost
127.0.0.1                  localhost
fe80::2c0:8cff:fe01:2345   pt141
192.0.2.1                  pt141
</screen>
     <para>
      <literal>localhost</literal> ve <literal>pt141</literal> konak isimleri
      hem IPv4 hem de IPv6 adreslerine dönüştürülebilir. Örneğin
      <function>getaddrinfo</function>(3) işlevine <parameter>node</parameter>
      bağımsız değişkeninde <literal>"pt141"</literal> aktarılırsa, işlev
      <parameter>node</parameter> değiştigesinde hem IPv4 hem de IPv6 adres
      kaydı döndürmesi gerekir (eğer <parameter>hints</parameter> bağımsız değişkeni
      belirtilmemişse ). Fakat IPV6 alan adresleri
      <filename>/etc/hosts</filename> dosyasında kullanıldığında
      <function>getaddrinfo</function>(3) sadece bir IPv4 kaydı
      döndürmektedir.
     </para>
    </sect4>
   </sect3>
   <sect3>
    <title>Anlattıklarımızı toparlayalım (istemci-sunucu uygulama örneği)</title>
    <para>
     Şimdiye kadar anlatılanları bir sunucu-istemci uygulamasıyla
     toparlayalım. Bu bölümde 'daytime' adlı bir internet hizmetinden
     bahsedilecektir. [Ms Castro Porting applications to IPv6 HowTo kitabında
     bir 'daytime' örneği vermiştir. Şu bilinmelidir ki buradaki kaynak kod
     özgündür, sıfırdan geliştirilmiş olup herhangi bir erişilebilen 'daytime'
     örneği arasındaki benzerlik tamamen rastlantısaldır]. Bu bölümde sunulan
     kaynak kod 2.6 (hatta 2.6.9) çekirdek kullanan bir RedHat Linux sürümünde
     geliştirilmiş ve denenmiştir. Okuyucular bu kaynak kodu özüne sadık
     kalındıkları sürece ücretsiz olarak kullanabilirler, fakat elbette telif
     hakkını belirtilmek koşuluyla.
    </para>
    <note>
     <para>
      Her ne kadar örnek kaynak kodunun hatasız çalıştığı düşünülse de yazar
      bunun güvenilirliğiyle ilgili hiç bir garanti vermemektedir, özellikle
      bazı hatalar bilerek atlanmıştır.
     </para>
    </note>
    <para>
     Bunu kavradığınız zaman, IPv4 ve IPv6 uygulamaları arasında çok da
     farklılık olmadığını göreceksiniz. IPv6 uygulamalarını kodlarken asıl iş
     bunu iletişim kuralına bağlı kalmadan yapmaktır, öyle ki aynı zamanda hem
     IPv4 ve hem IPv6 ile çalışabilsin. Bu örnek uygulama tam olarak bunu
     yapıyor. Örnekteki iletişim kuralına bağımlı kod ile
     <literal>addrinfo</literal> yapısındaki <literal>ai_family</literal>
     alanından adres türü belirlendikten sonra ayrıntılı biçimde ağ
     adreslerini yazdırmakta kullanılıyor.
    </para>
    <sect4>
     <title>'Daytime' Sunucu Kodu</title>
     <para>
      Sunucu kodu <filename>tod6d.c</filename> dosyasında bulunmaktadır.
      Sunucu aşağıdaki sözdizimi kullanılarak çalıştırılabilir
      (<command>tod6d</command>'nin çalıştırılabilir bir dosya olduğunu
      varsayıyorum).
     </para>
<screen>tod6d [-v] [hizmet_adı]</screen>
     <variablelist>
      <varlistentry>
       <term>hizmet_adı</term>
       <listitem>
        <para>
         Dinlenmesini istediğiniz hizmet (veya iyi bilinen port).
         "daytime" öntanımlıdır.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>-v</term>
       <listitem>
        <para>
         Çıktı daha ayrıntılı olur.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Sunucu ağdaki hem Ipv4 hem de IPv6 isteklerine cevap verebilmektedir.
      Sunucu kaynak kodu <filename>tod6d.c</filename> dosyasında aşağıdaki
      şekildedir.
    </para>
<screen>
/*********************************************************************
 * Dosya: tod6d.c
 * Açıklama: IPv6 uyumlu "daytime" sunucusu için kaynak kodu içerir.
 * Yazar: John Wenker, Uzman yazılım mühendisi,
 * Performance Technologies, San Diego, USA
 *********************************************************************/
/*
 * Sistem başlık dosyaları.
 */
#include &lt;errno.h&gt; /* errno bildirimi &amp; hata kodları. */
#include &lt;netdb.h&gt; /* getaddrinfo(3) */
#include &lt;netinet/in.h&gt; /* sockaddr_in &amp; sockaddr_in6 tanımları. */
#include &lt;stdio.h&gt; /* printf(3) */
#include &lt;stdlib.h&gt; /* exit(2) */
#include &lt;string.h&gt; /* Dizge işleçleri &amp; hafıza işleçleri. */
#include &lt;sys/poll.h&gt; /* poll(2) ve ilgili bildirimler. */
#include &lt;sys/socket.h&gt; /* Soket metotları (socket(2), bind(2), etc).*/
#include &lt;time.h&gt; /* time(2) &amp; ctime(3). */
#include &lt;unistd.h&gt; /* getopt(3), read(2), vb. */
/*
 * Sabitler.
 */
#define DFLT_SERVICE "daytime" /* Varsayılan hizmet ismi. */
#define INVALID_DESC -1 /* Geçersiz dosya tanımlayıcısı . */
#define MAXCONNQLEN 3 /* Kuyruktaki en fazla bağlantı isteği sayısı. */
#define MAXTCPSCKTS 2 /* IPv4 için bir TCP yuvası &amp; bir tane de IPv6 için. */
#define MAXUDPSCKTS 2 /* IPv4 için bir UDP yuvası &amp; bir tane de IPv6 için. */
#define VALIDOPTS "v" /* Geçerli komut seçeneği. */
/*
 * Temel Boolean tip bildirimleri.
 */
typedef enum { false = 0, true } boolean;
/*
 *Dahili yardımcı işleçlerin taslakları.
 */
static int openSckt( const char *service,
                     const char *protocol,
                     int desc[ ],
                     size_t *descSize );
static void tod( int tSckt[ ],
                 size_t tScktSize,
                 int uSckt[ ],
                 size_t uScktSize );
/*
 * Genel (bu dosya için) veri nesneleri.
 */
static char hostBfr[ NI_MAXHOST ]; /* getnameinfo(3) ile kullanımı için. */
static const char *pgmName; /* Komut ismi. */
static char servBfr[ NI_MAXSERV ]; /* getnameinfo(3) ile kullanmak için. */
static boolean verbose = false; /* Ayrıntılılık etkin değil. */
/*
** Komut sözdizim ihlalleri için makro kullanımı.
*/
#define USAGE                                   \
            {                                   \
                 fprintf( stderr,               \
                 "Kullanım: %s [-v] [hizmet_adı]\n",  \
                 pgmName );                     \
                 exit( 127 );                   \
            } /* USAGE makrosunun sonu. */
/*
 * Eğer bir sistem çağrısı hatası meydana gelirse uygulamayı sonlandıracak
 * makro. Sistem çağrısı hata oluşması durumunda -1 döndürebilmelidir.
 * Bu makro Dr. V. Vinge'nin, SDSU Bilgisayar Bilimleri bölümü (emekli),
 * yazdığı makronun değiştirilmiş bir sürümüdür... gördüğüm en iyi profesör.
 * Kararlı kodlara ek olarak bilim kurgu yazdığını da öğrendim.
 */
#define CHK(expr)                                                    \
        do                                                           \
        {                                                            \
              if ( (expr) == -1 )                                    \
              {                                                      \
                 fprintf( stderr,                                    \
                          "%s (line %d): System call ERROR - %s.\n", \
                          pgmName,                                   \
                          __LINE__,                                  \
                          strerror( errno ) );                       \
                 exit( 1 );                                          \
               } /* Sistem çağrısının başarısız olması sonu. */      \
        } while ( false )
/*****************************************************************************
* Metot: main
*
* Açıklama:
* daytime sunucusunun ayarlanması ve ağ isteklerine cevap vermesi.
* Bu sunucu hem TCP hem de UDP isteklerine cevap verebilmektedir.
*
* bağımsız değişkenler:
* main() işlevine geçirilen klasik argc and argv bağımsız değişkenleri.
*
* Dönüş değeri:
* Bu değer döndürmeyen artalan bir süreçtir. Fakat soketi açıklamada
* başarısız olursa, sıfır değeri döndürür.
*****************************************************************************/
int main( int argc,
          char *argv[ ] )
{
    int opt;
    const char *service = DFLT_SERVICE;
    int tSckt[ MAXTCPSCKTS ]; /* TCP soket belirleyici dizisi. */
    size_t tScktSize = MAXTCPSCKTS; /* tSckt'nin boyu (öğelerin sayısı). */
    int uSckt[ MAXUDPSCKTS ]; /* UDP soket belirleyici dizisi. */
    size_t uScktSize = MAXUDPSCKTS; /* uSckt'nin boyu (öğelerin sayısı). */
    /*
    ** Uygulama isminin ayarlanması (dizin önekleri ile).
    */
    pgmName = strrchr( argv[ 0 ], '/' );
    pgmName = pgmName == NULL ? argv[ 0 ] : pgmName + 1;
    /*
    ** işlem komut seçenekleri.
    */
    opterr = 0; /* "invalid option" hata iletilerini kapatır. */
    while ( ( opt = getopt( argc, argv, VALIDOPTS ) ) &gt;= 0 )
    {
       switch ( opt )
       {
           case 'v': /* Ayrıntılı biçim. */
           {
                  verbose = true;
                  break;
            }
            default:
            {
                  USAGE;
            }
       } /* Komut seçeneğinde SWITCH sonu. */
    } /* İşlem seçeneklerinde WHILE sonu. */
    /*
    ** İşlem komut satırı bağımsız değişkenleri.
    */
    switch ( argc - optind )
    {
        case 0: break;
        case 1: service = argv[ optind ]; break;
        default: USAGE;
    } /* Komut satırı bağımsız değişkenlerinin sayısının belirlenmesi SWITCH sonu. */
    /*
    ** hem IPv4 hem de IPv6 için hizmet isteklerinin
    ** kabul edileceği hem TCP hem de UDP yuvasını açar.
    */
    if ( ( openSckt( service, "tcp", tSckt, &amp;tScktSize ) &lt; 0 ) ||
         ( openSckt( service, "udp", uSckt, &amp;uScktSize ) &lt; 0 ) )
    {
        exit( 1 );
    }
    /*
    ** "time-of-day" sunucusunu çalıştırır.
    */
    if ( ( tScktSize &gt; 0 ) || ( uScktSize &gt; 0 ) )
    {
         tod( tSckt,           /* tod() geri dönmez. */
              tScktSize,
              uSckt,
              uScktSize );
    }
    /*
    ** tod() geri dönmediğinden, eğer hiç yuva açılamazsa uygulama bu satıra gelir.
    */
    if ( verbose )
    {
        fprintf( stderr,
                 "%s: Hiçbir soket açılamadı... çıkılıyor.\n",
                  pgmName );
    }
    return 0;
} /* main() sonu */

/*****************************************************************************
* Metot: openSckt
*
* Açıklama:
* Belirtilen inet hizmet &amp; iletişim kuralı için pasif yuvaları açar.
* Son cümledeki "yuvaları" sözcüğünün çoğul oluşuna dikkat edin. IPv6'ya
* geçiş her alanda tamamlanana kadar sunucu uygulaması, bağlantıları dinlemek
 * için iki yuvayı da açmak zorundadır...
* IPv4 trafiği için bir tane ve IPv6 trafiği için de bir tane.
*
* Bağımsız değişkenler:
* service - Dinlenmek istenen iyi bilinen yuvayı temsil eden karakter dizisine
* göstericidir. (bir hizmet ismi veya onluk bir sayı olabilir).
* protocol - Ulaşım katmanı iletişim kuralını belirten karakter dizisine
* gösterici (sadece "tcp" veya "udp" kullanılabilir).
* desc - Açıldığında yerleştirilecek yuva tanımlayıcıyı belirten dizgeye
* gösterici.
* descSize - değer-sonuç bağımsız değişkenidir. Girdi olması durumunda 'desc'e
* yerleştirilen tanımlayıcılardan sayısı en fazla olanıdır
* (örneğin dizgedeki elemanların sayısı).
* Döndüğü takdirde, açılan tanımlayıcıların sayısını içerecektir.
* "desc"te kullanılmayan slotlar INVALID_DESC değerini alacaktır.
*
* Dönüş değeri:
* Başarılı olması durumunda 0, hata oluşması durumunda -1.
*****************************************************************************/
static int openSckt( const char *service,
                     const char *protocol,
                     int desc[ ],
                     size_t *descSize )
{
    struct addrinfo *ai;
    int aiErr;
    struct addrinfo *aiHead;
    struct addrinfo hints = { .ai_flags = AI_PASSIVE, /* Sunucu biçimi */
                              .ai_family = PF_UNSPEC }; /* IPv4 veya IPv6. */
    size_t maxDescs = *descSize;
    /*
     * Çıktı bağımsız değişkenlerinin başlatılması. Döngü tamamlandığında *descSize ın değeri 0'dır.
     */
    while ( *descSize &gt; 0 )
    {
        desc[ --( *descSize ) ] = INVALID_DESC;
    }
    /*
     * Hangi iletişim kuralının seçildiğine bakalım
     * (sadece TCP ve UDP seçilebilir).
     */
    if ( strcmp( protocol, "tcp" ) == 0 ) /* TCP iletişim kuralı. */
    {
          hints.ai_socktype = SOCK_STREAM;
          hints.ai_protocol = IPPROTO_TCP;
    }
    else if ( strcmp( protocol, "udp" ) == 0 ) /* UDP iletişim kuralı. */
    {
        hints.ai_socktype = SOCK_DGRAM;
        hints.ai_protocol = IPPROTO_UDP;
    }
    else /* Geçersiz iletişim kuralı. */
    {
        fprintf( stderr,
                 "%s (line %d): HATA - Bilinmeyen iletişim kuralı"
                 " \"%s\".\n",
                 pgmName,
                 __LINE__,
                 protocol );
        return -1;
    }

    /*
     * Hizmetlerin bilinen port numaralarını inceleyin.
     * 'node' bağımsız değişkeninde NULL aktrıldığına dikkat edin.
     * 'hints'te AI_PASSIVE bayrağı belirlenmiştir.
     * Böylelikle uygulama adres bilgisini pasif olarak elde etmektedir.
     * IPv6 kayıtları için ağ adresi :: (hepsi sıfır) değeriyle, veya
     * IPv4 kayıtları için 0.0.0.0 değeriyle başlatılmıştır.
     */
    if ( ( aiErr = getaddrinfo( NULL,
                                service,
                                &amp;hints,
                                &amp;aiHead ) ) != 0 )
    {
        fprintf( stderr,
                 "%s (line %d): ERROR - %s.\n",
                 pgmName,
                 __LINE__,
                 gai_strerror( aiErr ) );
        return -1;
    }
    /*
     * Dönen adres kayıtlarının her biri için, bir pasif yuva kurmayı denemektedir.
     */
    for ( ai = aiHead;
            ( ai != NULL ) &amp;&amp; ( *descSize &lt; maxDescs );
          ai = ai-&gt;ai_next )
    {
        if ( verbose )
        {
            /*
             * O anki adres bilgisini görüntüleme.
             * İlk önce iletişim kuralından bağımsız
             * alanlardan başlayalım.
             */
            fprintf( stderr,
                     "Asagidaki adres bilgisine dayali olarak pasif
                     bir yuva ataniyor:\n"
                     " ai_flags = 0x%02X\n"
                     " ai_family = %d (PF_INET = %d, PF_INET6 = %d)\n"
                     " ai_socktype = %d (SOCK_STREAM = %d, SOCK_DGRAM = %d)\n"
                     " ai_protocol = %d (IPPROTO_TCP = %d, IPPROTO_UDP = %d)\n"
                     " ai_addrlen = %d (sockaddr_in = %d, "
                     "sockaddr_in6 = %d)\n",
                     ai-&gt;ai_flags,
                     ai-&gt;ai_family,
                     PF_INET,
                     PF_INET6,
                     ai-&gt;ai_socktype,
                     SOCK_STREAM,
                     SOCK_DGRAM,
                     ai-&gt;ai_protocol,
                     IPPROTO_TCP,
                     IPPROTO_UDP,
                     ai-&gt;ai_addrlen,
                     sizeof( struct sockaddr_in ),
                     sizeof( struct sockaddr_in6 ) );
            /*
             * Şimdi iletişim kuralına özel şekillendirilmiş yuva adreslerini
             * görüntüleyelim. Unutmayın ki uygulama, konak ve hizmetleri
             * sayısal dizgelere çevirmek için getnameinfo(3)'yu
             * kullanmaktadır.
             */
            getnameinfo( ai-&gt;ai_addr,
                         ai-&gt;ai_addrlen,
                         hostBfr,
                         sizeof( hostBfr ),
                         servBfr,
                         sizeof( servBfr ),
                         NI_NUMERICHOST | NI_NUMERICSERV );
            switch ( ai-&gt;ai_family )
            {
                case PF_INET: /* IPv4 adres kaydı. */
                {
                    struct sockaddr_in *p = (struct sockaddr_in*) ai-&gt;ai_addr;
                    fprintf( stderr,
                             " ai_addr = sin_family: %d (AF_INET = %d, "
                             "AF_INET6 = %d)\n"
                             " sin_addr: %s\n"
                             " sin_port: %s\n",
                             p-&gt;sin_family,
                             AF_INET,
                             AF_INET6,
                             hostBfr,
                             servBfr );
                    break;
                } /* IPv4 CASE sonu. */
                case PF_INET6: /* IPv6 adres kaydı. */
                {
                    struct sockaddr_in6 *p = (struct sockaddr_in6*) ai-&gt;ai_addr;
                    fprintf( stderr,
                             " ai_addr = sin6_family: %d (AF_INET = %d, "
                             "AF_INET6 = %d)\n"
                             " sin6_addr: %s\n"
                             " sin6_port: %s\n"
                             " sin6_flowinfo: %d\n"
                             " sin6_scope_id: %d\n",
                             p-&gt;sin6_family,
                             AF_INET,
                             AF_INET6,
                             hostBfr,
                             servBfr,
                             p-&gt;sin6_flowinfo,
                             p-&gt;sin6_scope_id );
                    break;
                } /* IPv6 CASE sonu. */
                default: /* Buraya hiçbir zaman gelinmeyecek ama sadece
                          * tamamlayıcı olması açısından dolduruldu.
                          */
                {
                    fprintf( stderr,
                             "%s (line %d): ERROR - Unknown protocol family (%d).\n",
                             pgmName,
                             __LINE__,
                             ai-&gt;ai_family );
                    freeaddrinfo( aiHead );
                    return -1;
                } /* (bilinmeyen iletişim kuralı ailesi)
                   * DEFAULT durumu sonu (unknown protocol family).
                   */
            } /* İletişim kuralı ailesi SWITCH sonu. */
        } /*  Ayrıntılı biçim IF sonu. */
        /*
         * addrinfo yapısındaki bilgiyi kullanarak bir yuva yaratılması.
         */
        CHK( desc[ *descSize ] = socket( ai-&gt;ai_family,
                                         ai-&gt;ai_socktype,
                                         ai-&gt;ai_protocol ) );
        /*
         * 22.1.3.1 numaralı bölümde açıklandığı gibi,
         * "IPv4 eşlemli adresler" i engellemek için kod aşağıdadır.
         * Eğer bir IPv6 yuvası oluşturulmuşsa, IPV6_V6ONLY soket seçeneğini
         * işaretleyin.
         */
        if ( ai-&gt;ai_family == PF_INET6 )
        {
#if defined( IPV6_V6ONLY )
            /*
             * IPv4 eşlemli adresleri geçersiz kıl.
             */
            int v6Only = 1;
            CHK( setsockopt( desc[ *descSize ],
                             IPPROTO_IPV6,
                             IPV6_V6ONLY,
                             &amp;v6Only,
                             sizeof( v6Only ) ) );
#else

/*
 * IPV6_V6ONLY seçilmemişse, yuva seçeneği belirlenemez, bu yüzden
 * IPv4 eşlemli adresler etkiSiZleştirilemez. Bir uyarı iletisi ver ve
 * soketi kapat. Tasarım notu: Eğer
 * #if...#else...#endif yapıları kaldırılırsa, bu uygulama
 * derlenmeyecektir. (çünkü IPV6_V6ONLY tanımlanmamış). Bu
 * kabul edilebilir bir yaklaşım; eğer uygulama kurulamamışsa
 * IPv4 eşlemli adresler kesinlikle uygulanabilir değildir.
 * Fakat uygulamanın hem IPv6 hem de IPv4 yuvaları için çalışması
 * tasarlandığından, uygulamanın IPV6_V6ONLY tanımlanmamış olsa bile
 * derlenmesine izin vermeye karar verdim ve
 * bunu derleme zamanı hatası yerine bir çalışma zamanı uyarısına çevirdim.
 * IPv4 eşlemli adresler hala kullanılabilir değildir çünkü bütün IPv6 trafiği
 * kapatılmıştır (burada bütün IPv6 soketleri kapatılmıştır),
 * fakat en azından sunucu bu yönden IPv4 ağ trafiğine hala hizmet
 * verebilmektedir.
 */
    fprintf( stderr,
             "%s (line %d): UYARi - IPV6_V6ONLY yuva seçeneği "
             "atanmayacak. IPv6 %s yuvası kapatılıyor.\n",
             pgmName,
             __LINE__,
             ai-&gt;ai_protocol == IPPROTO_TCP ? "TCP" : "UDP" );
    CHK( close( desc[ *descSize ] ) );
    continue; /* *descSize'ın güncellenmesi için FOR döngüsünün başına git! */
#endif /* IPV6_V6ONLY */
    } /* Bir IPv6 yuvası ise IF'i bitir. */
    /*
     * Soketi bağla. addrinfo yapısından alınan bilgi kullanılmıştır.
     */
    CHK( bind( desc[ *descSize ],
         ai-&gt;ai_addr,
         ai-&gt;ai_addrlen ) );
    /*
     * Eğer bu bit TCP yuvası ise, yuvayı pasif dinleme durumuna getirin
     * (dinleme sadece bağlantı temelli yuvalarda kullanılabilir).
     */
    if ( ai-&gt;ai_socktype == SOCK_STREAM )
    {
        CHK( listen( desc[ *descSize ],
                     MAXCONNQLEN ) );
    }
    /*
     * Soketin kurulması işlemi tamamlandı. Dizinin bir sonraki elemanını ele alalım.
     */
    descSize += 1;
    } /* Her adres bilgi yapısı döndüğünde FOR'u bitirelim. */

/*
 * Kullanılmayan adres yapıları olup olmadığına bak.
 */
if ( verbose &amp;&amp; ( ai != NULL ) )
{
    fprintf( stderr,
             "%s (line %d): UYARi - Ayrilan dizi alani yetersiz oldugundan
             bazı adres kayıtlari isleme alinamadi.\n",
             pgmName,
             __LINE__ );
} /* İşlenilmeden kalan adres kayıtları kalması ve IF sonu. */
/*
 * Temizleme işlemi.
 */
freeaddrinfo( aiHead );
return 0;
} /* openSckt() sonu */

/******************************************************************************
* Metot: tod
*
* Açıklama:
* Belirtilen yuvaları dinle ve o anki zaman bilgisini istemcilere
* gönder. Bu işlev bir değer döndürmez.
*
* Bağımsız değişkenler:
* tSckt - Dinlenilmesi istenen TCP yuvalarını gösteren dizi.
* tScktSize - tSckt dizisinin boyu (eleman sayısı).
* uSckt - Dinlenilmesi istenen UDP yuvalarını gösteren dizi.
* uScktSize - uSckt dizisinin boyu (eleman sayısı).
*
* Dönüş değeri: Yok.
******************************************************************************/
static void tod( int tSckt[ ],
                 size_t tScktSize,
                 int uSckt[ ],
                 size_t uScktSize )
{
    char bfr[ 256 ];
    ssize_t count;
    struct pollfd *desc;
    size_t descSize = tScktSize + uScktSize;
    int idx;
    int newSckt;
    struct sockaddr *sadr;
    socklen_t sadrLen;
    struct sockaddr_storage sockStor;
    int status;
    size_t timeLen;
    char *timeStr;
    time_t timeVal;
    ssize_t wBytes;
/*
 * poll(2) dizisi için bellek ayıralım.
 */
desc = malloc( descSize * sizeof( struct pollfd ) );
if ( desc == NULL )
{
fprintf( stderr,
         "%s (line %d): ERROR - %s.\n",
         pgmName,
         __LINE__,
         strerror( ENOMEM ) );
exit( 1 );
}
/*
 * poll(2) dizisini başlatalım.
 */
for ( idx = 0; idx &lt; descSize; idx++ )
{
desc[ idx ].fd = idx &lt; tScktSize ? tSckt[ idx ]
: uSckt[ idx - tScktSize ];
desc[ idx ].events = POLLIN;
desc[ idx ].revents = 0;
}
/*
 * Ana zaman sunucusu döngüsü. Hem TCP hem de UDP isteklerine cevap verir. Bu
 * etkileşimli bir sunucudur ve bütün istekler doğrudan ana döngü içerisinde
 * ele alınır.
 */
while ( true ) /* Sonsuz Döngü. */
{
    /*
     * Yuvaların birinde bir etkinlik olması beklenir. DO..WHILE yapısı
     * bir sinyal tarafından kesilmiş işlemdeki sistem çağrısını yeniden
     * başlatmak için kullanılır.
     */
    do
    {
        status = poll( desc,
                       descSize,
                       -1 /* Herhangi bir girdi olması beklenir. */ );
    } while ( ( status &amp; 0 ) &amp;&amp; ( errno == EINTR ) );
    CHK( status ); /* Gerçekten bir sistem çağrısı hatası mı... */
    /*
     * o anki zaman.
     */
    timeVal = time( NULL );
    timeStr = ctime( &amp;timeVal );
    timeLen = strlen( timeStr );
    /*
     * Yeni bir ağ etkinliği olduğunu belirtin.
     */
    if ( verbose )
    {
        char *s = malloc( timeLen+1 );
        strcpy( s, timeStr );
        s[ timeLen-1 ] = '\0'; /* zaman dizgesindeki '\n' in üzerine yazma.*/
        fprintf( stderr,
                 "%s: %s üzerinde yeni ag etkinligi.\n",
                 pgmName,
                 s );
        free( s );
    } /* IF sonu. */
    /*
     * Kullanılabilir girdisi olan işlem yuvası.
     */
    for ( idx = 0; idx &lt; descSize; idx++ )
    {
        switch ( desc[ idx ].revents )
        {
            case 0: /* Bu yuvada işlem yok; sonrakini deneyin. */
                continue;
            case POLLIN: /* Ağ etkinliği. Bunu işleyelim. */
                break;
            default: /* Geçersiz eylem. */
            {
                fprintf( stderr,
                         "%s (line %d): HATA - Geçersiz ag olayi (0x%02X).\n",
                         pgmName,
                         __LINE__,
                         desc[ idx ].revents );
                exit( 1 );
            }
        } /* Dönen olay için SWITCH sonu. */
    /*
     * Bunun bir TCP isteği mi yoksa bir UDP isteği mi olduğuna karar verme.
     */
    if ( idx &lt; tScktSize )
    {
        /*
         * TCP bağlantı isteği. Kabul edin. sockaddr_storage veri tipinin
         * kullanımını inceleyin.
         */
        sadrLen = sizeof( sockStor );
        sadr = (struct sockaddr*) &amp;sockStor;
        CHK( newSckt = accept( desc[ idx ].fd,
                               sadr,
                               &amp;sadrLen ) );
        CHK( shutdown( newSckt, /* Sunucu herhangi bir şey kabul etmez. */
                       SHUT_RD ) );
        if ( verbose )
        {
            /*
             * Uzak istemcinin soket adresinin gösterilmesi. Adresten bağımsız
             * alanlarla başlar.
             */
            fprintf( stderr,
                     "Sockaddr info for new TCP client:\n"
                     " sa_family = %d (AF_INET = %d, AF_INET6 = %d)\n"
                     " addr len = %d (sockaddr_in = %d, "
                     "sockaddr_in6 = %d)\n",
                     sadr-&gt;sa_family,
                     AF_INET,
                     AF_INET6,
                     sadrLen,
                     sizeof( struct sockaddr_in ),
                     sizeof( struct sockaddr_in6 ) );
            /*
             * Adrese özel alanların gösterilmesi.
             */
            getnameinfo( sadr,
                         sadrLen,
                         hostBfr,
                         sizeof( hostBfr ),
                         servBfr,
                         sizeof( servBfr ),
                         NI_NUMERICHOST | NI_NUMERICSERV );
            /*
             * Şu an adres ailesini değiştirdiğimizi unutmayın,
             * iletişim kuralı ailesini değil.
             */
            switch ( sadr-&gt;sa_family )
            {
                case AF_INET: /* IPv4 address. */
                {
                    struct sockaddr_in *p = (struct sockaddr_in*) sadr;
                    fprintf( stderr,
                             " sin_addr = sin_family: %d\n"
                             " sin_addr: %s\n"
                             " sin_port: %s\n",
                             p-&gt;sin_family,
                             hostBfr,
                             servBfr );
                    break;
                } /* End CASE of IPv4. */
                case AF_INET6: /* IPv6 adresi. */
                {
                    struct sockaddr_in6 *p = (struct sockaddr_in6*) sadr;
                    fprintf( stderr,
                             " sin6_addr = sin6_family: %d\n"
                             " sin6_addr: %s\n"
                             " sin6_port: %s\n"
                             " sin6_flowinfo: %d\n"
                             " sin6_scope_id: %d\n",
                             p-&gt;sin6_family,
                             hostBfr,
                             servBfr,
                             p-&gt;sin6_flowinfo,
                             p-&gt;sin6_scope_id );
                    break;
                    } /* IPv6 için CASE sonu. */

                    default:   /*  Buraya asla gelinmez, fakat bütünlük için yazılmıştır. */
                 {
                    fprintf( stderr,
                             "%s (line %d): HATA - Bilinmeyen adres "
                             "ailesi (%d).\n",
                             pgmName,
                             __LINE__,
                             sadr-&gt;sa_family );
                     break;


                  }  /* adres ailesi için SWITCH sonu. */
            }  /* Ayrıntılı kip IF sonu. */

            /*
             * İstemciye TOD gönderilmesi.
             */
            wBytes = timeLen;
            while ( wBytes &gt; 0 )
            {
                  do
                  {
                        count = write( newSckt,
                                       timeStr,
                                       wBytes );
                  } while ( ( count &lt; 0 ) &amp;&amp; ( errno == EINTR ) );
                  CHK( count );   /* Gerçekten bir hata var mı */
                  wBytes -= count;
            } /* Gönderilecek veri için WHILE sonu. */
            CHK( close( newSckt ) );
        }  /* Bir TCP bağlantı isteği için IF sonu. */
        else
        {
            /*
             * Bu bir UDP soketidir ve veri bloğu kullanılabilir durumdadır.
             * UDP istekleri ile ilgili eğlenceli konu sunucunun herhangi
             * istemci girdisine gerek duymamasıdır; fakat aynı zamanda
             * istemciden veri için istek gelmeden sunucu TOD'u
             * gönderemez ve UDP ile bu işlem sunucunun istemciden bir veri
             * bloğu alması ile gerçekleşebilir. Sonuçta, sunucu herhangi bir
             * şey almalı, fakat bu veri bloğunun içeriği önemli değildir.
             * Veri bloğunu oku. Yeniden adresleri almak için
             * sockaddr_storage'ın kullanılmasına dikkat edilmelidir.
             */

            sadrLen = sizeof( sockStor );
            sadr    = (struct sockaddr*) &amp;sockStor;
            CHK( count = recvfrom( desc[ idx ].fd,
                                   bfr,
                                   sizeof( bfr ),
                                   0,
                                   sadr,
                                   &amp;sadrLen ) );
            /*
             * Stdout'ta her ne alındıysa gösterilmesi.
             */
            if ( verbose )
            {
                ssize_t rBytes = count;
                fprintf( stderr,
                         "%s: UDP verisi alindi (%d bayt).\n",
                         pgmName,
                         count );
                while ( count &gt; 0 )
                {
                    fputc( bfr[ rBytes - count-- ],
                           stdout );
                }
                if ( bfr[ rBytes-1 ] != '\n' )
                fputc( '\n', stdout );   /* Yeni satır stdout'u boşaltır. */
                /*
                 * Uzak istemcinin soket adresinin gösterilmesi. İlk önce
                 * adresten bağımsız alanlar.
                 */
                fprintf( stderr,
                         "Remote client's sockaddr info:\n"
                         "   sa_family = %d (AF_INET = %d, AF_INET6 = %d)\n"
                         "   addr len  = %d (sockaddr_in = %d, "
                         "sockaddr_in6 = %d)\n",
                         sadr-&gt;sa_family,
                         AF_INET,
                         AF_INET6,
                         sadrLen,
                         sizeof( struct sockaddr_in ),
                         sizeof( struct sockaddr_in6 ) );
                         /*
                         ** Adrese özel bilgilerin gösterilmesi.
                         */
                         getnameinfo( sadr,
                                      sadrLen,
                                      hostBfr,
                                      sizeof( hostBfr ),
                                      servBfr,
                                      sizeof( servBfr ),
                                      NI_NUMERICHOST | NI_NUMERICSERV );
                         switch ( sadr-&gt;sa_family )
                         {
                            case AF_INET:   /* IPv4 adresi. */
                            {
                                struct sockaddr_in *p = (struct sockaddr_in*) sadr;
                                fprintf( stderr,
                                         "   sin_addr  = sin_family: %d\n"
                                         "               sin_addr:   %s\n"
                                         "               sin_port:   %s\n",
                                         p-&gt;sin_family,
                                         hostBfr,
                                         servBfr );
                                break;
                            }  /* IPv4 adresinin CASE sonu. */
                            case AF_INET6:   /* IPv6 adresi. */
                            {
                                struct sockaddr_in6 *p = (struct sockaddr_in6*) sadr;
                                fprintf( stderr,
                                         "   sin6_addr = sin6_family:   %d\n"
                                         "               sin6_addr:     %s\n"
                                         "               sin6_port:     %s\n"
                                         "               sin6_flowinfo: %d\n"
                                         "               sin6_scope_id: %d\n",
                                         p-&gt;sin6_family,
                                         hostBfr,
                                         servBfr,
                                         p-&gt;sin6_flowinfo,
                                         p-&gt;sin6_scope_id );
                                break;
                            }  /* IPv6 adresinin CASE sonu. */
                            default:   /* Buraya hiçbir zaman girilmez, fakat bütünlük için doldurulmuştur. */
                            {
                                fprintf( stderr,
                                         "%s (line %d): ERROR - Unknown address "
                                         "family (%d).\n",
                                         pgmName,
                                         __LINE__,
                                         sadr-&gt;sa_family );
                                break;
                            }  /* DEFAULT case sonu(bilinmeyen adres ailesi). */
                          /* Adres ailesi için SWITCH sonu. */
                    }  /* Ayrıntılı kip için IF sonu. */
                    /*
                    ** İstemciye zaman bilgisinin gönderilmesi.
                    */
                    wBytes = timeLen;
                    while ( wBytes &gt; 0 )
                    {
                        do
                        {
                            count = sendto( desc[ idx ].fd,
                                            timeStr,
                                            wBytes,
                                            0,
                                            sadr,        /* Adres &amp; adres uzunluğu   */
                                            sadrLen );   /* recvfrom() ile alınan. */
                        } while ( ( count &lt; 0 ) &amp;&amp; ( errno == EINTR ) );
                        CHK( count );   /* Gerçekten bir hata olup olmadığının kontrolü. */
                        wBytes -= count;
                    }  /* Gönderilecek bir veri var ise WHILE sonu. */
                }  /* UDP veri bloğu kullanılabilir ise ELSE sonu. */
                desc[ idx ].revents = 0;   /* Dönen olayların temizlenmesi. */
            }  /* Her soket belirleyicisi için FOR sonu. */
        }  /* Sonsuz döngü sonu. */
    }  /* tod() sonu */
</screen>
    </sect4>
    <sect4>
     <title>TCP İstemci Kodu </title>
     <para>
      TCP istemci kodu <filename>tod6tc.c</filename> (IPv6 TCP istemcisi) dosyasında bulunabilir. Kurduktan sonra, TCP istemcisi aşağıdaki komut sözdizimi kullanılarak başlatılabilir (<command>tod6tc</command>'nin çalıştırılabilir bir dosya olduğu varsayılıyor):
     </para>
<literallayout>tod6tc [-v] [-s kimlik] [konak [hizmet]]</literallayout>
     <variablelist>
      <varlistentry>
       <term>konak</term>
       <listitem>
        <para>
         Hizmeti sağlayan uzak düğümün bilgisayar adı veya IP adresi (IPv4
         adresi veya IPv6 adresi olabilir). <literal>localhost</literal>
         öntanımlıdır.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>hizmet</term>
       <listitem>
        <para>
         Bağlantı isteği yapılan TCP hizmeti (veya iyi bilinen port numarası).
         <literal>daytime</literal> öntanımlıdır.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>-s kimlik</term>
       <listitem>
        <para>
         Bu seçenek sadece IPv6 adresleri için anlamlıdır, ve kapsam
         belirleyicisini ayarlamak için kullanılmıştır (örneğin bağlantının
         onaylandığı ağ arayüzü). <literal>eth0</literal> öntanımlıdır. Eğer
         konak kapsamlı bir adres ise bu seçenek yoksayılabilir.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>-v</term>
       <listitem>
        <para>
         Ayrıntılı kipi açar.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      TCP istemcinin <filename>tod6tc.c</filename> içindeki kaynak kodu
      aşağıdadır:
     </para>
<screen>/*********************************************************************
* Dosya: tod6tc.c
* Açıklama: TCP istemcisi için IPv6 uyumlu kaynak kodu barındırır.
* Yazar: John Wenker, Sr. Yazılım Mühendisi
*         Performance Technologies, San Diego, USA
*********************************************************************/
/*
** Sistem başlık dosyaları.
*/
#include &lt;errno.h&gt;        /* errno bildirimi ve hata kodları.             */
#include &lt;net/if.h&gt;       /* if_nametoindex(3).                             */
#include &lt;netdb.h&gt;        /* getaddrinfo(3) ve ilgili tanımlar.     */
#include &lt;netinet/in.h&gt;   /* sockaddr_in ve sockaddr_in6 tanımları.      */
#include &lt;stdio.h&gt;        /* printf(3) .                               */
#include &lt;stdlib.h&gt;       /* exit(2).                                       */
#include &lt;string.h&gt;       /* Dizge işleme ve hafıza metotları.      */
#include &lt;sys/socket.h&gt;   /* Soket metotları (socket(2), connect(2), etc). */
#include &lt;unistd.h&gt;       /* getopt(3), read(2), v.s.                       */
/*
** Sabitler ve makrolar.
*/
#define DFLT_HOST      "localhost"   /* Varsayılan sunucu ismi.              */
#define DFLT_SCOPE_ID  "eth0"        /* Varsayılan alan belirleyicisi.       */
#define DFLT_SERVICE   "daytime"     /* Varsayılan hizmet ismi.             */
#define INVALID_DESC   -1            /* Geçersiz dosya (soket) belirleyicisi. */
#define MAXBFRSIZE     256           /* Uzak TOD'dan okunacak en fazla tampon boyutu.    */
#define VALIDOPTS      "s:v"         /* Geçerli komut seçenekleri.            */
/*
** Tip tanımları (kullanılabilirlik için).
*/
typedef enum { false = 0, true } boolean;
typedef struct sockaddr_in       sockaddr_in_t;
typedef struct sockaddr_in6      sockaddr_in6_t;
/*
** İç yardım metotları için taslaklar.
*/
static int  openSckt( const char   *host,
                      const char   *service,
                      unsigned int  scopeId );
static void tod( int sckt );
/*
** Genel(sadece bu dosya için) veri nesneleri.
*/
static const char *pgmName;           /* Uygulama ismi (dizin olmaksızın). */
static boolean     verbose = false;   /* Ayrıntılı kip.                    */
/*
** Makro kullanımı.
*/
#define USAGE
        {
           fprintf( stderr,
                    "Kullanım: %s [-v] [-s kimlik] [konak [hizmet]]\n",
                    pgmName );
           exit( 127 );
        }  /* Makro kullanımı sonu. */
/*
** Bu "makro" (aslında bir işlev olmasına rağmen) genel olarak
** Dr. V. Vinge'nin CHK() makrosuna (sunucu koduna bakın) dayanmaktadır.
** Status bağımsız değişkeni hata durumunda -1 değer döndüren mantıksal ifade
** içeren klasik sistem çağrılarından biridir. Eğer bir sistem hatası
** oluşursa, standart hataya bir uyarı yazılır. Sistem çağrısının başarılı
** olması veya hata oluşması durumunda mantıksal bir değer döndürülür.
**
** Örnek: if ( !SYSCALL( "write",
**                         count = write( fd, bfr, size ) ) )
**          {
**             // Hata işleniyor... fakat SYSCALL() stderr'da bir hata mesajı
**             // gösterdi bile.
**          }
*/
static __inline boolean SYSCALL( const char *syscallName,
                                 int         lineNbr,
                                 int         status )
{
   if ( ( status == -1 ) &amp;&amp; verbose )
   {
      fprintf( stderr,
               "%s (satir %d): Sistem cagrisi basarisiz oldu ('%s') - %s.\n",
               pgmName,
               lineNbr,
               syscallName,
               strerror( errno ) );
   }
   return status != -1;   /* Sistem çağrısı başarılı olursa true  olur */
}  /* End SYSCALL() */
/******************************************************************************
* Metot: main
*
* Açıklama:
*    Uzak bir zaman hizmetine bağlanır ve stadart çıktıya uzak düğümün
*    zamanını yazar.
*
* Bağımsız değişkenler:
*    Main() uygulamasına geçirilen klasik argc &amp; argv bağımsız değişkenleri.
*
* dönüş değeri:
*    Bu işlev daima sıfır değerini döndürür.
******************************************************************************/
int main( int   argc,
          char *argv[ ] )
{
   const char   *host     = DFLT_HOST;
   int           opt;
   int           sckt;
   unsigned int  scopeId  = if_nametoindex( DFLT_SCOPE_ID );
   const char   *service  = DFLT_SERVICE;
   /*
   ** Uygulama ismine karar verelim (dizinsiz).
   */
   pgmName = (const char*) strrchr( argv[ 0 ], '/' );
   pgmName = pgmName == NULL  ?  argv[ 0 ]  :  pgmName+1;
   /*
   ** Komut satırı seçenekleri işleyelim.
   */
   opterr = 0;   /* "invalid option" hata iletisini kapatalım. */
   while ( ( opt = getopt( argc, argv, VALIDOPTS ) ) != -1 )
   {
      switch ( opt )
      {
         case 's':   /* Alan belirleyicisi (IPv6 çözümü(kluge)). */
         {
            scopeId = if_nametoindex( optarg );
            if ( scopeId == 0 )
            {
               fprintf( stderr,
                        "%s: Bilinmeyen ag arabirimi (%s).\n",
                        pgmName,
                        optarg );
               USAGE;
            }
            break;
         }
         case 'v':   /* Ayrıntılı kip. */
         {
            verbose = true;
            break;
         }
         default:
         {
            USAGE;
         }
      }  /* Komut seçeneği için SWITCH sonu. */
   } /* Komut seçenekleri işlenmesi WHILE sonu. */
   /*
   ** Komut bağımsız değişkenlerinin işlenmesi. Üstteki döngünün sonunda, optind
   ** seçenek olmayan ilk argv elemanıdır.
   */
   switch ( argc - optind )
   {
      case 2:   /* Hem düğüm hem de hizmet komut satırında belirtilmiştir. */
     {
          service = argv[ optind + 1 ];
          /***** Başarısız *****/
      }
      case 1:   /* Host is specified on the command line. */
      {
          host = argv[ optind ];
          /***** Başarısız *****/
      }
      case 0:   /* Varsayılan düğüm ve hizmetin kullanılması. */
      {
          break;
      }
      default:
      {
         USAGE;
      }
   }  /* komut bağımsız değişkenleri için SWITCH sonu. */
   /*
   ** Belirtilen düğüm ve hizmete bir bağlantı oluşturalım.
   **
   ** Aşağıdaki üç durumdan her birinin gerçekleşmesi olasıdır, burada
   ** alan belirleyicisi çözümlenmemiş durumdadır.
   **    1) Varsayılan ağ arayüzü bir sebepten dolayı tanınmıyor olabilir.
   **    2) Komut satırında -s seçeneği kullanılmamıştır.
   **    3) Komut satırında IPv6 kapsamlı adres belirtilmemiş olabilir.
   ** Eğer yukarıdaki üç durumla karşılaşılırsa, bu yüzden sadece IPv4 soketi
   ** açılabilir (Ipv6 soketleri için uygun kapsam adresi ayarlanmamışsa connect(2)
   ** başarısız olur).
   */
  if ( ( sckt = openSckt( host,
                           service,
                           scopeId ) ) == INVALID_DESC )
   {
      fprintf( stderr,
               "%s: Maalesef... bir baglanti kurulamadi.\n",
               pgmName );
      exit( 1 );
   }
   /*
   ** Uzak zaman bilgisinin alınması.
   */
   tod( sckt );
   /*
   ** Bağlantıyı kapat ve bitir.
   */
   (void) SYSCALL( "close",
                   __LINE__,
                   close( sckt ) );
   return 0;
}  /* main() sonu */
/******************************************************************************
* Metot: openSckt
*
* Açıklama:
*    Uzak sunucuya bir TCP bağlantısı kurar. Getaddrinfo(3) kullanılmakta olup
*    çoklu adres kaydı döndürebilir (örneğin addrinfo yapısındaki kayıtların
*    listesi). İşlev listeyi gezer ve uzak sunucuya bir bağlantı oluşturmaya
*    çalışır. Bir bağlantı kurulduktan veya listedeki bütün kayıtlar
*    işlendikten sonra işlev sonlanır.
*
* Bağımsız değişkenler:
*    konak    - Uzak sunucunun sistem  adı veya IP adresine (IPv4 veya Ipv6)
*               gösterici.
*    hizmet   – Hizmet adı veya iyi bilinen port numarasına gösterici.
*    kimlik   – Sadece Ipv6 soketleri için geçerlidir. Bağlantı kurulacak olan
*               ağ arabirimi tanıtıcısı. Bu bağımsız değişken Ipv4 soketleri için
*               veya düğümde belirtilen IPv6 kapsamlı adresler için ihmal
*               edilmektedir (örneğin kapsam adresi ile uzatılmış iki nokta
*               üst üsteli onaltılık ağ adresi).
*
* Dönüş değeri:
*    Bağlantı için bir soket açıklayıcısı döndürür veya
*    bütün adres kayıtları işlenirse ve bir bağlantı kurulamazsa
*    INVALID_DESC döndürür.
******************************************************************************/
static int openSckt( const char   *host,
                     const char   *service,
                     unsigned int  scopeId )
{
   struct addrinfo *ai;
   int              aiErr;
   struct addrinfo *aiHead;
   struct addrinfo  hints;
   sockaddr_in6_t  *pSadrIn6;
   int              sckt;
   /*
   ** Getaddrinfo(3) için 'hints' yapısını başlatır.
   **
   ** Düğüm ve hizmetler için hem IPv4 hem Ipv6 adres kayıtları döndürmesi sağlayarak
   ** 'ai_family' alanının PF_UNSPEC'e ayarlanmış olduğundan emin olun. Çoğu zaman
   ** kullanıcı  bağlantının IPv4 bağlantısı mı IPv6 bağlantısı mı olduğuna dikkat
   ** etmeyecektir; kullanıcı sadece uzak düğüme veri göndermek istemektedir ve bunun
   ** nasıl yapılacağı ile ilgilenmez. Fakat bazen kullanıcı özel olarak kullanılacak
   ** yuva türünü belirtmek isteyebilir. Bu okuyucuya komut satırına kullanıcıya IP
   ** iletişim kuralını seçmesine izin veren bir seçenek koyması hakkında fikir
   ** verebilir ve daha sonra adres listesi işlenmelidir (Bu o kadar zor değil).
   */
   memset( &amp;hints, 0, sizeof( hints ) );
   hints.ai_family   = PF_UNSPEC;     /* IPv4 veya IPv6 kayıtları (önemli değil). */
   hints.ai_socktype = SOCK_STREAM;   /* Bağlantı temelli veri akışı.   */
   hints.ai_protocol = IPPROTO_TCP;   /* Sadece TCP taşıma katmanı iletişim kuralı. */
   /*
   ** Düğüm ve hizmet bilgisini arama.
   */
   if ( ( aiErr = getaddrinfo( host,
                               service,
                               &amp;hints,
                               &amp;aiHead ) ) != 0 )
   {
      fprintf( stderr,
               "%s (line %d): ERROR - %s.\n",
               pgmName,
               __LINE__,
               gai_strerror( aiErr ) );
      return INVALID_DESC;
   }
   /*
   ** Bir bağlantı açmak için listeyi gezin. Bir bağlantı kurulana kadar
   ** veya liste sonlanana kadar devam edin.
   */
   for ( ai = aiHead,   sckt = INVALID_DESC;
         ( ai != NULL ) &amp;&amp; ( sckt == INVALID_DESC );
         ai = ai-&gt;ai_next )
   {
      /*
      ** IPv6 çözümü. kimlik atanmış olmalı.
      */
      if ( ai-&gt;ai_family == PF_INET6 )
      {
         pSadrIn6 = (sockaddr_in6_t*) ai-&gt;ai_addr;
         if ( pSadrIn6-&gt;sin6_scope_id == 0 )
         {
            pSadrIn6-&gt;sin6_scope_id = scopeId;
         }  /*  kimlik atanmamışsa IF sonu. */
      }  /* IPv6 çözümü sonu. */
      /*
      ** Uzak düğümün adres bilgisinin gösterilmesi.
      */
      if ( verbose )
      {
         /*
         ** Düğüm ve hizmet için geçici dizge tamponu.
         */
         char hostBfr[ NI_MAXHOST ];
         char servBfr[ NI_MAXSERV ];
         /*
         ** Alınan adres bilgisinin gösterilmesi. İlk önce yaygın olanlarla (iletişim
         ** kuralı bağımsız) başlayın.
         */
         fprintf( stderr,
                  "Address info:\n"
                  "   ai_flags     = 0x%02X\n"
                  "   ai_family    = %d (PF_INET = %d, PF_INET6 = %d)\n"
                  "   ai_socktype  = %d (SOCK_STREAM = %d, SOCK_DGRAM = %d)\n"
                  "   ai_protocol  = %d (IPPROTO_TCP = %d, IPPROTO_UDP = %d)\n"
                  "   ai_addrlen   = %d (sockaddr_in = %d, "
                  "sockaddr_in6 = %d)\n",
                  ai-&gt;ai_flags,
                  ai-&gt;ai_family,
                  PF_INET,
                  PF_INET6,
                  ai-&gt;ai_socktype,
                  SOCK_STREAM,
                  SOCK_DGRAM,
                  ai-&gt;ai_protocol,
                  IPPROTO_TCP,
                  IPPROTO_UDP,
                  ai-&gt;ai_addrlen,
                  sizeof( struct sockaddr_in ),
                  sizeof( struct sockaddr_in6 ) );
         /*
         ** İletişim kuralına özgü adreslerin gösterilmesi.
         */
         getnameinfo( ai-&gt;ai_addr,
                      ai-&gt;ai_addrlen,
                      hostBfr,
                      sizeof( hostBfr ),
                      servBfr,
                      sizeof( servBfr ),
                      NI_NUMERICHOST | NI_NUMERICSERV );
         switch ( ai-&gt;ai_family )
         {
            case PF_INET:   /* IPv4 adres kaydı. */
            {
               sockaddr_in_t *pSadrIn = (sockaddr_in_t*) ai-&gt;ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin_family: %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin_addr:   %s\n"
                        "                  sin_port:   %s\n",
                        pSadrIn-&gt;sin_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr );
               break;
            }  /* End CASE of IPv4 record. */
            case PF_INET6:   /* IPv6 adres kaydı. */
            {
               pSadrIn6 = (sockaddr_in6_t*) ai-&gt;ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin6_family:   %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin6_addr:     %s\n"
                        "                  sin6_port:     %s\n"
                        "                  sin6_flowinfo: %d\n"
                        "                  sin6_scope_id: %d\n",
                        pSadrIn6-&gt;sin6_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr,
                        pSadrIn6-&gt;sin6_flowinfo,
                        pSadrIn6-&gt;sin6_scope_id );
               break;
            }  /* IPv6 kaydı için CASE sonu. */
            default:   /* Buraya asla girilmez fakat bütünlük sağlaması için doldurulmuştur. */
            {
               fprintf( stderr,
                        "%s (line %d): ERROR - Unknown protocol family (%d).\n",
                        pgmName,
                        __LINE__,
                        ai-&gt;ai_family );
               break;
            }  /* DEFAULT CASE sonu (bilinmeyen iletişim kuralı ailesi). */
         }  /* İletişim kuralı ailesi için SWITCH sonu. */
      }  /* Ayrıntılı kip IF sonu. */
      /*
      ** Bir soket oluşturun.
      */
      if ( !SYSCALL( "socket",
                     __LINE__,
                     sckt = socket( ai-&gt;ai_family,
                                    ai-&gt;ai_socktype,
                                    ai-&gt;ai_protocol ) ) )
      {
         sckt = INVALID_DESC;
         continue;   /* Listedeki sıradaki adres kaydını deneyin. */
      }
      /*
      ** Uzak düğüme bağlanın.
      */
      if ( !SYSCALL( "connect",
                     __LINE__,
                     connect( sckt,
                              ai-&gt;ai_addr,
                              ai-&gt;ai_addrlen ) ) )
      {
         (void) close( sckt );   /* Burada SYSCALL() tekrar kullanılabilir, fakat niçin? */
         sckt = INVALID_DESC;
         continue;   /* Listedeki sıradaki adres kaydını deneyin. */
      }
   }  /* Getaddrinfo(3)'dan dönen her adres kaydı için FOR sonu. */
   /*
   ** Temizleme ve dönüş
   */
   freeaddrinfo( aiHead );
   return sckt;
}  /* openSckt() sonu */
/******************************************************************************
* Metot: tod
*
* Açıklama:
*    Uzak sunucudan zaman bilgisini alıp standart çıktıya yazar
*
* Bağımsız değişkenler:
*    sckt – Bağlantı için yuva tanıtıcısı.
*
* Dönüş değeri: Yok.
******************************************************************************/
static void tod( int sckt )
{
   char bfr[ MAXBFRSIZE+1 ];
   int  inBytes;
   /*
   ** İstemci hiçbir şey yollamaz, bu yüzden bağlantının yazma kısmını kapatalım.
   */
   if ( !SYSCALL( "shutdown",
                  __LINE__,
                  shutdown( sckt, SHUT_WR ) ) )
   {
      return;
   }
   /*
   ** Uzak sunucudan zaman bilgisinin okunması.
   */
   do
   {
      if ( !SYSCALL( "read",
                     __LINE__,
                     inBytes = read( sckt,
                                     bfr,
                                     MAXBFRSIZE ) ) )
      {
         return;
      }
      bfr[ inBytes ] = '\0';   /* Alınan dizgenin null ile sonlandırılması. */
      fputs( bfr, stdout );    /* Dosya sonu(EOF) ise boş dizge(inBytes == 0).  */
   } while ( inBytes &gt; 0 );
   fflush( stdout );
}  /* tod() sonu */
</screen>
    </sect4>
    <sect4>
     <title>UDP İstemci Kodu</title>
     <para>
      UDP istemci kodu <filename>tod6uc.c</filename> dosyasında bulunabilir.
      Bu kodun büyük bir kısmı TCP  istemci kodundan alınmıştır (ve aslında
      bundan türetilmiştir), fakat bütünlük açısından bu NASIL belgesine
      eklenmiştir. Uygulama derlendikten sonra UDP istemcisi aşağıdaki komut
      sözdizimi ile çalıştırılabilir (<command>tod6uc</command>'un
      çalıştırılabilir olduğu kabul edilmektedir):
     </para>
<literallayout>tod6uc [-v] [-s kimlik] [konak [hizmet]]</literallayout>
     <variablelist>
      <varlistentry>
       <term>konak</term>
       <listitem>
        <para>
         Hizmeti sağlayan uzak düğümün bilgisayar adı veya IP adresi (IPv4 veya Ipv6). <literal>localhost</literal> öntanımlıdır.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>hizmet</term>
       <listitem>
        <para>
         Gönderilecek veri iletileri için UDP hizmeti (veya iyi bilinen port numarası). <literal>daytime</literal> öntanımlıdır.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>-s kimlik</term>
       <listitem>
        <para>
         Bu seçenek sadece IPv6 adresleri için anlamlıdır ve alan tanıtıcısını belirtmek için kullanılır   (örneğin gönderilecek veri bloklarının kullanacağı ağ arayüzü). <literal>eth0</literal> öntanımlıdır. Eğer konak kapsamlı bir adrese sahip ise bu seçenek yoksayılır.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>-v</term>
       <listitem>
        <para>Ayrıntılı kipi açar.</para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      UDP istemci kaynak kodunu içeren <filename>tod6uc.c</filename>
      dosyasının içeriği:
     </para>
<screen>/*********************************************************************
* Dosya: tod6uc.c
* Açıklama: Ipv6 uyumlu UDP istemci için kaynak kodu bulundurur.
* Yazar: John Wenker, Sr. Yazılım Mühendisi
*         Performance Technologies, San Diego, USA
*********************************************************************/
/*
** Sistem başlık dosyaları.
*/
#include &lt;errno.h&gt;        /* errno bildirimi ve hata kodları.               */
#include &lt;net/if.h&gt;       /* if_nametoindex(3).                             */
#include &lt;netdb.h&gt;        /* getaddrinfo(3) ve ilgili tanımlar.     */
#include &lt;netinet/in.h&gt;   /* sockaddr_in ve sockaddr_in6 tanımları.      */
#include &lt;stdio.h&gt;        /* printf(3) .                               */
#include &lt;stdlib.h&gt;       /* exit(2).                                       */
#include &lt;string.h&gt;       /* Dizge işleme ve hafıza metotları.      */
#include &lt;sys/socket.h&gt;   /* Soket metotları (socket(2), connect(2), vs.). */
#include &lt;unistd.h&gt;       /* getopt(3), recvfrom(2), sendto(2), vs.        */
/*
** Sabitler ve makrolar.
*/
#define DFLT_HOST      "localhost"   /* Varsayılan sunucu ismi.              */
#define DFLT_SCOPE_ID  "eth0"        /* Varsayılan alan belirleyicisi.         */
#define DFLT_SERVICE   "daytime"     /* Varsayılan hizmet ismi.             */
#define INVALID_DESC   -1            /* Geçesiz dosya(soket) tanımlayıcısı. */
#define MAXBFRSIZE     256           /* Uzak TOD'u okumak için en çok tampon büyüklüğü.    */
#define VALIDOPTS      "s:v"         /* Geçerli komut seçenekleri.            */
/*
** Tür tanımları (kullanılabilirlik için).
*/
typedef enum { false = 0, true } boolean;
typedef struct sockaddr_in       sockaddr_in_t;
typedef struct sockaddr_in6      sockaddr_in6_t;
/*
** Dahili yardımcı metotlar için taslaklar.
*/
static int  openSckt( const char   *host,
                      const char   *service,
                      unsigned int  scopeId );
static void tod( int sckt );
/*
** Genel (sadece bu dosya için) veri nesneleri.
*/
static const char *pgmName;           /* Uygulama ismi (w/o dizini). */
static boolean     verbose = false;   /* Ayrıntılı kip.                 */
/*
** Makro kullanımı.
*/
#define USAGE                                                            \
        {                                                                \
           fprintf( stderr,                                              \
                    "Kullanim: %s [-v] [-s kimlik] [konak [hizmet]]\n",   \
                    pgmName );                                           \
           exit( 127 );                                                  \
        }  /* USAGE makro sonu. */
/*
** Bu "makro" (aslında bir işlev olmasına rağmen) genel olarak Dr. V. Vinge'nin CHK()
** makrosuna (sunucu koduna bakın) dayanmaktadır. Status bağımsız değişkeni
** hata durumunda -1 değer dönen mantıksal ifade gösteren klasik sistem çağrılarından
** biridir. Eğer bir sistem hatası oluşursa, stderr'e bir uyarı
** yazılır. Sistem çağrısının başarılı olması veya hata oluşması durumunda mantıksal
** bir değer döndürülür.
** Example: if ( !SYSCALL( "write",
**                         count = write( fd, bfr, size ) ) )
**          {
**             // Hata işleniyor... fakat SYSCALL() stderr'da bir hata mesajı
**             // gösterdi bile.

**          }
*/
static __inline boolean SYSCALL( const char *syscallName,
                                 int         lineNbr,
                                 int         status )
{
   if ( ( status == -1 ) &amp;&amp; verbose )
   {
      fprintf( stderr,
               "%s (line %d): System call failed ('%s') - %s.\n",
               pgmName,
               lineNbr,
               syscallName,
               strerror( errno ) );
   }
   return status != -1;   /*  Sistem çağrısı başarılı olursa true olur. */
}  /* End SYSCALL() */
/******************************************************************************
* Metot: main
*
* Açıklama:
*    Uzak bir zaman hizmetine bağlanır ve stdout'a uzak düğümün TOD'u
*    yazar.
*
* Bağımsız değişken:
*    Main() uygulamasına geçirilen klasik argc &amp; argv bağımsız değişkenleri.
*
* dönüş değeri:
*    Bu metot daima sıfır değerini döndürür.
******************************************************************************/
int main( int   argc,
          char *argv[ ] )
{
   const char   *host     = DFLT_HOST;
   int           opt;
   int           sckt;
   unsigned int  scopeId  = if_nametoindex( DFLT_SCOPE_ID );
   const char   *service  = DFLT_SERVICE;
   /*
   ** Uygulama ismine karar verelim (w/o dizin öneki).
   */
   pgmName = (const char*) strrchr( argv[ 0 ], '/' );
   pgmName = pgmName == NULL  ?  argv[ 0 ]  :  pgmName+1;
   /*
   ** Komut satırı seçenekleri işleyelim.
   */
   opterr = 0;   /* "invalid option" hata mesajını kapatalım. */
   while ( ( opt = getopt( argc, argv, VALIDOPTS ) ) != -1 )
   {
      switch ( opt )
      {
         case 's':   /* Alan belirleyicisi (IPv6 çözümü). */
         {
            scopeId = if_nametoindex( optarg );
            if ( scopeId == 0 )
            {
               fprintf( stderr,
                        "%s: Bilinmeyen ag arabirimi (%s).\n",
                        pgmName,
                        optarg );
               USAGE;
            }
            break;
         }
         case 'v':   /* Ayrıntılı kip. */
         {
            verbose = true;
            break;
         }
         default:
         {
            USAGE;
         }
      }  /* Komut seçeneği için SWITCH sonu. */
   } /* Komut seçenekleri işlenmesi WHILE sonu. */
   /*
   ** Komut bağımsız değişkenlerinin işlenmesi. Üstteki döngünün sonunda, optind
   ** seçenek olmayan ilk argv elementidir.
   */
   switch ( argc - optind )
   {
      case 2:   /* Hem düğüm hem de hizmet komut satırında belirtilmiştir. */
      {
          service = argv[ optind + 1 ];
          /***** Başarısız *****/
      }
      case 1:   /* Komut satırında belirtilen konak. */
      {
          host = argv[ optind ];
          /***** Başarısız *****/
      }
      case 0:   /* Varsayılan düğüm ve hizmetin kullanılması. */
      {
          break;
      }
      default:
      {
         USAGE;
      }
   }  /* komut bağımsız değişkenleri için SWITCH sonu. */
   /*
   ** Belirtilen düğüm ve hizmete bağlantı açalım.
   **
   ** Aşağıdaki üç durumdan herbirinin gerçekleşmesi olasıdır, burada
   ** alan belirleyicisi çözümlenmemiş durumdadır.
   **    1) Varsayılan ağ arayüzü bir sebepten dolayı tanınmıyor olabilir.
   **    2) Komut satırında -s seçeneği kullanılmamıştır.
   **    3) Komut satırında IPv6 kapsamlı adres belirtilmemiş olabilir.
   ** Eğer yukarıdaki üç durumla karşılaşılırsa, bu yüzden sadece IPv4 yuvası
   ** açılabilir (Ipv6 yuvaları için uygun kapsam adresi ayarlanmamışsa connect(2)
   ** başarısız olur).
  */
   if ( ( sckt = openSckt( host,
                          service,
                           scopeId ) ) == INVALID_DESC )
   {
      fprintf( stderr,
               "%s: Maalesef... baglantisiz yuva olusturulamadi.\n",
               pgmName );
      exit( 1 );
   }
   /*
   **  Uzak zaman bilgisinin alınması.
   */
   tod( sckt );
   /*
   ** Bağlantıyı kapatın ve sonlandırın.
   */
   (void) SYSCALL( "close",
                   __LINE__,
                   close( sckt ) );
   return 0;
}  /* End main() */
/******************************************************************************
* İşlev: openSckt
*
* Açıklama:
*    Uzak sunucuya bir TCP bağlantısı oluşturur. Getaddrinfo(3) için
*    kullanılmaktadır ve çoklu adres kayıtları döndürebilir
*    (örneğin addrinfo yapısından kayıtların listesi). İşlev listeyi gezer ve
*    uzak sunucuya bir bağlantı oluşturmaya çalışır. Bir bağlantı kurulduktan
*    veya listedeki bütün kayıtlar işlendikten sonra işlev sonlanır.
*
* Bağımsız değişkenler:
*    host    - Uzak sunucunun sistem  adı veya IP adresini(IPv4 veya Ipv6) gösteren
*              dizgeye gösterici.
*    service – Hizmet adı veya iyi bilinen kapı numarasını gösteren dizgeye gösterici.
*    scopeId – Sadece Ipv6 soketleri için geçerlidir. Bağlantı kurulacak olan ağ
*              arabirimine karşılık gelen gösterici. Bu bağımsız değişken Ipv4 soketleri için veya
*              düğümde belirtilen IPv6 kapsamlı adresler için ihmal edilmektedir
*              (örneğin kapsam adresi ile uzatılmış iki nokta üst üsteli
*              onaltılık ağ adresi).
*
* Dönüş değeri:
*    Bağlantı için bir soket açıklayıcısı döndürür, veya bütün adres kayıtları işlenirse
*    ve bir bağlantı kurulamazsa INVALID_DESC döndürür.
******************************************************************************/
static int openSckt( const char   *host,
                     const char   *service,
                     unsigned int  scopeId )
{
   struct addrinfo *ai;
   int              aiErr;
   struct addrinfo *aiHead;
   struct addrinfo  hints;
   sockaddr_in6_t  *pSadrIn6;
   int              sckt;
   /*
   ** Getaddrinfo(3) için 'hints' yapısını başlatır.
   **
   ** Düğüm ve hizmetler için hem IPv4 hem IPv6 adres kayıtlarını döndürmesini sağlayarak
   ** 'ai_family' alanının PF_UNSPEC'e ayarlanmış olduğundan emin olun. Çoğu zaman
   ** kullanıcı  bağlantının IPv4 bağlantısı mı IPv6 bağlantısı mı olduğuna dikkat
   ** etmeyecektir; kullanıcı sadece uzak düğüme veri göndermek istemektedir ve bunun
   ** nasıl yapılacağı ile ilgilenmez. Fakat bazen kullanıcı özel olarak kullanılacak
   ** soket tipini belirtmek isteyebilir. Bu okuyucuya komut satırında kullanıcıya IP
   ** iletişim kuralını seçmesine izin veren bir seçenek koyması hakkında fikir
   ** verebilir, ve daha sonra adres listesi işlenmelidir(Bu o kadar zor değil).
   */
   memset( &amp;hints, 0, sizeof( hints ) );
   hints.ai_family   = PF_UNSPEC;     /* IPv4 veya IPv6 kayıtları (önemli değil). */
   hints.ai_socktype = SOCK_DGRAM;    /* Bağlantı temelli iletişim.      */
   hints.ai_protocol = IPPROTO_UDP;   /* Sadece UDP taşıma katmanı iletişim kuralı. */
   /*
   ** Konak ve hizmet bilgisini arama.
   */
   if ( ( aiErr = getaddrinfo( host,
                               service,
                               &amp;hints,
                               &amp;aiHead ) ) != 0 )
   {
      fprintf( stderr,
               "%s (line %d): ERROR - %s.\n",
               pgmName,
               __LINE__,
               gai_strerror( aiErr ) );
      return INVALID_DESC;
   }
   /*
   ** Bir bağlantı açmak için listeyi gezin. Bir bağlantı kurulana kadar
   ** veya liste sonlanana kadar devam edin.
   */
   for ( ai = aiHead,   sckt = INVALID_DESC;
         ( ai != NULL ) &amp;&amp; ( sckt == INVALID_DESC );
         ai = ai-&gt;ai_next )
   {
      /*
      ** IPv6 çözümü. Scope ID'nin ayarlanmış olduğundan emin olun.
      */
      if ( ai-&gt;ai_family == PF_INET6 )
      {
         pSadrIn6 = (sockaddr_in6_t*) ai-&gt;ai_addr;
         if ( pSadrIn6-&gt;sin6_scope_id == 0 )
         {
            pSadrIn6-&gt;sin6_scope_id = scopeId;
         }  /* scope ID atanmamış ise şartı için IF sonu. */
      }  /* IPv6 çözümü sonu. */
      /*
      ** Uzak düğümün adres bilgisinin gösterilmesi.
      */
      if ( verbose )
      {
         /*
         ** Konak ve hizmet için geçici dizge tamponu.
         */
         char hostBfr[ NI_MAXHOST ];
         char servBfr[ NI_MAXSERV ];
         /*
         ** Alınan adres bilgisinin gösterilmesi. İlk önce yaygın olanlarla (iletişim
         ** kuralı bağımsız) başlayın.
         */
         fprintf( stderr,
                  "Address info:\n"
                  "   ai_flags     = 0x%02X\n"
                  "   ai_family    = %d (PF_INET = %d, PF_INET6 = %d)\n"
                  "   ai_socktype  = %d (SOCK_STREAM = %d, SOCK_DGRAM = %d)\n"
                  "   ai_protocol  = %d (IPPROTO_TCP = %d, IPPROTO_UDP = %d)\n"
                  "   ai_addrlen   = %d (sockaddr_in = %d, "
                  "sockaddr_in6 = %d)\n",
                  ai-&gt;ai_flags,
                  ai-&gt;ai_family,
                  PF_INET,
                  PF_INET6,
                  ai-&gt;ai_socktype,
                  SOCK_STREAM,
                  SOCK_DGRAM,
                  ai-&gt;ai_protocol,
                  IPPROTO_TCP,
                  IPPROTO_UDP,
                  ai-&gt;ai_addrlen,
                  sizeof( struct sockaddr_in ),
                  sizeof( struct sockaddr_in6 ) );

         /*
         ** İletişim kuralına özgü adreslerin gösterilmesi.
         */
         getnameinfo( ai-&gt;ai_addr,
                      ai-&gt;ai_addrlen,
                      hostBfr,
                      sizeof( hostBfr ),
                      servBfr,
                      sizeof( servBfr ),
                      NI_NUMERICHOST | NI_NUMERICSERV );
         switch ( ai-&gt;ai_family )
         {
            case PF_INET:   /* IPv4 adres kaydı. */
            {
               sockaddr_in_t *pSadrIn = (sockaddr_in_t*) ai-&gt;ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin_family: %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin_addr:   %s\n"
                        "                  sin_port:   %s\n",
                        pSadrIn-&gt;sin_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr );
               break;
            }  /* IPv4 adres kaydı sonu. */
            case PF_INET6:   /* IPv6 adres kaydı. */
            {
               pSadrIn6 = (sockaddr_in6_t*) ai-&gt;ai_addr;
               fprintf( stderr,
                        "   ai_addr      = sin6_family:   %d (AF_INET = %d, "
                        "AF_INET6 = %d)\n"
                        "                  sin6_addr:     %s\n"
                        "                  sin6_port:     %s\n"
                        "                  sin6_flowinfo: %d\n"
                        "                  sin6_scope_id: %d\n",
                        pSadrIn6-&gt;sin6_family,
                        AF_INET,
                        AF_INET6,
                        hostBfr,
                        servBfr,
                        pSadrIn6-&gt;sin6_flowinfo,
                        pSadrIn6-&gt;sin6_scope_id );
               break;
            }  /* IPv6 kaydının sonu. */
            default:   /* Buraya asla girilmez fakat bütünlük sağlaması için doldurulmuştur. */
            {
               fprintf( stderr,
                        "%s (line %d): ERROR - Unknown protocol family (%d).\n",
                        pgmName,
                        __LINE__,
                        ai-&gt;ai_family );
               break;
            }  /* DEFAULT CASE sonu (bilinmeyen iletişim kuralı ailesi). */
         }  /* İletişim kuralı ailesi için SWITCH sonu. */
      }  /* Ayrıntılı kip IF sonu. */
      /*
      ** Bir soket yaratalım.
      */
      if ( !SYSCALL( "socket",
                     __LINE__,
                     sckt = socket( ai-&gt;ai_family,
                                    ai-&gt;ai_socktype,
                                    ai-&gt;ai_protocol ) ) )
      {
         sckt = INVALID_DESC;
         continue;   /* Listedeki sıradaki adres kaydını deneyin. */
      }
      /*
      ** Bu sokette uzak konak için hedef belirlenir. Bu soket
      ** sadece belirlenmiş konak ile iletişim kurmak içindir.
      */
      if ( !SYSCALL( "connect",
                     __LINE__,
                     connect( sckt,
                              ai-&gt;ai_addr,
                              ai-&gt;ai_addrlen ) ) )
      {
         (void) close( sckt );   /* Burada SYSCALL() tekrar kullanılabilir, fakat niçin? */
         sckt = INVALID_DESC;
         continue;   /* Listedeki sıradaki adres kaydını deneyin. */
      }
   }  /* Getaddrinfo(3)'dan dönen her adres kaydı için FOR sonu. */
   /*
   ** Temizleme ve dönüş.
   */
   freeaddrinfo( aiHead );
   return sckt;
}  /* openSckt() sonu */
/******************************************************************************
* Metot: tod
*
* Açıklama:
*    Uzak sunucudan zaman bilgisinin alınması ve bunun stdout a yazılması.
*
* Bağımsız değişkenler:
*    sckt – Bağlantı için soket tanıtıcısı.
*
* Dönüş değeri: Yok.
******************************************************************************/
static void tod( int sckt )
{
   char bfr[ MAXBFRSIZE+1 ];
   int  inBytes;
   /*
   ** Sunucuyu uyandırmak için bir veri bloğu yollayın. İçeriği önemli değil,
   ** fakat TOD bilgisi istediğimizi belirten bir şey yollanmalıdır.
   */
   if ( !SYSCALL( "write",
                  __LINE__,
                  write( sckt, "Are you there?", 14 ) ) )
   {
      return;
   }
   /*
   ** Uzak konaktan zaman bilgisinin okunması.
   */
   if ( !SYSCALL( "read",
                  __LINE__,
                  inBytes = read( sckt,
                                  bfr,
                                  MAXBFRSIZE ) ) )
   {
      return;
   }
   bfr[ inBytes ] = '\0';   /* Alınan dizgenin null ile sonlandırılması. */
   fputs( bfr, stdout );    /* Dosya sonu(EOF) ise boş dizge(inBytes == 0).  */
   fflush( stdout );
}  /* tod() sonu */</screen>
    </sect4>
   </sect3>
  </sect2>
  <sect2>
   <title> Diğer Programalama Dilleri</title>
   <sect3>
    <title>JAVA</title>
    <para>
     Sun Java sürümleri 1.4'ten itibaren IPv6'yı desteklemektedir, örneğin
     <link xlink:href="http://java.sun.com/j2se/1.5.0/docs/api/java/net/Inet6Address.html"
     >Inet6Address (1.5/5.0)</link> sınıfına bakabilirsiniz. İncelemek
     isterseniz Networking IPv6 User Guide for JDK/JRE <link
     xlink:href="http://java.sun.com/j2se/1.4.2/docs/guide/net/ipv6_guide/index.html"
     >1.4</link> ve <link xlink:href="http://java.sun.com/j2se/1.5.0/docs/guide/net/ipv6_guide/index.html"
     >1.5 (5.0)</link> bağlantılarını incelebilirsiniz.
    </para>
   </sect3>
   <sect3>
    <title>Perl</title>
    <para>
     2007 Mayıs'ından beri Perl çekirdeğinin IPv6'yı desteklediği bilinmektedir. Bu destek aşağıdaki modül eklenerek sağlanabilir.
    </para>
    <para><link
     xlink:href="http://search.cpan.org/%7Eumemoto/Socket6/">Socket6</link>
    </para>
    <para>
     Zaten IPv6 desteği için başka modüller de mevcut (mesela Net::IP)
     <link xlink:href="http://search.cpan.org/"/> adresinde "IPv6"
     aratabilirsiniz.
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-interoperability">
  <title>Birlikte çalışabilirlik</title>
  <para>
   <link xlink:href="http://www.tahi.org/">TAHI Project</link> farklı işletim
   sistemlerinin IPv6 yapılandırmalarıyla birlikte çalışabilirliğini kontrol
   eden projedir. Linux çekirdeği <link
   xlink:href="http://www.linux-ipv6.org/v6ready/">IPv6 Ready Logo
   Phase 1</link>'i aldı bile.
  </para>
 </sect1>
 <sect1 xml:id="ipv6-howto-information">
  <title>İlave Bilgiler ve Adresler</title>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-books">
   <title>Kitaplar, makaleler, çevrimiçi yazılar (karışık)</title>
   <sect3>
    <title>Basılı Kitaplar (İngilizce)</title>
    <sect4>
     <title>Cisco</title>
     <para>
      Cisco Self-Study: <link
      xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/1587050862/copernicshopper/103-1420916-1341420"
      >Implementing IPv6 Networks (IPV6)</link>, by Regis Desmeules. Cisco
      Press; ISBN 1587050862; 500 pages; 1st edition (April 11, 2003). Note:
      This item will be published on April 11, 2003.
     </para>
     <para>
      <link xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/1928994849/copernicshopper/103-1420916-1341420"
      >Configuring IPv6 with Cisco IOS</link>, by Sam Brown, Sam Browne, Neal
      Chen, Robbie Harrell, Edgar, Jr. Parenti (Editor), Eric Knipp (Editor),
      Paul Fong (Editor)362 pages; Syngress Media Inc; ISBN 1928994849;
      (July 12, 2002).
     </para>
    </sect4>
    <sect4>
     <title>Genel</title>
     <para>
      <link xlink:href="http://www.sunny.ch/publications/f_ipv6.htm">IPv6
      Essentials</link> by Silvia Hagen, July 2002, O'Reilly <link
      xlink:href="http://www.oreilly.com/catalog/ipv6ess/">Order Number:
      1258</link>, ISBN 0-5960-0125-8, 352 pages. <link
      xlink:href="http://www.oreilly.com/catalog/ipv6ess/">ToC, Index, Sample
      Chapter etc.</link>; <link
      xlink:href="http://press.oreilly.com/ipv6ess.html">O'Reilly
      Pressrelease</link>
     </para>
     <para>
      IPv6: The New Internet Protocol. By Christian Huitema; Published by
      Prentice-Hall; ISBN 0138505055. Description: This book, written by
      Christian Huitema - a member of the InternetArchitecture Board, gives an
      excellent description of IPv6, how it differs from IPv4, and the hows
      and whys of it's development. Source: <link
      xlink:href="http://www.cs.uu.nl/wais/html/na-dir/internet/tcp-ip/resource-list.html"/>
     </para>
     <para>
      <link xlink:href="http://www.epinions.com/book_mu-3402412/display_%7Efull_specs"
      >IPv6 Networks</link> by Niles, Kitty; (ISBN 0070248079); 550 pages;
      Date Published 05/01/1998.
     </para>
     <para>
      <link xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/0764545892/copernicshopper/103-1420916-1341420"
      >Implementing IPV6. Supporting the Next Generation Internet
      Protocols</link> by P. E. Miller, Mark A. Miller; Publisher: John Wiley
      &amp; Sons; ISBN 0764545892; 2nd edition (March 15, 2000); 402 pages.
     </para>
     <para>
      <link xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/0126167702/copernicshopper/103-1420916-1341420"
      >Big Book of Ipv6 Addressing Rfcs</link> by Peter H. Salus (Compiler),
      Morgan Kaufmann Publishers, April 2000, 450 pages ISBN 0126167702.
     </para>
     <para>
      <link xlink:href="http://www.epinions.com/book_mu-3922588/display_%7Efull_specs"
      >Understanding IPV6</link> by Davies, Joseph; ISBN 0735612455; Date Published 05/01/2001; Number of Pages: 350. <link
      xlink:href="http://www.microsoft.com/MSPress/books/4883.asp"
      >Understanding IPV6</link> by Davies, Joseph; ISBN 0735612455; Date
      Published 13/11/2002; Number of Pages 544.
     </para>
     <para>
      <link xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/0471498920/copernicshopper/103-1420916-1341420"
      >Migrating to IPv6 - IPv6 in Practice</link> . By Marc Blanchet
      Publisher: John Wiley &amp; Sons; ISBN 0471498920; 1st edition (November
      2002); 368 pages.
     </para>
     <para>
      <link xlink:href="http://www.amazon.com/exec/obidos/ASIN/1555583180/"
      >Ipv6 Network Programming</link> by Jun-ichiro Hagino; ISBN 1555583180.
     </para>
     <para>
      <link xlink:href="http://www.nwfusion.com/news/2000/1023ipv6.html"
      >Wireless boosting IPv6</link> by Carolyn Duffy Marsan, 10/23/2000.
     </para>
     <para>
      <link xlink:href="http://www.oreillynet.com/search/index.ncsp?sp-q=IPv6"
      >O'reilly Network search for keyword IPv6</link> results in 29 hits
      (28. January 2002).
     </para>
    </sect4>
   </sect3>
   <sect3>
    <title>Basılı Kitaplar (Almanca)</title>
    <para>
     Technik der IP-Netze (TCP/IP incl. IPv6) <link
     xlink:href="http://www.amazon.de/exec/obidos/ASIN/3446215018/">bei
      Amazon.de</link> Anatol Badach, Erwin Hoffmann Carl Hanser Verlag
      München, Wien, 2001 ISBN 3-446-21501-8 Kap. 6: Protokoll IPv6 S.205-242
      Kap. 7: Plug&amp;Play-Unterstützung bei IPv6 S.243-276 Kap. 8: Migration
      zum IPv6-Einsatz S.277-294 Kap. 9.3.4: RIP für das Protokoll IPv6
      (RIPng) S.349-351 Kap. 9.4.6: OSPF für IPv6 S.384-385 Kommentar: tw.
      nicht ganz up-to-date bzw. nicht ganz fehlerfreie Abbildungen <link
      xlink:href="http://www.fehcom.de/tipn/tipn.html">Homepage des Buches und
      Tabelle mit Fixes</link>
     </para>
    <para>
     Internet-Sicherheit (Browser, Firewalls und Verschlüsselung) <link
     xlink:href="http://www.amazon.de/exec/obidos/ASIN/3446217258/">bei
     Amazon.de</link> Kai Fuhrberg 2. akt. Auflage 2000 Carl Hanser Verlag
     München, Wien, ISBN 3-446-21333-3 Kap.2.3.1.4. IPv6 S.18-22 Kurz
     angerissen werden: RFC1825 - Security Association Konzept RFC1826 - IP
     authentication Header RFC1827 - IP Encapsulation Security Payload
    </para>
    <para>
     IPv6. Das neue Internet- Protokoll. Technik, Anwendung, Migration
     <link xlink:href="http://www.amazon.de/exec/obidos/ASIN/389864149X">bei
     Amazon</link> Hans Peter Dittler 2. akt. und erweiterte Auflage 2002
     dpunkt.verlag, ISBN 3-89864-149-X
    </para>
    <para>
     Das neue Internetprotokoll IPv6 <link
     xlink:href="http://www.amazon.de/exec/obidos/ASIN/3446216855">bei
     Amazon</link> Herbert Wiese 2002 Carl Hanser Verlag, ISBN 3446216855
   </para>
   </sect3>
   <sect3>
    <title>Makaleler, e-kitaplar, çevrimiçi yazılar (karışık)</title>
    <para>
     <link xlink:href="http://www.onlamp.com/pub/a/onlamp/2001/06/01/ipv6_tutorial.html"
     >Getting Connected with 6to4</link> by Huber Feyrer, 06/01/2001
    </para>
    <para>
     Transient Addressing for Related Processes: Improved Firewalling by Using
     IPv6 and Multiple Addresses per Host; written by Peter M. Gleiz, Steven
     M. Bellovin (<link
     xlink:href="http://www.securiteinfo.com/ebooks/pdf/tarp.pdf"
     >PC-PDF-Version</link>; <link
     xlink:href="http://www.securiteinfo.com/ebooks/palm/tarp.pdf"
     >Palm-PDF-Version</link>; <link
     xlink:href="http://www.securiteinfo.com/ebooks/pdb/tarp.pdb"
     >PDB-Version</link> )
    </para>
    <para>
     <link xlink:href="http://www.oreilly.fr/catalogue/ipv6-3ed.html">IPv6,
     théorie et pratique</link> (french) 3e édition, mars 2002, O'Reilly,
     ISBN 2-84177-139-3
    </para>
    <para>
     <link xlink:href="http://www.securiteinfo.com/crypto/IPSec.shtml"
     >IPSec</link> (language: french)
    </para>
    <para>
     <link xlink:href="http://www.ip6.com/index.html">Internetworking IPv6
     with Cisco Routers</link> by Silvano Gai, McGrawHill Italia, 1997.
     The 13 chapters and appendix A-D are downloadable as PDF-documents.
    </para>
    <para>
     <link xlink:href="http://www.vermicelli.pasta.cs.uit.no/ipv6/students/vegars/"
     >Secure and Dynamic Tunnel Broker</link> by Vegar Skaerven Wang, Master
     of Engineering Thesis in Computer Science, 2.June 2000, Faculty of
     Science, Dep.of Computer Science, University of Tromso, Norway.
    </para>
    <para>
     <link xlink:href="http://www.old.netobjectdays.org/pdf/99/stja/doering.pdf"
     >Aufbruch in die neue Welt - IPv6 in IPv4 Netzen</link> von Dipl.Ing.
     Ralf Döring, TU Illmenau, 1999
    </para>
    <para>
     <link xlink:href="http://www.csc.fi/%7Epsavola/residential.html"
     >Migration and Co-existence of IPv4 and IPv6 in Residential
     Networks</link> by Pekka Savola, CSC/FUNET, 2002
    </para>
   </sect3>
   <sect3>
    <title>Bilimsel yayınlar (özetler, bibliyografyalar, çevrimiçi kaynaklar)</title>
    <para>
     <link xlink:href="http://www.ipv6.ac.uk/gtpv6/workplan.html">GEANT IPv6 Workplan</link>
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=1"
     >A simulation study on the performance of Mobile IPv6 in a WLAN-based
     cellular network</link>, by Perez Costa X.; Hartenstein H. --
     Computer Networks, September 2002, vol. 40, no. 1, pp. 191-204(14) --
     Elsevier Science.
    </para>
    <para>
     <link xlink:href="http://www.ipv6.ac.uk/bermuda2/">IPv6 Trials on UK
     Academic Networks: Bermuda Project Aug.2002</link> : Participants -
     Getting connected - Project deliverables - Network topology - Address
     assignments - Wireless IPv6 access - IPv6 migration - Project
     presentations - Internet 2 - Other IPv6 projects - IPv6 fora and
     standards Bermuda 2...
    </para>
    <para>
     <link xlink:href="http://www.ipv6.ac.uk/">http://www.ipv6.ac.uk/</link>
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=2"
     >A scalable parallel internet router that enables the QoS through merging
      ATM with IPv6</link> . By Song S. -- Computer Communications, 1 May
     2002, vol. 25, no. 7, pp. 647-651(5) -- Elsevier Science.
    </para>
    <para>
     <link xlink:href="http://liinwww.ira.uka.de/cgi-bin/bibshow?e=Pt0mjovy.kpvsobm/vojrvf"
     >Linux IPv6: Which One to Deploy?</link> Linux Journal, Vol. 96, p. 86,
     88-90, April 2002. (Daha fazlası için <link
     xlink:href="http://liinwww.ira.uka.de/mpsbib?query=ipv6"
     >liinwww.ira.uka.de/ipv6</link> adresine bakabilirsiniz)
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=3"
     >An overview and analysis of mobile Internet protocols in cellular
     environments</link> . Chao H-C. -- Internet Research: Electronic
    Networking Applications and Policy, 24 October 2001, vol. 11, no. 5, pp.
    435-450(16) -- MCB University Press
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=5"
     >IPv6 for Future Wireless Networks</link> Toftegaard Nielsen T. --
     Wireless Personal Communications, June 2001, vol. 17, no. 2/3, pp.
     237-247(11) -- Kluwer Academic Publishers, Dordrecht, The Netherlands
    </para>
    <para>
     <link xlink:href="http://www.ipv6.ecs.soton.ac.uk/">IPv6@the University of Southampton</link>
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=4"
     >Seamless Support for Mobile Internet Protocol Based Cellular
     Environments</link> Chao H-C.; Chu Y-M. -- International Journal of
     Wireless Information Networks, July 2001, vol. 8, no. 3, pp. 133-153(21)
     -- Kluwer Academic/Plenum Publishers, New York, U.S.A.
    </para>
    <para>
     <link xlink:href="http://liinwww.ira.uka.de/cgi-bin/bibshow?e=Njtd0MODT0modt3111/vojrvf"
     >IPv6: The Solution for Future Universal Networks</link>.
     Lecture Notes in Computer Science, Vol. 1818, p. 82-??, 2000.
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=8"
     >Modeling and performance analysis for IPv6 traffic with multiple QoS
     classes</link> . Zhang L.; Zheng L. -- Computer Communications, 1 October
     2001, vol. 24, no. 15, pp. 1626-1636(11) -- Elsevier Science.
    </para>
    <para>
     <link xlink:href="http://liinwww.ira.uka.de/cgi-bin/bibshow?e=Njtd0MODT0modt3111/vojrvf"
     >Threshold-Based Registration (TBR) in Mobile IPv6</link>.
     Lecture Notes in Computer Science, Vol. 1818, p. 150-??, 2000.
    </para>
    <para>
     <link xlink:href="http://liinwww.ira.uka.de/cgi-bin/bibshow?e=Njtd0MODT0modt3111/vojrvf"
     >IPv6 Performance Analysis on FreeBSD Workstation Using Simple
     Applications</link> . Lecture Notes in Computer Science, Vol. 1961,
     p. 33-??, 2000.
    </para>
    <para>
     Microsoft Research IPv6 Implementation (MSRIPv6): <link
     xlink:href="http://www.research.microsoft.com/msripv6/">MSRIPv6
     Configuring 6to4 - Connectivity with MSR IPv6 - Our 6Bone Node...</link>
    </para>
    <para>
     <link xlink:href="http://www.ingenta.com/isis/searching/ExpandSearch/ingenta?year_to=2002&amp;year_from=1997&amp;date_type=range&amp;title=IPv6&amp;title_type=tka&amp;database=1&amp;newMatches=false&amp;pageStart=1&amp;index=9"
     >New frontiers in cybersegmentation: marketing success in cyberspace
     depends on IP address</link>. Louvieris P.; Driver J. -- Qualitative
     Market Research: An International Journal, 27 June 2001, vol. 4, no. 3,
     pp. 169-181(13) -- MCB University Press.
    </para>
    <para>
     <link xlink:href="http://liinwww.ira.uka.de/cgi-bin/bibshow?e=Njtd0MODT0modt3113c/vojrvf"
     >QoS-Conditionalized Handoff for Mobile IPv6</link> . Lecture Notes in
     Computer Science, Vol. 2345, p. 721-??, 2002.
    </para>
   </sect3>
   <sect3>
    <title>Diğerleri</title>
    <para>
     Daha fazlası için bakınız: <link
     xlink:href="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6
     Pilot / References</link>
    </para>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-meetings">
   <title>Konferanslar, Toplantılar, Kongreler</title>
   <sect3>
    <title>2002</title>
    <para>
     <link xlink:href="http://www.renater.fr/IPv6-2002/">Renater - Conférence IPv6 2002</link>
    </para>
    <para>
     <link xlink:href="http://www.ipv6summit.com/">IPv6 Deployment Summit@INET 2002</link>
    </para>
    <para>Eksik varsa bildirin!</para>
   </sect3>
   <sect3>
    <title>2003</title>
    <para>Önerilerinizi bekliyoruz!</para>
   </sect3>
   <sect3>
    <title>2004</title>
    <para>1st Global IPv6 Summit in Sao Paul, Brazil</para>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-online">
   <title>Çevrimiçi Bilgiler</title>
   <sect3>
    <title>IPv6 omurgasına katılın</title>
    <para>Daha sonra yazılacak... önerilerinizi bekliyoruz!</para>
    <sect4>
     <title>Küresel kayıtlar (registries)</title>
     <para>
      IPv6 test backbone:
      <link xlink:href="http://www.6bone.net/">6bone</link>,
      <link xlink:href="http://www.6bone.net/6bone_hookup.html">How to join 6bone</link>,
      <link xlink:href="http://www.join.uni-muenster.de/6bone/6bone-teilnahme.html">Teilnahme am 6bone</link> (Almanca),
      <link xlink:href="http://www.join.uni-muenster.de/6bone/6bone-participation.html">6bone participation</link> (İngilizce)
     </para>
    </sect4>
    <sect4 xml:id="ipv6-howto-information-majorregionregistries">
     <title>Başlıca yerel kayıtlar</title>
     <para>
      Amerika: <link xlink:href="http://www.arin.net/">ARIN</link>,
      <link xlink:href="http://www.arin.net/registration/ipv6/index.html">ARIN
      / registration page</link>,
      <link xlink:href="http://www.arin.net/registration/ipv6/index.html">ARIN
      / IPv6 guidelines</link>
     </para>
     <para>
      Avrupa: <link xlink:href="http://www.ripe.net/">Ripe NCC</link>,
      <link xlink:href="http://www.ripe.net/ripencc/mem-services/registration/"
      >Ripe NCC / registration page</link>, <link
      xlink:href="http://www.ripe.net/ripencc/mem-services/registration/ipv6/"
      >Ripe NCC / IPv6 registration</link>
     </para>
     <para>
      Asya/Pasifik: <link xlink:href="http://www.apnic.net/">APNIC</link>,
      <link xlink:href="http://www.apnic.net/services/ipv6_guide.html">APNIC /
      IPv6 ressource guide</link>
     </para>
     <para>
      Latin Amerika ve Karayibler: <link
      xlink:href="http://lacnic.org/">LACNIC</link>, <link
      xlink:href="http://lacnic.net/en/bt-IPv6.html">IPv6 Registration
      Services</link>, <link
      xlink:href="http://lacnic.net/en/chapter-4-en.pdf">IPv6 Allocation
      Policy</link>
     </para>
     <para>
      Afrika: <link xlink:href="http://www.afrinic.org/">AfriNIC</link>
     </para>
     <para>
      Ayrıca her yerel kayıt için başlıca (32 bit uzunluğunda önek'e sahip)
      tahsisler: <link
      xlink:href="http://www.ripe.net/ripencc/mem-services/registration/ipv6/ipv6allocs.html"
      >Ripe NCC / IPv6 allocations</link> adresinde bulunabilir.
     </para>
    </sect4>
    <sect4>
     <title>Tünel komisyoncuları (brokers)</title>
     <para>
      Hazırda bulunan tünel komisyoncularının bir listesini <xref
      linkend="ipv6-howto-information-tunnelbroker"/> bölümünde
      bulabilirsiniz.
     </para>
     <para>
      <link xlink:href="http://www.vermicelli.pasta.cs.uit.no/ipv6/students/vegars/TunnelBroker/"
      >Sourcecode</link> used in Vermicellis Master thesis about tunnelbroker,
      University of Tromso.
     </para>
     <para>
      Former IPng. Tunnelbroker and IPv6 resources, now migrated to the
      <link xlink:href="http://www.sixxs.net/main/">SixXs System</link> .
     </para>
     <para>
      Eckes' <link xlink:href="http://sites.inka.de/lina/linux/ipv6.html"
      >IPv6-with-Linux</link> Page.
     </para>
     <para>
      tunnelc - a perl based tunnel client script: freshmeat.net: <link
      xlink:href="http://freshmeat.net/projects/tunnelc">Project details for
      tunnel client</link> SourceForge: <link
      xlink:href="http://sourceforge.net/projects/tunnelc">Project Info -
      tunnelc</link> (also <link
      xlink:href="http://tunnelc.sourceforge.net/">here</link>)
     </para>
     <para>
      Linux Advanced Routing &amp; Traffic Control HOWTO, <link
      xlink:href="http://howtos.linuxbroker.com/howtoreader.shtml?file=Adv-Routing-HOWTO.html#LARTC.TUNNEL-IPV6.ADDRESSING"
      >Chapter 6: IPv6 tunneling with Cisco and/or 6bone</link> .
     </para>
     <para>
      Daha fazla bilgi ve URL için:
      <link xlink:href="http://www.ipv6-net.de/">ipv6-net.org</link> adresine
      bakabilirsiniz.
    </para>
    </sect4>
    <sect4 xml:id="ipv6-howto-information-joinipv6-6to4-tunelling">
     <title>6ya4</title>
     <para>
      <link xlink:href="http://www.kfu.com/%7Ensayer/6to4/">NSayer's 6to4
      information</link>
     </para>
     <para>
      <link xlink:href="http://www.faqs.org/rfcs/rfc3068.html">RFC 3068 / An
      Anycast Prefix for 6to4 Relay Routers</link>
     </para>
    </sect4>
    <sect4>
     <title>ISATAP</title>
     <para>
      <link xlink:href="http://www.join.uni-muenster.de/Dokumente/Howtos/Howto_ISATAP.php?lang=en"
      >ISATAP (Intra-Site Automatic Tunnel Access Protocol) Information</link>
      by <link xlink:href="http://www.join.uni-muenster.de/">JOIN</link>
     </para>
    </sect4>
   </sect3>
   <sect3>
    <title>En son haberler, adresler ve diğer belgeler</title>
    <para>
     <link xlink:href="http://www.estoile.com/links/ipv6">Lot of URLs to
      others documents</link> by Anil Edathara
    </para>
    <para>
     <link xlink:href="http://www.go6.net/">go6 -IPv6 Portalı:</link>Çevrimiçi
     wiki tabanlı IPv6 portalı, IPv6 tartışmalarının bulunduğu bir forum,
     güncel IPv6 haberleri ve etkinlikleri, ücretsiz IPv6 erişimi ve
     hizmetleri, IPv6 uygulamaları ve daha fazlası.
    </para>
   </sect3>
   <sect3>
    <title>Protocol referansları</title>
    <sect4>
     <title>IPv6 ile ilişkili Açıklama istekleri (RFC)</title>
     <para>
      IPv6 ile ilişkili Açıklama istekleri listesini yayınlamak bu belgenin
      amacının dışındadır fakat aşağıdaki adresler sizi böyle listelere
      yönlendirecektir:
     </para>
     <para>
      Robert Hinden tarafından sıralanmış listeler: <link
      xlink:href="http://playground.sun.com/pub/ipng/html/specs/standards.html"
      >IPng Standardization Status</link> veya <link
      xlink:href="http://playground.sun.com/pub/ipng/html/specs/specifications.html"
      >IPng Current Specifications</link>
     </para>
     <para>
      <link xlink:href="http://www.ipv6.org/specs.html">IPv6 Related
       Specifications</link>
     </para>
    </sect4>
    <sect4>
     <title>Etkin grupların güncel taslakları</title>
     <para>
      IPv6 ile ilişkili güncel taslaklar aşağıdaki adreslerde bulunabilir:
     </para>
     <para>
      <link xlink:href="http://www.ietf.org/ids.by.wg/ipv6.html">IP
      Version 6 (ipv6)</link>
     </para>
     <para>
      <link xlink:href="http://www.ietf.org/ids.by.wg/ngtrans.html">Next
      Generation Transition (ngtrans)</link>
     </para>
     <para>
      <link xlink:href="http://www.ietf.org/ids.by.wg/dhc.html">Dynamic Host
       Configuration (dhc)</link>
     </para>
     <para>
      <link xlink:href="http://www.ietf.org/ids.by.wg/dnsext.html">Domain
       Name System Extension (dnsext)</link>
     </para>
     <para>
      <link xlink:href="http://www.ietf.org/ids.by.wg/mobileip.html">Mobile
       IP (mobileip)</link>
     </para>
     <para>
      <link xlink:href="http://playground.sun.com/pub/ipng/html/ipng-main.html"
      >Get any information about IPv6, from overviews, through RFCs &amp;
      drafts, to implementations</link> (including availability of stacks on
      various platforms &amp; source code for IPv6 stacks)
     </para>
    </sect4>
    <sect4>
     <title>Diğerleri</title>
     <para>
      <link xlink:href="http://www.switch.ch/lan/ipv6/references.html">SWITCH
      IPv6 Pilot / References</link>, IPv6 ile ilgili büyük bir referans
      listesi, Simon Leinen tarafından güncellenmektedir
     </para>
    </sect4>
   </sect3>
   <sect3>
    <title>Daha fazla bilgi</title>
    <sect4>
     <title>Linux ile ilgili</title>
     <para>
      <link xlink:href="http://www.bieringer.de/linux/IPv6/">IPv6-HowTo for
      Linux by Peter Bieringer</link> - Almanya, <link
      xlink:href="ftp://ftp.bieringer.de/pub/linux/IPv6/">Bieringer / IPv6 -
      software archive</link>
     </para>
     <para>
      <link xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status.html"
      >Linux+IPv6 status by Peter Bieringer</link> - Almanya (kullanılmıyor)
     </para>
     <para>
      <link xlink:href="http://www.linux-ipv6.org/">USAGI project</link> -
      Japonya, <link xlink:href="ftp://ftp.linux-ipv6.org/pub/">USAGI
      project - software archive</link>
     </para>
     <para>
      <link xlink:href="http://www.tldp.org/HOWTO/OLSR-IPv6-HOWTO/">Linux
      Optimized Link State Routing Protocol (OLSR) IPv6 HOWTO</link>
     </para>
    </sect4>
    <sect4>
     <title>Linux dağıtımları ile ilgili</title>
     <para>
      PLD: <link xlink:href="http://www.pld-linux.org/">PLD
      Linux Distribution</link> (IPv6 uyumlu paketlerde "pazar lideri")
     </para>
     <para>
      Red Hat: <link xlink:href="http://www.redhat.com/">Red Hat Linux</link>,
      <link xlink:href="http://www.netcore.fi/pekkas/linux/ipv6/">Pekka
      Savola's IPv6 packages</link>
     </para>
     <para>
      Fedora Core: <link xlink:href="http://www.fedora.redhat.com/">Fedora
      Core Linux</link>
     </para>
     <para>
      Debian: <link xlink:href="http://www.debian.org/">Debian Linux</link>,
      <link xlink:href="http://people.debian.org/%7Ecsmall/ipv6/">Craig
      Small's IPv6 information and status</link>, <link
      xlink:href="http://www.ruwenzori.net/ipv6/Jims_LAN_IPv6_global_connectivity_howto.html"
      >Jim's insignificant LAN IPv6 global connectivity HOWTO</link>
     </para>
     <para>
      Novell/SuSE: <link
      xlink:href="http://www.novell.com/linux/suse/">Novell/SuSE Linux</link>
     </para>
     <para>
      Mandriva: <link xlink:href="http://www.mandriva.com">Mandriva</link>
     </para>
     <para>
      Daha fazlası için <link
     xlink:href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html"
     >IPv6+Linux Status Distributions</link> adresine bakabilirsiniz.
     </para>
    </sect4>
    <sect4>
     <title>Genel</title>
     <para>
      <link xlink:href="http://www.ipv6.org/">IPv6.org</link>
     </para>
     <para>
      <link xlink:href="http://www.6bone.net/">6bone</link>
     </para>
     <para>
      <link xlink:href="http://www.cs-ipv6.lancs.ac.uk/">UK IPv6 Resource Centre</link> - UK
     </para>
     <para>
      <link xlink:href="http://www.v6.wide.ad.jp/">WIDE project</link> - Japan
     </para>
     <para>
      <link xlink:href="http://www.switch.ch/lan/ipv6/">SWITCH IPv6 Pilot</link> - Switzerland
     </para>
     <para>
      <link xlink:href="http://www.feyrer.de/IPv6/">IPv6 Corner of Hubert Feyrer</link> - Germany
     </para>
     <para>
      <link xlink:href="http://www.vermicelli.pasta.cs.uit.no/ipv6/"
      >Vermicelli Project</link> - Norway
     </para>
     <para>
      <link xlink:href="http://www.ipv6forum.com/">IPv6 Forum</link> - a
      world-wide consortium of leading Internet vendors, Research &amp;
      Education Networks...
     </para>
     <para>
      <link xlink:href="http://playground.sun.com/pub/ipng/html/ipng-main.html"
      >Playground.sun.com / IPv6 Info Page</link> - maintained by Robert
      Hinden, Nokia. Get any information about IPv6, from overviews, through
      RFCs &amp; drafts, to implementations (including availability of stacks
      on various platforms &amp; source code for IPv6 stacks).
     </para>
     <para>
      <link xlink:href="http://www.6init.com/">6INIT</link> - IPv6 Internet
      Initiative - an EU Fifth Framework Project under the IST Programme.
     </para>
     <para>
      <link xlink:href="http://www.ipv6-taskforce.org/">IPv6 Task Force (European Union)</link>
     </para>
     <para>
      <link xlink:href="http://www.v6.sfc.wide.ad.jp/v6doc/">IPv6 Document Project</link> (Japanese language)
     </para>
     <para>
      <link xlink:href="http://www.6init.org/">6init</link> - IPv6 INternet IniTiative
     </para>
     <para>
      <link xlink:href="http://www.isoc.org/HMP/PAPER/PT1/html/pt1.html.hinden"
      >IP Next Generation Overview</link>
     </para>
     <para>
      <link xlink:href="http://www.usenix.org/publications/library/proceedings/ana97/summaries/deering.html"
      >IPv6: The New Version of the Internet Protocol</link>,
      by Steve Deering.
     </para>
     <para>
      <link xlink:href="http://www.garykessler.net/library/ipv6_exp.html"
      >IPv6: The Next Generation Internet Protocol</link>, by Gary C. Kessler.
     </para>
     <para>
      <link xlink:href="http://www.3com.com/nsc/ipv6.html">IPv6: Next
      Generation Internet Protocol</link> - 3Com
     </para>
     <para>
      <link xlink:href="http://www.ngi.gov/">Next Generation Internet
      Initiative</link>
     </para>
     <para>
      <link xlink:href="http://www.internet2.org/">internet || site</link>
      and <link xlink:href="http://ipv6.internet2.edu/">internet2 Working
      Group</link> - <link xlink:href="http://ipv6.internet2.edu/presentations/"
      >Presentation (HTML + PPT)</link> from IPv6 Workshops: (Stateless
     Autoconfiguration, IPv6 Addressing, USAGI, Provider Independent IPv6
     Addressing and other topics).
     </para>
     <para>
      NetworkWorldFusion: Search / Doc Finder: <link
     xlink:href="http://search.nwfusion.com/query.html?qt=IPv6&amp;qp=&amp;ch=cn&amp;"
     >searched for IPv6</link> (102 documents found 22.12.2002)
     </para>
     <para>
      <link xlink:href="http://www.theregister.co.uk/">The Register</link>
      (Search for IPv6 will result in 30 documents, 22.12.2002)
     </para>
     <para>
      <link xlink:href="http://zdnet.search.com/search?cat=279&amp;q=IPv6"
      >ZDNet Search for IPv6</link>
     </para>
     <para>
      <link xlink:href="http://whatis.techtarget.com/wsearchResults/1,290214,sid9,00.html?query=IPv6"
      >TechTarget Search for IPv6</link>
     </para>
     <para>
      <link xlink:href="http://www.faqs.org/faqs/internet/tcp-ip/resource-list/index.html"
      >IPv6 &amp; TCP Resources List</link>
     </para>
     <para>
      <link xlink:href="http://ipv6.klingon.nl/">Klingon IPv6 tools</link>,
      <link xlink:href="http://www.ipv6.klingon.nl/">Klingon IPv6 tools
      (native IPv6 only access)</link> : IPv6 firewall examples, bandwith
      testing and portscanner
     </para>
     <para>
      Eksik birşey kaldı mı? Önerilerinizi bekliyoruz!
     </para>
    </sect4>
    <sect4>
     <title>Market Araştırması</title>
     <para>
      <link xlink:href="http://www.seminarinformation.com/wconnect/wc.dll?sis%7Edetails0%7E307%7ETSN"
      >A Tale of Two Wireless Technology Trends: Processor Development
      Outsourcing and IPv6</link> Yankee Group - 4/1/2002 - 12 Pages -
      ID: YANL768881
     </para>
     <para>
      <link xlink:href="http://www.marketresearch.com/product/display.asp?SID=88602378-241489274-186851952&amp;ProductID=803907">The
      World Atlas of the Internet: Americas</link> ; IDATE - 2/1/2002 - 242
      PAges - ID: IDT803907. Countries covered: Central America, North
      America, South America; List: Price: $ 3,500.00; excerpt: Panorama of
      Internet access markets across the globe. Market assessment and
      forecasts up to 2006 for 34 countries: market structure: main ISPs and
      market shares; number of subscribers, of ISPs.
     </para>
     <para>
      <link xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/B000065T8E/copernicshopper/103-1420916-1341420">Early
      Interest Rising for IPv6</link> by IDC (Author); List Price: $1,500.00;
      Edition: e-book (Acrobat Reader); Publisher: IDC; ISBN B000065T8E;
      (March 1, 2002)
     </para>
    </sect4>
    <sect4>
     <title>Patentler</title>
     <para>
      Canadian Patent Database: <link
      xlink:href="http://patents1.ic.gc.ca/intro-e.html">Home</link>, <link
      xlink:href="http://patents1.ic.gc.ca/srch_sim-e.html">Search</link>
      (Basic Search, just enter IPv6 in the search field ;-); 84 documents
      found 22.12.2002)
     </para>
     <para>
      <link xlink:href="http://www.european-patent-office.org/espacenet/info/index.htm"
      >Espacenet</link> - European patent information: <link
      xlink:href="http://www.european-patent-office.org/espacenet/info/access.htm"
      >National Offices, Members of Espacenet</link> (IPv6: 84 documents,
      22.12.2002)
     </para>
     <para>Delphion Research: <link xlink:href="http://www.delphion.com/research/">Patent Search Page</link> . Basic (free) registration needed. Examples found 21.12.2002 searching for IPv6: <link xlink:href="http://www.delphion.com/details?pn=US06118784__">Communicating method between IPv4 terminal and IPv6 terminal and IPv4-IPv6 converting apparatus</link>  <link xlink:href="http://www.delphion.com/details?pn=US06038233__">Translator for IP networks, network system using the translator, and IP network coupling method therefor</link>
  </para>
    </sect4>
   </sect3>
   <sect3>
    <title>Ülkeler</title>
    <sect4>
     <title>Avrupa</title>
     <para><link xlink:href="http://www.ist-ipv6.org/">www.ist-ipv6.org</link>: IST IPv6 Cluster, European IPv6 Research and Development Projects
  </para>
     <para><link xlink:href="http://www.euro6ix.org/">Euro6IX</link>: European IPv6 Internet Exchanges Backbone
  </para>
    </sect4>
    <sect4>
     <title>Avusturya</title>
     <para><link xlink:href="http://www.ikn.tuwien.ac.at/%7Eipv6/">IPv6@IKNnet and MIPv6 Research Group</link>: TU Vienna, Austria (IPv6: project, publications, diploma / doctor thesis, Conference Proceedings etc.)
  </para>
    </sect4>
    <sect4>
     <title>Avustralya</title>
     <para><link xlink:href="http://oversteer.bl.echidna.id.au/IPv6/">Carl's Australian IPv6 Pages</link> (old content)
  </para>
    </sect4>
    <sect4>
     <title>Belçika</title><para/>
    </sect4>
    <sect4>
     <title>Brezilya</title>
     <para>
      <link xlink:href="http://www.ipv6summit.com.br/">IPv6 Summit in Brazil</link>
     </para>
     <para>
      <link xlink:href="http://www.ipv6dobrasil.com.br/">IPv6 do Brasil</link>
     </para>
    </sect4>
    <sect4>
     <title>Çin</title><para/>
    </sect4>
    <sect4>
     <title>Çek Cumhuriyeti</title><para/>
    </sect4>
    <sect4>
     <title>Almanya</title>
     <para>
      <link xlink:href="https://www.openbc.com/net/ipv6/">OpenBC / IPv6</link>
     </para>
    </sect4>
    <sect4>
     <title>Fransa</title>
     <para><link xlink:href="http://www.renater.fr/Projets/IPv6/index.htm">Renater</link> : Renater IPv6 Proje Sayfası
  </para>
     <para>
      <link xlink:href="http://www.inria.fr/recherche/equipes/ipv6.fr.html">IPv6 - RSVP - ATM@INRIA</link>
     </para>
     <para>
      <link xlink:href="http://www.netbsd.org/fr/Documentation/network/ipv6/">NetBSD IPv6 Belgesi</link>
     </para>
    </sect4>
    <sect4>
     <title>Hollanda</title>
     <para><link xlink:href="http://www.ipv6.surfnet.nl/">SURFnet</link> : SURFnet IPv6 Backbone
  </para>
     <para><link xlink:href="http://www.stack.nl/">STACK</link>, <link xlink:href="http://www.stack.nl/ipv6/">STACK (IPv6)</link> : Students' computer association of the Eindhoven University of Technology, Netherland
  </para>
     <para><link xlink:href="http://www.ipng.nl/">IPng.nl</link> : collaboration between WiseGuys and Intouch
  </para>
    </sect4>
    <sect4>
     <title>İtalya</title>
     <para><link xlink:href="http://project6.ferrara.linux.it/">Project6</link>: IPv6 networking with Linux
  </para>
    </sect4>
    <sect4>
     <title>Japonya</title>
     <para>
      <link xlink:href="http://www.v6.linux.or.jp/">Linux IPv6 Users Group JP</link>
     </para>
     <para><link xlink:href="http://www.rtpro.yamaha.co.jp/RT/ipv6/">Yamaha IPv6</link> (sorry, all in japanese native ...)
  </para>
    </sect4>
    <sect4>
     <title>Kore</title>
     <para><link xlink:href="http://www.krv6.net/">ETRI</link>: Electronics and Telecommunications Research Institut
  </para>
     <para><link xlink:href="http://www.ipv6.or.kr/english/index.new.htm">IPv6 Forum Korea</link>: Korean IPv6 Deployment Project
  </para>
    </sect4>
    <sect4>
     <title>Meksika</title>
     <para><link xlink:href="http://www.ipv6.unam.mx/">IPv6 Mexico</link> (spain &amp; english version): IPv6 Project Hompeage of The National Autonomous University of Mexico (UNAM)
  </para>
    </sect4>
    <sect4>
     <title>Portekiz</title>
     <para>
      <link xlink:href="http://www.fccn.pt/projectos/ipv6/index_html">FCCN (National Foundation for the Scientific Computation)</link>
     </para>
    </sect4>
    <sect4>
     <title>Rusya</title>
     <para><link xlink:href="http://www.ipv6.ru/">IPv6 Forum for Russia</link>: Yaroslavl State University Internet Center
  </para>
    </sect4>
    <sect4>
     <title>İsviçre</title>
     <para><link xlink:href="http://www.switch.ch/network/ipv6/references.html">SWITCH</link>: The Swiss Education &amp; Research Network
  </para>
    </sect4>
    <sect4>
     <title>Birleşik Krallık</title>
     <para>
      <link xlink:href="http://www.ipv6.org.uk/">IPv6 in the UK</link>
     </para>
     <para>
      <link xlink:href="http://www.cs-ipv6.lancs.ac.uk/">UK IPv6 Resource Center</link>
     </para>
     <para><link xlink:href="http://www.bt.com/ipv6/">British Telecom IPv6 Home</link> : BT's ISP IPv6 Trial, UK's first IPv6 Internet Exchange etc.
  </para>
    </sect4>
   </sect3>
   <sect3>
    <title>İşletim Sistemleri</title>
    <sect4>
     <title>*BSD</title>
     <para><link xlink:href="http://www.kame.net/">KAME project</link> (*BSD)
  </para>
     <para>
      <link xlink:href="http://www.netbsd.org/Documentation/network/ipv6/">NetBSD's IPv6 Networking FAQ</link>
     </para>
     <para>
      <link xlink:href="http://www.freebsd.org/ports/ipv6.html">FreeBSD Ports: Ipv6</link>
     </para>
     <para>
BUGAT - BSD Usergroup Austria - <link xlink:href="http://www.bugat.at/">www.bugat.at</link> : <link xlink:href="http://www.bugat.at/inforum/contentview.php/mini-howto/freebsd-ipv6.ihtml">FreeBSD IPv6 Tunnel</link> (German language)
  </para>
    </sect4>
    <sect4>
     <title>Cisco IOS</title>
     <para>
      <link xlink:href="http://www.cisco.com/warp/public/732/Tech/ipv6/">Cisco IOS IPv6 Entry Page</link>
     </para>
     <para><link xlink:href="http://www.cisco.com/univercd/cc/td/doc/product/software/ios122/122newft/122t/122t2/ipv6/ftipv6c.htm">IPv6 for Cisco IOS Software</link>, File 2 of 3: Aug 2002 -- Table of Contents: IPv6 for Cisco IOS Software; Configuring Documentation Specifics; Enabling IPv6 Routing and Configuring; IPv6 Addressing; Enabling IPv6 Processing Globally.
  </para>
     <para>
Cisco Internet Networking Handbook, <link xlink:href="http://www.cisco.com/univercd/cc/td/doc/cisintwk/ito_doc/ipv6.htm">Chapter IPv6</link>
  </para>
    </sect4>
    <sect4>
     <title>Compaq</title>
     <para><link xlink:href="http://www.compaq.com/ipv6/">IPv6@Compaq</link> - Presentations, White Papers, Documentation...
  </para>
    </sect4>
    <sect4>
     <title>HPUX</title>
     <para>
      <link xlink:href="http://www.faqs.org/faqs/hp/hpux-faq/index.html">comp.sys.hp.hpux FAQ</link>
     </para>
    </sect4>
    <sect4>
     <title>IBM</title>
     <para>
Now that IBM's announced the availability of z/OS V1.4, <link xlink:href="http://search390.techtarget.com/ateQuestionNResponse/0,289625,sid10_cid486367_tax292523,00.html">what's new in this release?</link> This question was posed on 15 August 2002
  </para>
    </sect4>
    <sect4>
     <title>Microsoft</title>
     <para>
      <link xlink:href="http://www.microsoft.com/windows2000/technologies/communications/ipv6/default.asp">Microsoft Windows 2000 IPv6</link>
     </para>
     <para><link xlink:href="http://www.research.microsoft.com/msripv6">MSRIPv6</link> - Microsoft Research Network - IPv6 Homepage
  </para>
     <para>
      <link xlink:href="http://msdn.microsoft.com/downloads/sdks/platform/tpipv6/start.asp">Getting Started with the Microsoft IPv6 Technology Preview for Windows 2000</link>
     </para>
     <para><link xlink:href="http://support.microsoft.com/default.aspx?scxml:id=kb;en-us;306203">Internet Connection Firewall Does Not Block Internet Protocol Version 6 Traffic</link> (6.11.2001)
  </para>
     <para><link xlink:href="http://support.microsoft.com/default.aspx?scxml:id=kb;en-us;289892">Internet Protocol Numbers</link> (8.10.2002)
  </para>
     <para><link xlink:href="http://support.microsoft.com/default.aspx?scxml:id=kb;en-us;273826">IPv6 Technology Preview Refresh</link> (16.10.2002)
  </para>
     <para><link xlink:href="http://support.microsoft.com/default.aspx?scxml:id=kb;en-us;325449">HOW TO: Install and Configure IP Version 6 in Windows .NET Enterprise Server</link> (26.10.2002)
  </para>
     <para><link xlink:href="http://support.microsoft.com/default.aspx?scxml:id=kb;en-us;329984">Windows .NET Server 6to4 Router Service Quits When You Advertise a 2002 Address on the Public Interface</link> (28.10.2002)
  </para>
     <para>
      <link xlink:href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wcetcpip/htm/cmconIPv6exe.asp">msdn - Microsoft Windows CE .NET - IPv6 commands</link>
     </para>
     <para><link xlink:href="http://search.microsoft.com/default.asp?qu=IPv6&amp;MANTIKSAL=ALL&amp;nq=NEW&amp;so=RECCNT&amp;p=1&amp;ig=01&amp;i=00&amp;i=01&amp;i=02&amp;i=03&amp;i=04&amp;i=05&amp;i=06&amp;i=07&amp;i=08&amp;i=09&amp;i=10&amp;i=11&amp;i=12&amp;i=13&amp;i=14&amp;i=15&amp;i=16&amp;i=17&amp;i=18&amp;i=19&amp;i=20&amp;i=21&amp;i=22&amp;i=23&amp;i=24&amp;i=25&amp;i=26&amp;i=27&amp;i=28&amp;i=29&amp;i=30&amp;i=31&amp;i=32&amp;i=33&amp;i=34&amp;i=35&amp;i=36&amp;i=37&amp;i=38&amp;i=39&amp;i=40&amp;i=41&amp;sitexml:id=us/dev">msdn - search for IPv6</link> (100 results, 22.12.2002)
  </para>
    </sect4>
    <sect4>
     <title>Solaris</title>
     <para>
      <link xlink:href="http://www.sun.com/software/solaris/">Sun Microsystems Solaris</link>
     </para>
     <para>
      <link xlink:href="http://www.cs.uu.nl/wais/html/na-dir/Solaris2/FAQ.html">Solaris 2 Frequently Asked Questions (FAQ) 1.73</link>
     </para>
    </sect4>
    <sect4>
     <title>Sumitoma</title>
     <para>
      <link xlink:href="http://playground.sun.com/pub/ipng/html/ipng-implementations.html#Sumitomo">Sumitomo Electric has implemented IPv6 on Suminet 3700 family routers</link>
     </para>
    </sect4>
    <sect4>
     <title>ZebOS</title>
     <para>
IpInfusion's <link xlink:href="http://www.ipinfusion.com/products/server/products_server.html">ZebOS Server Routing Software</link>
  </para>
    </sect4>
   </sect3>
   <sect3>
    <title>IPv6 Güvenliği</title>
    <para>
Internet Security Systems: Security Center, <link xlink:href="http://www.iss.net/security_center/search.php?type=3&amp;type=3&amp;pattern=IPv6">X-Force Database Search</link> (21.12.2002 - 6 topics found relating to IPv6)
  </para>
    <para><link xlink:href="http://csrc.nist.gov/ipsec/">NIST IPsec Project</link> ( National Institute of Standards and Technology, NIST)
  </para>
    <para>
     <link xlink:href="http://www.infosecuritymag.com/index.shtml">Information Security</link>
    </para>
    <para><link xlink:href="http://neworder.box.sk/search.php3?srch=IPv6">NewOrder.box.sk (search for IPv6)</link> (Articles, exploits, files database etc.)
  </para>
   </sect3>
   <sect3>
    <title>Uygulama listeleri</title>
    <para><link xlink:href="http://www.deepspace6.net/docs/ipv6_status_page_apps.html">DeepSpace6 / IPv6 Status Page</link> (<link xlink:href="http://mirrors.bieringer.de/www.deepspace6.net/docs/ipv6_status_page_apps.html">Yansı</link>)
  </para>
    <para>
     <link xlink:href="http://www.ipv6.org/v6-apps.html">IPv6.org / IPv6 enabled applications</link>
    </para>
    <para><link xlink:href="http://freshmeat.net/search/?q=IPv6">Freshmeat / IPv6 search</link>, currently (14 Dec 2002) 62 projects
  </para>
    <para>
IPv6 Forum: <link xlink:href="http://www.ipv6forum.com/navbar/links/v6routerlist.htm">IPv6 Router List</link>
  </para>
    <sect4>
     <title>Analiz araçları</title>
     <para><link xlink:href="http://www.wireshark.org/">Wireshark</link> - (eski adı Ethereal) Linux ve Windows için ücretsiz ağ protokol çözümleyicisi.
  </para>
     <para><link xlink:href="http://www.ip6.com/us/analyzer.htm">Radcom RC100-WL</link> - Download Radcom RC100-WL protocol analyzer version 3.20
  </para>
    </sect4>
    <sect4>
     <title>IPv6 Ürünleri</title>
     <para><link xlink:href="http://www.6wind.com/">6wind</link> - solutions for IPv4/IPv6 Router, QoS, Multicast, Mobility, Security/VPN/Firewall.
  </para>
     <para><link xlink:href="http://www.fefe.de/dns/">Fefe's patches for IPv6 with djbdns</link> Aug 2002 -- What is djbdns and why does it need IPv6? djbdns is a full blown DNS server which outperforms BIND in nearly all respects.
  </para>
     <para>
      <link xlink:href="http://www.ipinfusion.com/products/server/products_server.html">ZebOS Server Routing Suite</link>
     </para>
     <para>
      <link xlink:href="http://download.com.com/3000-2165-10153543.html?tag=lst-0-21">SPA Mail Server 2.21</link>
     </para>
     <para>
      <link xlink:href="http://download.com.com/3000-2165-8202652.html?tag=lst-0-2">Inframail (Advantage Server Edition) 6.0</link>
     </para>
     <para>
      <link xlink:href="http://download.com.com/3000-2377-10149393.html?tag=lst-0-1">HTTrack Website Copier</link>
     </para>
     <para>
      <link xlink:href="http://download.com.com/3000-2085-10132748.html?tag=lst-0-1">CommView 5.0</link>
     </para>
     <para>
      <link xlink:href="http://download.com.com/3000-2104-10149750.html?tag=lst-0-1">Posadis 0.50.6</link>
     </para>
     <para>
      <link xlink:href="ftp://ftp.porcupine.org/pub/ipv6/">TCP Wrapper (IPv6 aware)</link>
     </para>
    </sect4>
    <sect4>
     <title>SNMP</title>
     <para>
      <link xlink:href="http://www.cs.uu.nl/wais/html/na-dir/snmp-faq/part1.html">comp.protocpols.snmp SNMP FAQ Part 1 of 2</link>
     </para>
    </sect4>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-infrastructure">
   <title>IPv6 Temel Yapısı</title>
   <sect3>
    <title>İstatistikler</title>
    <para><link xlink:href="http://www.space.net/%7Egert/RIPE/">IPv6 routing table history</link>, Gert Döring, <link xlink:href="http://www.space.net/">Space.Net</link>
  </para>
    <para>
     <link xlink:href="http://6bone.informatik.uni-leipzig.de/ipv6/stats/stats.php3">Official 6bone Webserver list Statisic</link>
    </para>
   </sect3>
   <sect3>
    <title>Internet Merkezleri</title>
    <para>
IPv6 Internet Merkezlerinin listeleri <link xlink:href="http://www.euro-ix.net/isp/choosing/search/matrix.php">IPv6 status of IXPs in Europe</link> adreslerinde bulunabilir.
  </para>
    <sect4>
     <title>Estonya</title>
     <para><link xlink:href="http://tix.estpak.ee/">TIX</link> (tallinn interneti exchange with ipv6 support)
  </para>
    </sect4>
    <sect4>
     <title>Avrupa</title>
     <para><link xlink:href="http://www.euro6ix.net/">Euro6IX</link>, European IPv6 Internet Exchange Backbone
  </para>
    </sect4>
    <sect4>
     <title>Fransa</title>
     <para><link xlink:href="http://www.fnix6.net/">French National Internet Exchange IPv6</link> (since 1.11.2002 active). FNIX6 provides a free and reliable high speed FastEthernet interconnection between ISP located in TeleCity Paris.
  </para>
    </sect4>
    <sect4>
     <title>Almanya</title>
     <para><link xlink:href="http://www.inxs.de/">INXS</link>: (Cable &amp; Wireless) Munich and Hamburg
  </para>
    </sect4>
    <sect4>
     <title>Japonya</title>
     <para><link xlink:href="http://www.wide.ad.jp/nspixp6/">NSPIXP-6</link>: IPv6-based Internet Exchange in Tokyo
  </para>
     <para><link xlink:href="http://www.jpix.co.jp/">JPIX</link>, Tokyo
  </para>
    </sect4>
    <sect4>
     <title>Kore</title>
     <para>
      <link xlink:href="http://www.ngix.ne.kr/">6NGIX</link>
     </para>
    </sect4>
    <sect4>
     <title>Hollanda</title>
     <para><link xlink:href="http://www.ams-ix.net/">AMS-IX</link>: Amsterdam Internet Exchange
  </para>
    </sect4>
    <sect4>
     <title>Birleşik Krallık</title>
     <para><link xlink:href="http://www.uk6x.com/">UK6X</link>: Londra
  </para>
     <para><link xlink:href="http://www.xchangepoint.net/">XchangePoint</link>: Londra
  </para>
    </sect4>
    <sect4>
     <title>ABD</title>
     <para><link xlink:href="http://www.6tap.net/">6TAP</link>: Chicago. Supports peerings around the globe.
  </para>
     <para><link xlink:href="http://www.ny6ix.net/">NY6IX</link>: New York City IPv6 based Internet Exchange
  </para>
     <para><link xlink:href="http://www.paix.net/">PAIX</link>: Palo Alto
  </para>
    </sect4>
   </sect3>
   <sect3 xml:id="ipv6-howto-information-tunnelbroker">
    <title>Tünel komisyoncuları</title>
    <para><link xlink:href="http://www.deepspace6.net/docs/tunnelbrokers.html">http://www.deepspace6.net/docs/tunnelbrokers.html</link> adresine de bakılabilir.
  </para>
    <sect4>
     <title>Belçika</title>
     <para>
      <link xlink:href="http://tunnel.be.wanadoo.com/">Wanadoo</link>
     </para>
    </sect4>
    <sect4>
     <title>Kanada</title>
     <para><link xlink:href="http://www.freenet6.net/">Freenet6</link> - /48 Delegation, Canada <link xlink:href="http://www.linuxjournal.com/article.php?sxml:id=5963&amp;mode=thread&amp;order=0">Getting IPv6 Using Freenet6 on Debian</link>  <link xlink:href="http://www.viagenie.qc.ca/en/index.shtml">Freenet6 creater</link>
  </para>
    </sect4>
    <sect4>
     <title>Çin</title>
     <para>
      <link xlink:href="http://tb.6test.edu.cn/">CERNET-Nokia</link>
     </para>
    </sect4>
    <sect4>
     <title>Estonya</title>
     <para>
      <link xlink:href="http://tunnelbroker.ipv6.estpak.ee/?tunnel&amp;PHPSESSID=aa2184190cc2cc6d3a6f6ddd01ae3635">Estpak</link>
     </para>
    </sect4>
    <sect4>
     <title>Avrupa</title>
     <para><link xlink:href="http://www.xs26.net/">XS26 Distributed Tunnel Broker</link>, USA &amp; Europe
  </para>
    </sect4>
    <sect4>
     <title>Almanya</title>
     <para>
      <link xlink:href="http://6bone.informatik.uni-leipzig.de/">6bone Knoten Leipzig</link>
      <link xlink:href="http://www.mail-archive.com/ipv6@uni-muenster.de/msg00056.html">Info bez. Hackangriff (2001)</link>
     </para>
     <para>
      <link xlink:href="http://fix.ipv6.berkom.de/cgi-bin/tb.pl">Berkom</link>
     </para>
    </sect4>
    <sect4>
     <title>İtalya</title>
     <para>
      <link xlink:href="http://www.comv6.com/">Comv6</link>
     </para>
     <para><link xlink:href="http://www.bersafe.it/">Bersafe</link> (İtalyanca)
  </para>
    </sect4>
    <sect4>
     <title>Japonya</title>
     <para><link xlink:href="http://www.iij.ad.jp/en/IPv6/">Internet Initiative Japan</link> (<link xlink:href="http://www.iij.ad.jp/IPv6/">Japonca</link>) - with IPv6 native line service and IPv6 tunneling Service
  </para>
    </sect4>
    <sect4>
     <title>Malezya</title>
     <para>

  </para>
    </sect4>
    <sect4>
     <title>Hollanda</title>
     <para><link xlink:href="http://www.ipng.nl/">IPng Netherland</link> - Intouch, SurfNet, AMS-IX, UUNet, Cistron, RIPE NCC and AT&amp;T are connected@the AMS-IX. It is possible (there are requirements...) to get an static tunnel.
  </para>
     <para>
      <link xlink:href="http://www.ipv6.surfnet.nl/">SURFnet Customers</link>
     </para>
    </sect4>
    <sect4>
     <title>Norveç</title>
     <para><link xlink:href="http://www.uninett.no/testnett/index.en.html">UNINETT</link> - Pilot IPv6 Service (for Customers): tunnelbroker &amp; address allocation <link xlink:href="http://www.guruz.de/Uninett-Autoupdate-HOWTO">Uninett-Autoupdate-HOWTO</link>
  </para>
    </sect4>
    <sect4>
     <title>İspanya</title>
     <para>
      <link xlink:href="http://tb.consulintel.euro6ix.org/">Consulintel</link>
     </para>
    </sect4>
    <sect4>
     <title>İsviçre</title>
     <para><link xlink:href="http://tunnelbroker.as8758.net/">Tunnelbroker AS8758</link>, Dolphins Network Systems (since 20.12.2002 online)
  </para>
    </sect4>
    <sect4>
     <title>Birleşik Krallık</title>
     <para><link xlink:href="http://www.nttv6.net/">NTT</link>, United Kingdom - IPv6 Trial. IPv4 Tunnel and native IPv6 leased Line connections. POPs are located in London, UK Dusseldorf, Germany New Jersey, USA (East Coast) Cupertino, USA (West Coast) Tokyo, Japan
  </para>
     <para>
      <link xlink:href="https://tb.ipv6.btexact.com/">BtexacT IPv6 Tunnel Broker Service</link>
     </para>
     <para>
      <link xlink:href="http://ipng.org.uk/">IPNG-UK</link>
     </para>
    </sect4>
    <sect4>
     <title>ABD</title>
     <para><link xlink:href="http://www.es.net/hypertext/welcome/pr/ipv6.html">ESnet</link>, USA - Energy Sciences Network: Tunnel Registry &amp; Address Delegation for directly connected ESnet sites and ESnet collaborators.
  </para>
     <para><link xlink:href="http://ipv6tb.he.net/">Hurricane Electric</link>, US backbone; <link xlink:href="http://tunnelbroker.net/">Hurrican Electric Tunnelbroker</link> (also available under <link xlink:href="http://tunnelbroker.com/">http://tunnelbroker.com/</link> ) Press Release: <link xlink:href="http://www.he.net/releases/release6.html">Hurricane Electric Upgrades IPv6 Tunnel Broker</link>  <link xlink:href="http://ipv6.he.net/tunnelbroker-update.php">Tunnel Broker Endpoint Autoupdate</link>, Perl Script
  </para>
    </sect4>
    <sect4>
     <title>Singapur</title>
     <para><link xlink:href="http://tunnel-broker.singnet.com.sg/"/>, with NAT and IPsec option
  </para>
    </sect4>
    <sect4>
     <title>Diğer Tünel Komisyoncuları...</title>
     <para><link xlink:href="http://www.kfu.com/%7Ensayer/6to4/">Public 6to4 relay routers</link> (MS IIE boykot!)
  </para>
    </sect4>
   </sect3>
   <sect3>
    <title>Doğal IPv6 Hizmetleri</title>
    <para>
Not: Bu hizmetlerin çoğu sadece geçerli bir IPv6 bağlantısı ile çalışır!
  </para>
    <sect4>
     <title>Net News (NNTP)</title>
     <para/>
    </sect4>
    <sect4>
     <title>Oyun Sunucusu</title>
     <para><link xlink:href="http://www.viagenie.qc.ca/en/ipv6/quake2/ipv6-quake2.shtml">Quake2</link> over IPv6
  </para>
    </sect4>
    <sect4>
     <title>IRC Sunucusu</title><para/>
    </sect4>
    <sect4>
     <title>Radyo İstasyonları</title><para/>
    </sect4>
    <sect4>
     <title>Web sunucusu</title>
     <para>
      <link xlink:href="http://www.ipv6.bieringer.de/">Peter Bieringer's Home of Linux IPv6 HOWTO</link>
     </para>
     <para>
Unuttuğum bir şey var mı? Önereceğiniz bir olursa çekinmeyin!
  </para>
    </sect4>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-maillists">
   <title>E-posta listeleri</title>
   <para>
Aşağıdaki adreslerde üye olabileceğiniz e-posta listelerini bulabilirsiniz:
  </para>
   <para>
    <link xlink:href="http://www.deepspace6.net/sections/lists.html">DeepSpace6 / Mailling Lists</link>
   </para>
   <para>
Önemli e-posta listelerinden bazıları aşağıdaki tabloda verilmiştir:
  </para>
   <para>
    <informaltable frame="none">
     <tgroup cols="6">
      <thead>
       <row>
        <entry>Konu
</entry>
        <entry>üyelik için e-posta adresi
</entry>
        <entry>liste
</entry>
        <entry>E-posta  listesinin  adresi
</entry>
        <entry>Dil
</entry>
        <entry>www erişimi
</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Linux kernel networking including IPv6
</entry>
        <entry>
         <email>majordomo@vger.kernel.org</email>
        </entry>
        <entry>netdev
</entry>
        <entry>
         <email>netdev@vger.kernel.org</email>
        </entry>
        <entry>İngilizce
</entry>
        <entry><link xlink:href="http://vger.kernel.org/vger-lists.html#netdev">Bilgi</link>,<link xlink:href="http://www.spinics.net/lists/netdev/">Arşiv</link></entry>
       </row>
       <row>
        <entry>Mobile IP(v6) for Linux
</entry>
        <entry>Web-based, see URL
</entry>
        <entry>mipl
</entry>
        <entry>
         <email>mipl@mobile-ipv6.org</email>
        </entry>
        <entry>İngilizce
</entry>
        <entry><link xlink:href="http://www.mobile-ipv6.org/cgi-bin/mailman/listinfo">Bilgi</link>, <link xlink:href="http://www.mobile-ipv6.org/pipermail/mipl/">Arşiv</link></entry>
       </row>
       <row>
        <entry>Linux IPv6 users using USAGI extension
</entry>
        <entry>
         <email>usagi-users-ctl@linux-ipv6.org</email>
        </entry>
        <entry>
</entry>
        <entry>
         <email>usagi-users@linux-ipv6.org</email>
        </entry>
        <entry>İngilizce
</entry>
        <entry><link xlink:href="http://www.linux-ipv6.org/ml/index.html#usagi-users">Bilgi / Arama</link>, <link xlink:href="http://www.linux-ipv6.org/ml/usagi-users/">Arşiv</link></entry>
       </row>
       <row>
        <entry>IPv6 on Debian Linux
</entry>
        <entry>
</entry>
        <entry>
</entry>
        <entry>
         <email>debian-ipv6@lists.debian.org</email>
        </entry>
        <entry>İngilizce
</entry>
        <entry>
         <link xlink:href="http://lists.debian.org/debian-ipv6/">Bilgi/Üyelik/Arşiv</link>
        </entry>
       </row>
       <row>
        <entry>6bone
</entry>
        <entry>
         <email>majordomo@isi.edu</email>
        </entry>
        <entry>6bone
</entry>
        <entry>
         <email>6bone@isi.edu</email>
        </entry>
        <entry>İngilizce
</entry>
        <entry><link xlink:href="http://www.6bone.net/6bone_email.html">Bilgi</link>, <link xlink:href="http://mailman.isi.edu/pipermail/6bone/">Arşiv</link></entry>
       </row>
       <row>
        <entry>IPv6 users in general
</entry>
        <entry>
         <email>majordomo@ipv6.org</email>
        </entry>
        <entry>users
</entry>
        <entry>
         <email>users@ipv6.org</email>
        </entry>
        <entry>İngilizce
</entry>
        <entry><link xlink:href="http://www.ipv6.org/mailing-lists.html">Bilgi</link>, <link xlink:href="http://www.mail-archive.com/users@ipv6.org/">Arşiv</link></entry>
       </row>
       <row>
        <entry>Bugtracking of Internet applications (1)
</entry>
        <entry>
         <email>bugtraq-subscribe@securityfocus.com</email>
        </entry>
        <entry>
</entry>
        <entry><email>bugtraq@securityfocus.com</email> (2)
</entry>
        <entry>İngilizce
</entry>
        <entry><link xlink:href="http://online.securityfocus.com/popups/forums/bugtraq/intro.shtml">Bilgi</link>, <link xlink:href="http://online.securityfocus.com/archive/1">Arşiv</link></entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
   <para>
(1) Sunucu uygulamaları sağlıyorsanız şiddetle önerilir.
  </para>
   <para>
(2) Genel Linux &amp; IPv6 konuları için önerilir.
  </para>
   <para>
Unuttuğum bir şey varsa hatırlatmaktan çekinmeyin!
  </para>
   <para>
Aşağıda ulaşabileceğiniz diğer e-posta listeleri ve haber grupları bulunmaktadır:
  </para>
   <para><link xlink:href="http://groups.yahoo.com/group/student-ipv6">student-ipv6 (Hindistan)</link> Tanımlama: This is the group for the Student Awareness group of IPv6 in India
  </para>
   <para><link xlink:href="http://groups.yahoo.com/group/sun-ipv6-users">sun-ipv6-users</link> Tanımlama: Please report problems/suggestions regarding SUN Microsystems IPng implementation
  </para>
   <para><link xlink:href="http://groups.yahoo.com/group/IPv6-BITS">IPv6-BITS</link> Tanımlama: This List will co-ordinate the working of Project Vertebrae.
  </para>
   <para><link xlink:href="http://groups.yahoo.com/group/linux-bangalore-ipv6">linux-bangalore-ipv6</link> Tanımlama: The IPv6 deployment list of the Bangalore Linux User Group
  </para>
   <para><link xlink:href="http://groups.yahoo.com/group/packet-switching">packet-switching</link> Tanımlama: This mailing list provides a forum for discussion of packet switching theory, technology, implementation and application in any relevant aspect including without limitation LAPB, X.25, SDLC, P802.1d, LLC, IP, IPv6, IPX, DECNET, APPLETALK, FR, PPP, IP Telephony, LAN PBX systems, management protocols like SNMP, e-mail, network transparent window systems, protocol implementation, protocol verification, conformance testing and tools used in maintaining or developing packet switching systems.
  </para>
   <para>
de.comm.protocols.tcp-ip Tanımlama: Umstellung auf IPv6 Kaynak: <link xlink:href="http://www.faqs.org/faqs/de-newsgroups/chartas/index.html">Chartas der Newsgruppen in de.*</link>
  </para>
   <para>
Google Group: <link xlink:href="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=comp.protocols.tcp-ip">comp.protocols.tcp-ip</link>
  </para>
   <para>
Google Group: <link xlink:href="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=linux.debian.maint.ipv6">linux.debian.maint.ipv6</link>
  </para>
   <para>
Google Group: <link xlink:href="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=microsoft.public.platformsdk.networking.ipv6">microsoft.public.platformsdk.networking.ipv6</link>
  </para>
   <para>
Google Group: <link xlink:href="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF8&amp;safe=off&amp;group=fa.openbsd.ipv6">fa.openbsd.ipv6</link>
  </para>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-online-tools">
   <title> Çevrimiçi araçlar</title>
   <sect3>
    <title>Sınama araçları</title>
    <para>
finger, nslookup, ping, traceroute, whois: <link xlink:href="http://www.cs-ipv6.lancs.ac.uk/ipv6/testing/">UK IPv6 Resource Centre / The test page</link>
  </para>
    <para>
ping, traceroute, tracepath, 6bone registry, DNS: <link xlink:href="http://www.join.uni-muenster.de/lab/testtools.html">JOIN / Testtools</link> (Sadece Almanca ama diğerleriiçin problem oluşturmaz)
  </para>
    <para>
traceroute6, whois: <link xlink:href="http://www.ipng.nl/">IPng.nl</link>
  </para>
    <para>
AAAA Lookup Checker <link xlink:href="http://www.cnri.dit.ie/cgi-bin/check_aaaa.pl">http://www.cnri.dit.ie/cgi-bin/check_aaaa.pl</link>
  </para>
    <para><link xlink:href="http://doc.tavian.com/ipv6util/index.htm">IPv6 adres analiz aracı</link> (ipv6calc'nın bilgi seçeneğine benzer)
  </para>
   </sect3>
   <sect3>
    <title>Bilgi sağlayıcılar</title>
    <para>
     <link xlink:href="http://www.dfn.de/service/ipv6/ipv6aggis.html">List of worldwide all IPv6-aggregated IP-Blocks</link>
    </para>
   </sect3>
   <sect3>
    <title>IPv6 Looking Glasses</title>
    <para>
     <link xlink:href="http://www.v6.dren.net/lg/">DRENv6 Looking Glass</link>
    </para>
   </sect3>
   <sect3>
    <title>Yardımcı uygulamalar</title>
    <para><link xlink:href="http://www.tdoi.org/prefcalc.php">IPv6 Prefix Calculator</link> by <link xlink:href="http://www.tdoi.org/">TDOI</link>
  </para>
    <para>
     <link xlink:href="http://www.maths.tcd.ie/cgi-bin/check_dns.pl">DNS record checker</link>
    </para>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-seminars">
   <title>Eğitimler, Seminerler</title>
   <para><link xlink:href="http://www.aerasec.de/workshops/ipv6.html">IPv6 Training and Workshop</link>, AERAsec, Almanya (Şimdilik sadece Almanca)
  </para>
   <para>
    <link xlink:href="http://www.e-trainonline.com/html/ciw_internetworking_profession.html#IPv6">CIW Internetworking Professional Training CBT CD</link>
   </para>
   <para><link xlink:href="http://www.trainingpages.net/x/category.html?kw=125">Training Pages</link>, U.K. - Search for IPv6 (13 Courses, 22.12.2002)
</para>
   <para><link xlink:href="http://www.erion.co.uk/ipv6.html">Erion IPv6 Training</link>, UK
</para>
   <para>
Unuttuğum bir şey varsa hatırlatmaktan çekinmeyin!
  </para>
  </sect2>
  <sect2 xml:id="ipv6-howto-information-online-discovery" userlevel="chunkthis">
   <title>The Online Discovery' ...</title>
   <para><link xlink:href="http://www.amazon.com/exec/obidos/tg/detail/-/B00006334Y/copernicshopper/103-1420916-1341420">IPv6: Addressing The Needs Of the Future</link> [DOWNLOAD: PDF] by Yankee Group (Yazar) Liste Fiyatı: $595.00 Baskı: e-book (Acrobat Reader) Sayfa: 3 (üç) Yayıncı: MarketResearch.com; ISBN B00006334Y; (1 Kasım 2001)
  </para>
   <para>
;-) Kaç kopya satıldı acaba...
  </para>
  </sect2>
 </sect1>
 <sect1 xml:id="ipv6-howto-information-history-credits-end">
  <title>Sürüm Tarihçesi / Katkıda Bulunanlar / Son</title>
  <sect2 xml:id="ipv6-howto-revision-history" userlevel="chunkthis">
   <title>Sürüm Tarihçesi</title>
   <para>
Detaylı sürüm tarihçesi için <link xlink:href="http://www.ibiblio.org/pub/Linux/docs/HOWTO/other-formats/html_single/Linux+IPv6-HOWTO.html#REVISION-HISTORY">asıl belgeye</link> bakabilirsiniz.
  </para>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-credits">
   <title>Katkıda bulunanlar</title>
   <para>
Bu güzel listeye eklenmenin en kestirme yolu bana hata düzeltmesi ve/veya güncelleme göndermektir ;-).
  </para>
   <para>
Detaylı bir arama yapmak isterseniz asıl LyX dosyasını kullanabilirsiniz (bakınız <link linkend="ipv6-howto-general-original-source">belgenin kaynağı</link> ). SGML ile kullanıldığında iyi sonuç vermeyen diff burada işe yarayacaktır.
  </para>
   <sect3>
    <title> Büyük katkılar</title>
    <para>
David Ranch <email>dranch@trinnet.net</email>: Beni bu belgeyi hazırlamam için cesaretlendirdi, belgenin ilk sürümlerinde önemli yorumları oldu. IPv6 web sitemin hazırlanmasında farklı IPv6 test sonuçları ile katkıda bulundu. Ayrıca önemli eleştirileri ve önerileri oldu.
  </para>
    <para>
Pekka Savola <email>pekkas@netcore.fi</email>: Önemli eleştiriler, girdiler ve öneriler.
  </para>
    <para>
Martin F. Krafft <email>madduck@madduck.net</email>: Gramer kontrolü ve belge hakkında genel eleştiriler.
  </para>
    <para>
John Ronan <email>j0n@tssg.wit.ie</email>: Gramer kontrolü.
  </para>
    <para>
Georg Käfer <email>gkaefe@gmx.at</email>: PDF üretimindeki hatayı buldu (LDP geliştiricisi Greg Ferguson tarafından düzeltildi), Almanca kitaplara ve URL listesine büyük katkı yaptı. Tüm URL'leri kontrol etti, bir çok önerilerde, düzeltmelerde ve katkılarda bulundu. Belgeyi Almancaya çevirdi.
  </para>
    <para>
Michel Boucey <email>mboucey@free.fr</email>: Bazı yazım hatalarını ve kırık bağları buldu, önerileri ve linkleri ile katkıda bulundu. Belgeyi Fransızcaya çevirdi.
  </para>
    <para>
Michele Ferritto <email>m.ferritto@virgilio.it</email>: Hatalar buldu ve belgeyi İtalyanca çevirdi.
  </para>
    <para>
  Daniel Roesen <email>dr@cluenet.de</email>: Gramer kontrolü.
  </para>
    <para>
  Benjamin Thery <email>benjamin.thery@bull.net</email>: Güncellenen gezicilik bölümünün yazılmasına katkıda bulundu.
  </para>
    <para>
 John Wenker <email>jjw@pt.com</email>: C-API kullanarak yazılımlama bölümüne büyük katkısı olmuştur.
  </para>
   </sect3>
   <sect3>
    <title>Diğer katkılar</title>
    <sect4>
     <title>Belge tekniği ile ilgili katkılar</title>
     <para>
Bir aceminin LDP NASIL belgesi hazırlaması (LyX ile hazırlayıp DocBook formatına dönüştürmek) bazılarının söylediği kadar basit değilmiş. Bazı tuzaklar varmış... Her neyse, teşekkürler:
  </para>
     <para><link xlink:href="http://www.tldp.org/LDP/LDP-Author-Guide/">LDP Author Guide</link> belgesinin yazarları
  </para>
     <para>
B. Guillon: <link xlink:href="http://perso.libertysurf.fr/bgu/doc/db4lyx/">DocBook with LyX HOWTO</link> belgesinin yazarı
  </para>
    </sect4>
    <sect4>
     <title>İçerik ile ilgili katkılar</title>
     <para>
Burada düzeltmeler ve ipuçları ile katkıda bulunanlar yeralmaktadır, gelecekte sayıları artacaktır.
  </para>
     <para>
S .P. Meenakshi <email>meena@cs.iitm.ernet.in</email>: tcp_wrapper/hosts.deny dosyasında "send mail" kabuk programını kullanmak için bir ipucu gönderdi.
  </para>
     <para>
Frank Dinies <email>FrankDinies@web.de</email>: IPv6 adres açıklamasında düzeltme yaptı.
  </para>
     <para>
John Freed <email>jfreed@linux-mag.com</email>: IPv6 çoğa gönderim açıklamasındaki hatayı düzeltti.
  </para>
     <para>
Craig Rodrigues <email>crodrigu@bbn.com</email>: RHL IPv6 ayarlaması ile ilgili öneri gönderdi.
  </para>
     <para>
Fyodor <email>fyodor@insecure.org</email>: eskimiş nmap açıklamasını haber verdi.
  </para>
     <para>
Mauro Tortonesi <email>mauro@deepspace6.net</email>: Bazı öneriler yaptı.
  </para>
     <para>
Tom Goodale <email>goodale@aei-potsdam.mpg.de</email>: Bazı öneriler yaptı.
  </para>
     <para>
Martin Luemkemann <email>mluemkem@techfak.uni-bielefeld.de</email>: Bir öneri yaptı.
  </para>
     <para>
Jean-Marc V. Liotier <email>jim@jipo.com</email>: Hata buldu.
  </para>
     <para>
Yaniv Kaul <email>ykaul@checkpoint.com</email>: Hata buldu.
  </para>
     <para>
Arnout Engelen <email>arnouten@bzzt.net</email>: Bir taslağın RFC olarak kabul edildiği bilgisini gönderdi.
  </para>
     <para>
Stephane Bortzmeyer <email>bortzmeyer@nic.fr</email>: Debian kalıcı yapılandırmasına katkıda bulundu.
  </para>
     <para>
lithis von saturnsys <email>lithis@saturnsys.com</email>: Adresi belirtilmemiş URL raporladı.
  </para>
     <para>
Guy Hulbert <email>gwhulbert@rogers.com</email>: RFC1924'nin 1 Nisan şakası olabileceğini söyleyen bir not gönderdi.
  </para>
     <para>
Tero Pelander <email>tpeland@tkukoulu.fi</email>: Kırık link bildirdi.
  </para>
     <para>
Walter Jontofsohn <email>wjontof@gmx.de</email>: SuSE Linux 8.0/8.1 için ipucu gönderdi.
  </para>
     <para>
Benjamin Hofstetter <email>benjamin.hofstetter@netlabs.org</email>: Hatalı adresli bir link raporladı.
  </para>
     <para>
J.P. Larocque <email>piranha@ely.ath.cx</email>: Reporting archive URL for maillist users@ipv6.org
  </para>
     <para>
Jorrit Kronjee <email>jorrit@wafel.org</email>: Kırık link bildirdi.
  </para>
     <para>
Colm MacCarthaigh <email>colm.maccarthaigh@heanet.ie</email>: Apache2'deki sendfile konusunda ipucu gönderdi.
  </para>
     <para>
Tiago Camilo <email>tandre@ipg.pt</email>: Mobil IPv6 ile ilgili linklerde katkısı oldu.
  </para>
     <para>
Harald Geiger: Küresel bit hesaplamasındaki hatayı bildirdi.
  </para>
     <para>
Bjoern Jacke <email>bjoern@j3e.de</email>: xinetd hakkındaki eskimiş bilgileri düzeltmem için beni uyardı.
  </para>
     <para>
Christoph Egger <email>cegger@chrrr.com</email>: SuSE Linux 9.0 da "ip" komutunun IPv4-uyumlu adreslerle ilgili problemi olduğunu söyleyen bir not gönderdi, 6to4-radvd örneğini eklemem için teşvik etti.
  </para>
     <para>
David Lee Haw Ling <email>hawling@singnet.com.sg</email>: tünel broker'ı hakkında bilgi gönderdi.
  </para>
     <para>
Michael H. Warfield <email>mhw@iss.net</email>: 6to4 yönlendiricilerinin soneki hakkında bir not gönderdi.
  </para>
     <para>
Tomasz Mrugalski <email>thomson@klub.com.pl</email>: DHCPv6 bölümü için güncelleme gönderdi.
  </para>
     <para>
Jan Minar <email>jjminar@fastmail.fm</email>: Küçük hatalar raporladı.
  </para>
     <para>
Kalin KOZHUHAROV <email>kalin@tar.bz</email>: Pek iyi olmayan bir açıklamayı düzeltti.
  </para>
     <para>
Roel van Dijk <email>rdvdijk@planet.nl</email>: Kırık link bildirdi.
  </para>
     <para>
Catalin Muresan <email>catalin.muresan@astral.ro</email>: Küçük hatalar raporladı.
  </para>
     <para>
Dennis van Dok <email>dvandok@quicknet.nl</email>: Küçük hatalar raporladı.
  </para>
     <para>
Necdet Yücel <email>nyucel@comu.edu.tr</email>: Kırık linkler bildirdi.
  </para>
     <para>
Bryan Vukich : Kırık linkler bildirdi.
  </para>
     <para>
Daniele Masini : Hatalı iptables örneğini raporladı.
  </para>
     <para>
Yao Zhao : IPv6 yönlendirmesini kaldırma açıklamasıyla ilgili hata bildirdi.
  </para>
     <para>
Aaron Kunde : Kırık link ve içerikle ilgili hata bildirdi.
</para>
     <para>
Larry W. Burton : Yazım hatasını bildirdi.
</para>
    </sect4>
   </sect3>
  </sect2>
  <sect2 userlevel="chunkthis" xml:id="ipv6-howto-information-end">
   <title>Son</title>
   <para>
Okuduğunuz için teşekkürler. Umarım yardımcı olmuştur!
  </para>
   <para>
Sorularınızı uygun bir <link linkend="ipv6-howto-information-maillists">e-posta listesine</link> üye olup, durumunuzu tanımlayan mümkün olduğunca fazla bilgiyi ekleyerek sorabilirsiniz.
  </para>
  </sect2>
 </sect1>
</article>
