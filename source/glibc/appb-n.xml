<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-n.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-N"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>N</title>
  </info>
  <glosslist>
   <glossentry>
    <glossterm>
     <literal>int <command>NAME_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-Limits-for-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>NAN</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (GNU):  <xref linkend="glibc-Infinity-and-NaN"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>nan</command> (const char *<varname>tagp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>nanf</command> (const char *<varname>tagp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>nanl</command> (const char *<varname>tagp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>nanosleep</command> (const struct timespec *<varname>requested_time</varname>, struct timespec *<varname>remaining</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (POSIX.1):  <xref linkend="glibc-Sleeping"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>NCCS</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Mode-Data-Types"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>nearbyint</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>nearbyintf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>nearbyintl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>NEW_TIME</command>
    </glossterm>
    <glossdef>
     <para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>NEW_TIME</command>
    </glossterm>
    <glossdef>
     <para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>nextafter</command> (double <varname>x</varname>, double <varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>nextafterf</command> (float <varname>x</varname>, float <varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>nextafterl</command> (long double <varname>x</varname>, long double <varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>nexttoward</command> (double <varname>x</varname>, long double <varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>nexttowardf</command> (float <varname>x</varname>, long double <varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>nexttowardl</command> (long double <varname>x</varname>, long double <varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>nftw</command> (const char *<varname>filename</varname>, __nftw_func_t <varname>func</varname>, int <varname>descriptors</varname>, int <varname>flag</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ftw.h</literal> (XPG4.2):  <xref linkend="glibc-Working-with-Directory-Trees"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>nftw64</command> (const char *<varname>filename</varname>, __nftw64_func_t <varname>func</varname>, int <varname>descriptors</varname>, int <varname>flag</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ftw.h</literal> (Unix98):  <xref linkend="glibc-Working-with-Directory-Trees"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>__nftw64_func_t</command>
    </glossterm>
    <glossdef>
     <para><literal>ftw.h</literal> (GNU):  <xref linkend="glibc-Working-with-Directory-Trees"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>__nftw_func_t</command>
    </glossterm>
    <glossdef>
     <para><literal>ftw.h</literal> (GNU):  <xref linkend="glibc-Working-with-Directory-Trees"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>ngettext</command> (const char *<varname>msgid1</varname>, const char *<varname>msgid2</varname>, unsigned long int <varname>n</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>libintl.h</literal> (GNU):  <xref linkend="glibc-Advanced-gettext-functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>NGROUPS_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-General-Limits"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>nice</command> (int <varname>increment</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Traditional-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>nlink_t</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (POSIX.1):  <xref linkend="glibc-Attribute-Meanings"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>nl_langinfo</command> (nl_item <varname>item</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>langinfo.h</literal> (XOPEN):  <xref linkend="glibc-The-Elegant-and-Fast-Way"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>NO_ADDRESS</command>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Host-Names"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>NOFLSH</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Local-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>NOKERNINFO</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Local-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>NO_RECOVERY</command>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Host-Names"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long int <command>nrand48</command> (unsigned short int <varname>xsubi</varname>[3])</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (SVID):  <xref linkend="glibc-SVID-Random"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>nrand48_r</command> (unsigned short int <varname>xsubi</varname>[3], struct drand48_data *<varname>buffer</varname>, long int *<varname>result</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-SVID-Random"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>NSIG</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):  <xref linkend="glibc-Standard-Signals"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>ntohl</command> (uint32_t <varname>netlong</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Byte-Order"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint16_t <command>ntohs</command> (uint16_t <varname>netshort</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Byte-Order"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ntp_adjtime</command> (struct timex *<varname>tptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/timex.h</literal> (GNU):  <xref linkend="glibc-High-Accuracy-Clock"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ntp_gettime</command> (struct ntptimeval *<varname>tptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/timex.h</literal> (GNU):  <xref linkend="glibc-High-Accuracy-Clock"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>NULL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stddef.h</literal> (ISO):  <xref linkend="glibc-Null-Pointer-Constant"/>.</para>
    </glossdef>
   </glossentry>
  </glosslist>
 </section>
