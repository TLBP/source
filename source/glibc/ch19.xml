<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         ch19.xml
     ******************************************************************** -->
<part xml:id="glibc-Mathematics" xmlns="http://docbook.org/ns/docbook"
      version="5.0" xml:lang="tr">
 <info>
  <title>Matematik</title>
  <titleabbrev>Matematik işlevleri, kullanışlı sabitler, rasgele sayılar.</titleabbrev>
 </info>
 <partintro>
  <para>
Bu oylumda trigonometrik işlevler gibi bir takım matematiksel hesaplamaları yapan işlevlere yer verilmiştir. Bu işlevlerinin çoğunun prototipleri <filename>math.h</filename> başlık dosyasında, karmaşık değerli olanları <filename>complex.h</filename> başlık dosyasında bildirilmiştir.
<indexterm scope="glibc-pg"><primary>math.h</primary></indexterm>
<indexterm scope="glibc-pg"><primary>complex.h</primary></indexterm>
  </para>
  <para>
Tüm matematiksel işlevler herbiri <command>double</command>, <command>float</command> ve <command>long double</command> türünde gerçek sayı argüman alan üçlülerdir. <command>double</command> türünde olanların çoğu ISO C89'da tanımlanmıştır. <command>float</command> ve <command>long double</command> türünde olan sürümleri ise ISO C99'da tanımlanmıştır.
  </para>
  <para>
Bu üçlüdeki hangi işlevin kullanılması gerektiği duruma bağlıdır. Çoğu hesaplamalarda <command>float</command> işlevler en hızlısıdır. Ancak <command>long double</command> işlevler en yüksek hassasiyete sahiptir. <command>double</command> işlevler ise ikisinin arasında kalır. En iyisi ihtiyacınızı görecek en dar türü seçmektir. Ayrıca, tüm makinelerde ayrı bir <command>long double</command> tür yoktur; <command>double</command> ile aynı olabilir.
  </para>
 </partintro>
 <chapter xml:id="glibc-Mathematical-Constants">
  <info>
   <title>Önceden Tanımlı Matemetiksel Sabitler</title>
   <titleabbrev>Sık kullanılan sabitler için hassas sayısal değerler.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>sabitler</secondary></indexterm><filename>math.h</filename> başlık dosyasında çeşitli kullanışlı matematiksel sabitler tanımlanmıştır. Tüm değerler <command>M_</command> ile başlayan önişlemci makroları olarak tanımlanmıştır. Değerler şunlardır:
   </para>
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <literal>M_E</literal>
     </term>
     <listitem>
      <para>
Tabii logaritmanın tabanı.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_LOG2E</literal>
     </term>
     <listitem>
      <para><command>M_E</command>'nin ikilik tabanda logaritması.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_LOG10E</literal>
     </term>
     <listitem>
      <para><command>M_E</command>'nin onluk tabanda logaritması.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_LN2</literal>
     </term>
     <listitem>
      <para><command>2</command>'nin tabii logaritması.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_LN10</literal>
     </term>
     <listitem>
      <para><command>10</command>'un tabii logaritması.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_PI</literal>
     </term>
     <listitem>
      <para>
Pi, çemberin çevresinin çapına oranı.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_PI_2</literal>
     </term>
     <listitem>
      <para>
Pi bölü iki.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_PI_4</literal>
     </term>
     <listitem>
      <para>
Pi bölü dört.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_1_PI</literal>
     </term>
     <listitem>
      <para>
Pi'nin tersi (1/pi).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_2_PI</literal>
     </term>
     <listitem>
      <para>
İki bölü pi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_2_SQRTPI</literal>
     </term>
     <listitem>
      <para>
İki bölü karekök pi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_SQRT2</literal>
     </term>
     <listitem>
      <para>
Karekök iki.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>M_SQRT1_2</literal>
     </term>
     <listitem>
      <para>
Karekök ikinin tersi (ya da karekök 1/2).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
Bu sabitler Ubix98 standardından gelir ve ayrıca 4.4 BSD'de de vardır; bu bakımdan, sadece <command>_BSD_SOURCE</command> ya da <command>_XOPEN_SOURCE=500</command> tanımlıysa ya da bir daha genel özellik makrosu seçiliyse tanımlıdırlar. Bkz. <xref linkend="glibc-Feature-Test-Macros"/>.
   </para>
  <para>
Tüm değerler <command>double</command> türündedir. Bir GNU C kütüphanesi oluşumu olarak bu sabitler ayrıca  <command>long double</command> türünde de tanımlanmıştır.  <command>long double</command> makroların isimlerinin sonuna küçük L (<command>l</command>) harfi eklenmiştir: <command>M_El</command>, <command>M_PIl</command>, ... Bunlar sadece <command>_GNU_SOURCE</command> tanımlıysa kullanılabilir.
   </para>
  <para>
   <indexterm scope="glibc-vr">
    <primary>PI</primary>
   </indexterm>
   <note>
    <para>Bazı yazılımlar <command>M_PI</command> makrosu ile aynı değerde <command>PI</command> isimli bir sabit kullanırlar. Bu sabit standart değildir; bazı eski ATT başlık dosyalarında görünür, bir de Stroustrup'un C++ kitabında bahsedilir. Kullanıcının isim uzayını ihlâl ettiğinden GNU C kütüphanesinde tanımlanmamıştır. Böyle yazılımları düzeltmek kolaydır: ya her <command>PI</command>'yi <command>M_PI</command> ile değiştirirsiniz ya da derleyici komut satırına <command>-DPI=M_PI</command> seçeneğini eklersiniz.</para>
   </note>
  </para>
 </chapter>
 <chapter xml:id="glibc-Trig-Functions">
  <info>
   <title>Trigonometrik İşlevler</title>
   <titleabbrev>Sinüs, kosinüs, tanjant ve arkadaşları.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>trigonometrik işlevler</secondary></indexterm>
Bunlar bildiğiniz <command>sin</command>, <command>cos</command> ve <command>tan</command> işlevleridir. Bu işlevlerin argümanları radyan cinsindendir; pi radyan 180 dereceye eşittir.
   </para>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>pi (trigonometrik sabit)</secondary></indexterm>
Matematik kütüphanesi (<command>-lm</command>) normalde pi sayısını <command>double</command> türünde bir yaklaşıklık olarak <command>M_PI</command> ile tanımlar. Kesin ISO ve/veya POSIX uyumluluğu istenirse, bu sabit tanımsızdır, ama onu kolayca kendiniz tanımlayabilirsiniz:
   </para>
  <para>
   <screen>#define M_PI 3.14159265358979323846264338327</screen>
  </para>
  <para>
Ayrıca pi sayısını <command>acos (-1.0)</command> ifadesi ile de hesaplayabilirsiniz.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>sin</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sinf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sinl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-sin">
      <funcdef>double <command>sin</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sinf">
      <funcdef>float <command>sinf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sinl">
      <funcdef>long double <command>sinl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> radyan cinsinden verildiğinde <varname>x</varname>'in sinüsünü hesaplar. Dönüş değeri <command>-1</command> ile <command>1</command> arasındadır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cos</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cosf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cosl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cos">
      <funcdef>double <command>cos</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cosf">
      <funcdef>float <command>cosf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cosl">
      <funcdef>long double <command>cosl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> radyan cinsinden verildiğinde <varname>x</varname>'in kosinüsünü hesaplar. Dönüş değeri <command>-1</command> ile <command>1</command> arasındadır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>tan</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>tanf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>tanl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-tan">
      <funcdef>double <command>tan</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-tanf">
      <funcdef>float <command>tanf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-tanl">
      <funcdef>long double <command>tanl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> radyan cinsinden verildiğinde <varname>x</varname>'in tanjantını hesaplar.
   </para>
     <para>
Matemetiksel olarak tanjant işlevi pi/2'nin tek katlarında sonsuza gider. Eğer <varname>x</varname> argümanı bu değerlerden biri ise <command>tan</command> işlevi taşma sinyalleyecektir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para><command>sin</command> ve <command>cos</command> işlevlerinin kullanıldığı çoğu uygulamada aynı anda aynı açının hem sinüsü hem de kosinüsü gerekir. Böyle durumlar için kütüphanede bir işlev bulunur.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>sincos</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sincosf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sincosl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-sincos">
      <funcdef>void <command>sincos</command></funcdef>
      <paramdef>(double  <varname>x</varname>,
 double *<varname>sinx</varname>,
 double *<varname>cosx</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sincosf">
      <funcdef>void <command>sincosf</command></funcdef>
      <paramdef>(float  <varname>x</varname>,
 float *<varname>sinx</varname>,
 float *<varname>cosx</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sincosl">
      <funcdef>void <command>sincosl</command></funcdef>
      <paramdef>(long double  <varname>x</varname>,
 long double *<varname>sinx</varname>,
 long double *<varname>cosx</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> radyan cinsinden verildiğinde <varname>x</varname>'in sinüsünü <varname>*sinx</varname> içinde,
kosinüsünü <varname>*cosx</varname> içinde döndürür. Her iki değer de <command>-1</command> ile<command>1</command> arasındadır.
   </para>
     <para>
Bu işlev bir GNU oluşumudur.  Taşınabilir yazılımlar bu işlevin yokluğunu gerektirir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para xml:id="glibc-csin-index"><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>trigonometrik işlevler</secondary><tertiary>karmaşık sayılarla</tertiary></indexterm>
ISO C99 trigonometrik işlevlerin karmaşık sayılarla çalışan çeşitlerini de tanımlamıştır. GNU C kütüphanesi bu işlevleri içerir, fakat sadece derleyici standart tarafından tanımlanan yeni karmaşık sayı türlerini destekliyorsa bunlar kullanılabilir. (Bu kılavuz yazılırken GCC karmaşık sayıları desteklemekteydi, ancak gerçeklemede hatalar vardı.)
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>csin</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>csinf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>csinl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-csin">
      <funcdef>complex double <command>csin</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-csinf">
      <funcdef>complex float <command>csinf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-csinl">
      <funcdef>complex long double <command>csinl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname> karmaşık açısının karmaşık sinüsünü hesaplar. Karmaşık sinüsün matematiksel tanımı:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    sin (z) = 1/(2*i) * (exp (z*i) - exp (-z*i))</literallayout>
     </para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>ccos</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ccosf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ccosl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-ccos">
      <funcdef>complex double <command>ccos</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ccosf">
      <funcdef>complex float <command>ccosf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ccosl">
      <funcdef>complex long double <command>ccosl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname> karmaşık açısının karmaşık kosinüsünü hesaplar. Karmaşık kosinüsün matematiksel tanımı:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    cos (z) = 1/2 * (exp (z*i) + exp (-z*i))</literallayout>
     </para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>ctan</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ctanf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ctanl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-ctan">
      <funcdef>complex double <command>ctan</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ctanf">
      <funcdef>complex float <command>ctanf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ctanl">
      <funcdef>complex long double <command>ctanl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname> karmaşık açısının karmaşık tanjantını hesaplar. Karmaşık tanjantın matematiksel tanımı:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    tan (z) = -i * (exp (z*i) - exp (-z*i)) / (exp (z*i) + exp (-z*i))
</literallayout>
     </para>
     <para>
Karmaşık tanjantın <literal>pi/2 + 2n</literal>'de kutupları vardır; burada <literal>n</literal> bir tamsayıdır.  <command>ctan</command> işlevi <varname>z</varname> bu kutba çok yakınsa taşma sinyalleyebilir.
  </para>
    </funcdescr>
   </funcsynopsis>
  </para>
 </chapter>
 <chapter xml:id="glibc-Inverse-Trig-Functions">
  <info>
   <title>Ters Trigonometrik İşlevler</title>
   <titleabbrev>Ark sinüs, ark kosinüs, vs.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>trigonometrik işlevler</secondary><tertiary>ters işlevler</tertiary></indexterm>
Bunlar sinüs, kosinüs ve tanjant işlevlerinin ters işlevleri olan (sırasıyla) ark sinüs, ark kosinüs ve ark tanjant işlevleridir.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>asin</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>asinf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>asinl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-asin">
      <funcdef>double <command>asin</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-asinf">
      <funcdef>float <command>asinf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-asinl">
      <funcdef>long double <command>asinl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler sinüsü <varname>x</varname> olan açı ile döner. Dönüş değerleri radyan cinsindendir. Matematiksel olarak böyle sonsuz sayıda değer vardır; işlev asıl kol üzerinde yani  <command>-pi/2</command> ile <command>pi/2</command> (dahil) arasında bir değerle döner.
   </para>
     <para>
Ark sinüs işlevi matematiksel olarak <command>-1</command> ile <command>1</command> arasındaki sahada tanımlıdır. Eğer <varname>x</varname> bu sahanın dışındaysa, <command>asin</command> bir saha hatası sinyaller.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>acos</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>acosf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>acosl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-acos">
      <funcdef>double <command>acos</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-acosf">
      <funcdef>float <command>acosf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-acosl">
      <funcdef>long double <command>acosl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler kosinüsü <varname>x</varname> olan açı ile döner. Dönüş değerleri radyan cinsindendir. Matematiksel olarak böyle sonsuz sayıda değer vardır; işlev asıl kol üzerinde yani  <command>0</command> ile <command>pi</command> (dahil) arasında bir değerle döner.
   </para>
     <para>
Ark kosinüs işlevi matematiksel olarak <command>-1</command> ile <command>1</command> arasındaki sahada tanımlıdır. Eğer <varname>x</varname> bu sahanın dışındaysa, <command>acos</command> bir saha hatası sinyaller.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>atan</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>atanf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>atanl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-atan">
      <funcdef>double <command>atan</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-atanf">
      <funcdef>float <command>atanf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-atanl">
      <funcdef>long double <command>atanl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler tanjantı <varname>x</varname> olan açı ile döner. Dönüş değerleri radyan cinsindendir. Matematiksel olarak böyle sonsuz sayıda değer vardır; işlev asıl kol üzerinde yani  <command>-pi/2</command> ile <command>pi/2</command> (dahil) arasında bir değerle döner.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>atan2</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>atan2f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>atan2l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-atan2">
      <funcdef>double <command>atan2</command></funcdef>
      <paramdef>(double <varname>y</varname>,
 double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-atan2f">
      <funcdef>float <command>atan2f</command></funcdef>
      <paramdef>(float <varname>y</varname>,
 float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-atan2l">
      <funcdef>long double <command>atan2l</command></funcdef>
      <paramdef>(long double <varname>y</varname>,
 long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler tanjantı <varname>y</varname><literal>/</literal><varname>x</varname> olan açı ile döner, fakat her iki argümanın işaretinden sonucun hangi dörtte bir çemberde olduğu saptanır.  Dönüş değeri radyan cinsinden <command>-pi</command> ile <command>pi</command> (dahil) arasındadır.
   </para>
     <para>
Eğer <varname>x</varname> ve <varname>y</varname> düzlem üzerindeki bir noktanın koordinatları ise <command>atan2</command> işlevi, merkez ile bu nokta arasında çizilen doğrunun x ekseni ile yaptığı açıyı işareti ile döndürür. Bu durumda, <command>atan2</command> işlevi kartezyen koordinatları kutupsal koordinatlara dönüştürmek için kullanılabilir. (Açısal koordinatları hesaplamak için <command>hypot</command> kullanın; bkz. <xref linkend="glibc-Exponents-and-Logarithms"/>.)
   </para>
     <para>
Eğer <varname>x</varname> ve <varname>y</varname> değerlerinin ikisi de sıfırsa, işlev sıfırla döner.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para xml:id="glibc-casin-index"><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>trigonometrik işlevler</secondary><tertiary>ters karmaşık işlevler</tertiary></indexterm>
ISO C99 ters trigonometrik işlevlerin karmaşık sürümlerini de tanımlamıştır.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>casin</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>casinf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>casinl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-casin">
      <funcdef>complex double <command>casin</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-casinf">
      <funcdef>complex float <command>casinf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-casinl">
      <funcdef>complex long double <command>casinl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler karmaşık sinüsü <varname>z</varname> olan açı ile döner. Dönüş değerleri radyan cinsindendir.
   </para>
     <para>
Gerçek sayı değerli işlevlerin tersine, <command>casin</command> işlevi tüm <varname>z</varname> değerleri için tanımlıdır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cacos</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cacosf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cacosl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cacos">
      <funcdef>complex double <command>cacos</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cacosf">
      <funcdef>complex float <command>cacosf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cacosl">
      <funcdef>complex long double <command>cacosl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler karmaşık kosinüsü <varname>z</varname> olan açı ile döner. Dönüş değerleri radyan cinsindendir.
   </para>
     <para>
Gerçek sayı değerli işlevlerin tersine, <command>cacos</command> işlevi tüm <varname>z</varname> değerleri için tanımlıdır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>catan</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>catanf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>catanl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-catan">
      <funcdef>complex double <command>catan</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-catanf">
      <funcdef>complex float <command>catanf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-catanl">
      <funcdef>complex long double <command>catanl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler karmaşık tanjantı <varname>z</varname> olan açı ile döner. Dönüş değerleri radyan cinsindendir.
  </para>
    </funcdescr>
   </funcsynopsis>
  </para>
 </chapter>
 <chapter xml:id="glibc-Exponents-and-Logarithms">
  <info>
   <title>Üstel ve Logaritmik İşlevler</title>
   <titleabbrev>Ayrıca <command>pow</command> ve <command>sqrt</command>.</titleabbrev>
  </info>
  <para>
   <indexterm scope="glibc-cp">
    <primary>matematik</primary>
    <secondary>üstel işlevler</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>matematik</primary>
    <secondary>logaritmik işlevler</secondary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>exp</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>expf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>expl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-exp">
      <funcdef>double <command>exp</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-expf">
      <funcdef>float <command>expf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-expl">
      <funcdef>long double <command>expl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>e</command> (tabii logaritmanın tabanı) üssü <varname>x</varname>'i hesaplar.
   </para>
     <para>
Sonuç gösterilemeyecek kadar büyükse işlev taşma hatası sinyaller.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>exp2</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>exp2f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>exp2l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-exp2">
      <funcdef>double <command>exp2</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-exp2f">
      <funcdef>float <command>exp2f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-exp2l">
      <funcdef>long double <command>exp2l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>2</command> üssü <varname>x</varname>'i hesaplar. Matematiksel olarak, <command>exp2 (x)</command> ile <command>exp (x * log (2))</command> aynıdır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>exp10</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>exp10f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>exp10l</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>pow10</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>pow10f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>pow10l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-exp10">
      <funcdef>double <command>exp10</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-exp10f">
      <funcdef>float <command>exp10f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-exp10l">
      <funcdef>long double <command>exp10l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-pow10">
      <funcdef>double <command>pow10</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-pow10f">
      <funcdef>float <command>pow10f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-epow10l">
      <funcdef>long double <command>pow10l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>10</command> üssü <varname>x</varname>'i hesaplar. Matematiksel olarak, <command>exp10 (x)</command> ile <command>exp (x * log (10))</command> aynıdır.
   </para>
     <para>
Bu işlevler GNU oluşumudur. <command>exp</command> ve <command>exp2</command> işlevleriyle isim benzerliğinden dolayı <command>exp10</command> tercih edilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>log</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>logf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>logl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-log">
      <funcdef>double <command>log</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-logf">
      <funcdef>float <command>logf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-logl">
      <funcdef>long double <command>logl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in tabii logaritmasını hesaplar. <command>exp (log (<varname>x</varname>))</command> ifadesi matematikte kesinlikle, C'de ise yaklaşık olarak <varname>x</varname>'e eşittir.
   </para>
     <para>
Eğer <varname>x</varname> negatifse, <command>log</command> işlevi bir saha hatası sinyaller. Eğer <varname>x</varname> sıfırsa, negatif sonsuz döner; <varname>x</varname> sıfıra çok yakınsa taşma sinyallenebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>log10</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>log10f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>log10l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-log10">
      <funcdef>double <command>log10</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-log10f">
      <funcdef>float <command>log10f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-log10l">
      <funcdef>long double <command>log10l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in 10 tabanına göre logaritması ile döner. <command>log10 (<varname>x</varname>)</command> ifadesi <command>log (<varname>x</varname>) / log (10)</command> ifadesine eşittir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>log2</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>log2f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>log2l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-log2">
      <funcdef>double <command>log2</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-log2f">
      <funcdef>float <command>log2f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-log2l">
      <funcdef>long double <command>log2l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in 2 tabanına göre logaritması ile döner. <command>log2 (<varname>x</varname>)</command> ifadesi <command>log (<varname>x</varname>) / log (2)</command> ifadesine eşittir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>logb</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>logbf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>logbl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-logb">
      <funcdef>double <command>logb</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-logbf">
      <funcdef>float <command>logbf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-logbl">
      <funcdef>long double <command>logbl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> sonucunu veren üstel sayının üssünü bir gerçek sayı olarak döndürür. Eğer <command>FLT_RADIX</command> iki ise, <command>logb</command> işlevi büyük olasılıkla daha hızlı olmak dışında <command>floor (log2 (x))</command> çağrısına eşdeğerdir.
   </para>
     <para>
Eğer <varname>x</varname> normalleştirilememiş bir değerse, işlev normalleştirilmiş değerle döner. Eğer <varname>x</varname> sonsuzsa (pozitif ya da negatif) ya da sıfırsa, işlev sonsuzla döner ve hata sinyallemez.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>ilogb</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ilogbf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ilogbl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-ilogb">
      <funcdef>int <command>ilogb</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ilogbf">
      <funcdef>int <command>ilogbf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ilogbl">
      <funcdef>int <command>ilogbl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler işaretli tamsayı değerler döndürmeleri dışında <command>logb</command> işlevlerine eşdeğerdir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
Tamsayılarla sonsuz ve NaN gösterilemediğinden <command>ilogb</command> bunların yerine sonucu yansıtmayan bir tamsayı ile döner.  <filename>math.h</filename> dosyasında tanımlı sabitlerle bu durumu sınayabilirsiniz.
   </para>
  <para>
   <indexterm scope="glibc-vr">
    <primary>FP_ILOGB0</primary>
   </indexterm>
   <funcsynopsis>
    <funcprototype role="makro" xml:id="glibc-FP_ILOGB0">
     <funcdef>int <command>FP_ILOGB0</command></funcdef>
     <paramdef/>
    </funcprototype>
    <funcdescr>
     <para><command>ilogb</command> işlevi argümanı <command>0</command> ise bu değerle döner.  Sayısal değeri ya <command>INT_MIN</command> ya da <command>-INT_MAX</command>'tır.
   </para>
     <para>
Bu makro ISO C99'da tanımlanmıştır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-vr">
    <primary>FP_ILOGBNAN</primary>
   </indexterm>
   <funcsynopsis>
    <funcprototype role="makro" xml:id="glibc-FP_ILOGBNAN">
     <funcdef>int <command>FP_ILOGBNAN</command></funcdef>
     <paramdef/>
    </funcprototype>
    <funcdescr>
     <para><command>ilogb</command> işlevi argümanı <command>NaN</command> ise bu değerle döner. Sayısal değeri ya <command>INT_MIN</command> ya da <command>-INT_MAX</command>'tır.
   </para>
     <para>
Bu makro ISO C99'da tanımlanmıştır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
Bu değerler sisteme özeldir, hatta aynı bile olabilirler. <command>ilogb</command> işlevinin sonucunu sınamanın uygun yolu şöyledir:
   </para>
  <para>
   <screen>
i = ilogb (f);
if (i == FP_ILOGB0 || i == FP_ILOGBNAN)
  {
    if (isnan (f))
      {
        /* NaN'ı elde edelim.  */
      }
    else if (f  == 0.0)
      {
        /* 0.0'ı elde edelim.  */
      }
    else
      {
        /* Diğer değerler, +Inf gibi.  */
      }
  }
</screen>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>pow</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>powf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>powl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-pow">
      <funcdef>double <command>pow</command></funcdef>
      <paramdef>(double <varname>taban</varname>,
 double <varname>üs</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-powf">
      <funcdef>float <command>powf</command></funcdef>
      <paramdef>(float <varname>taban</varname>,
 float <varname>üs</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-powl">
      <funcdef>long double <command>powl</command></funcdef>
      <paramdef>(long double <varname>taban</varname>,
 long double <varname>üs</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bunlar genel amaçlı üstel işlevlerdir ve <varname>taban</varname> üssü <varname>üs</varname> ile dönerler.
   </para>
     <para>
Matematiksel olarak, <varname>taban</varname> negatifse ve <varname>üs</varname> bir tamsayı değer değilse <command>pow</command> bir karmaşık sayı ile dönerdi. <command>pow</command> böyle yapmaz, bir saha hatası sinyaller. <command>pow</command> ayrıca hedef türe bağlı olarak alttan ya da üstten taşabilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-cp">
    <primary>matematik</primary>
    <secondary>karekök işlevi</secondary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sqrt</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sqrtf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sqrtl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-sqrt">
      <funcdef>double <command>sqrt</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sqrtf">
      <funcdef>float <command>sqrtf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sqrtl">
      <funcdef>long double <command>sqrtl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in negatif olmayan karekökü ile dönerler.
   </para>
     <para>
Eğer <varname>x</varname> negatifse, <command>sqrt</command> işlevi bir saha hatası sinyaller. Matematiksel olarak, bir karmaşık sayı ile dönerdi.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cbrt</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cbrtf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cbrtl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cbrt">
      <funcdef>double <command>cbrt</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cbrtf">
      <funcdef>float <command>cbrtf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cbrtl">
      <funcdef>long double <command>cbrtl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in kübkökü ile dönerler. Başarısız olamazlar; Gösterilebilen her gerçek sayının gösterilebilen bir kübkökü daima vardır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>hypot</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>hypotf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>hypotl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-hypot">
      <funcdef>double <command>hypot</command></funcdef>
      <paramdef>(double <varname>x</varname>,
 double <varname>y</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-hypotf">
      <funcdef>float <command>hypotf</command></funcdef>
      <paramdef>(float <varname>x</varname>,
 float <varname>y</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-hypotl">
      <funcdef>long double <command>hypotl</command></funcdef>
      <paramdef>(long double <varname>x</varname>,
 long double <varname>y</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>sqrt (<varname>x</varname>*<varname>x</varname> + <varname>y</varname>*<varname>y</varname>)</command> işleminin sonucu ile döner. Bu değer, dik kenarları <varname>x</varname> ve <varname>y</varname> olan bir dik üçgenin hipotenüsünün uzunluğudur; aynı zamanda (0, 0) ve (<varname>x</varname>, <varname>y</varname>) noktaları arasındaki mesafedir.  Doğrudan formülü hesaplatmak yerine bu işlevi kullanırsanız hassasiyet kaybı olmaz. Ayrıca, <xref linkend="glibc-Absolute-Value"/> bölümündeki <command>cabs</command> işlevine de bakınız.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>expm1</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>expm1f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>expm1l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-expm1">
      <funcdef>double <command>expm1</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-expm1f">
      <funcdef>float <command>expm1f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-expm1l">
      <funcdef>long double <command>expm1l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>exp (<varname>x</varname>) - 1</command> ifadesine eşdeğer bir değerle döner. <varname>x</varname> sıfıra çok yakın olduğunda bile en doğru sonucu verecek şekilde hesaplama yapar (<command>exp (<varname>x</varname>) - 1</command> ifadesinde çıkarma işleminin iki terimi yaklaşık eşit olduğunda yeterince doğru sonuç elde edilemeyebilirdi).
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>log1p</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>log1pf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>log1pl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-log1p">
      <funcdef>double <command>log1p</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-log1pf">
      <funcdef>float <command>log1pf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-log1pl">
      <funcdef>long double <command>log1pl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>log (1 + <varname>x</varname>)</command>. ifadesine eşdeğer bir değerle döner. <varname>x</varname> sıfıra çok yakın olduğunda bile en doğru sonucu verecek şekilde hesaplama yapar.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para xml:id="glibc-cexp-index"><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>üstel işlevler</secondary><tertiary>karmaşık sayılarla</tertiary></indexterm><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>logaritmik işlevler</secondary><tertiary>karmaşık sayılarla</tertiary></indexterm>
ISO C99 üstel ve logaritmik işlevlerin karmaşık sayılarla işlem yapanlarını da tanımlamıştır.
   </para>
  <para>
</para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cexp</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cexpf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cexpl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cexp">
      <funcdef>complex double <command>cexp</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cexpf">
      <funcdef>complex float <command>cexpf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cexpl">
      <funcdef>complex long double <command>cexpl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>e</command> üssü <varname>z</varname> ile döner. Bu işlemin matematiksel ifadesi:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    exp (z) = exp (creal (z)) * (cos (cimag (z)) + I * sin (cimag (z)))
</literallayout>
     </para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>clog</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>clogf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>clogl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-clog">
      <funcdef>complex double <command>clog</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-clogf">
      <funcdef>complex float <command>clogf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-clogl">
      <funcdef>complex long double <command>clogl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname>'nin tabii loaritmasını hesaplar. Bu işlemin matematiksel ifadesi:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    log (z) = log (cabs (z)) + I * carg (z)
</literallayout>
     </para>
     <para><command>clog</command> işlevinin 0'da bir kutbu vardır ve <varname>z</varname> sıfıra çok yakın olduğunda taşma sinyalleyecektir. <varname>z</varname>'nin diğer değerleri için en doğru sonucu verir.
      </para>
     <para>
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>clog10</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>clog10f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>clog10l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-clog10">
      <funcdef>complex double <command>clog10</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-clog10f">
      <funcdef>complex float <command>clog10f</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-clog10l">
      <funcdef>complex long double <command>clog10l</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname> karmaşık sayısının 10 tabanına göre logaritmasını hesaplar. Bu işlemin matematiksel ifadesi:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    log (z) = log10 (cabs (z)) + I * carg (z)
</literallayout>
     </para>
     <para>
Bu işlevler GNU oluşumudur.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>csqrt</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>csqrtf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>csqrtl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-csqrt">
      <funcdef>complex double <command>csqrt</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-csqrtf">
      <funcdef>complex float <command>csqrtf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-csqrtl">
      <funcdef>complex long double <command>csqrtl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname> karmaşık sayısının karekökünü hesaplar. Gerçek sayılı eşdeğerlerinin tersine bu işlevler tüm <varname>z</varname> değerleri için tanımlıdır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cpow</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cpowf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cpowl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cpow">
      <funcdef>complex double <command>cpow</command></funcdef>
      <paramdef>(complex double <varname>taban</varname>,
 complex double <varname>üs</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cpowf">
      <funcdef>complex float <command>cpowf</command></funcdef>
      <paramdef>(complex float <varname>taban</varname>,
 complex float <varname>üs</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cpowl">
      <funcdef>complex long double <command>cpowl</command></funcdef>
      <paramdef>(complex long double <varname>taban</varname>,
 complex long double <varname>üs</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>taban</varname> üssü <varname>üs</varname> ile döner. Yapılan işlem <command>cexp (us * clog (taban))</command> çağrısına eşdeğerdir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
 </chapter>
 <chapter xml:id="glibc-Hyperbolic-Functions">
  <info>
   <title>Hiperbolik İşlevler</title>
   <titleabbrev>sinh, cosh, tanh, vs.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>hiperbolik işlevler</secondary></indexterm>
Bu kısımdaki işlevler üstel işlevlerle ilişkilidir; bkz. <xref linkend="glibc-Exponents-and-Logarithms"/>.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>sinh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sinhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>sinhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-sinh">
      <funcdef>double <command>sinh</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sinhf">
      <funcdef>float <command>sinhf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-sinhl">
      <funcdef>long double <command>sinhl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in hiperbolik sinüsünü hesaplar. İşlem, <command>(exp (<varname>x</varname>) - exp (-<varname>x</varname>)) / 2</command> ifadesine eşdeğerdir.  <varname>x</varname> çok büyükse işlevler taşma sinyalleyebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cosh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>coshf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>coshl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cosh">
      <funcdef>double <command>cosh</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-coshf">
      <funcdef>float <command>coshf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-coshl">
      <funcdef>long double <command>coshl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in hiperbolik kosinüsünü hesaplar. İşlem, <command>(exp (<varname>x</varname>) + exp (-<varname>x</varname>)) / 2</command> ifadesine eşdeğerdir.  <varname>x</varname> çok büyükse işlevler taşma sinyalleyebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>tanh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>tanhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>tanhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-tanh">
      <funcdef>double <command>tanh</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-tanhf">
      <funcdef>float <command>tanhf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-tanhl">
      <funcdef>long double <command>tanhl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in hiperbolik tanjantını hesaplar. İşlem, <command>sinh (<varname>x</varname>) / cosh (<varname>x</varname>)</command> ifadesine eşdeğerdir.  <varname>x</varname> çok büyükse işlevler taşma sinyalleyebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para xml:id="glibc-csinh-index"><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>hiperbolik işlevler</secondary><tertiary>karmaşık sayılarla</tertiary></indexterm>
Bu hiperbolik işlevlerin karmaşık sayılarla çalışan benzerleri vardır.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>csinh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>csinhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>csinhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-csinh">
      <funcdef>complex double <command>csinh</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-csinhf">
      <funcdef>complex float <command>csinhf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-csinhl">
      <funcdef>complex long double <command>csinhl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname>'nin karmaşık hiperbolik sinüsünü hesaplar. İşlem, <command>(exp (<varname>z</varname>) - exp (-<varname>z</varname>)) / 2</command> ifadesine eşdeğerdir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>ccosh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ccoshf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ccoshl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-ccosh">
      <funcdef>complex double <command>ccosh</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ccoshf">
      <funcdef>complex float <command>ccoshf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ccoshl">
      <funcdef>complex long double <command>ccoshl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname>'nin karmaşık hiperbolik kosinüsünü hesaplar. İşlem, <command>(exp (<varname>z</varname>) + exp (-<varname>z</varname>)) / 2</command> ifadesine eşdeğerdir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>ctanhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ctanh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ctanhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-ctanh">
      <funcdef>complex double <command>ctanh</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ctanhf">
      <funcdef>complex float <command>ctanhf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ctanhl">
      <funcdef>complex long double <command>ctanhl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>z</varname>'nin karmaşık hiperbolik tanjantını hesaplar. İşlem, <command>csinh (<varname>z</varname>) / ccosh (<varname>z</varname>)</command> ifadesine eşdeğerdir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-cp">
    <primary>matematik</primary>
    <secondary>ters hiperbolik işlevler</secondary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>asinh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>asinhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>asinhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-asinh">
      <funcdef>double <command>cosh</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-asinhf">
      <funcdef>float <command>asinhf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-asinhl">
      <funcdef>long double <command>asinhl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler hiperbolik sinüsü <varname>x</varname> olan açıyı hesaplar.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>acosh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>acoshf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>acoshl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-acosh">
      <funcdef>double <command>acosh</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-acoshf">
      <funcdef>float <command>acoshf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-acoshl">
      <funcdef>long double <command>acoshl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler hiperbolik kosinüsü <varname>x</varname> olan açıyı hesaplar.  Eğer <varname>x </varname><literal>&lt; </literal><command>1</command> ise, <command>acosh</command> bir saha hatası sinyaller.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>atanh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>atanhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>atanhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-atanh">
      <funcdef>double <command>atanh</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-atanhf">
      <funcdef>float <command>atanhf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-atanhl">
      <funcdef>long double <command>atanhl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler hiperbolik tanjantı <varname>x</varname> olan açıyı hesaplar.   <varname>x</varname>'in mutlak değeri <command>1</command>'den büyükse, <command>atanh</command> bir daha hatası sinyaller; <command>1</command>'e eşitse, <command>atanh</command> sonsuz ile döner.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-cp">
    <primary>matematik</primary>
    <secondary>ters hiperbolik işlevler</secondary>
    <tertiary>karmaşık sayılarla</tertiary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>casinh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>casinhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>casinhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-casinh">
      <funcdef>complex double <command>casinh</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-casinhf">
      <funcdef>complex float <command>casinhf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-casinhl">
      <funcdef>complex long double <command>casinhl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler karmaşık hiperbolik sinüsü <varname>z</varname> olan açıyı hesaplar.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>cacosh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cacoshf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>cacoshl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-cacosh">
      <funcdef>complex double <command>cacosh</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cacoshf">
      <funcdef>complex float <command>cacoshf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-cacoshl">
      <funcdef>complex long double <command>cacoshl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler karmaşık hiperbolik kosinüsü <varname>z</varname> olan açıyı hesaplar. Gerçek sayılı eşdeğerlerinin tersine bu işlevler için <varname>z</varname>'nin değeri ile ilgili bir sınırlama yoktur.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>catanh</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>catanhf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>catanhl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-catanh">
      <funcdef>complex double <command>catanh</command></funcdef>
      <paramdef>(complex double <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-catanhf">
      <funcdef>complex float <command>catanhf</command></funcdef>
      <paramdef>(complex float <varname>z</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-catanhl">
      <funcdef>complex long double <command>catanhl</command></funcdef>
      <paramdef>(complex long double <varname>z</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler karmaşık hiperbolik tanjantı <varname>z</varname> olan açıyı hesaplar. Gerçek sayılı eşdeğerlerinin tersine bu işlevler için <varname>z</varname>'nin değeri ile ilgili bir sınırlama yoktur.
    </para>
    </funcdescr>
   </funcsynopsis>
  </para>
 </chapter>
 <chapter xml:id="glibc-Special-Functions">
  <info>
   <title>Özel İşlevler</title>
   <titleabbrev>Bessel, gamma, erf.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>özel işlevler</secondary></indexterm><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>Bessel işlevleri</secondary></indexterm><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>gamma işlevleri</secondary></indexterm>
Bu işlevler kimi zaman faydalı olan biraz daha yabancıl matematiksel işlevlerdir. Şimdilik sadece gerçek sayılarla çalışan sürümleri vardır.
   </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>erf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>erff</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>erfl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-erf">
      <funcdef>double <command>erf</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-erff">
      <funcdef>float <command>erff</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-erfl">
      <funcdef>long double <command>erfl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in hata işlevi ile döner. Hata işlevi şöyle tanımlanır:
    </para>
     <para>
      <literallayout indent="0" class="normal">
    erf (x) = 2/sqrt(pi) * 0'dan x'e integral exp(-t^2) dt
</literallayout>
     </para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>erfc</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>erfcf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>erfcl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-erfc">
      <funcdef>double <command>erfc</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-erfcf">
      <funcdef>float <command>erfcf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-erfcl">
      <funcdef>long double <command>erfcl</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <command>1.0 - erf(<varname>x</varname>)</command> ile döner, fakat hesaplama <varname>x</varname> çok büyük olduğunda yuvarlayamama hatalarından kaçınan bir yöntemle yapılır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>lgamma</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>lgammaf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>lgammal</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-lgamma">
      <funcdef>double <command>lgamma</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-lgammaf">
      <funcdef>float <command>lgammaf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-lgammal">
      <funcdef>long double <command>lgammal</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'in gamma işlevinin mutlak değerinin tabii logartiması ile döner. Gamma işlevi şöyle tanımlanır:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    gamma (x) = 0'dan sonsuza integral  t^(x-1) e^-t dt
</literallayout>
     </para>
     <para><indexterm scope="glibc-vr"><primary>signgam</primary></indexterm>
Gamma işlevinin işareti <filename>math.h</filename> dosyasında tanımlanmış olan <varname>signgam</varname> genel değişkeninde saklanır. Saklanan değer, eğer ara sonuç sıfıra eşit ya da büyükse <command>1</command>, değilse <command>-1</command>'dir.
   </para>
     <para>
Gerçek gamma işlevini hesaplamak için ya <command>tgamma</command> işlevini kullanın ya da değerleri şöyle hesaplayın:
   </para>
     <para>
      <screen>lgam = lgamma(x);
gam  = signgam * exp(lgam);
</screen>
     </para>
     <para>
Gamma işlevinin pozitif olmayan tamsayılarda belirsizlikleri vardır. <command>lgamma</command> işlevi böyle bir belirsizlikte sıfırla bölme olağandışılığı sinyaller.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>lgamma_r</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>lgammaf_r</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>lgammal_r</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-llgamma_r">
      <funcdef>double <command>lgamma_r</command></funcdef>
      <paramdef>(double <varname>x</varname>,
 int   *<varname>signp</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-lgammaf_r">
      <funcdef>float <command>lgammaf_r</command></funcdef>
      <paramdef>(float <varname>x</varname>,
 int  *<varname>signp</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="lgammal_r">
      <funcdef>long double <command>lgammal_r</command></funcdef>
      <paramdef>(long double <varname>x</varname>,
 int        *<varname>signp</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para><command>lgamma_r</command> işlevi işareti <varname>signgam</varname> genel değişkenine yerleştirmek yerine kullanıcı tanımlı <varname>*signp</varname>'ye yerleştirmesi dışında <command>lgamma</command> işlevinin benzeridir. Yani <command>lgamma</command> işlevinin evreselidir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>gamma</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>gammaf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>gammal</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-gamma">
      <funcdef>double <command>gamma</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-gammaf">
      <funcdef>float <command>gammaf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-gammal">
      <funcdef>long double <command>gammal</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler uyumluluk adına vardır, <command>lgamma</command>'ların eşdeğerleridir. <command>lgamma</command> ISO C99'da tanımlanmış olarak <command>gamma</command> işlevinden daha standart olduğundan bu işlevler yerine <command>lgamma</command>'ları kullanmalısınız.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>tgamma</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>tgammaf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>tgammal</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-tgamma">
      <funcdef>double <command>tgamma</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-tgammaf">
      <funcdef>float <command>tgammaf</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-tgammal">
      <funcdef>long double <command>tgammal</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname>'e gamma işlevini uygular. Gamma işlevi şöyle tanımlanır:
   </para>
     <para>
      <literallayout indent="0" class="normal">
    gamma (x) = 0'dan sonsuza integral t^(x-1) e^-t dt
</literallayout>
     </para>
     <para>
Bu işlev ISO C99'da tanımlanmıştır.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>j0</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>j0f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>j0l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-j0">
      <funcdef>double <command>j0</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-j0f">
      <funcdef>float <command>j0f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-j0l">
      <funcdef>long double <command>j0l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> üssü sıfırın birinci türden Bessel işlevini hesaplar. <varname>x</varname> çok büyük olduğunda işlev taşma sinyalleyebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>j1</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>j1f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>j1l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-j1">
      <funcdef>double <command>j1</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-j1f">
      <funcdef>float <command>j1f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-j1l">
      <funcdef>long double <command>j1l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> üssü birin birinci türden Bessel işlevini hesaplar. <varname>x</varname> çok büyük olduğunda işlev taşma sinyalleyebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>jn</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>jnf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>jnl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-jn">
      <funcdef>double <command>jn</command></funcdef>
      <paramdef>(int    <varname>n</varname>,
 double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-jnf">
      <funcdef>float <command>jnf</command></funcdef>
      <paramdef>(int   <varname>n</varname>,
 float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-jnl">
      <funcdef>long double <command>jnl</command></funcdef>
      <paramdef>(int         <varname>n</varname>,
 long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> üssü <varname>n</varname>'in birinci türden Bessel işlevini hesaplar. <varname>x</varname> çok büyük olduğunda işlev taşma sinyalleyebilir.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>y0</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>y0f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>y0l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-y0">
      <funcdef>double <command>y0</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-y0f">
      <funcdef>float <command>y0f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-y0l">
      <funcdef>long double <command>y0l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> üssü sıfırın ikinci türden Bessel işlevini hesaplar. <varname>x</varname> çok büyük olduğunda işlev taşma sinyalleyebilir. Negatif olduğunda saha hatası sinyaller; sıfırsa taşma sinyaller ve eksi sonsuz ile döner.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>y1</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>y1f</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>y1l</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-y1">
      <funcdef>double <command>y1</command></funcdef>
      <paramdef>(double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-y1f">
      <funcdef>float <command>y1f</command></funcdef>
      <paramdef>(float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-y1l">
      <funcdef>long double <command>y1l</command></funcdef>
      <paramdef>(long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> üssü birin ikinci türden  Bessel işlevini hesaplar. <varname>x</varname> çok büyük olduğunda işlev taşma sinyalleyebilir. Negatif olduğunda saha hatası sinyaller; sıfırsa taşma sinyaller ve eksi sonsuz ile döner.
</para>
    </funcdescr>
   </funcsynopsis>
  </para>
  <para>
   <indexterm scope="glibc-fn">
    <primary>yn</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ynf</primary>
   </indexterm>
   <indexterm scope="glibc-fn">
    <primary>ynl</primary>
   </indexterm>
   <funcsynopsis>
    <funcdeflist role="işlev">
     <funcprototype xml:id="glibc-yn">
      <funcdef>double <command>yn</command></funcdef>
      <paramdef>(int    <varname>n</varname>,
 double <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ynf">
      <funcdef>float <command>ynf</command></funcdef>
      <paramdef>(int   <varname>n</varname>,
 float <varname>x</varname>)</paramdef>
     </funcprototype>
     <funcprototype xml:id="glibc-ynl">
      <funcdef>long double <command>ynl</command></funcdef>
      <paramdef>(int         <varname>n</varname>,
 long double <varname>x</varname>)</paramdef>
     </funcprototype>
    </funcdeflist>
    <funcdescr>
     <para>
Bu işlevler <varname>x</varname> üssü <varname>n</varname>'in ikinci türden  Bessel işlevini hesaplar. <varname>x</varname> çok büyük olduğunda işlev taşma sinyalleyebilir. Negatif olduğunda saha hatası sinyaller; sıfırsa taşma sinyaller ve eksi sonsuz ile döner.
  </para>
    </funcdescr>
   </funcsynopsis>
  </para>
 </chapter>
 <chapter xml:id="glibc-Errors-in-Math-Functions">
  <info>
   <title>Matematiksel İşlevlerde Hatalar</title>
   <titleabbrev>Matematiksel işlevlerde bilinen en büyük değer hataları</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>matematik</primary><secondary>hatalar</secondary></indexterm><indexterm scope="glibc-cp"><primary>ulps</primary></indexterm>
Bu bölümde matematik kütüphanesindeki işlevlerin bilinen hataları listelenmiştir. Hatalar son görüldüğü yerdeki birim (ULP - Units of the Last Place) cinsinden ölçülür. Bu, göreli hatalar için bir ölçüdür. <literal>d.d…d*2^e</literal> ile ifade edilen bir <literal>z</literal> sayısı için ULP şöyle ifade edilir:
    </para>
  <para>
   <literallayout indent="0" class="normal">
    |d.d...d - (z / 2^e)| / 2^(p - 1)
</literallayout>
  </para>
  <para>
Burada <literal>p</literal> kayan noktalı gösterimde ondalık kısımdaki bit sayısıdır. İdeal olarak tüm işlevler için hatalar daima <literal>0.5ulps</literal>'dan küçüktür. Bit yuvarlaması kullanarak bu ayrıca mümkündür ve normalde temel işlemler için gerçeklenmiştir. Karmaşık matematiksel işlevler için biraz daha çalışma gerekir ve bu henüz yapılmamıştır.
   </para>
  <para>
Dolayısıyla, matematik kütüphanesindeki çoğu işlev hata içerir. Tablo her işlevin sınamalar kapsamındaki mevcut sınamalarla tespit edilmiş en büyük hatasını listeler. Tablo oluşturulurken mümkün olduğunca çok sayıda hata listelenmeye çalışılmış, ama geniş arama uzayı sebebiyle pek mümkün olamamıştır.
   </para>
  <para>
Tabloda ULP değerleri farklı mimariler için listelenmiştir. Farklı mimarilerdeki donanım kayan noktalı sayı işlemlerini farklı desteklediğinden ve işlem çeşitleri de farklılık gösterdiğinden farklı mimarilerde sonuçlar da farklı olur.
   </para>
  <para>
   <informaltable frame="none" style="background:#999999;">
    <tgroup cols="6">
     <colspec colwidth=".13"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <tbody>
      <row style="background:#ffffee;">
       <entry>İşlev adı</entry>
       <entry>Alpha</entry>
       <entry>Soysal</entry>
       <entry>ix86</entry>
       <entry>IA64</entry>
       <entry>PowerPC</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acosf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acos</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acosl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>622</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acoshf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acosh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acoshl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinhf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinhl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanhf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanhl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan2f</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan2l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cabsf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cabs</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cabsl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacosf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacos</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacosl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 2</entry>
       <entry>0 + i 2</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacoshf</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>9 + i 4</entry>
       <entry>7 + i 0</entry>
       <entry>7 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacosh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacoshl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>6 + i 1</entry>
       <entry>7 + i 1</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cargf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>carg</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cargl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinf</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casin</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>2 + i 2</entry>
       <entry>2 + i 2</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinhf</entry>
       <entry>1 + i 6</entry>
       <entry>-</entry>
       <entry>1 + i 6</entry>
       <entry>1 + i 6</entry>
       <entry>1 + i 6</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinh</entry>
       <entry>5 + i 3</entry>
       <entry>-</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinhl</entry>
       <entry>4 + i 2</entry>
       <entry>-</entry>
       <entry>5 + i 5</entry>
       <entry>5 + i 5</entry>
       <entry>4 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanf</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>4 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catan</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanhf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>0 + i 6</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanh</entry>
       <entry>4 + i 0</entry>
       <entry>-</entry>
       <entry>2 + i 0</entry>
       <entry>4 + i 0</entry>
       <entry>4 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanhl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cbrtf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cbrt</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cbrtl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccosf</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccos</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccosl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccoshf</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccosh</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccoshl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>1 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ceilf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ceil</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ceill</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cexpf</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cexp</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cexpl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>2 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cimagf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cimag</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cimagl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clogf</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clogl</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>2 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog10f</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 5</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog10</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog10l</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>3 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>conjf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>conj</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>conjl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>copysignf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>copysign</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>copysignl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cosf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cos</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cosl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>coshf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cosh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>coshl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cpowf</entry>
       <entry>4 + i 2</entry>
       <entry>-</entry>
       <entry>4 + i 3</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cpow</entry>
       <entry>2 + i 2</entry>
       <entry>-</entry>
       <entry>1 + i 2</entry>
       <entry>2 + i 2</entry>
       <entry>2 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cpowl</entry>
       <entry>10 + i 1</entry>
       <entry>-</entry>
       <entry>763 + i 2</entry>
       <entry>6 + i 4</entry>
       <entry>2 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cprojf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cproj</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cprojl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>crealf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>creal</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>creall</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinhf</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinh</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinhl</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 2</entry>
       <entry>1 + i 2</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csqrtf</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csqrt</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csqrtl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctan</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanl</entry>
       <entry>1 + i 2</entry>
       <entry>-</entry>
       <entry>439 + i 3</entry>
       <entry>2 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanhf</entry>
       <entry>2 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>2 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanh</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanhl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>5 + i 25</entry>
       <entry>1 + i 24</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erff</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfcf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfc</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfcl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp10f</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp10</entry>
       <entry>6</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>6</entry>
       <entry>6</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp10l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>8</entry>
       <entry>3</entry>
       <entry>8</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp2f</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp2l</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expm1f</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expm1</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expm1l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fabsf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fabs</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fabsl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fdimf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fdim</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fdiml</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>floorf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>floor</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>floorl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmaf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fma</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmal</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmaxf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmax</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmaxl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fminf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fminl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmodf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmod</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmodl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>frexpf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>frexp</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>frexpl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>gammaf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>gamma</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>gammal</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>hypotf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>hypot</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>hypotl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ilogbf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ilogb</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ilogbl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j0f</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j0</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j0l</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>2</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j1f</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j1</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j1l</entry>
       <entry>4</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>jnf</entry>
       <entry>4</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>4</entry>
       <entry>4</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>jn</entry>
       <entry>4</entry>
       <entry>-</entry>
       <entry>5</entry>
       <entry>3</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>jnl</entry>
       <entry>4</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>4</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lgammaf</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lgamma</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lgammal</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lrintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lrint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lrintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llrintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llrint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llrintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log10f</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log10</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log10l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log1pf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log1p</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log1pl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log2f</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log2l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logbf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logb</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logbl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lroundf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lround</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lroundl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llroundf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llround</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llroundl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>modff</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>modf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>modfl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nearbyintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nearbyint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nearbyintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nextafterf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nextafter</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nextafterl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nexttowardf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nexttoward</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nexttowardl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>powf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>pow</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>powl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remainderf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remainder</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remainderl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remquof</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remquo</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remquol</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>rintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>rint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>rintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>roundf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>round</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>roundl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalb</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbnf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbn</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbnl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalblnf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbln</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalblnl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sincosf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sincos</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sincosl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinhf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinhl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sqrtf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sqrt</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sqrtl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tan</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanhf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanhl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tgammaf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tgamma</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tgammal</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>truncf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>trunc</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>truncl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y0f</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y0</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y0l</entry>
       <entry>3</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y1f</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y1</entry>
       <entry>3</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>3</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y1l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ynf</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>3</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>yn</entry>
       <entry>3</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>3</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ynl</entry>
       <entry>5</entry>
       <entry>-</entry>
       <entry>4</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
  <para>
   <informaltable frame="none" style="background:#999999;">
    <tgroup cols="6">
     <colspec colwidth=".13"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <colspec colwidth=".15"/>
     <tbody>
      <row style="background:#ffffee;">
       <entry>Function</entry>
       <entry>S/390</entry>
       <entry>SH4</entry>
       <entry>Sparc 32-bit</entry>
       <entry>Sparc 64-bit</entry>
       <entry>x86_64/fpu</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acosf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acos</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acosl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acoshf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acosh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>acoshl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinf</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asin</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinhf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>asinhl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanhf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanh</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atanhl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan2f</entry>
       <entry>1</entry>
       <entry>4</entry>
       <entry>6</entry>
       <entry>6</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>atan2l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cabsf</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cabs</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cabsl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacosf</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacos</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacosl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacoshf</entry>
       <entry>7 + i 3</entry>
       <entry>7 + i 3</entry>
       <entry>7 + i 3</entry>
       <entry>7 + i 3</entry>
       <entry>7 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacosh</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cacoshl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>5 + i 1</entry>
       <entry>5 + i 1</entry>
       <entry>6 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cargf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>carg</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cargl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinf</entry>
       <entry>1 + i 0</entry>
       <entry>2 + i 1</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casin</entry>
       <entry>1 + i 0</entry>
       <entry>3 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>2 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinhf</entry>
       <entry>1 + i 6</entry>
       <entry>1 + i 6</entry>
       <entry>1 + i 6</entry>
       <entry>1 + i 6</entry>
       <entry>1 + i 6</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinh</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 3</entry>
       <entry>5 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>casinhl</entry>
       <entry>4 + i 2</entry>
       <entry>-</entry>
       <entry>4 + i 2</entry>
       <entry>4 + i 2</entry>
       <entry>5 + i 5</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanf</entry>
       <entry>4 + i 1</entry>
       <entry>4 + i 1</entry>
       <entry>4 + i 1</entry>
       <entry>4 + i 1</entry>
       <entry>4 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catan</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanl</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanhf</entry>
       <entry>0 + i 6</entry>
       <entry>1 + i 6</entry>
       <entry>0 + i 6</entry>
       <entry>0 + i 6</entry>
       <entry>0 + i 6</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanh</entry>
       <entry>4 + i 0</entry>
       <entry>4 + i 1</entry>
       <entry>4 + i 0</entry>
       <entry>4 + i 0</entry>
       <entry>4 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>catanhl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cbrtf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cbrt</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cbrtl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccosf</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccos</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccosl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccoshf</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccosh</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ccoshl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ceilf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ceil</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ceill</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cexpf</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cexp</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cexpl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cimagf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cimag</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cimagl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clogf</entry>
       <entry>1 + i 3</entry>
       <entry>0 + i 3</entry>
       <entry>1 + i 3</entry>
       <entry>1 + i 3</entry>
       <entry>1 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clogl</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog10f</entry>
       <entry>1 + i 5</entry>
       <entry>1 + i 5</entry>
       <entry>1 + i 5</entry>
       <entry>1 + i 5</entry>
       <entry>1 + i 5</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog10</entry>
       <entry>0 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>clog10l</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>conjf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>conj</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>conjl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>copysignf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>copysign</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>copysignl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cosf</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cos</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cosl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>coshf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cosh</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>coshl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cpowf</entry>
       <entry>4 + i 2</entry>
       <entry>4 + i 2</entry>
       <entry>4 + i 2</entry>
       <entry>4 + i 2</entry>
       <entry>5 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cpow</entry>
       <entry>2 + i 2</entry>
       <entry>1 + i 1.1031</entry>
       <entry>2 + i 2</entry>
       <entry>2 + i 2</entry>
       <entry>2 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cpowl</entry>
       <entry>10 + i 1</entry>
       <entry>-</entry>
       <entry>10 + i 1</entry>
       <entry>10 + i 1</entry>
       <entry>5 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cprojf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cproj</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>cprojl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>crealf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>creal</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>creall</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinf</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinhf</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinh</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>0 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csinhl</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csqrtf</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csqrt</entry>
       <entry>-</entry>
       <entry>1 + i 0</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>csqrtl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanf</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>0 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctan</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanl</entry>
       <entry>1 + i 2</entry>
       <entry>-</entry>
       <entry>1 + i 2</entry>
       <entry>1 + i 2</entry>
       <entry>439 + i 3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanhf</entry>
       <entry>2 + i 1</entry>
       <entry>2 + i 1</entry>
       <entry>2 + i 1</entry>
       <entry>2 + i 1</entry>
       <entry>2 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanh</entry>
       <entry>1 + i 0</entry>
       <entry>2 + i 2</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 0</entry>
       <entry>1 + i 1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ctanhl</entry>
       <entry>1 + i 1</entry>
       <entry>-</entry>
       <entry>1 + i 1</entry>
       <entry>1 + i 1</entry>
       <entry>5 + i 25</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erff</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erf</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfcf</entry>
       <entry>1</entry>
       <entry>12</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfc</entry>
       <entry>1</entry>
       <entry>24</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>erfcl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp10f</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp10</entry>
       <entry>6</entry>
       <entry>6</entry>
       <entry>6</entry>
       <entry>6</entry>
       <entry>6</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp10l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>8</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp2f</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>exp2l</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expm1f</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expm1</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>expm1l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fabsf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fabs</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fabsl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fdimf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fdim</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fdiml</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>floorf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>floor</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>floorl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmaf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fma</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmal</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmaxf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmax</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmaxl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fminf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fminl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmodf</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmod</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>fmodl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>frexpf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>frexp</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>frexpl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>gammaf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>gamma</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>gammal</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>hypotf</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>hypot</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>hypotl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ilogbf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ilogb</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ilogbl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j0f</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j0</entry>
       <entry>3</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j0l</entry>
       <entry>2</entry>
       <entry>-</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j1f</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>j1l</entry>
       <entry>4</entry>
       <entry>-</entry>
       <entry>4</entry>
       <entry>4</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>jnf</entry>
       <entry>4</entry>
       <entry>4</entry>
       <entry>4</entry>
       <entry>4</entry>
       <entry>4</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>jn</entry>
       <entry>4</entry>
       <entry>6</entry>
       <entry>4</entry>
       <entry>4</entry>
       <entry>4</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>jnl</entry>
       <entry>4</entry>
       <entry>-</entry>
       <entry>4</entry>
       <entry>4</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lgammaf</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lgamma</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lgammal</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lrintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lrint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lrintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llrintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llrint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llrintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logf</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log10f</entry>
       <entry>2</entry>
       <entry>1</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log10</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log10l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log1pf</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log1p</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log1pl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log2f</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log2</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>log2l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logbf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logb</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>logbl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lroundf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lround</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>lroundl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llroundf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llround</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>llroundl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>modff</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>modf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>modfl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nearbyintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nearbyint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nearbyintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nextafterf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nextafter</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nextafterl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nexttowardf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nexttoward</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>nexttowardl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>powf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>pow</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>powl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remainderf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remainder</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remainderl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remquof</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remquo</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>remquol</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>rintf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>rint</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>rintl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>roundf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>round</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>roundl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalb</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbnf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbn</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbnl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalblnf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalbln</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>scalblnl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sin</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sincosf</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sincos</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sincosl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinhf</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinh</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sinhl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sqrtf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sqrt</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>sqrtl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tan</entry>
       <entry>1</entry>
       <entry>0.5</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanhf</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanh</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tanhl</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tgammaf</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tgamma</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>tgammal</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>truncf</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>trunc</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>truncl</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
       <entry>-</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y0f</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y0</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y0l</entry>
       <entry>3</entry>
       <entry>-</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y1f</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y1</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>y1l</entry>
       <entry>1</entry>
       <entry>-</entry>
       <entry>1</entry>
       <entry>1</entry>
       <entry>1</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ynf</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
       <entry>2</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>yn</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
       <entry>3</entry>
      </row>
      <row style="background:#ffffee;">
       <entry>ynl</entry>
       <entry>5</entry>
       <entry>-</entry>
       <entry>5</entry>
       <entry>5</entry>
       <entry>4</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </chapter>
 <chapter xml:id="glibc-Pseudo-Random-Numbers">
  <info>
   <title>Rasgeleymiş gibi Görünen Sayılar</title>
   <titleabbrev>Rasgeleymiş gibi görünen sayıların üretimi için işlevler.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>sayılar</primary><secondary>rasgele</secondary></indexterm><indexterm scope="glibc-cp"><primary>rasgeleymiş gibi görünen sayılar</primary></indexterm><indexterm scope="glibc-cp"><primary>tohum (rasgele sayılar için)</primary></indexterm>
Bu kısımda rasgeleymiş gibi görünen sayıları üreten GNU oluşumlarından bahsedilecektir. Üreilen sayılar gerçekten rasgele değildir; genellikle sürekli tekrarlanan ama tekrar dönemleri çok uzun olduğundan tekrarlandğı farkedilemeyen dizilimler şeklindedirler. Rasgele Sayı Üreteci sonraki rasgele sayıyı hesaplamak için  ve yeni tohum değerini hesaplamak için bir <wordasword>tohum değeri</wordasword> kullanır.
   </para>
  <para>
Üretilen sayılar yazılımın çalışması esnasında önceden tahmin edilemez gibi göründüğü halde, aynı yazılım başka süreçlerde <emphasis>tamamen aynı</emphasis> sayı dizilimlerini kullanır. Bu dahili tohumun hep aynı olması sebebiyle böyledir. Yazılımda hata ayıklamaya kalkışırsanız bunun böyle olduğunu görürsünüz ama yazılımın önceden tahmin edilemeyen tarzda davranmasını isterseniz bu size pek yardımcı olmaz. Yazılımınızın her süreçte farklı rasgele sayı dizilimleri ile çalışmasını isterseniz, her seferinde farklı bir tohum belirtmeniz gerekir. Amaç sıradansa, tohum olarak daima eşsiz bir değer olan o anki mutlak zaman seçilir.
   </para>
  <para>
Belli bir makine türünde sayıları tekrarlanan dizilimler şeklinde elde etmek isterseniz, rassgele sayı üretecine aynı tohum değerini belirtmeniz gerekir. Standart olmak anlamında belirli bir tohum değeri yoktur; farklı C kütüphaneleri ya da farklı işlemci türlerinin herbirinin kendine özgü tohum değeri vardır ve bunlar size daima farklı rasgele sayılar verirler.
   </para>
  <para>
GNU C kütüphanesi standart ISO C rasgele sayı işlevleri yanında BSD ve SVID'den türetilmiş olanları da destekler. BSD ve ISO C işlevleri biraz sınırlı bir işlevsellikle benzerdirler. Sadece az sayıda rasgele bit gerekliyse, ISO C arayüzünü, <command>rand</command> ve <command>srand</command> işlevlerini kullanmanızı öneririz. SVID işlevleri daha esnek bir arayüz sağlar; daha iyi rasgele sayı üreteci algoritmaları içerdiğinden, her çağrıda daha fazla rasgele bit (48bite kadar) üretirler ve rasgele gerçek sayılar üretebilirler.
   </para>
  <section xml:id="glibc-ISO-Random">
   <info>
    <title>ISO C Rasgele Sayı İşlevleri</title>
    <titleabbrev><command>rand</command> ve arkadaşları.</titleabbrev>
   </info>
   <para>
Bu bölümde ISO C standardının bir parçası olan rasgele sayı işlevleri ele alınacaktır.
    </para>
   <para>
Bu oluşumları kullanabilmek için yazılımınıza <command>stdlib.h</command> başlık dosyasını dahil etmelisiniz.
<indexterm scope="glibc-pg"><primary>stdlib.h</primary></indexterm>
    </para>
   <para>
    <indexterm scope="glibc-vr">
     <primary>RAND_MAX</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="makro" xml:id="glibc-RAND_MAX">
      <funcdef>int <command>RAND_MAX</command></funcdef>
      <paramdef/>
     </funcprototype>
     <funcdescr>
      <para>
Bu makronun değeri, <command>rand</command> işlevinin döndürebileceği en büyük değeri gösteren bir tamsayı sabittir. GNU C kütüphanesinde bu makronun değeri 32 bitle gösterilebilen en büyük işaretli tamsayı olan <command>2147483647</command>'dir. Diğer kütüphanelerde  <command>32767</command> gibi düşük bir değer olabilir.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>rand</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-rand">
      <funcdef>int <command>rand</command></funcdef>
      <paramdef>(void)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>rand</command> işlevi dizilimdeki sonraki rasgeleymiş gibi görünen sayıyı döndürür. Değerler <command>0</command> ile <command>RAND_MAX</command> arasındadır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>srand</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-srand">
      <funcdef>void <command>srand</command></funcdef>
      <paramdef>(unsigned int <varname>tohum</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Rasgeleymiş gibi görünen yeni bir sayı dizilimi için tohum olarak <varname>tohum</varname>'u etkin kılar. <command>srand</command> ile yeni bir tohum atamadan önce <command>rand</command> çağrısı yaparsanız işlev öntanımlı tohum değeri olan <command>1</command> değerini kullanır.
    </para>
      <para>
Yazılımınızın her çalıştırılışında farklı bir rasgele sayı dizilimi kullanmasını istiyorsanız  <command>srand (time (0))</command> çağrısını kullanın.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
POSIX.1, standart C işlevlerini çok evreli yazılımlarda yeniden üretilebilir rasgele sayıları destekleyen işlevlerle genişletmişse de bu genişletme biraz kötü tasarlandığından kullanışsızdır.
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>rand_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-rand_r">
      <funcdef>int <command>rand_r</command></funcdef>
      <paramdef>(unsigned int <varname>tohum</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>rand</command> işlevinin yaptığı gibi 0 ile <command>RAND_MAX</command> arasında bir rasgele sayı ile döner. Ancak, onun tüm durumu <varname>tohum</varname> argümanında saklanır. Bunun anlamı rasgele sayı üretecinin durumunun sadece <command>unsigned int</command> türünün sahip olabildiği bit sayısı kadar olduğudur.  Bu iyi bir rasgele sayı üreteci için çok çok azdır.
    </para>
      <para>
Eğer yazılımınız bir evresel rasgele sayı üreteci gerektiriyorsa, SVID rasgele sayı üretecinde evresel GNU oluşumlarını kullanmanızı öneririz. POSIX.1 arayüzünü ise sadece GNU oluşumlarını kullanamadığınız zaman kullanmalısınız.
  </para>
     </funcdescr>
    </funcsynopsis>
   </para>
  </section>
  <section xml:id="glibc-BSD-Random">
   <info>
    <title>BSD Rasgele Sayı İşlevleri</title>
    <titleabbrev><command>random</command> ve arkadaşları.</titleabbrev>
   </info>
   <para>
Bu bölümde BSD'den türetilmiş rasgele sayı üretim işlevlerine yer verilmiştir. GNU kütüphenesiyle bu işlevleri kullanmanın bir getirisi yoktur; onları sadece BSD uyumluluğu adına destekliyoruz.
    </para>
   <para>
Bu işlevlerin prototipleri <command>stdlib.h</command> dosyasında bildirilmiştir.
<indexterm scope="glibc-pg"><primary>stdlib.h</primary></indexterm>
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>random</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-random">
      <funcdef>long int <command>random</command></funcdef>
      <paramdef>(void)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev dizilimdeki sonraki rasgele gibi görünen sayıyı döndürür. Dönen değer <command>0</command> ile <command>RAND_MAX</command> arasındadır.
    </para>
      <para>
       <note>
        <para>Bu işlev geçici olarak, <command>long int</command> daha geniş olsa bile dönüş değerinin daima 32 bit olduğunu belirten <command>int32_t</command> türünde bir değer döndürecek şekilde tanımlanmıştır. Standart farklı olmasını ister. Kullanıcıların 32 bitlik sınırlamanın farkında olması için böyle yapılmıştır.</para>
       </note>
      </para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>srandom</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-srandom">
      <funcdef>void <command>srandom</command></funcdef>
      <paramdef>(unsigned int <varname>tohum</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>srandom</command> işlevi rasgele sayı üretecinin durumunu <varname>tohum</varname> tamsayısına tabanlandırır. <varname>tohum</varname> olarak <command>1</command> değerini verirseniz işlevin rasgele sayıların öntanımlı dizilimini üretmesine sebep olursunuz.
    </para>
      <para>
Yazılımınızın her çalıştırılışında farklı bir rasgele sayı dizilimi kullanmasını istiyorsanız  <command>srandom (time (0))</command> çağrısını kullanın.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>initstate</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-initstate">
      <funcdef>void *<command>initstate</command></funcdef>
      <paramdef>(unsigned int <varname>tohum</varname>,
 void        *<varname>durum</varname>,
 size_t       <varname>boyut</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>initstate</command> işlevi rasgele sayı üretecini ilklendirmek için kullanılır. <varname>durum</varname> argümanı durum bilgisini tutan <varname>boyut</varname> baytlık bir dizidir. <varname>tohum</varname>'a bağlı olarak ilklendirilir. <varname>boyut</varname> değeri 8 ile 256 arasında ve ikinin üstel katlarında olmalıdır. Daha büyük <varname>durum</varname> dizisi daha iyidir.
    </para>
      <para>
İşlev önceki durum bilgisi dizisinin değerini döndürür. Bu değeri daha sonra durumu eski haline getirmek için <command>setstate</command> işlevinde argüman olarak kullanabilirsiniz.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>setstate</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-setstate">
      <funcdef>void *<command>setstate</command></funcdef>
      <paramdef>(void *<varname>durum</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>setstate</command> işlevi rasgele sayı durumunu <varname>durum</varname> durum bilgisi ile eski haline getirir. Argüman evvelce yapılmış bir <varname>initstate</varname> veya <varname>setstate</varname> çağrısından dönmüş bir değer olmalıdır.
    </para>
      <para>
İşlev önceki durum bilgisi dizisinin değerini döndürür. Bu değeri daha sonra durumu eski haline getirmek için <command>setstate</command> işlevinde argüman olarak kullanabilirsiniz.
    </para>
      <para>
İşlev başarısız olursa <command>NULL</command> ile döner.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
Bu bölümde buraya kadar bahsedilen dört işlevin hepsi durum bilgisini tüm evrelerle paylaşır. Durum bilgisi kullanıcı tarafından erişilebilir değildir, sadece bu işlevlerle erişilebilir. Bu, kendi rasgele sayı üreteçlerinin olmasını gerektiren evreler bakımından çalışılması zor bir durum oluşturur.
    </para>
   <para>
GNU C kütüphanesi bu dört işleve ek olarak evreye özel rasgele sayı üreteçlerini mümkün kılmak için durumu ayrı bir parametre olarak alan dört işlev daha içerir. Aslında, bundan önce bahsedilen dört işlev de dahili olarak aşağıdaki arayüz ile gerçeklenmiştir.
    </para>
   <para><command>stdlib.h</command> başlık dosyası şu türün bir tanımını içerir:
    </para>
   <para>
    <indexterm scope="glibc-tp">
     <primary sortas="random_data">struct random_data</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="veri türü" xml:id="glibc-struct-random_data">
      <funcdef>struct <command>random_data</command></funcdef>
      <paramdef/>
     </funcprototype>
     <funcdescr>
      <para><command>struct random_data</command> türündeki nesneler rasgele sayı üretecinin durumunu ifade etmek için gereken bilgiyi içerir. Türün tam bir tanımı mevcut olduğu halde türün şeffaf olmadığı varsayılmalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
Durum bilgisini değiştiren işlevler bundan önce açıklanan işlevlerin yaptıklarını evresel kullanıma uygun olarak yaparlar.
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>random_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-random_r">
      <funcdef>int <command>random_r</command></funcdef>
      <paramdef>(struct random_data *restrict <varname>tampon</varname>,
 int32_t *restrict            <varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>random_r</command> işlevi genel durum bilgisi yerine ilk parametresi ile gösterilen nesnedeki durumu kullanması dışında <command>random</command> işlevi gibi davranır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>srandom_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-srandom_r">
      <funcdef>int <command>srandom_r</command></funcdef>
      <paramdef>(unsigned int        <varname>tohum</varname>,
 struct random_data *<varname>tampon</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>srandom_r</command> işlevi genel durum bilgisi yerine ikinci parametresi ile gösterilen nesnedeki durumu kullanması dışında <command>srandom</command> işlevi gibi davranır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>initstate_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-initstate_r">
      <funcdef>int <command>initstate_r</command></funcdef>
      <paramdef>(unsigned int                 <varname>tohum</varname>,
 char *restrict               <varname>durum-tamponu</varname>,
 size_t                       <varname>durum-uzunluğu</varname>,
 struct random_data *restrict <varname>tampon</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>initstate_r</command> işlevi genel durum bilgisi yerine dördüncü parametresi ile gösterilen nesnedeki durumu kullanması dışında <command>initstate</command> işlevi gibi davranır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>setstate_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-setstate_r">
      <funcdef>int <command>setstate_r</command></funcdef>
      <paramdef>(char *restrict               <varname>durum-tamponu</varname>,
 struct random_data *restrict <varname>tampon</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>setstate_r</command> işlevi genel durum bilgisi yerine ikinci parametresi ile gösterilen nesnedeki durumu kullanması dışında <command>setstate</command> işlevi gibi davranır.
  </para>
     </funcdescr>
    </funcsynopsis>
   </para>
  </section>
  <section xml:id="glibc-SVID-Random">
   <info>
    <title>SVID Rasgele Sayı İşlevleri</title>
    <titleabbrev><command>drand48</command> ve arkadaşları.</titleabbrev>
   </info>
   <para>
SVID sistemlerdeki C kütüphanesi rasgele sayı üretim işlevlerinin daha farklı çeşitlerini içerir. Kullanıcı farklı biçimlerde rasgele bitler döndüren işlevler arasından seçim yapabilir.
    </para>
   <para>
Genel olarak iki çeşit işlev vardır. İlki çeşitli işlevler ve sürecin tüm evreleri tarafından paylaşılan bir rasgele sayı üreteci durumunu kullanır. İkincisi ise durumu kullanıcının elde etmesini gerektirir.
    </para>
   <para>
Tüm işlevler aynı sabitlerle aynı benzeş<footnote><para>Ç.N.: Benim, "benzeş formül" diye adlandırdığım formülden özgün metinde "congruential formula" ismiyle bahsedilmiş. Bunun kullanımda olan bir türkçe karşılığı var mı bilmiyorum ama tam tarifi şöyle: özgün formülle tıpatıp aynısı olmasa da benzer sonucu veren (ve belki hesaplama kolaylığı getiren) bir başka formül. -- [NBB]</para></footnote> formülü kullanırlar. Bu formül:
    </para>
   <para>
    <literallayout indent="0" class="normal">
    Y = (a * X + c) mod m
</literallayout>
   </para>
   <para>
Burada, <varname>X</varname> üretecin başlangıçtaki durumu, <varname>Y</varname> ise son durumudur.  <command>a</command> ve <command>c</command> üretecin çalışma yöntemini belirleyen sabitlerdir. Öntanımlı olarak bunlar:
    </para>
   <para>
    <literallayout indent="0" class="normal">
    a = 0x5DEECE66D = 25214903917
    c = 0xb = 11
</literallayout>
   </para>
   <para>
Ancak, bunlar kullanıcı tarafından değiştirilebilir. <command>m</command> ise, durum bilgisi 48 bitlik bir diziden oluştuğundan 2^48'dir.
    </para>
   <para>
Bu işlevlerin prototipleri <command>stdlib.h</command> başlık dosyasındadır.
<indexterm scope="glibc-pg"><primary>stdlib.h</primary></indexterm>
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>drand48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-drand48">
      <funcdef>double <command>drand48</command></funcdef>
      <paramdef>(void)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>double</command> türünde <command>0.0</command> ile <command>1.0</command> (hariç) arasında bir değerle döner.  Rasgele bitler C kütüphanesindeki rasgele sayı üretecinin genel durum bilgisi tarafından belirlenir.
    </para>
      <para>
IEEE 754'de <command>double</command> türü 52 bitlik ondalık kısımdan oluştuğundan bunun 4 biti rasgele sayı üreteci tarafından ilklendirilemez. Bunlar (şüphesiz) en kıymetsiz bitlerden seçilir ve <command>0</command>'a ilklendirilir.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>erand48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-erand48">
      <funcdef>double <command>erand48</command></funcdef>
      <paramdef>(unsigned short int <varname>xsubi</varname>[3])</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>drand48</command> işlevi gibi <command>double</command> türünde <command>0.0</command> ile <command>1.0</command> (hariç) arasında bir değerle döner. Argüman rasgele sayı üretecinin durumunu ifade eden bir dizidir.
    </para>
      <para>
Bu işlev rasgele sayıları garantilemek için diziyi güncellediğinden ardarda çağrılabilir. Dizi, yeniden üretilebilir sonuç sağlamak için ilk kullanımdan önce ilklendirilmelidir.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>lrand48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-lrand48">
      <funcdef>long int <command>lrand48</command></funcdef>
      <paramdef>(void)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>lrand48</command> işlevi <command>0</command> ile <command>2^31</command> (hariç) arasında bir tamsayı değerle döner. Dönen değerin türü <command>long int</command> olsa bile 32 bitten daha geniş değildir, dolayısıyla daha yüksek bir değer dönmez. Rasgele bitler C kütüphanesindeki rasgele sayı üretecinin genel durum bilgisi tarafından belirlenir.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>nrand48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-nrand48">
      <funcdef>long int <command>nrand48</command></funcdef>
      <paramdef>(unsigned short int <varname>xsubi</varname>[3])</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>lrand48</command> işlevi gibi <command>0</command> ile <command>2^31</command> (hariç) arasında bir tamsayı değerle döner, ama rasgele bitleri üretmekte kullanılan rasgele sayı üreteci durum bilgisi işleve parametre olarak verilen dizi tarafından belirlenir.
    </para>
      <para>
Bu işlev rasgele sayıları garantilemek için diziyi güncellediğinden ardarda çağrılabilir. Dizi, yeniden üretilebilir sonuç sağlamak için ilk kullanımdan önce ilklendirilmelidir.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>mrand48</primary>
    </indexterm>
    <indexterm scope="glibc-fn">
     <primary>jrand48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-mrand48">
      <funcdef>long int <command>mrand48</command></funcdef>
      <paramdef>(void)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>mrand48</command> işlevi <command>-2^31</command> ile <command>2^31</command> (hariç) arasında sayı döndürmesi dışında <command>lrand48</command> işlevi gibidir.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-jrand48">
      <funcdef>long int <command>jrand48</command></funcdef>
      <paramdef>(unsigned short int <varname>xsubi</varname>[3])</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>jrand48</command> işlevi <command>-2^31</command> ile <command>2^31</command> (hariç) arasında sayı döndürmesi dışında <command>lrand48</command> işlevi gibidir. <command>xsubi</command> parametresi için gereksinimler aynıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
Rasgele sayı üretecinin ilk durumu çeşitli yollarla ilklendirilebilir. Yöntemler sağlanan bilginin bütünlüğüne bağlı olarak değişir.
</para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>srand48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-srand48">
      <funcdef>void <command>srand48</command></funcdef>
      <paramdef>(long int <varname>tohum</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>srand48</command> işlevi rasgele sayı üretecinin dahili durumunun en kıymetli 32 bitine, <varname>tohum</varname> parametresinin en kıymetsiz 32 bitini yerleştirir. Alt 16 bit <command>0x330E</command> değeri ile ilklendirilir. <command>long int</command> türü 32 bitten daha fazla bit içerse bile sadece alt 32 biti kullanılır.
    </para>
      <para>
Bu sınırlamayla, bu işlevin durumu ilklendirmesi çok kullanışlı değildir, ama <command>srand48 (time (0))</command> gibi bir kullanım onu kolay kullanılır yapar.
    </para>
      <para>
Bu işlevin bir yan etkisi, dahili durumda benzetimli formüldeki <command>a</command> ve <command>c</command> değerleri yukarıda verilen öntanımlı değerlere ayarlanır.  This is of importance once the user has called the <command>lcong48</command> function (see below).
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>seed48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-seed48">
      <funcdef>unsigned short int *<command>seed48</command></funcdef>
      <paramdef>(unsigned short int <varname>tohum16</varname>[3])</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>seed48</command> işlevi dahili rasgele sayı üretecinin durumunun 48 bitinin tamamını <varname>tohum16</varname> parametresinin içeriğinden ilklendirir. Burada <varname>tohum16</varname> dizisinin ilk elemanının alt 16 biti dahili durumun en kıymetsiz 16 bitini ilklendirir, <varname>tohum16</varname><literal>[1]</literal>'in alt 16 biti durumun ortadaki 16 bitini ilklendirir, <varname>tohum16</varname><literal>[2]</literal>'nin alt 16 biti de durumun en kıymetli 16 bitini ilklendirir.
    </para>
      <para><command>srand48</command> işlevinin tersine bu işlev kullanıcının durumun tüm 48 bitini ilklendirmesini sağlar.
    </para>
      <para>
İşlevin dönüş değeri dahili durumun değişmeden önceki değerini içeren bir dizidir. Bu dizi rasgele sayı üretecini belirli bir durumdan tekrar başlatmak için kullanılabilir. Aksi takdirde değer yoksayılabilir.
    </para>
      <para><command>srand48</command>'deki gibi benzetimli formüldeki  <command>a</command> ve <command>c</command> değerleri öntanımlı değerlere ayarlanır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
Rasgele sayı üretecini ilklendirmek için benzetimli formüldeki parametreleri değiştirebilmenizi sağlayarak daha fazla bilgi belirtebilmenizi mümkün kılan bir işlev daha vardır.
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>lcong48</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-lcong48">
      <funcdef>void <command>lcong48</command></funcdef>
      <paramdef>(unsigned short int <varname>param</varname>[7])</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>lcong48</command> işlevi rasgele sayı üretecinin durumunu tamamen değiştirebilmenizi mümkün kılar.  <command>srand48</command> ve <command>seed48</command> işlevlerinin aksine, bu işlev ile ayrıca benzetimli formüldeki sabitleri de değiştirebilirsiniz.
    </para>
      <para><varname>param</varname> dizisindeki 7 elemandan 0, 1, 2 indisli elemanlardaki girdilerin en kıymetsiz 16 biti ilk durumu belirler; 3, 4, 5 indisli elemanlardaki girdiler 48 bitlik <command>a</command> sabitini, 6. elemanın girdisi ise 16 bitlik <command>c</command> değerini belirler.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
Yukardaki işlevlerin hepsi ortak olarak benzetimli formüldeki genel parametreleri kullanır. Çok evreli yazılımlarda kimi zaman farklı evrelerde farklı parametrelere sahip olmak kullanışlı olabilir. Bu sebeple yukardaki işlevlerin tümünün rasgele sayı üreteci durumunu genel durum yerine kullanıcı tanımlı bir tamponda tutarak çalışan sürümleri de vardır.
    </para>
   <para>
Tüm evrelerin durumu içeren bir diziye gösterici alan işlevleri kullanması durumunda böyle bir sorunun olmayacağına dikkat edin. Aşağıda hesaplanan rasgele sayılar aynı döngüyü izler ama eğer dizideki durum farklıya tüm evrelerin kendilerine özel bir rasgele sayı üreteci olacaktır.
    </para>
   <para>
Kulanıcı tanımlı tampon <command>struct drand48_data</command> türünde olmalıdır. Bu türün şeffaf olmadığı kabul edilir, dolayısıyla doğrudan değiştirilmemelidir.
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>drand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-drand48_r">
      <funcdef>int <command>drand48_r</command></funcdef>
      <paramdef>(struct drand48_data *<varname>tampon</varname>,
 double              *<varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev, genel rasgele sayı üreteci parametrelerini değiştirmemesi, ama bunun yerine <varname>tampon</varname> göstericisi üzerinden sağlanan tampondaki parametreleri değiştirmesi ile <command>drand48</command> işlevinden farklıdır. Rasgele sayı <varname>sonuç</varname> ile gösterilen değişkende döndürülür.
    </para>
      <para>
İşlevin dönüş değeri çağrının başarısını gösterir. Eğer dönüş değeri <command>0</command>'dan küçükse bir hata oluşmuştur. Bu durumda <varname>errno</varname> değişkenine hata durumu atanır.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>erand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-erand48_r">
      <funcdef>int <command>erand48_r</command></funcdef>
      <paramdef>(unsigned short int   <varname>xsubi</varname>[3],
 struct drand48_data *<varname>tampon</varname>,
 double              *<varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>erand48_r</command> işlevi <command>erand48</command> gibi çalışır, ama rasgele sayı üretecini ifade eden bir  <varname>tampon</varname> argümanı alır. Rasgele sayı üretecinin durumu <command>xsubi</command> dizisinden alınır. Rasgele sayı <varname>sonuç</varname> ile gösterilen değişkende döndürülür.
    </para>
      <para>
Çağrı başarılı olmuşsa dönüş değeri negatif bir değer değildir.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>lrand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-lrand48_r">
      <funcdef>int <command>lrand48_r</command></funcdef>
      <paramdef>(struct drand48_data *<varname>tampon</varname>,
 double              *<varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>lrand48</command> işlevine benzer, ama ek olarak <command>drand48</command> işlevindeki gibi rasgele sayı üretecinin durumunu ifade eden tampona bir gösterici alır.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse sonuç <varname>sonuç</varname> ile gösterilen değişkende döndürülür. Aksi takdirde bir hata oluşmuş demektir.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>nrand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-nrand48_r">
      <funcdef>int <command>nrand48_r</command></funcdef>
      <paramdef>(unsigned short int   <varname>xsubi</varname>[3],
 struct drand48_data *<varname>tampon</varname>,
 long int            *<varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>nrand48_r</command> işlevi <command>nrand48</command> işlevi gibi <command>0</command> ile <command>2^31</command> arasında bir rasgele sayı üretir. Fakat, benzetimli formül için genel parametreleri kullanmak yerine <varname>tampon</varname> ile gösterilen tampondaki bilgiyi kullanır. Durum <varname>xsubi</varname> dizisindeki değerlerle ifade edilir.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse sonuç <varname>sonuç</varname> ile gösterilen değişkende döndürülür.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>mrand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-mrand48_r">
      <funcdef>int <command>mrand48_r</command></funcdef>
      <paramdef>(struct drand48_data *<varname>tampon</varname>,
 double              *<varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>mrand48</command> işlevine benzer. Fakat bu işlev ailesinin diğer evresel işlevleri gibi bu işlev de <varname>tampon</varname> ile gösterilen tampondaki değerle ifade edilen rasgele sayı üretecini kullanır.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse sonuç <varname>sonuç</varname> ile gösterilen değişkende döndürülür.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>jrand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-jrand48_r">
      <funcdef>int <command>jrand48_r</command></funcdef>
      <paramdef>(unsigned short int   <varname>xsubi</varname>[3],
 struct drand48_data *<varname>tampon</varname>,
 long int            *<varname>sonuç</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para><command>jrand48_r</command> işlevi <command>jrand48</command> işlevine benzer. Fakat bu işlev ailesinin diğer evresel işlevleri gibi bu işlev de benzetimli formülün parametrelerini <varname>tampon</varname> ile gösterilen tampondan kullanır.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse sonuç <varname>sonuç</varname> ile gösterilen değişkende döndürülür.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
Yukarıdaki evresel işlevleri kullanmadan önce <command>struct drand48_data</command> türündeki tampon ilklendirilmelidir. Bunu yapmanın en kolay yolu tüm tamponu boş karakterle doldurmaktır:
    </para>
   <para>
    <screen>memset (buffer, '\0', sizeof (struct drand48_data));
</screen>
   </para>
   <para>
Bundan sonra bu ailenin evresel işlevlerinin kullanılması rasgele sayı üretecini durum ve benzetimli formülün parametreleri için öntanımlı değerlere özdevinimli olarak ilklendirecektir.
    </para>
   <para>
Diğer bir olasılık, işlevleri tamponu açıkça ilklendirerek kullanmaktır.  İşlevin parametrelerine bakarak tamponun nasıl ilklendirileceği açıkça belli olduğuna göre sonuç daima umduğunuz olmayacağından bu işlevleri kullanmanızı hararetle tavsiye ediyoruz.
    </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>srand48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-srand48_r">
      <funcdef>int <command>srand48_r</command></funcdef>
      <paramdef>(long int             <varname>tohum</varname>,
 struct drand48_data *<varname>tampon</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Rasgele sayı üreteci <command>srand48</command> işlevindeki gibi <varname>tampon</varname> içindeki bilgi ile ifade edilir. Durum <varname>tohum</varname> parametresinden ilklendirilir ve benzetimli formülün parametreleri de öntanımlı değerleriyle ilkelendirilir.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse işlev başarılıdır.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>seed48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-seed48_r">
      <funcdef>int <command>seed48_r</command></funcdef>
      <paramdef>(unsigned short int   <varname>tohum16</varname>[3],
 struct drand48_data *<varname>tampon</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <command>srand48_r</command> işlevine benzer ama  <command>seed48</command> işlevi gibi durumun 48 bitinin tamamını <varname>tohum16</varname> parametresinden ilklendirir.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse işlev başarılıdır.  <command>seed48</command> işlevinin yaptığı gibi rasgele sayı üretecininönceki durumuna bir gösterici döndürmez. Eğer kullanıcı daha sonra kullanmak üzere durum bilgisini saklamak isterse <varname>tampon</varname> ile gösterilen tamponun tamamını kopyalayabilir.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
</para>
     </funcdescr>
    </funcsynopsis>
   </para>
   <para>
    <indexterm scope="glibc-fn">
     <primary>lcong48_r</primary>
    </indexterm>
    <funcsynopsis>
     <funcprototype role="işlev" xml:id="glibc-lcong48_r">
      <funcdef>int <command>lcong48_r</command></funcdef>
      <paramdef>(unsigned short int   <varname>param</varname>[7],
 struct drand48_data *<varname>tampon</varname>)</paramdef>
     </funcprototype>
     <funcdescr>
      <para>
Bu işlev <varname>tampon</varname> ile ifade edilen rasgele sayı üretecininin tüm özelliklerini <varname>param</varname> içindeki veri ile ilklendirir. Burada işlevin <varname>param</varname> ve <varname>tampon</varname> içeriklerini kopyalamaktan daha fazlasını yaptığı bir gerçektir. Daha fazla çalışma gerektirmesi ve bundan dolayı bu işlevi kullanmak rasgele sayı üretecini doğrudan ilklendirmekten daha iyidir.
    </para>
      <para>
İşlevin dönüş değeri negatif değilse işlev başarılıdır.
    </para>
      <para>
Bu işlev bir GNU oluşumu olduğundan taşınabilir yazılımlarda kullanılmamalıdır.
    </para>
     </funcdescr>
    </funcsynopsis>
   </para>
  </section>
 </chapter>
 <chapter xml:id="glibc-FP-Function-Optimizations">
  <info>
   <title>Hızlı Kod mu, Küçük Kod mu Tercih Edilir?</title>
   <titleabbrev>Gerçek sayı işlevlerinin eniyilenmesi</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>eniyileme</primary></indexterm>
Eğer bir uygulama çok sayıda gerçek sayı işlevi kullanıyorsa işlev çağrılarının maliyetinin ihmal edilemediği duruma sık rastlanır. Günümüz işlemcileri çoğunlukla kendi işlemlerini çok hızlı yapar, fakat işlev çağrıları komut boruhattını ikiye ayırır.
   </para>
  <para>
Bu sebeple GNU C kütüphanesi sık kullanılan matematik işlevlerinin bir çoğu için eniyilemeler sağlar. GNU CC kullanıldığında ve kullanıcı eniyileyiciyi etkinleştirmişse, çeşitli yeni satıriçi işlevler ve makrolar tanımlanır. Bu yeni işlevler ve makrolar kütüphanedeki işlevlerle aynı isimdedirler ve dolayısıyla onların yerine kullanılırlar. Satıriçi işlevler durumunda onların kullanılmasının makul olup olmayacağına derleyici karar verir ve bu karar genellikle doğru olur.
   </para>
  <para>
Bu, kütüphane işlevlerinin çağrılmasının gerekli olmadığı ve üretilen kodun hızı belirgin biçimde arttrabileceği anlamına gelir. Sakıncası kod boyutunun artacak olmasıdır ve bu artış her zaman ihmal edilebilir olmayacaktır.
   </para>
  <para>
Satıriçi işlevlerin iki çeşidi vardır: kütüphane işlevleriyle aynı sonucu verenler ve <command>errno</command> değişkenine değer atamayabilen ve kütüphane işlevleri ile karşılaştırıldığında hassasiyeti ve/veya argüman aralığını azaltabilen diğerleri. İkinci çeşit satıriçi işlevler sadece GNU CC'ye <command>-ffast-math</command> seçeneği verilirse mümkündür.
   </para>
  <para>
Satıriçi işlevlerin ve makroların istenmediği durumlarda <command>__NO_MATH_INLINES</command> sembolü sistem başlık dosyaları yazılıma dahil edilmeden önce tanımlanmış olmalıdır. Bu sadece kütüphane işlevlerinin kullanılacağını garanti eder. Şüphesiz, bu seçeneğin tercih edilip edilmediği projedeki her dosya için belirlenebilir.
   </para>
  <para>
Tüm donanımlar IEEE 754 standardını gerçeklemediğinden ve gerçeklenmiş olsa bile onun özelliklerinden bazılarının kullanımı önemli bir başarım kaybına yol açabilir. Örneğin, sinyal eylemcilerinin kurulması bazı işlemcilerin kayan nokta birimini çifte hesaplama zamanından fazlasına sebep olan borulanmamış çalışmaya zorlar.
   </para>
 </chapter>
</part>
