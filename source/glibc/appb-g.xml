<?xml version="1.0" encoding="UTF-8"?>

<!-- ********************************************************************
     $Id: appb-g.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->
<sect1 xml:id="glibc-Library-Summary-G"><title>G</title>
  <para><glosslist><glossentry><glossterm><literal>double <command>gamma</command> (double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>float <command>gammaf</command> (float <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long double <command>gammal</command> (long double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>(*__gconv_end_fct)</command> (struct gconv_step *)</literal></glossterm><glossdef><para><literal>gconv.h</literal> (GNU):  <xref linkend="glibc-glibc-iconv-Implementation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>(*__gconv_fct)</command> (struct __gconv_step *, struct __gconv_step_data *, const char **, const char *, size_t *, int)</literal></glossterm><glossdef><para><literal>gconv.h</literal> (GNU):  <xref linkend="glibc-glibc-iconv-Implementation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>(*__gconv_init_fct)</command> (struct __gconv_step *)</literal></glossterm><glossdef><para><literal>gconv.h</literal> (GNU):  <xref linkend="glibc-glibc-iconv-Implementation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>gcvt</command> (double <varname>value</varname>, int <varname>ndigit</varname>, char *<varname>buf</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (SVID, Unix98):  <xref linkend="glibc-System-V-Number-Conversion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long int <command>get_avphys_pages</command> (void)</literal></glossterm><glossdef><para><literal>sys/sysinfo.h</literal> (GNU):  <xref linkend="glibc-Query-Memory-Parameters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getc</command> (FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getchar</command> (void)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getchar_unlocked</command> (void)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (POSIX):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getcontext</command> (ucontext_t *<varname>ucp</varname>)</literal></glossterm><glossdef><para><literal>ucontext.h</literal> (SVID):  <xref linkend="glibc-System-V-contexts"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getc_unlocked</command> (FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (POSIX):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>get_current_dir_name</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (GNU):  <xref linkend="glibc-Working-Directory"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>getcwd</command> (char *<varname>buffer</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Working-Directory"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct tm * <command>getdate</command> (const char *<varname>string</varname>)</literal></glossterm><glossdef><para><literal>time.h</literal> (Unix98):  <xref linkend="glibc-General-Time-String-Parsing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>getdate_err</command></glossterm><glossdef><para><literal>time.h</literal> (Unix98):  <xref linkend="glibc-General-Time-String-Parsing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getdate_r</command> (const char *<varname>string</varname>, struct tm *<varname>tp</varname>)</literal></glossterm><glossdef><para><literal>time.h</literal> (GNU):  <xref linkend="glibc-General-Time-String-Parsing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>ssize_t <command>getdelim</command> (char **<varname>lineptr</varname>, size_t *<varname>n</varname>, int <varname>delimiter</varname>, FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Line-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getdomainnname</command> (char *<varname>name</varname>, size_t <varname>length</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (???):  <xref linkend="glibc-Host-Identification"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>gid_t <command>getegid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Persona"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>getenv</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Environment-Access"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>uid_t <command>geteuid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Persona"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct fstab * <command>getfsent</command> (void)</literal></glossterm><glossdef><para><literal>fstab.h</literal> (BSD):  <xref linkend="glibc-fstab"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct fstab * <command>getfsfile</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>fstab.h</literal> (BSD):  <xref linkend="glibc-fstab"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct fstab * <command>getfsspec</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>fstab.h</literal> (BSD):  <xref linkend="glibc-fstab"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>gid_t <command>getgid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Persona"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct group * <command>getgrent</command> (void)</literal></glossterm><glossdef><para><literal>grp.h</literal> (SVID, BSD):  <xref linkend="glibc-Scanning-All-Groups"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getgrent_r</command> (struct group *<varname>result_buf</varname>, char *<varname>buffer</varname>, size_t <varname>buflen</varname>, struct group **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>grp.h</literal> (GNU):  <xref linkend="glibc-Scanning-All-Groups"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct group * <command>getgrgid</command> (gid_t <varname>gid</varname>)</literal></glossterm><glossdef><para><literal>grp.h</literal> (POSIX.1):  <xref linkend="glibc-Lookup-Group"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getgrgid_r</command> (gid_t <varname>gid</varname>, struct group *<varname>result_buf</varname>, char *<varname>buffer</varname>, size_t <varname>buflen</varname>, struct group **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>grp.h</literal> (POSIX.1c):  <xref linkend="glibc-Lookup-Group"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct group * <command>getgrnam</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>grp.h</literal> (SVID, BSD):  <xref linkend="glibc-Lookup-Group"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getgrnam_r</command> (const char *<varname>name</varname>, struct group *<varname>result_buf</varname>, char *<varname>buffer</varname>, size_t <varname>buflen</varname>, struct group **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>grp.h</literal> (POSIX.1c):  <xref linkend="glibc-Lookup-Group"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getgrouplist</command> (const char *<varname>user</varname>, gid_t <varname>group</varname>, gid_t *<varname>groups</varname>, int *<varname>ngroups</varname>)</literal></glossterm><glossdef><para><literal>grp.h</literal> (BSD):  <xref linkend="glibc-Setting-Groups"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getgroups</command> (int <varname>count</varname>, gid_t *<varname>groups</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Persona"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct hostent * <command>gethostbyaddr</command> (const char *<varname>addr</varname>, size_t <varname>length</varname>, int <varname>format</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gethostbyaddr_r</command> (const char *<varname>addr</varname>, size_t <varname>length</varname>, int <varname>format</varname>, struct hostent *restrict <varname>result_buf</varname>, char *restrict <varname>buf</varname>, size_t <varname>buflen</varname>, struct hostent **restrict <varname>result</varname>, int *restrict <varname>h_errnop</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (GNU):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct hostent * <command>gethostbyname</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct hostent * <command>gethostbyname2</command> (const char *<varname>name</varname>, int <varname>af</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (IPv6 Basic API):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gethostbyname2_r</command> (const char *<varname>name</varname>, int <varname>af</varname>, struct hostent *restrict <varname>result_buf</varname>, char *restrict <varname>buf</varname>, size_t <varname>buflen</varname>, struct hostent **restrict <varname>result</varname>, int *restrict <varname>h_errnop</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (GNU):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gethostbyname_r</command> (const char *restrict <varname>name</varname>, struct hostent *restrict <varname>result_buf</varname>, char *restrict <varname>buf</varname>, size_t <varname>buflen</varname>, struct hostent **restrict <varname>result</varname>, int *restrict <varname>h_errnop</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (GNU):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct hostent * <command>gethostent</command> (void)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Host-Names"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long int <command>gethostid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Host-Identification"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gethostname</command> (char *<varname>name</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Host-Identification"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getitimer</command> (int <varname>which</varname>, struct itimerval *<varname>old</varname>)</literal></glossterm><glossdef><para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-Setting-an-Alarm"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>ssize_t <command>getline</command> (char **<varname>lineptr</varname>, size_t *<varname>n</varname>, FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Line-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getloadavg</command> (double <varname>loadavg</varname>[], int <varname>nelem</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (BSD):  <xref linkend="glibc-Processor-Resources"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>getlogin</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Who-Logged-In"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct mntent * <command>getmntent</command> (FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>mntent.h</literal> (BSD):  <xref linkend="glibc-mtab"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct mntent * <command>getmntent_r</command> (FILE *<varname>stream</varname>, struct mentent *<varname>result</varname>, char *<varname>buffer</varname>, int <varname>bufsize</varname>)</literal></glossterm><glossdef><para><literal>mntent.h</literal> (BSD):  <xref linkend="glibc-mtab"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct netent * <command>getnetbyaddr</command> (unsigned long int <varname>net</varname>, int <varname>type</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Networks-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct netent * <command>getnetbyname</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Networks-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct netent * <command>getnetent</command> (void)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Networks-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getnetgrent</command> (char **<varname>hostp</varname>, char **<varname>userp</varname>, char **<varname>domainp</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Lookup-Netgroup"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getnetgrent_r</command> (char **<varname>hostp</varname>, char **<varname>userp</varname>, char **<varname>domainp</varname>, char *<varname>buffer</varname>, int <varname>buflen</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (GNU):  <xref linkend="glibc-Lookup-Netgroup"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>get_nprocs</command> (void)</literal></glossterm><glossdef><para><literal>sys/sysinfo.h</literal> (GNU):  <xref linkend="glibc-Processor-Resources"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>get_nprocs_conf</command> (void)</literal></glossterm><glossdef><para><literal>sys/sysinfo.h</literal> (GNU):  <xref linkend="glibc-Processor-Resources"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getopt</command> (int <varname>argc</varname>, char **<varname>argv</varname>, const char *<varname>options</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-Using-Getopt"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getopt_long</command> (int <varname>argc</varname>, char *const *<varname>argv</varname>, const char *<varname>shortopts</varname>, const struct option *<varname>longopts</varname>, int *<varname>indexptr</varname>)</literal></glossterm><glossdef><para><literal>getopt.h</literal> (GNU):  <xref linkend="glibc-Getopt-Long-Options"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getopt_long_only</command> (int <varname>argc</varname>, char *const *<varname>argv</varname>, const char *<varname>shortopts</varname>, const struct option *<varname>longopts</varname>, int *<varname>indexptr</varname>)</literal></glossterm><glossdef><para><literal>getopt.h</literal> (GNU):  <xref linkend="glibc-Getopt-Long-Options"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpagesize</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Query-Memory-Parameters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>getpass</command> (const char *<varname>prompt</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-getpass"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpeername</command> (int <varname>socket</varname>, struct sockaddr *<varname>addr</varname>, socklen_t *<varname>length-ptr</varname>)</literal></glossterm><glossdef><para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Who-is-Connected"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpgid</command> (pid_t <varname>pid</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (SVID):  <xref linkend="glibc-Process-Group-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>getpgrp</command> (pid_t <varname>pid</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Process-Group-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>getpgrp</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Group-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long int <command>get_phys_pages</command> (void)</literal></glossterm><glossdef><para><literal>sys/sysinfo.h</literal> (GNU):  <xref linkend="glibc-Query-Memory-Parameters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>getpid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Identification"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>getppid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Identification"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpriority</command> (int <varname>class</varname>, int <varname>id</varname>)</literal></glossterm><glossdef><para><literal>sys/resource.h</literal> (BSD,POSIX):  <xref linkend="glibc-Traditional-Scheduling-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct protoent * <command>getprotobyname</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Protocols-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct protoent * <command>getprotobynumber</command> (int <varname>protocol</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Protocols-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct protoent * <command>getprotoent</command> (void)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Protocols-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpt</command> (void)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-Allocation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct passwd * <command>getpwent</command> (void)</literal></glossterm><glossdef><para><literal>pwd.h</literal> (POSIX.1):  <xref linkend="glibc-Scanning-All-Users"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpwent_r</command> (struct passwd *<varname>result_buf</varname>, char *<varname>buffer</varname>, int <varname>buflen</varname>, struct passwd **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>pwd.h</literal> (GNU):  <xref linkend="glibc-Scanning-All-Users"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct passwd * <command>getpwnam</command> (const char *<varname>name</varname>)</literal></glossterm><glossdef><para><literal>pwd.h</literal> (POSIX.1):  <xref linkend="glibc-Lookup-User"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpwnam_r</command> (const char *<varname>name</varname>, struct passwd *<varname>result_buf</varname>, char *<varname>buffer</varname>, size_t <varname>buflen</varname>, struct passwd **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>pwd.h</literal> (POSIX.1c):  <xref linkend="glibc-Lookup-User"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct passwd * <command>getpwuid</command> (uid_t <varname>uid</varname>)</literal></glossterm><glossdef><para><literal>pwd.h</literal> (POSIX.1):  <xref linkend="glibc-Lookup-User"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getpwuid_r</command> (uid_t <varname>uid</varname>, struct passwd *<varname>result_buf</varname>, char *<varname>buffer</varname>, size_t <varname>buflen</varname>, struct passwd **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>pwd.h</literal> (POSIX.1c):  <xref linkend="glibc-Lookup-User"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getrlimit</command> (int <varname>resource</varname>, struct rlimit *<varname>rlp</varname>)</literal></glossterm><glossdef><para><literal>sys/resource.h</literal> (BSD):  <xref linkend="glibc-Limits-on-Resources"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getrlimit64</command> (int <varname>resource</varname>, struct rlimit64 *<varname>rlp</varname>)</literal></glossterm><glossdef><para><literal>sys/resource.h</literal> (Unix98):  <xref linkend="glibc-Limits-on-Resources"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getrusage</command> (int <varname>processes</varname>, struct rusage *<varname>rusage</varname>)</literal></glossterm><glossdef><para><literal>sys/resource.h</literal> (BSD):  <xref linkend="glibc-Resource-Usage"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>gets</command> (char *<varname>s</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Line-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct servent * <command>getservbyname</command> (const char *<varname>name</varname>, const char *<varname>proto</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Services-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct servent * <command>getservbyport</command> (int <varname>port</varname>, const char *<varname>proto</varname>)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Services-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct servent * <command>getservent</command> (void)</literal></glossterm><glossdef><para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Services-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>getsid</command> (pid_t <varname>pid</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (SVID):  <xref linkend="glibc-Process-Group-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getsockname</command> (int <varname>socket</varname>, struct sockaddr *<varname>addr</varname>, socklen_t *<varname>length-ptr</varname>)</literal></glossterm><glossdef><para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Reading-Address"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getsockopt</command> (int <varname>socket</varname>, int <varname>level</varname>, int <varname>optname</varname>, void *<varname>optval</varname>, socklen_t *<varname>optlen-ptr</varname>)</literal></glossterm><glossdef><para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Socket-Option-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getsubopt</command> (char **<varname>optionp</varname>, const char* const *<varname>tokens</varname>, char **<varname>valuep</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (stdlib.h):  <link linkend="glibc-Suboptions">Suboptions Example</link>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>gettext</command> (const char *<varname>msgid</varname>)</literal></glossterm><glossdef><para><literal>libintl.h</literal> (GNU):  <xref linkend="glibc-Translation-with-gettext"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gettimeofday</command> (struct timeval *<varname>tp</varname>, struct timezone *<varname>tzp</varname>)</literal></glossterm><glossdef><para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-High-Resolution-Calendar"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>uid_t <command>getuid</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Persona"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>mode_t <command>getumask</command> (void)</literal></glossterm><glossdef><para><literal>sys/stat.h</literal> (GNU):  <xref linkend="glibc-Setting-Permissions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct utmp * <command>getutent</command> (void)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getutent_r</command> (struct utmp *<varname>buffer</varname>, struct utmp **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (GNU):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct utmp * <command>getutid</command> (const struct utmp *<varname>id</varname>)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getutid_r</command> (const struct utmp *<varname>id</varname>, struct utmp *<varname>buffer</varname>, struct utmp **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (GNU):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct utmp * <command>getutline</command> (const struct utmp *<varname>line</varname>)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getutline_r</command> (const struct utmp *<varname>line</varname>, struct utmp *<varname>buffer</varname>, struct utmp **<varname>result</varname>)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (GNU):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getutmp</command> (const struct utmpx *utmpx, struct utmp *utmp)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (GNU):  <xref linkend="glibc-XPG-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getutmpx</command> (const struct utmp *utmp, struct utmpx *utmpx)</literal></glossterm><glossdef><para><literal>utmp.h</literal> (GNU):  <xref linkend="glibc-XPG-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct utmpx * <command>getutxent</command> (void)</literal></glossterm><glossdef><para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct utmpx * <command>getutxid</command> (const struct utmpx *<varname>id</varname>)</literal></glossterm><glossdef><para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct utmpx * <command>getutxline</command> (const struct utmpx *<varname>line</varname>)</literal></glossterm><glossdef><para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>getw</command> (FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (SVID):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>getwc</command> (FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>getwchar</command> (void)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>getwchar_unlocked</command> (void)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>getwc_unlocked</command> (FILE *<varname>stream</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Character-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>char * <command>getwd</command> (char *<varname>buffer</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Working-Directory"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>gid_t</command></glossterm><glossdef><para><literal>sys/types.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Persona"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>glob</command> (const char *<varname>pattern</varname>, int <varname>flags</varname>, int (*<varname>errfunc</varname>) (const char *<varname>filename</varname>, int <varname>error-code</varname>), glob_t *<varname>vector-ptr</varname>)</literal></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>glob64</command> (const char *<varname>pattern</varname>, int <varname>flags</varname>, int (*<varname>errfunc</varname>) (const char *<varname>filename</varname>, int <varname>error-code</varname>), glob64_t *<varname>vector-ptr</varname>)</literal></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>glob64_t</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_ABORTED</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_ALTDIRFUNC</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_APPEND</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_BRACE</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_DOOFFS</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_ERR</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>globfree</command> (glob_t *<varname>pglob</varname>)</literal></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>globfree64</command> (glob64_t *<varname>pglob</varname>)</literal></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_MAGCHAR</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_MARK</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_NOCHECK</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_NOESCAPE</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_NOMAGIC</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_NOMATCH</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_NOSORT</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_NOSPACE</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_ONLYDIR</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_PERIOD</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>glob_t</command></glossterm><glossdef><para><literal>glob.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Glob"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_TILDE</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>GLOB_TILDE_CHECK</command></glossterm><glossdef><para><literal>glob.h</literal> (GNU):  <xref linkend="glibc-More-Flags-for-Globbing"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct tm * <command>gmtime</command> (const time_t *<varname>time</varname>)</literal></glossterm><glossdef><para><literal>time.h</literal> (ISO):  <xref linkend="glibc-Broken-down-Time"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>struct tm * <command>gmtime_r</command> (const time_t *<varname>time</varname>, struct tm *<varname>resultp</varname>)</literal></glossterm><glossdef><para><literal>time.h</literal> (POSIX.1c):  <xref linkend="glibc-Broken-down-Time"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>_GNU_SOURCE</command></glossterm><glossdef><para>(GNU):  <xref linkend="glibc-Feature-Test-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>grantpt</command> (int <varname>filedes</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (SVID, XPG4.2):  <xref linkend="glibc-Allocation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gsignal</command> (int <varname>signum</varname>)</literal></glossterm><glossdef><para><literal>signal.h</literal> (SVID):  <xref linkend="glibc-Signaling-Yourself"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>gtty</command> (int <varname>filedes</varname>, struct sgttyb *<varname>attributes</varname>)</literal></glossterm><glossdef><para><literal>sgtty.h</literal> (BSD):  <xref linkend="glibc-BSD-Terminal-Modes"/>.
     </para></glossdef></glossentry></glosslist>
  </para>
</sect1>