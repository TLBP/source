<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-w.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-W"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>W</title>
  </info>
  <para>
   <glosslist>
    <glossentry>
     <glossterm>
      <literal>pid_t <command>wait</command> (int *<varname>status-ptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>pid_t <command>wait3</command> (union wait *<varname>status-ptr</varname>, int <varname>options</varname>, struct rusage *<varname>usage</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (BSD):  <xref linkend="glibc-BSD-Wait-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>pid_t <command>wait4</command> (pid_t <varname>pid</varname>, int *<varname>status-ptr</varname>, int <varname>options</varname>, struct rusage *<varname>usage</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (BSD):  <xref linkend="glibc-Process-Completion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>pid_t <command>waitpid</command> (pid_t <varname>pid</varname>, int *<varname>status-ptr</varname>, int <varname>options</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>warn</command> (const char *<varname>format</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>warnx</command> (const char *<varname>format</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WCHAR_MAX</command>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (GNU):  <xref linkend="glibc-Range-of-Type"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wint_t <command>WCHAR_MAX</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wint_t <command>WCHAR_MIN</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>wchar_t</command>
     </glossterm>
     <glossdef>
      <para><literal>stddef.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WCOREDUMP</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (BSD):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcpcpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcpncpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcrtomb</command> (char *restrict <varname>s</varname>, wchar_t <varname>wc</varname>, mbstate_t *restrict <varname>ps</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-a-Character"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wcscasecmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_T *<varname>ws2</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcscat</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcschr</command> (const wchar_t *<varname>wstring</varname>, int <varname>wc</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcschrnul</command> (const wchar_t *<varname>wstring</varname>, wchar_t <varname>wc</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wcscmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>ws2</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wcscoll</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>ws2</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Collation-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcscpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcscspn</command> (const wchar_t *<varname>wstring</varname>, const wchar_t *<varname>stopset</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcsdup</command> (const wchar_t *<varname>ws</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcsftime</command> (wchar_t *<varname>s</varname>, size_t <varname>size</varname>, const wchar_t *<varname>template</varname>, const struct tm *<varname>brokentime</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (ISO/Amend1):  <xref linkend="glibc-Formatting-Calendar-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcslen</command> (const wchar_t *<varname>ws</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-String-Length"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wcsncasecmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>s2</varname>, size_t <varname>n</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcsncat</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wcsncmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>ws2</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcsncpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcsnlen</command> (const wchar_t *<varname>ws</varname>, size_t <varname>maxlen</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-String-Length"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcsnrtombs</command> (char *restrict <varname>dst</varname>, const wchar_t **restrict <varname>src</varname>, size_t <varname>nwc</varname>, size_t <varname>len</varname>, mbstate_t *restrict <varname>ps</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Converting-Strings"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcspbrk</command> (const wchar_t *<varname>wstring</varname>, const wchar_t *<varname>stopset</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcsrchr</command> (const wchar_t *<varname>wstring</varname>, wchar_t <varname>c</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcsrtombs</command> (char *restrict <varname>dst</varname>, const wchar_t **restrict <varname>src</varname>, size_t <varname>len</varname>, mbstate_t *restrict <varname>ps</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-Strings"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcsspn</command> (const wchar_t *<varname>wstring</varname>, const wchar_t *<varname>skipset</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcsstr</command> (const wchar_t *<varname>haystack</varname>, const wchar_t *<varname>needle</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>wcstod</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>wcstof</command> (const wchar_t *<varname>string</varname>, wchar_t **<varname>tailptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>intmax_t <command>wcstoimax</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcstok</command> (wchar_t *<varname>newstring</varname>, const char *<varname>delimiters</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Finding-Tokens-in-a-String"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long int <command>wcstol</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>wcstold</command> (const wchar_t *<varname>string</varname>, wchar_t **<varname>tailptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long long int <command>wcstoll</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcstombs</command> (char *<varname>string</varname>, const wchar_t *<varname>wstring</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-String-Conversion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long long int <command>wcstoq</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>unsigned long int <command>wcstoul</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>unsigned long long int <command>wcstoull</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>uintmax_t <command>wcstoumax</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>unsigned long long int <command>wcstouq</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wcswcs</command> (const wchar_t *<varname>haystack</varname>, const wchar_t *<varname>needle</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (XPG):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>wcsxfrm</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *<varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Collation-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wctob</command> (wint_t <varname>c</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-a-Character"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wctomb</command> (char *<varname>string</varname>, wchar_t <varname>wchar</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-Character-Conversion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wctrans_t <command>wctrans</command> (const char *<varname>property</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Wide-Character-Case-Conversion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>wctrans_t</command>
     </glossterm>
     <glossdef>
      <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Wide-Character-Case-Conversion"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wctype_t <command>wctype</command> (const char *<varname>property</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>wctype_t</command>
     </glossterm>
     <glossdef>
      <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WEOF</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-EOF-and-Errors"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wint_t <command>WEOF</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WEXITSTATUS</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WIFEXITED</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WIFSIGNALED</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WIFSTOPPED</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>wint_t</command>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wmemchr</command> (const wchar_t *<varname>block</varname>, wchar_t <varname>wc</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wmemcmp</command> (const wchar_t *<varname>a1</varname>, const wchar_t *<varname>a2</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wcjar.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wmemcpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wmemmove</command> (wchar *<varname>wto</varname>, const wchar_t *<varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wmempcpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>wchar_t * <command>wmemset</command> (wchar_t *<varname>block</varname>, wchar_t <varname>wc</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>W_OK</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Testing-File-Access"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wordexp</command> (const char *<varname>words</varname>, wordexp_t *<varname>word-vector-ptr</varname>, int <varname>flags</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>wordexp_t</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>wordfree</command> (wordexp_t *<varname>word-vector-ptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wprintf</command> (const wchar_t *<varname>template</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Formatted-Output-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_APPEND</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_BADCHAR</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_BADVAL</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_CMDSUB</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_DOOFFS</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_NOCMD</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_NOSPACE</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_REUSE</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_SHOWERR</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_SYNTAX</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>WRDE_UNDEF</command>
     </glossterm>
     <glossdef>
      <para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>ssize_t <command>write</command> (int <varname>filedes</varname>, const void *<varname>buffer</varname>, size_t <varname>size</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-I-O-Primitives"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>ssize_t <command>writev</command> (int <varname>filedes</varname>, const struct iovec *<varname>vector</varname>, int <varname>count</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/uio.h</literal> (BSD):  <xref linkend="glibc-Scatter-Gather"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>wscanf</command> (const wchar_t *<varname>template</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Formatted-Input-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WSTOPSIG</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>WTERMSIG</command> (int <varname>status</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </para>
 </section>
