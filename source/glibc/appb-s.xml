<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-s.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-S"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>S</title>
  </info>
  <glosslist>
   <glossentry>
    <glossterm>
     <literal>int <command>SA_NOCLDSTOP</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Flags-for-Sigaction"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SA_ONSTACK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Flags-for-Sigaction"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SA_RESTART</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Flags-for-Sigaction"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void *<command>sbrk</command> (ptrdiff_t <varname>delta</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Resizing-the-Data-Segment"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_2_C_DEV</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_2_FORT_DEV</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_2_FORT_RUN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_2_LOCALEDEF</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_2_SW_DEV</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_2_VERSION</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_AIO_LISTIO_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_AIO_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_AIO_PRIO_DELTA_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>scalb</command> (double <varname>value</varname>, int <varname>exponent</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>scalbf</command> (float <varname>value</varname>, int <varname>exponent</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>scalbl</command> (long double <varname>value</varname>, int <varname>exponent</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>scalbln</command> (double <varname>x</varname>, long int n)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>scalblnf</command> (float <varname>x</varname>, long int n)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>scalblnl</command> (long double <varname>x</varname>, long int n)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>scalbn</command> (double <varname>x</varname>, int n)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>scalbnf</command> (float <varname>x</varname>, int n)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>scalbnl</command> (long double <varname>x</varname>, int n)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>scandir</command> (const char *<varname>dir</varname>, struct dirent ***<varname>namelist</varname>, int (*<varname>selector</varname>) (const struct dirent *), int (*<varname>cmp</varname>) (const void *, const void *))</literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (BSD/SVID):
<xref linkend="glibc-Scanning-Directory-Content"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>scandir64</command> (const char *<varname>dir</varname>, struct dirent64 ***<varname>namelist</varname>, int (*<varname>selector</varname>) (const struct dirent64 *), int (*<varname>cmp</varname>) (const void *, const void *))</literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (GNU):
<xref linkend="glibc-Scanning-Directory-Content"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>scanf</command> (const char *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Formatted-Input-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_ARG_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_ASYNCHRONOUS_IO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_ATEXIT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_AVPHYS_PAGES</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_BC_BASE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_BC_DIM_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_BC_SCALE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_BC_STRING_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_CHAR_BIT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_CHARCLASS_NAME_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_CHAR_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_CHAR_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_CHILD_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_CLK_TCK</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_COLL_WEIGHTS_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_DELAYTIMER_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_EQUIV_CLASS_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_EXPR_NEST_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_FSYNC</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_GETGR_R_SIZE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_GETPW_R_SIZE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SCHAR_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):
<xref linkend="glibc-Range-of-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SCHAR_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):
<xref linkend="glibc-Range-of-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_getparam</command> (pid_t <varname>pid</varname>, const struct sched_param *<varname>param</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_get_priority_max</command> (int *<varname>policy</varname>);</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_get_priority_min</command> (int *<varname>policy</varname>);</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_getscheduler</command> (pid_t <varname>pid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_rr_get_interval</command> (pid_t <varname>pid</varname>, struct timespec *<varname>interval</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_getaffinity</command> (pid_t <varname>pid</varname>, size_t <varname>cpusetsize</varname>, cpu_set_t *<varname>cpuset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (GNU):
<xref linkend="glibc-CPU-Affinity"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_setaffinity</command> (pid_t <varname>pid</varname>, size_t <varname>cpusetsize</varname>, const cpu_set_t *<varname>cpuset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (GNU):
<xref linkend="glibc-CPU-Affinity"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_setparam</command> (pid_t <varname>pid</varname>, const struct sched_param *<varname>param</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_setscheduler</command> (pid_t <varname>pid</varname>, int <varname>policy</varname>, const struct sched_param *<varname>param</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sched_yield</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_INT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_INT_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_JOB_CONTROL</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_LINE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_LOGIN_NAME_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_LONG_BIT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MAPPED_FILES</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MB_LEN_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MEMLOCK</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MEMLOCK_RANGE</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MEMORY_PROTECTION</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MESSAGE_PASSING</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MQ_OPEN_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_MQ_PRIO_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NGROUPS_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NL_ARGMAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NL_LANGMAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NL_MSGMAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NL_NMAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NL_SETMAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NL_TEXTMAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NPROCESSORS_CONF</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NPROCESSORS_ONLN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_NZERO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_OPEN_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PAGESIZE</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PHYS_PAGES</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (GNU):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_INTERNET</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_INTERNET_DGRAM</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_INTERNET_STREAM</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_OSI</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_OSI_CLTS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_OSI_COTS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_OSI_M</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_SOCKET</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PII_XTI</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PRIORITIZED_IO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_PRIORITY_SCHEDULING</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_REALTIME_SIGNALS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistdh.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_RTSIG_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SAVED_IDS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SCHAR_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SCHAR_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SELECT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SEMAPHORES</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SEM_NSEMS_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SEM_VALUE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SHARED_MEMORY_OBJECTS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SHRT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SHRT_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SIGQUEUE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SC_SSIZE_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_STREAM_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_SYNCHRONIZED_IO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_ATTR_STACKADDR</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_ATTR_STACKSIZE</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_DESTRUCTOR_ITERATIONS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_KEYS_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_PRIO_INHERIT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_PRIO_PROTECT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_PRIORITY_SCHEDULING</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_PROCESS_SHARED</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREADS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_SAFE_FUNCTIONS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_STACK_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_THREAD_THREADS_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_TIMER_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_TIMERS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_T_IOV_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_TTY_NAME_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_TZNAME_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_UCHAR_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_UINT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_UIO_MAXIOV</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1g):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_ULONG_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_USHRT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_VERSION</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_VERSION</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_WORD_BIT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_CRYPT</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_ENH_I18N</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_LEGACY</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_REALTIME</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_REALTIME_THREADS</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_SHM</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_UNIX</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_VERSION</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_XCU_VERSION</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_XPG2</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_XPG3</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SC_XOPEN_XPG4</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Constants-for-Sysconf"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>unsigned short int * <command>seed48</command> (unsigned short int <varname>seed16v</varname>[3])</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (SVID):
<xref linkend="glibc-SVID-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>seed48_r</command> (unsigned short int <varname>seed16v</varname>[3], struct drand48_data *<varname>buffer</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):
<xref linkend="glibc-SVID-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SEEK_CUR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-File-Positioning"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>seekdir</command> (DIR *<varname>dirstream</varname>, long int <varname>pos</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (BSD):
<xref linkend="glibc-Random-Access-Directory"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SEEK_END</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-File-Positioning"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SEEK_SET</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-File-Positioning"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>select</command> (int <varname>nfds</varname>, fd_set *<varname>read-fds</varname>, fd_set *<varname>write-fds</varname>, fd_set *<varname>except-fds</varname>, struct timeval *<varname>timeout</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (BSD):
<xref linkend="glibc-Waiting-for-I-O"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>send</command> (int <varname>socket</varname>, void *<varname>buffer</varname>, size_t <varname>size</varname>, int <varname>flags</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Sending-Data"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sendmsg</command> (int <varname>socket</varname>, const struct msghdr *<varname>message</varname>, int <varname>flags</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Receiving-Datagrams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sendto</command> (int <varname>socket</varname>, void *<varname>buffer</varname>. size_t <varname>size</varname>, int <varname>flags</varname>, struct sockaddr *<varname>addr</varname>, socklen_t <varname>length</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Sending-Datagrams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setbuf</command> (FILE *<varname>stream</varname>, char *<varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Controlling-Buffering"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setbuffer</command> (FILE *<varname>stream</varname>, char *<varname>buf</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (BSD):
<xref linkend="glibc-Controlling-Buffering"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setcontext</command> (const ucontext_t *<varname>ucp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ucontext.h</literal> (SVID):
<xref linkend="glibc-System-V-contexts"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setdomainname</command> (const char *<varname>name</varname>, size_t <varname>length</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (???):
<xref linkend="glibc-Host-Identification"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setegid</command> (gid_t <varname>newgid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Setting-Groups"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setenv</command> (const char *<varname>name</varname>, const char *<varname>value</varname>, int <varname>replace</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):
<xref linkend="glibc-Environment-Access"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>seteuid</command> (uid_t <varname>neweuid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Setting-User-ID"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setfsent</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>fstab.h</literal> (BSD):
<xref linkend="glibc-fstab"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setgid</command> (gid_t <varname>newgid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Setting-Groups"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setgrent</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>grp.h</literal> (SVID, BSD):
<xref linkend="glibc-Scanning-All-Groups"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setgroups</command> (size_t <varname>count</varname>, gid_t *<varname>groups</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>grp.h</literal> (BSD):
<xref linkend="glibc-Setting-Groups"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>sethostent</command> (int <varname>stayopen</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Host-Names"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sethostid</command> (long int <varname>id</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Host-Identification"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sethostname</command> (const char *<varname>name</varname>, size_t <varname>length</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Host-Identification"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setitimer</command> (int <varname>which</varname>, struct itimerval *<varname>new</varname>, struct itimerval *<varname>old</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):
<xref linkend="glibc-Setting-an-Alarm"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setjmp</command> (jmp_buf <varname>state</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>setjmp.h</literal> (ISO):
<xref linkend="glibc-Non-Local-Details"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setkey</command> (const char *<varname>key</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>crypt.h</literal> (BSD, SVID):
<xref linkend="glibc-DES-Encryption"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setkey_r</command> (const char *<varname>key</varname>, struct crypt_data * <varname>data</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>crypt.h</literal> (GNU):
<xref linkend="glibc-DES-Encryption"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setlinebuf</command> (FILE *<varname>stream</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (BSD):
<xref linkend="glibc-Controlling-Buffering"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>setlocale</command> (int <varname>category</varname>, const char *<varname>locale</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>locale.h</literal> (ISO):
<xref linkend="glibc-Setting-the-Locale"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setlogmask</command> (int <varname>mask</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>syslog.h</literal> (BSD):
<xref linkend="glibc-setlogmask"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>FILE * <command>setmntent</command> (const char *<varname>file</varname>, const char *<varname>mode</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>mntent.h</literal> (BSD):
<xref linkend="glibc-mtab"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setnetent</command> (int <varname>stayopen</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Networks-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setnetgrent</command> (const char *<varname>netgroup</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Lookup-Netgroup"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setpgid</command> (pid_t <varname>pid</varname>, pid_t <varname>pgid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Process-Group-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setpgrp</command> (pid_t <varname>pid</varname>, pid_t <varname>pgid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Process-Group-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setpriority</command> (int <varname>class</varname>, int <varname>id</varname>, int <varname>niceval</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/resource.h</literal> (BSD,POSIX):
<xref linkend="glibc-Traditional-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setprotoent</command> (int <varname>stayopen</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Protocols-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setpwent</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>pwd.h</literal> (SVID, BSD):
<xref linkend="glibc-Scanning-All-Users"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setregid</command> (gid_t <varname>rgid</varname>, gid_t <varname>egid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Setting-Groups"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setreuid</command> (uid_t <varname>ruid</varname>, uid_t <varname>euid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Setting-User-ID"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setrlimit</command> (int <varname>resource</varname>, const struct rlimit *<varname>rlp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/resource.h</literal> (BSD):
<xref linkend="glibc-Limits-on-Resources"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setrlimit64</command> (int <varname>resource</varname>, const struct rlimit64 *<varname>rlp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/resource.h</literal> (Unix98):
<xref linkend="glibc-Limits-on-Resources"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setservent</command> (int <varname>stayopen</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Services-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>pid_t <command>setsid</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Process-Group-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setsockopt</command> (int <varname>socket</varname>, int <varname>level</varname>, int <varname>optname</varname>, void *<varname>optval</varname>, socklen_t <varname>optlen</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Option-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>setstate</command> (void *<varname>state</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):
<xref linkend="glibc-BSD-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setstate_r</command> (char *restrict <varname>statebuf</varname>, struct random_data *restrict <varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):
<xref linkend="glibc-BSD-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>settimeofday</command> (const struct timeval *<varname>tp</varname>, const struct timezone *<varname>tzp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):
<xref linkend="glibc-High-Resolution-Calendar"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setuid</command> (uid_t <varname>newuid</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Setting-User-ID"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setutent</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>utmp.h</literal> (SVID):
<xref linkend="glibc-Manipulating-the-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>setutxent</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>utmpx.h</literal> (XPG4.2):
<xref linkend="glibc-XPG-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>setvbuf</command> (FILE *<varname>stream</varname>, char *<varname>buf</varname>, int <varname>mode</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Controlling-Buffering"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SHRT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):
<xref linkend="glibc-Range-of-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SHRT_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):
<xref linkend="glibc-Range-of-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>shutdown</command> (int <varname>socket</varname>, int <varname>how</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Closing-a-Socket"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IEXEC</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFBLK</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFCHR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFDIR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFIFO</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFLNK</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_IFMT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFREG</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IFSOCK</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGABRT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigaction</command> (int <varname>signum</varname>, const struct sigaction *restrict <varname>action</varname>, struct sigaction *restrict <varname>old-action</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Advanced-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigaddset</command> (sigset_t *<varname>set</varname>, int <varname>signum</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Signal-Sets"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGALRM</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Alarm-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigaltstack</command> (const stack_t *restrict <varname>stack</varname>, stack_t *restrict <varname>oldstack</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (XPG):
<xref linkend="glibc-Signal-Stack"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>sig_atomic_t</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Atomic-Types"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SIG_BLOCK</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Process-Signal-Mask"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigblock</command> (int <varname>mask</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Blocking-in-BSD"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGBUS</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGCHLD</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGCLD</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (SVID):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGCONT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigdelset</command> (sigset_t *<varname>set</varname>, int <varname>signum</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Signal-Sets"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigemptyset</command> (sigset_t *<varname>set</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Signal-Sets"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGEMT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>sighandler_t <command>SIG_ERR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Basic-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigfillset</command> (sigset_t *<varname>set</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Signal-Sets"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGFPE</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>sighandler_t</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (GNU):
<xref linkend="glibc-Basic-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGHUP</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Termination-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGILL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGINFO</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Miscellaneous-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGINT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Termination-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>siginterrupt</command> (int <varname>signum</varname>, int <varname>failflag</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-BSD-Handler"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGIO</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Asynchronous-I-O-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGIOT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (Unix):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigismember</command> (const sigset_t *<varname>set</varname>, int <varname>signum</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Signal-Sets"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>sigjmp_buf</command>
    </glossterm>
    <glossdef>
     <para><literal>setjmp.h</literal> (POSIX.1):
<xref linkend="glibc-Non-Local-Exits-and-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGKILL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Termination-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>siglongjmp</command> (sigjmp_buf <varname>state</varname>, int <varname>value</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>setjmp.h</literal> (POSIX.1):
<xref linkend="glibc-Non-Local-Exits-and-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGLOST</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (GNU):
<xref linkend="glibc-Operation-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigmask</command> (int <varname>signum</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Blocking-in-BSD"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>sighandler_t <command>signal</command> (int <varname>signum</varname>, sighandler_t <varname>action</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Basic-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>signbit</command> (<replaceable>float-type</replaceable><varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-FP-Bit-Twiddling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>significand</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>significandf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>significandl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):
<xref linkend="glibc-Normalization-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigpause</command> (int <varname>mask</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Blocking-in-BSD"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigpending</command> (sigset_t *<varname>set</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Checking-for-Pending-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGPIPE</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Operation-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGPOLL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (SVID):
<xref linkend="glibc-Asynchronous-I-O-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigprocmask</command> (int <varname>how</varname>, const sigset_t *restrict <varname>set</varname>, sigset_t *restrict <varname>oldset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Process-Signal-Mask"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGPROF</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Alarm-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGQUIT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Termination-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGSEGV</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigsetjmp</command> (sigjmp_buf <varname>state</varname>, int <varname>savesigs</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>setjmp.h</literal> (POSIX.1):
<xref linkend="glibc-Non-Local-Exits-and-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SIG_SETMASK</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Process-Signal-Mask"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigsetmask</command> (int <varname>mask</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Blocking-in-BSD"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>sigset_t</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Signal-Sets"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigstack</command> (const struct sigstack *<varname>stack</varname>, struct sigstack *<varname>oldstack</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Signal-Stack"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGSTOP</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigsuspend</command> (const sigset_t *<varname>set</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Sigsuspend"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGSYS</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (Unix):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGTERM</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (ISO):
<xref linkend="glibc-Termination-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGTRAP</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Program-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGTSTP</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGTTIN</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGTTOU</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Job-Control-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SIG_UNBLOCK</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Process-Signal-Mask"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGURG</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Asynchronous-I-O-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGUSR1</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Miscellaneous-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGUSR2</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Miscellaneous-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sigvec</command> (int <varname>signum</varname>, const struct sigvec *<varname>action</varname>,struct sigvec *<varname>old-action</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-BSD-Handler"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGVTALRM</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Alarm-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGWINCH</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Miscellaneous-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGXCPU</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Operation-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SIGXFSZ</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Operation-Error-Signals"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>sin</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Trig-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>sincos</command> (double <varname>x</varname>, double *<varname>sinx</varname>, double *<varname>cosx</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (GNU):
<xref linkend="glibc-Trig-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>sincosf</command> (float <varname>x</varname>, float *<varname>sinx</varname>, float *<varname>cosx</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (GNU):
<xref linkend="glibc-Trig-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>sincosl</command> (long double <varname>x</varname>, long double *<varname>sinx</varname>, long double *<varname>cosx</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (GNU):
<xref linkend="glibc-Trig-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>sinf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Trig-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>sinh</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Hyperbolic-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>sinhf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Hyperbolic-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>sinhl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Hyperbolic-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>sinl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Trig-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IREAD</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IRGRP</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IROTH</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IRUSR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IRWXG</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IRWXO</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IRWXU</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISBLK</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISCHR</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISDIR</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISFIFO</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_ISGID</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISLNK</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (GNU):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISREG</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_ISSOCK</command> (mode_t <varname>m</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (GNU):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_ISUID</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_ISVTX</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IWGRP</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IWOTH</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IWRITE</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IWUSR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IXGRP</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IXOTH</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>S_IXUSR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Permission-Bits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>size_t</command>
    </glossterm>
    <glossdef>
     <para><literal>stddef.h</literal> (ISO):
<xref linkend="glibc-Important-Data-Types"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>unsigned int <command>sleep</command> (unsigned int <varname>seconds</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Sleeping"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>snprintf</command> (char *<varname>s</varname>, size_t <varname>size</varname>, const char *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (GNU):
<xref linkend="glibc-Formatted-Output-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_BROADCAST</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SOCK_DGRAM</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Communication-Styles"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>socket</command> (int <varname>namespace</varname>, int <varname>style</varname>, int <varname>protocol</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Creating-a-Socket"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>socketpair</command> (int <varname>namespace</varname>, int <varname>style</varname>, int <varname>protocol</varname>, int <varname>filedes</varname>[2])</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Pairs"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SOCK_RAW</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Communication-Styles"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SOCK_RDM</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Communication-Styles"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SOCK_SEQPACKET</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Communication-Styles"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SOCK_STREAM</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Communication-Styles"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_DEBUG</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_DONTROUTE</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_ERROR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_KEEPALIVE</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_LINGER</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SOL_SOCKET</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_OOBINLINE</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_RCVBUF</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_REUSEADDR</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_SNDBUF</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_STYLE</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (GNU):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SO_TYPE</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>speed_t</command>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):
<xref linkend="glibc-Line-Speed"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sprintf</command> (char *<varname>s</varname>, const char *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Formatted-Output-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>sqrt</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Exponents-and-Logarithms"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>sqrtf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Exponents-and-Logarithms"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>sqrtl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):
<xref linkend="glibc-Exponents-and-Logarithms"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>srand</command> (unsigned int <varname>seed</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-ISO-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>srand48</command> (long int <varname>seedval</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (SVID):
<xref linkend="glibc-SVID-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>srand48_r</command> (long int <varname>seedval</varname>, struct drand48_data *<varname>buffer</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):
<xref linkend="glibc-SVID-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>srandom</command> (unsigned int <varname>seed</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):
<xref linkend="glibc-BSD-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>srandom_r</command> (unsigned int <varname>seed</varname>, struct random_data *<varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):
<xref linkend="glibc-BSD-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sscanf</command> (const char *<varname>s</varname>, const char *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Formatted-Input-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>sighandler_t <command>ssignal</command> (int <varname>signum</varname>, sighandler_t <varname>action</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (SVID):
<xref linkend="glibc-Basic-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SSIZE_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):
<xref linkend="glibc-General-Limits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>ssize_t</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-I-O-Primitives"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>stack_t</command>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (XPG):
<xref linkend="glibc-Signal-Stack"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>stat</command> (const char *<varname>filename</varname>, struct stat *<varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Reading-Attributes"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>stat64</command> (const char *<varname>filename</varname>, struct stat64 *<varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (Unix98):
<xref linkend="glibc-Reading-Attributes"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>FILE * <command>stderr</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Standard-Streams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>STDERR_FILENO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Descriptors-and-Streams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>FILE * <command>stdin</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Standard-Streams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>STDIN_FILENO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Descriptors-and-Streams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>FILE * <command>stdout</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):
<xref linkend="glibc-Standard-Streams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>STDOUT_FILENO</command>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Descriptors-and-Streams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>stime</command> (time_t *<varname>newtime</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (SVID, XPG):
<xref linkend="glibc-Simple-Calendar-Time"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>stpcpy</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (Unknown origin):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>stpncpy</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>strcasecmp</command> (const char *<varname>s1</varname>, const char *<varname>s2</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (BSD):
<xref linkend="glibc-String-Array-Comparison"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strcasestr</command> (const char *<varname>haystack</varname>, const char *<varname>needle</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strcat</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strchr</command> (const char *<varname>string</varname>, int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strchrnul</command> (const char *<varname>string</varname>, int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>strcmp</command> (const char *<varname>s1</varname>, const char *<varname>s2</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-String-Array-Comparison"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>strcoll</command> (const char *<varname>s1</varname>, const char *<varname>s2</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Collation-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strcpy</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>strcspn</command> (const char *<varname>string</varname>, const char *<varname>stopset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strdup</command> (const char *<varname>s</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (SVID):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strdupa</command> (const char *<varname>s</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>STREAM_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):
<xref linkend="glibc-General-Limits"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strerror</command> (int <varname>errnum</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Error-Messages"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strerror_r</command> (int <varname>errnum</varname>, char *<varname>buf</varname>, size_t <varname>n</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Error-Messages"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strfry</command> (char *<varname>string</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-strfry"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>strftime</command> (char *<varname>s</varname>, size_t <varname>size</varname>, const char *<varname>template</varname>, const struct tm *<varname>brokentime</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (ISO):
<xref linkend="glibc-Formatting-Calendar-Time"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>strlen</command> (const char *<varname>s</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-String-Length"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>strncasecmp</command> (const char *<varname>s1</varname>, const char *<varname>s2</varname>, size_t <varname>n</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (BSD):
<xref linkend="glibc-String-Array-Comparison"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strncat</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>strncmp</command> (const char *<varname>s1</varname>, const char *<varname>s2</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-String-Array-Comparison"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strncpy</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strndup</command> (const char *<varname>s</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strndupa</command> (const char *<varname>s</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Copying-and-Concatenation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>strnlen</command> (const char *<varname>s</varname>, size_t <varname>maxlen</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-String-Length"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strpbrk</command> (const char *<varname>string</varname>, const char *<varname>stopset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strptime</command> (const char *<varname>s</varname>, const char *<varname>fmt</varname>, struct tm *<varname>tp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (XPG4):
<xref linkend="glibc-Low-Level-Time-String-Parsing"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strrchr</command> (const char *<varname>string</varname>, int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strsep</command> (char **<varname>string_ptr</varname>, const char *<varname>delimiter</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (BSD):
<xref linkend="glibc-Finding-Tokens-in-a-String"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strsignal</command> (int <varname>signum</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-Signal-Messages"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>strspn</command> (const char *<varname>string</varname>, const char *<varname>skipset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strstr</command> (const char *<varname>haystack</varname>, const char *<varname>needle</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Search-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>strtod</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Floats"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>strtof</command> (const char *<varname>string</varname>, char **<varname>tailptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Floats"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>intmax_t <command>strtoimax</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>inttypes.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strtok</command> (char *restrict <varname>newstring</varname>, const char *restrict <varname>delimiters</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Finding-Tokens-in-a-String"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>strtok_r</command> (char *<varname>newstring</varname>, const char *<varname>delimiters</varname>, char **<varname>save_ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (POSIX):
<xref linkend="glibc-Finding-Tokens-in-a-String"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long int <command>strtol</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>strtold</command> (const char *<varname>string</varname>, char **<varname>tailptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Floats"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>strtoll</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long long int <command>strtoq</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>unsigned long int <command>strtoul</command> (const char *retrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>unsigned long long int <command>strtoull</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uintmax_t <command>strtoumax</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>inttypes.h</literal> (ISO):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>unsigned long long int <command>strtouq</command> (const char *restrict <varname>string</varname>, char **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):
<xref linkend="glibc-Parsing-of-Integers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>aiocb</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>aio.h</literal> (POSIX.1b):
<xref linkend="glibc-Asynchronous-I-O"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>aiocb64</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>aio.h</literal> (POSIX.1b):
<xref linkend="glibc-Asynchronous-I-O"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>aioinit</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>aio.h</literal> (GNU):
<xref linkend="glibc-Configuration-of-AIO"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>argp</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):
<xref linkend="glibc-Argp-Parsers"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>argp_child</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):
<xref linkend="glibc-Argp-Children"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>argp_option</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):
<xref linkend="glibc-Argp-Option-Vectors"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>argp_state</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):
<xref linkend="glibc-Argp-Parsing-State"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>dirent</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (POSIX.1):
<xref linkend="glibc-Directory-Entries"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>exit_status</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>utmp.h</literal> (SVID):
<xref linkend="glibc-Manipulating-the-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>flock</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):
<xref linkend="glibc-File-Locks"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>fstab</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fstab.h</literal> (BSD):
<xref linkend="glibc-fstab"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>FTW</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>ftw.h</literal> (XPG4.2):
<xref linkend="glibc-Working-with-Directory-Trees"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>__gconv_step</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>gconv.h</literal> (GNU):
<xref linkend="glibc-glibc-iconv-Implementation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>__gconv_step_data</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>gconv.h</literal> (GNU):
<xref linkend="glibc-glibc-iconv-Implementation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>group</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>grp.h</literal> (POSIX.1):
<xref linkend="glibc-Group-Data-Structure"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>hostent</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Host-Names"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>if_nameindex</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>net/if.h</literal> (IPv6 basic API):
<xref linkend="glibc-Interface-Naming"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>in6_addr</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (IPv6 basic API):
<xref linkend="glibc-Host-Address-Data-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>in_addr</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):
<xref linkend="glibc-Host-Address-Data-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>iovec</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/uio.h</literal> (BSD):
<xref linkend="glibc-Scatter-Gather"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>itimerval</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):
<xref linkend="glibc-Setting-an-Alarm"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>lconv</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>locale.h</literal> (ISO):
<xref linkend="glibc-The-Lame-Way-to-Locale-Data"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>linger</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Socket-Level-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>mallinfo</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal> (GNU):
<xref linkend="glibc-Statistics-of-Malloc"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>mntent</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>mntent.h</literal> (BSD):
<xref linkend="glibc-mtab"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>msghdr</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Receiving-Datagrams"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>netent</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Networks-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>obstack</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):
<xref linkend="glibc-Creating-Obstacks"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>option</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>getopt.h</literal> (GNU):
<xref linkend="glibc-Getopt-Long-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>passwd</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>pwd.h</literal> (POSIX.1):
<xref linkend="glibc-User-Data-Structure"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>printf_info</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>printf.h</literal> (GNU):
<xref linkend="glibc-Conversion-Specifier-Options"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>protoent</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Protocols-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>random_data</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):
<xref linkend="glibc-BSD-Random"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>rlimit</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/resource.h</literal> (BSD):
<xref linkend="glibc-Limits-on-Resources"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>rlimit64</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/resource.h</literal> (Unix98):
<xref linkend="glibc-Limits-on-Resources"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>rusage</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/resource.h</literal> (BSD):
<xref linkend="glibc-Resource-Usage"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sched_param</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sched.h</literal> (POSIX):
<xref linkend="glibc-Basic-Scheduling-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>servent</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):
<xref linkend="glibc-Services-Database"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sgttyb</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):
<xref linkend="glibc-BSD-Terminal-Modes"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sigaction</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (POSIX.1):
<xref linkend="glibc-Advanced-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sigstack</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-Signal-Stack"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sigvec</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-BSD-Handler"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sockaddr</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):
<xref linkend="glibc-Address-Formats"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sockaddr_in</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):
<xref linkend="glibc-Internet-Address-Formats"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>sockaddr_un</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/un.h</literal> (BSD):
<xref linkend="glibc-Local-Namespace-Details"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>stat</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):
<xref linkend="glibc-Attribute-Meanings"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>stat64</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (LFS):
<xref linkend="glibc-Attribute-Meanings"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>termios</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):
<xref linkend="glibc-Mode-Data-Types"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>timespec</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (POSIX.1):
<xref linkend="glibc-Elapsed-Time"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>timeval</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):
<xref linkend="glibc-Elapsed-Time"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>timezone</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):
<xref linkend="glibc-High-Resolution-Calendar"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>tm</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (ISO):
<xref linkend="glibc-Broken-down-Time"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>tms</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/times.h</literal> (POSIX.1):
<xref linkend="glibc-Processor-Time"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>utimbuf</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (POSIX.1):
<xref linkend="glibc-File-Times"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct <command>utsname</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/utsname.h</literal> (POSIX.1):
<xref linkend="glibc-Platform-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>strverscmp</command> (const char *<varname>s1</varname>, const char *<varname>s2</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):
<xref linkend="glibc-String-Array-Comparison"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>strxfrm</command> (char *restrict <varname>to</varname>, const char *restrict <varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):
<xref linkend="glibc-Collation-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>stty</command> (int <varname>filedes</varname>, struct sgttyb * attributes)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sgtty.h</literal> (BSD):
<xref linkend="glibc-BSD-Terminal-Modes"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_TYPEISMQ</command> (struct stat *<varname>s</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_TYPEISSEM</command> (struct stat *<varname>s</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>S_TYPEISSHM</command> (struct stat *<varname>s</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX):
<xref linkend="glibc-Testing-File-Type"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SUN_LEN</command> (<replaceable>struct sockaddr_un *</replaceable><varname>ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/un.h</literal> (BSD):
<xref linkend="glibc-Local-Namespace-Details"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_SVID_SOURCE</command>
    </glossterm>
    <glossdef>
     <para>(GNU):
<xref linkend="glibc-Feature-Test-Macros"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SV_INTERRUPT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-BSD-Handler"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SV_ONSTACK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (BSD):
<xref linkend="glibc-BSD-Handler"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>SV_RESETHAND</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (Sun):
<xref linkend="glibc-BSD-Handler"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>swapcontext</command> (ucontext_t *restrict <varname>oucp</varname>, const ucontext_t *restrict <varname>ucp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ucontext.h</literal> (SVID):
<xref linkend="glibc-System-V-contexts"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>swprintf</command> (wchar_t *<varname>s</varname>, size_t <varname>size</varname>, const wchar_t *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (GNU):
<xref linkend="glibc-Formatted-Output-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>swscanf</command> (const wchar_t *<varname>ws</varname>, const char *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (ISO):
<xref linkend="glibc-Formatted-Input-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>symlink</command> (const char *<varname>oldname</varname>, const char *<varname>newname</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (BSD):
<xref linkend="glibc-Symbolic-Links"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>SYMLINK_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):
<xref linkend="glibc-File-Minimums"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sync</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (X/Open):
<xref linkend="glibc-Synchronizing-I-O"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long int <command>syscall</command> (long int <varname>sysno</varname>, ...)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (???):
<xref linkend="glibc-System-Calls"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long int <command>sysconf</command> (int <varname>parameter</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):
<xref linkend="glibc-Sysconf-Definition"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>sysctl</command> (int *<varname>names</varname>, int <varname>nlen</varname>, void *<varname>oldval</varname>,</literal>
    </glossterm>
    <glossdef>
     <para><literal>sysctl.h</literal> (BSD):
<xref linkend="glibc-System-Parameters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>syslog</command> (int <varname>facility_priority</varname>, char *<varname>format</varname>, ...)</literal>
    </glossterm>
    <glossdef>
     <para><literal>syslog.h</literal> (BSD):
<xref linkend="glibc-syslog--vsyslog"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>system</command> (const char *<varname>command</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):
<xref linkend="glibc-Running-a-Command"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>sighandler_t <command>sysv_signal</command> (int <varname>signum</varname>, sighandler_t <varname>action</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>signal.h</literal> (GNU):
<xref linkend="glibc-Basic-Signal-Handling"/>.
</para>
    </glossdef>
   </glossentry>
  </glosslist>
 </section>
