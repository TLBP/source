<?xml version="1.0" encoding="UTF-8"?>

<!-- ********************************************************************
     $Id: ch04.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->
<part xml:id="glibc-Character-Handling">
  <title>Karakterle Çalışma</title>
  <titleabbrev>Karakter sınama ve dönüşüm işlevleri.</titleabbrev>
  <partintro>
    <para>
Karakterler ve dizgelerle çalışan yazılımlar bir karakteri, alfabetik, rakam, boşluk, vs. olarak sınıflandırmayı ve karakterler üzerinde büyük-küçük harf dönüşümleri uygulamayı gerektirir. <filename>ctype.h</filename> başlık dosyasındaki işlevler bu amaç içindir.
    </para><para>
<indexterm scope="glibc-pg"><primary>ctype.h</primary></indexterm>
Yerel ve karakter kümesi seçimi karakter kodlarının sınflandırılmalarını değiştirebildiğinden bu işlevlerin tümü o anki yerelden etkilenir. Daha teknik bir söylemle, onlar, <link linkend="glibc-Locale-Categories">yerel kategorilerden</link> karakter sınıflandırması için olan <command>LC_CTYPE</command> kategorisinden etkilenir.
    </para><para>
ISO C standardı iki farklı işlev kümesi belirtir. Bu işlev kümelerinden biri <command>char</command> türünden karakterlerle diğeri <command>wchar_t</command> türünden geniş karakterlerle çalışır. (Bkz. <xref linkend="glibc-Extended-Char-Intro"/>).
    </para>
  </partintro>
  <chapter xml:id="glibc-Classification-of-Characters">
    <title>Karakterlerin Sınıflandırılması</title>
    <titleabbrev>Karakterlerin harf mi, rakam mı, noktalama işareti mi, vs. diye sınanması.</titleabbrev>
    <para/><para>
<indexterm scope="glibc-cp"><primary>karakter sınaması</primary></indexterm>
<indexterm scope="glibc-cp"><primary>karakterlerin sınıflandırılması</primary></indexterm>
<indexterm scope="glibc-cp"><primary>karakter niteleyiciler</primary></indexterm>
Bu kısımda karakterlerin sınıflandırılmasında kullanılan işlevler açıklanmıştır.  Örneğin <command>isalpha</command> işlevi bir karakterin alfabetik bir karakter olup olmadığını sınar. Argüman olarak bir karakter alır ve alfabetik bir karakterse sıfırdan farklı bir tamsayı, değilse sıfır ile döner. Onu aşağıdaki gibi kullanabilirsiniz:
    </para><para>
<screen>if (isalpha (c))
  printf (&quot;`%c' bir alfabetik karakterdir.\n&quot;, c);
</screen></para><para>
Bu kısımdaki her işlev bir karakterin belli bir sınıfa üye olup olmadığına bakar ve bu işlevlerin isimleri daima <command>is</command> ile başlar. Herbiri argüman olarak bir karakter alır ve mantıksal bir değer olarak değerlendirilebilen <command>int</command> türünden bir değerle döner. Karakter argümanı <command>int</command> türünden olmalıdır. Bir gerçek karakter yerine <command>EOF</command> gibi bir sabit değer de verilebilir.
    </para><para>
Her karakterin öznitelikleri yerele göre değişiklik gösterir. Yereller hakkında daha fazla bilgi edinmek isterseniz <xref linkend="glibc-Locales"/> bölümüne bakınız.
    </para><para>
Bu işlevler <filename>ctype.h</filename> başlık dosyasında bildirilmiştir.
<indexterm scope="glibc-pg"><primary>ctype.h</primary></indexterm>
    </para><para xml:id="glibc-islower">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>küçük harf</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>islower</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>islower</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir küçük harf ise sıfırdan farklı bir değerle döner. Harfin Latin alfabesinden olması şart değildir, herhangi bir alfabeden olabilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isupper">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>büyük harf</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isupper</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isupper</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir büyük harf ise sıfırdan farklı bir değerle döner. Harfin Latin alfabesinden olması şart değildir, herhangi bir alfabeden olabilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isalpha">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>alfabetik</secondary> </indexterm>
<indexterm scope="glibc-fn"><primary>isalpha</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isalpha</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir alfabetik karakter (bir harf) ise sıfırdan farklı bir değerle döner. <command>islower</command> veya <command>isupper</command> işlevi doğru ile dönüyorsa <command>isalpha</command> işlevi de doğru ile döner.
      </para><para>
Bazı yereller ne büyük ne de küçük harf olan ve <command>isalpha</command> işlevinin doğru ile döndüğü ek karakterler içerir. Standart <command>&quot;C&quot;</command> yerelinde böyle bir karakter yoktur.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isdigit">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>sayısal</secondary> <tertiary>onluk</tertiary></indexterm>
<indexterm scope="glibc-cp"><primary>onluk rakamlar</primary></indexterm>
<indexterm scope="glibc-fn"><primary>isdigit</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isdigit</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> değişkeninin değeri <command>0</command> ile <command>9</command> arasında bir rakam karakteri ise sıfırdan farklı bir değerle döner.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isalnum">
<indexterm scope="glibc-cp"><primary>karakterler</primary>
<secondary>alfasayısal</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isalnum</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isalnum</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir alfasayısal karakter (bir harf ya da rakam) ise sıfırdan  farklı bir  değerle döner. Başka bir ifade ile, <command>isalpha</command> ya da <command>isdigit</command> doğru ise <command>isalnum</command> da doğrudur.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isxdigit">
<indexterm scope="glibc-fn"><primary>isxdigit</primary></indexterm>
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>sayısal</secondary><tertiary>onaltılık</tertiary></indexterm>
<indexterm scope="glibc-cp"><primary>onaltılık rakamlar</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isxdigit</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> değişkeninin değeri <command>0</command> ile <command>9</command> arasında bir rakam karakteri veya <command>A</command> ile <command>F</command> arasında bir büyük ya da küçük harf ise sıfırdan farklı bir değerle döner.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-ispunct">
<indexterm scope="glibc-cp"><primary>karakterler</primary>
<secondary>noktalama işaretleri</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>ispunct</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>ispunct</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir noktalama işareti ise sıfırdan farklı bir  değerle döner. Noktalama işaretleri, alfasayısal ve boşluk olmayan basılabilir karakterlerdir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isspace">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>boşluk karakterleri</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isspace</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isspace</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir boşluk karakteri ise sıfırdan farklı bir  değerle döner. <command>&quot;C&quot;</command> yerelinde <command>isspace</command> işlevi, sadece
      </para><para>
<literallayout indent="0">
    <command>' '</command>  (boşluk)
    <command>'\f'</command> (sayfa ileri)
    <command>'\n'</command> (satırsonu)
    <command>'\r'</command> (satırbaşı)
    <command>'\t'</command> (yatay sekme)
    <command>'\v'</command> (düşey sekme)
</literallayout>
      </para><para>
karakterleri için doğrudur.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isblank">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>boşluk</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isblank</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isblank</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir boşluk ya da sekme karakteri ise sıfırdan farklı bir değerle döner. Bu işlev bir GNU oluşumudur, fakat ISO C99'a da eklenmiştir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isgraph">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>çizgesel</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isgraph</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isgraph</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir çizgesel karakter ise sıfırdan farklı bir değerle döner. Çizgesel karakterler, metin ekranında pencere çizmek amacıyla kullanılan karakterler gibi karakterlerdir. Boşluk karakterleri çizgesel karakter değildir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isprint">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>basılabilir</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isprint</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isprint</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> basılabilir bir karakter ise sıfırdan farklı bir değerle döner.  Basılabilir karakterler, çizgesel karakterler ile boşluk (<command>' '</command>) karakterinden oluşur.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iscntrl">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>denetim</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iscntrl</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iscntrl</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir denetim karakteri ise (basılabilir bir karakter değilse) sıfırdan farklı bir değerle döner.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-isascii">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>ASCII</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>isascii</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>isascii</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir 7 bitlik <command>unsigned char</command> türünden ASCII karakter kümesinden karakter ise sıfırdan farklı bir değerle döner. Bu işlev bir BSD ve SVID oluşumudur.
      </para></funcdescr></funcsynopsis>
    </para>
  </chapter>
  <chapter xml:id="glibc-Case-Conversion">
    <title>Büyük-Küçük Harf Dönüşümleri</title>
    <titleabbrev>Harfleri büyüklüklerine göre eşleme.</titleabbrev>
    <para/><para>
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>büyük-küçük harf dönüşümleri</secondary></indexterm>
Bu kısımda karakterler üzerinde harf büyüklüklerine göre dönüşüm işlemlerinden bahsedilmiştir. Örneğin, <command>toupper</command> işlevi bir karakteri mümkünse büyük harfe dönüştürmek için kullanılır. Eğer karakter dönüştürülemiyosa <command>toupper</command> işlevi karakteri değiştirmez.
    </para><para>
Bu işlevler karakteri <command>int</command> türünden bir argüman olarak alır ve dönüştürülen karakteri <command>int</command> türünden geridöndürür. Verilen argümana dönüşüm uygulanabilir değilse verilen argüman değiştirilmeden döner.
    </para><para>
<note><title>Uyumluluk Bilgisi:</title><para> ISO C öncesi oluşumlarda, bu işlevler başarısız olduklarında verilen argümanla dönmezler, sadece başarısız olurlardı. Uyumluluk açısından <command>toupper(c)</command> yerine <command>islower(c) ? toupper(c) : c</command> yazmanız gerekebilir.</para></note>
   </para><para>
Bu işlevler <filename>ctype.h</filename> başlık dosyasında bildirilmiştir.
<indexterm scope="glibc-pg"><primary>ctype.h</primary></indexterm>
   </para><para xml:id="glibc-tolower">
<indexterm scope="glibc-fn"><primary>tolower</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>tolower</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir büyük harf ise, işlev ona karşılık gelen küçük harf ile döner. <varname>c</varname> bir büyük harf değilse işlev <varname>c</varname> ile döner.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-toupper">
<indexterm scope="glibc-fn"><primary>toupper</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>toupper</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>c</varname> bir küçük harf ise, işlev ona karşılık gelen büyük harf ile döner. <varname>c</varname> bir küçük harf değilse işlev <varname>c</varname> ile döner.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-toascii">
<indexterm scope="glibc-fn"><primary>toascii</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>toascii</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bu işlev karakterin yüksek seviyeli bitini temizleyerek 7 bitlik <command>unsigned char</command> türünde ASCII karakter kümesinden bir karakter döndürür. Bu işlev bir BSD ve bir SVID oluşumudur.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc_tolower">
<indexterm scope="glibc-fn"><primary sortas="tolower0">_tolower</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>_tolower</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bu işlev <command>tolower</command> işlevi ile eşdeğerdedir ve <link  linkend="glibc-SVID">SVID</link> ile uyumluluk için bulunmaktadır.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc_toupper">
<indexterm scope="glibc-fn"><primary sortas="toupper0">_toupper</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>_toupper</command></funcdef>
<paramdef>(int <varname>c</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bu işlev <command>toupper</command> işlevi ile eşdeğerdedir ve <link  linkend="glibc-SVID">SVID</link> ile uyumluluk için bulunmaktadır.
      </para></funcdescr></funcsynopsis>
    </para>
  </chapter>
  <chapter xml:id="glibc-Classification-of-Wide-Characters">
    <title>Geniş Karakterlerin Sınıflandırılması</title>
    <titleabbrev>Geniş karakterlerin karakter sınıflarının saptanması</titleabbrev>
    <para/><para>
ISO C90 standardının 1. düzeltmesi, geniş karakterleri sınıflandıran işlevler  tanımlar. Özgün ISO C90 standardında <command>wchar_t</command> türü tanımlanmışsa da bu tür ile çalışan hiçbir işlev tanımlanmamıştı.
    </para><para>
Geniş karakterler için sınıflandırma işlevlerinin genel tasarımı daha geneldir. Daima kullanılabilir olanların dışında kullanılabilir sınıflandırmalar kümesi oluşumlarını mümkün kılar. POSIX standardı oluşumların nasıl yapılacağını belirtir ve bu zaten bir GNU C kütüphanesi gerçeklemesi olan <command>localedef</command> yazılımı ile gerçeklenmiştir.
    </para><para>
Karakter sınıfı işlevleri normalde her karakter için bir bit kümesi olmak üzere bit kümeleri ile gerçeklenir. Verilen bir karakter için bit kümesi bir tablodan okunur ve anlamlı bitlerin bir olup olmadığına bakılır. Sınanacak bitler sınıf tarafından belirlenir.
    </para><para>
Geniş karakter sınıflandırma işlevleri için bu görünür yapılır. Sınıflandırma türü için bir tür, bir verilmiş sınıf için bu değeri alan bir işlev ve verilen karakterin verilen sınıfa ait olup olmadığını sınıflandırma değerini kullanarak sınayan bir işlev daha vardır. En tepede, <command>char</command> türünden nesneler için kullanılan normal karakter sınıflandırma işlevleri gibi tanımlanmış olabilirler.
    </para><para>
Bu kısımda bahsi geçen tüm işlevler aksi belirtilmedikçe <filename>wctype.h</filename> başlık dosyasında tanımlanmıştır.
<indexterm scope="glibc-pg"><primary>wctype.h</primary></indexterm>
    </para><para xml:id="glibc-wctype_t">
<indexterm scope="glibc-tp"><primary>wctype_t</primary></indexterm>
<funcsynopsis><funcprototype role="veri türü">
<funcdef><command>wctype_t</command></funcdef>
<paramdef></paramdef>
</funcprototype><funcdescr><para>
<command>wctype_t</command> bir karakter sınıfına karşılık gelen bir değeri tutabilir. Böyle bir değeri üretmenin tanımlanmış tek yolu <command>wctype</command> işlevini kullanmaktır.
      </para><para>
Bu tür <filename>wctype.h</filename> başlık dosyasında tanımlanmıştır.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-wctype">
<indexterm scope="glibc-fn"><primary>wctype</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>wctype_t <command>wctype</command></funcdef>
<paramdef>(const char *<varname>özellik</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>wctype</command> işlevi <varname>özellik</varname> dizgesi ile belirtilen bir geniş karakter sınıfını ifade eden bir değer ile döner. Her yerelde tanımlanabilir standart özelliklerin bazıları aşağıda verilmiştir. <varname>özellik</varname> dizgesi <command>LC_CTYPE</command> kategorisi için seçilen yerelde tanımlanmış isimlerden biri değilse işlev sıfır değeriyle döner.
      </para><para>
Her yerelde bilinen özellikler:
      </para>
        <informaltable frame="none" style="background:#999999;">
          <tgroup cols="4">
            <colspec colwidth="17*"/><colspec colwidth="17*"/>
            <colspec colwidth="17*"/><colspec colwidth="17*"/>
            <tbody>
              <row style="background:#ffffee;">
<entry><command>alnum</command></entry> <entry><command>alpha</command></entry> <entry><command>cntrl</command></entry> <entry><command>digit</command></entry>
              </row><row style="background:#ffffee;">
<entry><command>graph</command></entry> <entry><command>lower</command></entry> <entry><command>print</command></entry> <entry><command>punct</command></entry>
              </row><row style="background:#ffffee;">
<entry><command>space</command></entry> <entry><command>upper</command></entry> <entry><command>xdigit</command></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </funcdescr></funcsynopsis>
    </para><para>
Bir karakterin standart dışı sınıflardan birine üyeliğini sınamak için ISO C standardı tamamen yeni bir işlev tanımlar.
    </para><para xml:id="glibc-iswctype">
<indexterm scope="glibc-fn"><primary>iswctype</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswctype</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>,
 wctype_t <varname>tanımlayıcı</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bu işlev, <varname>wc</varname> karakteri <varname>tanımlayıcı</varname> ile belirtilen sınıfa ait bir karakterse sıfırdan farklı bir değerle döner. <varname>tanımlayıcı</varname> önceki bir <command>wctype</command> çağrısından dönen değer olmalıdır.
</para></funcdescr></funcsynopsis>
    </para><para>
Çok kullanılan sınıflandırma işlevleri kullanımı kolaylaştırmak için C kütüphanesinde tanımlanmıştır. Özellik dizgesi bilinen karakter sınıflarından biriyse bu işlevler için <command>wctype</command> işlevini kullanmaya gerek yoktur. Ancak bazı durumlarda özellik dizgelerinden standart sınıfları elde etmekte önem kazanır.
    </para><para xml:id="glibc-iswalnum">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>alfasayısal</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswalnum</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswalnum</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir alfasayısal karakter (bir harf ya da rakam) ise sıfırdan  farklı bir  değerle döner. Başka bir ifade ile, <command>iswalpha</command> ya da <command>iswdigit</command> doğru ise <command>iswalnum</command>'da doğrudur.
      </para><para>İşlev,</para><para>
<screen>
iswctype (wc, wctype (&quot;alnum&quot;))
</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswalpha">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>alfabetik</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswalpha</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswalpha</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir alfabetik karakter (bir harf) ise sıfırdan farklı bir değerle döner. <command>iswlower</command> veya <command>iswupper</command> işlevi doğru ile dönüyorsa <command>iswalpha</command> işlevi de doğru ile döner.
      </para><para>
Bazı yereller ne büyük ne de küçük harf olan ve <command>iswalpha</command> işlevinin doğru ile döndüğü ek karakterler içerir. Standart <command>&quot;C&quot;</command> yerelinde böyle bir karakter yoktur.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;alpha&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswcntrl">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>denetim</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswcntrl</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswcntrl</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir denetim karakteri ise (basılabilir bir karakter değilse) sıfırdan farklı bir değerle döner.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;cntrl&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswdigit">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>sayısal</secondary><tertiary>onluk</tertiary></indexterm>
<indexterm scope="glibc-fn"><primary>iswdigit</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswdigit</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> değişkeninin değeri <command>0</command> ile <command>9</command> arasında bir rakam karakteri ise sıfırdan farklı bir değerle döner.
      </para><para>
<note><para>Bu işlev sadece onluk sistemdeki rakamlar için değil, tüm rakam çeşitleri için sıfırdan farklı bir değerle döner. Bu nedenle aşağıdaki gibi bir kod koşulsuz olarak <varname>çalışmayacaktır</varname>:
      </para><para>
<screen>
n = 0;
while (iswdigit (*wc))
  {
    n *= 10;
    n += *wc++ - L'0';
  }
</screen></para></note></para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;digit&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswgraph">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>çizgesel</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswgraph</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswgraph</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir çizgesel karakter ise sıfırdan farklı bir değerle döner. Çizgesel karakterler, metin ekranında pencere çizmek amacıyla kullanılan karakterler gibi karakterlerdir. Boşluk karakterleri çizgesel karakter değildir.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;graph&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswlower">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>küçük harf</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswlower</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswlower</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir küçük harf ise sıfırdan farklı bir değerle döner. Harfin Latin alfabesinden olması şart değildir, herhangi bir alfabeden olabilir.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;lower&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswprint">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>basılabilir</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswprint</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswprint</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> basılabilir bir karakter ise sıfırdan farklı bir değerle döner.  Basılabilir karakterler, çizgesel karakterler ile boşluk (<command>' '</command>) karakterinden oluşur.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;print&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswpunct">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>noktalama işaretleri</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswpunct</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswpunct</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir noktalama işareti ise sıfırdan farklı bir  değerle döner. Noktalama işaretleri, alfasayısal ve boşluk olmayan basılabilir karakterlerdir.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;punct&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswspace">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>boşluk karakterleri</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswspace</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswspace</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir boşluk karakteri ise sıfırdan farklı bir  değerle döner. <command>&quot;C&quot;</command> yerelinde <command>iswspace</command> işlevi, sadece
      </para><para>
<literallayout indent="0">
    <command>L' '</command>  (boşluk)
    <command>L'\f'</command> (sayfa ileri)
    <command>L'\n'</command> (satırsonu)
    <command>L'\r'</command> (satırbaşı)
    <command>L'\t'</command> (yatay sekme)
    <command>L'\v'</command> (düşey sekme)
</literallayout>
      </para><para>karakterleri için doğrudur. İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;space&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswupper">
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>büyük harf</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswupper</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswupper</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir büyük harf ise sıfırdan farklı bir değerle döner. Harfin Latin alfabesinden olması şart değildir, herhangi bir alfabeden olabilir.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;upper&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-iswxdigit">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>sayısal</secondary><tertiary>onaltılık</tertiary></indexterm>
<indexterm scope="glibc-fn"><primary>iswxdigit</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswxdigit</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> değişkeninin değeri <command>0</command> ile <command>9</command> arasında bir rakam karakteri veya <command>A</command> ile <command>F</command> arasında bir büyük ya da küçük harf ise sıfırdan farklı bir değerle döner.
      </para><para>İşlev,</para><para>
<screen>iswctype (wc, wctype (&quot;xdigit&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir.
      </para></funcdescr></funcsynopsis>
    </para><para>
GNU C kütüphanesi bunlardan başka, ISO C standardında tek baytlık karakterler için de tanımlanmamış bir işlev daha içerir.
    </para><para xml:id="glibc-iswblank">
<indexterm scope="glibc-cp"><primary>karakterler</primary> <secondary>boşluk</secondary></indexterm>
<indexterm scope="glibc-fn"><primary>iswblank</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>int <command>iswblank</command></funcdef>
<paramdef>(wint_t   <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir boşluk ya da sekme karakteri ise sıfırdan farklı bir değerle döner. Bu işlev bir GNU oluşumudur, fakat ISO C99'a da eklenmiştir. <filename>wchar.h</filename> başlık dosyasında bildirilmiştir.
      </para></funcdescr></funcsynopsis>
    </para>
  </chapter>
  <chapter xml:id="glibc-Using-Wide-Char-Classes">
    <title>Geniş Karakter Sınıflarının Kullanılması</title>
    <titleabbrev>Geniş karakterlerin kullanımına ilişkin uyarılar</titleabbrev>
    <para/><para>
İlk uyarı, şüphesiz şaşırtıcı değil ama hala arasıra sorun çıkarmaktadır. <command>isw<varname>XXX</varname></command> işlevleri makrolarla gerçeklenebilir ve GNU  C kütüphanesi böyle yapar. Onlar yine de gerçek işlevler olarak kullanılabilirse de <command>wctype.h</command> başlık dosyası içerildiğinde makrolar kullanılacaktır. Bu durum, bu işlevlerin <command>char</command> türü olanları için de aynıdır.
    </para><para>
İkincisi daha yeni bir bilgidir. En iyisi bir örnekle açıklamak. Kodun ilk parçasını özgün koddan (biraz kısaltarak) seçelim.
    </para><para>
<screen>
int is_in_class (int c, const char *class)
{
  if (strcmp (class, &quot;alnum&quot;) == 0)
    return isalnum (c);
  if (strcmp (class, &quot;alpha&quot;) == 0)
    return isalpha (c);
  if (strcmp (class, &quot;cntrl&quot;) == 0)
    return iscntrl (c);
  …
  return 0;
}
</screen></para><para>
Şimdi, <command>wctype</command> ve <command>iswctype</command> ile <command>if</command> merdiveninden kurtulabilirsiniz, ancak aşağıdaki gibi bir kod yanlış olacaktır:
    </para><para>
<screen>
int is_in_class (int c, const char *class)
{
  wctype_t desc = wctype (class);
  return desc ? iswctype ((wint_t) c, desc) : 0;
}
</screen></para><para>
Burada sorun, bir tek baytlık karakterin geniş karakter karşılığının tür dönüşümü ile elde edilebilirliğinin garantili olmayışıdır. Doğru çözüm, kodu aşağıdaki gibi yazmaktır:
    </para><para>
<screen>
int is_in_class (int c, const char *class)
{
  wctype_t desc = wctype (class);
  return desc ? iswctype (btowc (c), desc) : 0;
}
</screen></para><para>
<command>btowc</command> işlevi hakkında bilgi edinmek için <xref linkend="glibc-Converting-a-Character"/> bölümüne bakınız. Burada, <command>wctype</command> işlevi hala bir dizge karşılaştırması yaptığından yazılımın başarımı arttırılmış olmayacaktır. <command>is_in_class</command> işlevi aynı sınıf ismi için defalarca çağrılırsa durum gerçekten ilginç olur. Bu durumda, <varname>desc</varname> değişkeni bir kere hesaplanıp tüm çağrılarda kullanılmalıydı. Bu nedenle işlevin yukardaki şekli şüphesiz işlevin son hali olmayacaktır.
    </para>
  </chapter>
  <chapter xml:id="glibc-Wide-Character-Case-Conversion">
    <title>Geniş Karakterlerde Büyük-küçük Harf Dönüşümleri</title>
    <titleabbrev>Geniş karakterlerde harfleri büyüklüklerine göre eşleme.</titleabbrev>
<indexterm scope="glibc-cp"><primary>karakterler</primary><secondary>büyük-küçük harf dönüşümleri</secondary></indexterm>
    <para/><para>
Sınıflandırma işlevleri ISO C standardı tarafından ayrıca genelleştirilmiştir. İki standardın eşleştirilmesi yerine bir yerelin diğerlerini içermesi sağlanabilir. <command>localedef</command> yazılımı bu yerel veri dosyalarının üretilmesini zaten desteklemektedir.
    </para><para xml:id="glibc-wctrans_t">
<indexterm scope="glibc-tp"><primary>wctrans_t</primary></indexterm>
<funcsynopsis><funcprototype role="veri türü">
<funcdef><command>wctrans_t</command></funcdef>
<paramdef></paramdef>
</funcprototype><funcdescr><para>
Bu veri türü, yerele bağımlı karakter eşleşmelerini ifade eden bir değeri tutabilen ölçeklenebilir bir tür olarak tanımlanmıştır. Böyle bir değeri <command>wctrans</command> işlevinden dönen bir değer olarak yapılandırmaktan başka bir yol yoktur.
      </para><para>
<indexterm scope="glibc-pg"><primary>wctype.h</primary></indexterm>
Bu tür <filename>wctype.h</filename> başlık dosyasında tanımlanmıştır.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-wctrans">
<indexterm scope="glibc-fn"><primary>wctrans</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>wctrans_t <command>wctrans</command></funcdef>
<paramdef>(const char *<varname>özellik</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>wctrans</command> işlevi, <command>LC_CTYPE</command> kategorisi için seçilen yerelde tanımlı, <varname>özellik</varname> ile belirtilen isimli bir eşleşme varsa bulmakta kullanılır. Dönen değer sıfırsa yerelde böyle bir eşleşmenin bulunmadığı anlaşılır. Sıfırdan farklı bir değer dönmüşse bu değer bir <command>towctrans</command> çağrısında kullanılabilir.
      </para><para>
Her yerelde kullanılabilen iki eşleşme aşağıda verilmiştir:
      </para><para>
        <informaltable frame="none" style="background:#999999;">
          <tgroup cols="2">
            <colspec colwidth="34*"/><colspec colwidth="34*"/>
            <tbody>
<row style="background:#ffffee;">
<entry><command>tolower</command></entry> <entry><command>toupper</command></entry></row>
            </tbody>
          </tgroup>
        </informaltable>
      </para><para>
Bu işlev <filename>wctype.h</filename> başlık dosyasında bildirilmiştir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-towctrans">
<indexterm scope="glibc-fn"><primary>towctrans</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>wint_t <command>towctrans</command></funcdef>
<paramdef>(wint_t    <varname>wc</varname>,
 wctrans_t <varname>tanımlayıcı</varname>)</paramdef>
</funcprototype><funcdescr><para>
Bu işlev, <varname>wc</varname> karakterinin <varname>tanımlayıcı</varname> ile  belirtilen eşleşme kurallarına uygun karşılığını bulur ve bu değerle döner. <varname>tanımlayıcı</varname> önceki bir <command>wctrans</command> çağrısından dönen değer olmalıdır.
      </para><para>
Bu işlev <filename>wctype.h</filename> başlık dosyasında bildirilmiştir.
      </para></funcdescr></funcsynopsis>
    </para><para>
Genel olarak kullanılabilen eşleşmeler için ISO C standardı birer <command>wctrans</command> çağrısı gerektirmeyen kısayollar tanımlar.
    </para><para xml:id="glibc-towlower">
<indexterm scope="glibc-fn"><primary>towlower</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>wint_t <command>towlower</command></funcdef>
<paramdef>(wint_t <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir büyük harf ise, işlev ona karşılık gelen küçük harf ile döner. <varname>wc</varname> bir büyük harf değilse işlev <varname>wc</varname> ile döner.
      </para><para>İşlev,</para><para>
<screen>towctrans (wc, wctrans (&quot;tolower&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir. Bu işlev <filename>wctype.h</filename> başlık dosyasında bildirilmiştir.
</para></funcdescr></funcsynopsis></para><para xml:id="glibc-towupper">
<indexterm scope="glibc-fn"><primary>towupper</primary></indexterm>
<funcsynopsis><funcprototype role="işlev">
<funcdef>wint_t <command>towupper</command></funcdef>
<paramdef>(wint_t <varname>wc</varname>)</paramdef>
</funcprototype><funcdescr><para>
<varname>wc</varname> bir büyük harf ise, işlev ona karşılık gelen küçük harf ile döner. <varname>wc</varname> bir büyük harf değilse işlev <varname>wc</varname> ile döner.
      </para><para>İşlev,</para><para>
<screen>towctrans (wc, wctrans (&quot;toupper&quot;))</screen>
      </para><para>
kullanılarak da gerçeklenebilir. Bu işlev <filename>wctype.h</filename>
 başlık dosyasında bildirilmiştir.
      </para></funcdescr></funcsynopsis>
    </para><para>
Geniş karakterlerin kullanımına ilişkin önceki bölümdeki uyarılar burada da geçerlidir. <command>towctrans</command> çağrılarında bir argüman olarak <command>char</command> türünden bir değer, tür dönüşümü ile  <command>wint_t</command> türüne dönüştürülerek kullanılamaz.
    </para>
  </chapter>
</part>

