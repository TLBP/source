<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-a.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-A"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>A</title>
  </info>
  <para>
   <glosslist>
    <glossentry>
     <glossterm>
      <literal>long int <command>a64l</command> (const char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (XPG):  <xref linkend="glibc-Encode-Binary-Data"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>abort</command> (void)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Aborting-a-Program"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>abs</command> (int <varname>number</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>accept</command> (int <varname>socket</varname>, struct sockaddr *<varname>addr</varname>, socklen_t *<varname>length_ptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Accepting-Connections"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>access</command> (const char *<varname>filename</varname>, int <varname>how</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Testing-File-Access"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ACCOUNTING</command>
     </glossterm>
     <glossdef>
      <para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>acos</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>acosf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>acosh</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>acoshf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>acoshl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>acosl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>addmntent</command> (FILE *<varname>stream</varname>, const struct mntent *<varname>mnt</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>mntent.h</literal> (BSD):  <xref linkend="glibc-mtab"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>adjtime</command> (const struct timeval *<varname>delta</varname>, struct timeval *<varname>olddelta</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-High-Resolution-Calendar"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>adjtimex</command> (struct timex *<varname>timex</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/timex.h</literal> (GNU):  <xref linkend="glibc-High-Resolution-Calendar"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>AF_FILE</command>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (GNU):  <xref linkend="glibc-Address-Formats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>AF_INET</command>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Address-Formats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>AF_INET6</command>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (IPv6 Basic API):  <xref linkend="glibc-Address-Formats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>AF_LOCAL</command>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (POSIX):  <xref linkend="glibc-Address-Formats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>AF_UNIX</command>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (BSD, Unix98):  <xref linkend="glibc-Address-Formats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>AF_UNSPEC</command>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Address-Formats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_cancel</command> (int <varname>fildes</varname>, struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Cancel-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_cancel64</command> (int <varname>fildes</varname>, struct aiocb64 *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Cancel-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_error</command> (const struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Status-of-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_error64</command> (const struct aiocb64 *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Status-of-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_fsync</command> (int <varname>op</varname>, struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Synchronizing-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_fsync64</command> (int <varname>op</varname>, struct aiocb64 *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Synchronizing-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>aio_init</command> (const struct aioinit *<varname>init</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (GNU):  <xref linkend="glibc-Configuration-of-AIO"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_read</command> (struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Asynchronous-Reads-Writes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_read64</command> (struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Asynchronous-Reads-Writes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>ssize_t <command>aio_return</command> (const struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Status-of-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_return64</command> (const struct aiocb64 *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Status-of-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_suspend</command> (const struct aiocb *const <varname>list</varname>[], int <varname>nent</varname>, const struct timespec *<varname>timeout</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Synchronizing-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_suspend64</command> (const struct aiocb64 *const <varname>list</varname>[], int <varname>nent</varname>, const struct timespec *<varname>timeout</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Synchronizing-AIO-Operations"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_write</command> (struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (POSIX.1b):  <xref linkend="glibc-Asynchronous-Reads-Writes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>aio_write64</command> (struct aiocb *<varname>aiocbp</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>aio.h</literal> (Unix98):  <xref linkend="glibc-Asynchronous-Reads-Writes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>unsigned int <command>alarm</command> (unsigned int <varname>seconds</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Setting-an-Alarm"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void * <command>alloca</command> (size_t <varname>size</varname>);</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (GNU, BSD):  <xref linkend="glibc-Variable-Size-Automatic"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>alphasort</command> (const void *<varname>a</varname>, const void *<varname>b</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>dirent.h</literal> (BSD/SVID):  <xref linkend="glibc-Scanning-Directory-Content"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>alphasort64</command> (const void *<varname>a</varname>, const void *<varname>b</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>dirent.h</literal> (GNU):  <xref linkend="glibc-Scanning-Directory-Content"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>ALTWERASE</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Local-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>ARG_MAX</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-General-Limits"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argp_err_exit_status</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Global-Variables"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argp_error</command> (const struct argp_state *<varname>state</varname>, const char *<varname>fmt</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Helper-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>ARGP_ERR_UNKNOWN</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Parser-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argp_failure</command> (const struct argp_state *<varname>state</varname>, int <varname>status</varname>, int <varname>errnum</varname>, const char *<varname>fmt</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Helper-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argp_help</command> (const struct argp *<varname>argp</varname>, FILE *<varname>stream</varname>, unsigned <varname>flags</varname>, char *<varname>name</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_IN_ORDER</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_ARG</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_ARGS</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_END</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_ERROR</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>&gt;ARGP_KEY_FINI</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_HELP_ARGS_DOC</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help-Filter-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_HELP_DUP_ARGS_NOTE</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help-Filter-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_HELP_EXTRA</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help-Filter-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_HELP_HEADER</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help-Filter-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_HELP_POST_DOC</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help-Filter-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_HELP_PRE_DOC</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Help-Filter-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_INIT</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_KEY_NO_ARGS</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>&gt;ARGP_KEY_SUCCESS</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Special-Keys"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_LONG_ONLY</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_NO_ARGS</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_NO_ERRS</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_NO_EXIT</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_NO_HELP</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argp_parse</command> (const struct argp *<varname>argp</varname>, int <varname>argc</varname>, char **<varname>argv</varname>, unsigned <varname>flags</varname>, int *<varname>arg_index</varname>, void *<varname>input</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <link linkend="glibc-Argp">Suboptions</link>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_PARSE_ARGV0</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>const char * <command>argp_program_bug_address</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Global-Variables"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>const char * <command>argp_program_version</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Global-Variables"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>argp_program_version_hook</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Global-Variables"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>ARGP_SILENT</command>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Flags"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argp_state_help</command> (const struct argp_state *<varname>state</varname>, FILE *<varname>stream</varname>, unsigned <varname>flags</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Helper-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argp_usage</command> (const struct argp_state *<varname>state</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Helper-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_add</command> (char **<varname>argz</varname>, size_t *<varname>argz_len</varname>, const char *<varname>str</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_add_sep</command> (char **<varname>argz</varname>, size_t *<varname>argz_len</varname>, const char *<varname>str</varname>, int <varname>delim</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_append</command> (char **<varname>argz</varname>, size_t *<varname>argz_len</varname>, const char *<varname>buf</varname>, size_t <varname>buf_len</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>argz_count</command> (const char *<varname>argz</varname>, size_t <varname>arg_len</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_create</command> (char *const <varname>argv</varname>[], char **<varname>argz</varname>, size_t *<varname>argz_len</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_create_sep</command> (const char *<varname>string</varname>, int <varname>sep</varname>, char **<varname>argz</varname>, size_t *<varname>argz_len</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argz_delete</command> (char **<varname>argz</varname>, size_t *<varname>argz_len</varname>, char *<varname>entry</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argz_extract</command> (char *<varname>argz</varname>, size_t <varname>argz_len</varname>, char **<varname>argv</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_insert</command> (char **<varname>argz</varname>, size_t *<varname>argz_len</varname>, char *<varname>before</varname>, const char *<varname>entry</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>argz_next</command> (char *<varname>argz</varname>, size_t <varname>argz_len</varname>, const char *<varname>entry</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>error_t <command>argz_replace</command> (char **<varname>argz</varname>, size_t *<varname>argz_len</varname>, const char *<varname>str</varname>, const char *<varname>with</varname>, unsigned *<varname>replace_count</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>argz_stringify</command> (char *<varname>argz</varname>, size_t <varname>len</varname>, int <varname>sep</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>argz.h</literal> (GNU):  <xref linkend="glibc-Argz-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>asctime</command> (const struct tm *<varname>brokentime</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (ISO):  <xref linkend="glibc-Formatting-Calendar-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>asctime_r</command> (const struct tm *<varname>brokentime</varname>, char *<varname>buffer</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (POSIX.1c):  <xref linkend="glibc-Formatting-Calendar-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>asin</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>asinf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>asinh</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>asinhf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>asinhl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>asinl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>asprintf</command> (char **<varname>ptr</varname>, const char *<varname>template</varname>, …)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Dynamic-Output"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>assert</command> (int <varname>expression</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>assert.h</literal> (ISO):  <xref linkend="glibc-Consistency-Checking"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>assert_perror</command> (int <varname>errnum</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>assert.h</literal> (GNU):  <xref linkend="glibc-Consistency-Checking"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>atan</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>atan2</command> (double <varname>y</varname>, double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>atan2f</command> (float <varname>y</varname>, float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>atan2l</command> (long double <varname>y</varname>, long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>atanf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>atanh</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>atanhf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>atanhl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>atanl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>atexit</command> (void (*<varname>function</varname>) (void))</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Cleanups-on-Exit"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>atof</command> (const char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>atoi</command> (const char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long int <command>atol</command> (const char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long long int <command>atoll</command> (const char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </para>
 </section>
