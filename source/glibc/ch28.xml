<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         ch28.xml
******************************************************************** -->
<part xml:id="glibc-Name-Service-Switch" xmlns="http://docbook.org/ns/docbook"
      version="5.0" xml:lang="tr">
 <info>
  <title>Sistem Veritabanları ve İsim Hizmetleri Seçimi</title>
  <titleabbrev>Sistem veritabanlarına erişim.</titleabbrev>
 </info>
 <partintro>
  <para><indexterm scope="glibc-cp"><primary>isim hizmetleri</primary></indexterm><indexterm scope="glibc-cp"><primary>NSS</primary></indexterm><indexterm scope="glibc-cp"><primary>sistem veritabanları</primary></indexterm>
C kütüphanesindeki çeşitli işlevlerin yerel ortamda düzgün çalışması için yapılandırılmaları gerekir. Geleneksel olarak, bu işlem dosyalar kullanılarak yapılır (örn, <filename>/etc/passwd</filename>), ama diğer isim hizmetleri de (örn, Ağ Bilgi Hizmetleri - NIS, Alan Adı Hizmetleri - DNS) popüler olmuş ve C kütüphanesi içine zaman içinde dahil edilmişlerdir.
  </para>
  <para>
GNU C kütüphanesi bu soruna daha temiz bir çözüm içerir. Bu çözüm, Sun Microsystems tarafından Solaris 2'nin C kütüphanesinde kullanılan bir yöntemden sonra tasarlanmıştır. GNU C kütüphanesi bunların isimlerini ve çağrılarını <wordasword>İsim Hizmetleri Seçimi</wordasword> - <firstterm>Name Service Switch</firstterm> (NSS) şeması ile izler.
  </para>
  <para>
Arayüzün Sun'ın sürümüne benzer olması beklenirdi ama bir ortak kod bile yoktur. Biz Sun'ın gerçeklemesinden herhangi bir kaynak kod asla almadık, bu yüzden dahili arayüz uyumsuzdur. Daha sonra göreceğimiz gibi bunu dosya isimlerinde de açıkça ortaya koyduk.
  </para>
 </partintro>
 <chapter xml:id="glibc-NSS-Basics">
  <info>
   <title>NSS Temelleri</title>
   <titleabbrev>Nedir bu NSS dedikleri.</titleabbrev>
  </info>
  <para>
Anafikir, veritabanlarına erişmeye çalışan farklı hizmetlerin gerçeklemelerini ayrı modüllere koymaktır. Bunun bazı faydaları vardır:
   </para>
  <para>
   <orderedlist numeration="arabic" inheritnum="ignore" continuation="restarts">
    <listitem>
Destekçiler yeni hizmetleri GNU C kütüphanesine eklemeksizin NSS gerçeklemesine ekleyebilirler.
     </listitem>
    <listitem>
Modüller birbirinden bağımsız olarak güncellenebilir.
     </listitem>
    <listitem>
C kütüphanesi fazla şişmemiş olur.
     </listitem>
   </orderedlist>
  </para>
  <para>
Yukarıdaki ilk görevi yerine getirmek için modül arayüzünü<footnote><para>ABI: (Application Binary Interface kısaltması) - Bir uygulama ile işletim sistemi ya da hizmetler arasında erişimi sağlayan arayüz.</para></footnote> aşağıda açıklayacağız. Yeni bir hizmeti doğru gerçeklemek için modüller içinde işlevlerin nasıl çağrıldığını anlamak önemlidir. Yazılımcının doğrudan doğruya kullanabileceği bir yol yoktur. Yazılımcı veritabanlarına sadece belgelenmiş ve standartlaştırılmış işlevleri kullararak erişebilir.
   </para>
  <para>
NSS şemasında mevcut veritabanları şunlardır:
   </para>
  <para>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>aliases</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>ethers</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>group</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>hosts</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>netgroup</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>networks</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>protocols</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>passwd</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>rpc</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>services</secondary>
   </indexterm>
   <indexterm scope="glibc-cp">
    <primary>sistem veritabanları</primary>
    <secondary>shadow</secondary>
   </indexterm>
  </para>
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <literal>aliases</literal>
     </term>
     <listitem>
      <para>
Posta takma adları.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>ethers</literal>
     </term>
     <listitem>
      <para>
Ethernet numaraları.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>group</literal>
     </term>
     <listitem>
      <para>
Kullanıcı grupları, bkz. <xref linkend="glibc-Group-Database"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>hosts</literal>
     </term>
     <listitem>
      <para>
Konak isimleri ve numaraları, bkz. <xref linkend="glibc-Host-Names"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>netgroup</literal>
     </term>
     <listitem>
      <para>
Ağ çapında kullanıcılar, konaklar ve altağlar, bkz.<xref linkend="glibc-Netgroup-Database"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>networks</literal>
     </term>
     <listitem>
      <para>
Ağ isimleri ve numaraları, bkz. <xref linkend="glibc-Networks-Database"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>protocols</literal>
     </term>
     <listitem>
      <para>
Ağ protokolleri, <xref linkend="glibc-Protocols-Database"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>passwd</literal>
     </term>
     <listitem>
      <para>
Kullanıcı parolaları, bkz. <xref linkend="glibc-User-Database"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>rpc</literal>
     </term>
     <listitem>
      <para>
Uzak yordam çağrı isimleri ve numaraları.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>services</literal>
     </term>
     <listitem>
      <para>
Ağ hizmetleri, bkz. <xref linkend="glibc-Services-Database"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <literal>shadow</literal>
     </term>
     <listitem>
      <para>
Gölge kullanıcı parolaları.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
Sonradan eklenen <command>automount</command>, <command>bootparams</command>, <command>netmasks</command> ve <command>publickey</command> gibi veritabanları da vardır.
   </para>
 </chapter>
 <chapter xml:id="glibc-NSS-Configuration-File">
  <info>
   <title>NSS Yapılandırma Dosyası</title>
   <titleabbrev>NSS yapılandırması.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary sortas="etc/nsswitch.conf"><command>/etc/nsswitch.conf</command></primary></indexterm><indexterm scope="glibc-cp"><primary><command>nsswitch.conf</command></primary></indexterm>
Ne olursa olsun, NSS kodu kullanıcının isteklerini yerine getirmelidir. <command>/etc/nsswitch.conf</command> dosyası bu sebeple vardır. Bu dosyada her veritabanı için arama sürecinin nasıl çalışacağı ile ilgili bir belirtim vardır. Dosyanın içeriği şöyle birşeydir:
   </para>
  <para>
   <screen># /etc/nsswitch.conf
#
# Name Service Switch configuration file.
#

passwd:     db files nis
shadow:     files
group:      db files nis

hosts:      files nisplus nis dns
networks:   nisplus [NOTFOUND=return] files

ethers:     nisplus [NOTFOUND=return] db files
protocols:  nisplus [NOTFOUND=return] db files
rpc:        nisplus [NOTFOUND=return] db files
services:   nisplus [NOTFOUND=return] db files
</screen>
  </para>
  <para>
İlk sütunda veritabanının ismi bulunur. Satırın kalanında arama sürecinin nasıl çalışacağı belirtilir. Belirttiğiniz yolun her veritabanı için ayrı olduğunu unutmayın. Bu, eski yöntemle, bir tekparça gerçekleme ile yapılamaz.
   </para>
  <para>
Her veritabanı için yapılandırma belirtimi iki farklı öğe içerebilir:
   </para>
  <para>
   <itemizedlist>
    <listitem><command>files</command>, <command>db</command> veya <command>nis</command> gibi bir hizmet belirtimi.
     </listitem>
    <listitem><command>[NOTFOUND=return]</command> gibi arama sonucuna verilen tepki.
     </listitem>
   </itemizedlist>
  </para>
  <section xml:id="glibc-Services-in-the-NSS-configuration">
   <info>
    <title>NSS Yapılandırma Dosyasındaki Hizmetler</title>
    <titleabbrev>NSS yapılandırmasındaki hizmet isimleri.</titleabbrev>
   </info>
   <para>
Önceki bölümdeki örnek dosyada dört farklı hizmet vardı: <command>files</command>, <command>db</command>, <command>nis</command> ve <command>nisplus</command>.  Bu, her yerde sadece bu hizmetlerin olduğu anlamına gelmediği gibi bunların her yerde bulunabilen hizmetler olduğu anlamına da gelmez.
    </para>
   <para>
Aslında, bu isimler NSS kodu tarafından dolaylı olarak adresli işlevleri bulmak için kullanılan basit dizgelerdir. Dahili arayüz daha sonra açıklanacaktır. Kullanıcıya görünür olan, her biri bir hizmeti gerçekleştiren modüllerdir.
    </para>
   <para><varname>isim</varname> dizgesinin arama için kullanılacak hizmet olduğunu varsayalım. Bu hizmeti gerçekleştiren modülün dosyası  <command>libnss_<varname>isim</varname></command> ismini alır. Paylaşımlı kütüphaneleri destekleyen sistemlerde ise bu isim (örneğin)  <command>libnss_<varname>isim</varname>.so.2</command>. olacaktır. Dosya isminin sonundaki sayı arayüzün o an geçerli ve pek sık değişmeyen sürümünü ifade eder. Normalde kullanıcılar bu dosyalarla ilgilenmezler, çünkü bunlar özdevinimli olarak bulunabilecekleri bir dizine konulur. Mevcut hizmetlerin sadece isimleri önemlidir.
    </para>
  </section>
  <section xml:id="glibc-Actions-in-the-NSS-configuration">
   <info>
    <title>NSS Yapılandırmasındaki Eylemler</title>
    <titleabbrev>Arama sonucuna verilen tepki.</titleabbrev>
   </info>
   <para>
Belirtimdeki ikinci öğe, kullanıcıya arama sürecini daha iyi denetleme imkanı verir. Eylem öğeleri iki hizmet ismi arasına yerleştirilir ve köşeli parantezlerin arasına yazılır. Genel biçimi şöyledir:
    </para>
   <para>
    <literallayout indent="0" class="normal">
    [ ( !? <varname>durum</varname>=<varname>eylem</varname> )+ ]
</literallayout>
   </para>
   <para>Burada:</para>
   <para>
    <literallayout indent="0" class="normal"><varname>durum</varname> =&gt; success | notfound | unavail | tryagain
    <varname>eylem</varname> =&gt; return | continue
</literallayout>
   </para>
   <para>
olabilir. Sözcüklerin harf büyüklükleri önemsizdir. <varname>durum</varname> değerleri belirli bir hizmetin bir arama işlevinin çağrısının sonucudur. Bunların anlamları:
    </para>
   <para>
    <variablelist>
     <varlistentry>
      <term>
       <literal>success</literal>
      </term>
      <listitem>
       <para>
Bir hata oluşmadan istenen girdi döndü. Öntanımlı eylem  <command>return</command>, dön'dür.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <literal>notfound</literal>
      </term>
      <listitem>
       <para>
Arama süreci tamamlandı ama gerekli değer bulunamadı. Öntanımlı eylem <command>continue</command>, aramaya devam et'tir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <literal>unavail</literal>
      </term>
      <listitem>
       <para><indexterm scope="glibc-cp"><primary>DNS sucusu hizmetdışı</primary></indexterm>
Hizmet geçici olarak kullanımdışıdır. Bu ya gerekli dosyanın olmadığı ya da DNS için, hizmetin kullanımdışı olduğunu veya sorguya izin vermediğini belirtir. Öntanımlı eylem <command>continue</command>, aramaya devam et'tir.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <literal>tryagain</literal>
      </term>
      <listitem>
       <para>
Hizmet geçici olarak kullanımdışıdır. Bu bir dosyanın kilitli olduğu ya da bir sunucunun o an artık bağlantı kabul edemediğini belirtir. Öntanımlı eylem  <command>continue</command>, aramaya devam et'tir.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
Şöyle bir satırımız varsa:
    </para>
   <para>
    <screen>
ethers: nisplus [NOTFOUND=return] db files
</screen>
   </para>
   <para>
bu satır şuna eşdeğerdir (hepsinin bir satıra yazılması zorunluluğu dışında):
    </para>
   <para>
    <screen>
ethers: nisplus [SUCCESS=return NOTFOUND=return UNAVAIL=continue
                 TRYAGAIN=continue]
        db      [SUCCESS=return NOTFOUND=continue UNAVAIL=continue
                 TRYAGAIN=continue]
        files
</screen>
   </para>
   <para>
Eylemlerin öntanımlı değeri normalde sizin ne istediğinizi gösterir ve sadece olağandışı durumlarda değiştirmek gerekir.
    </para>
   <para>
Eğer <varname>durum</varname> dizgesinden önce bir <command>!</command> varsa (isteğe bağlıdır), belirtilen eylemin dışındaki tüm eylemlerin geçerli olduğu anlamına gelir. Yani, <command>!</command> işleci C dilindeki gibi "bundan farklı her şey" anlamına gelir.
    </para>
   <para>
Bu eylem öğesini gerekli yapan olağandışılığı açıklamadan önce bir kaç yorum: <command>files</command> hizmetinden sonra bir eylem öğesi eklemenin bir faydası olmadığı açıktır. Eylem <emphasis>daima</emphasis> <command>return</command> olacağından bundan sonra başka bir hizmet belirtilmez.
    </para>
   <para><indexterm scope="glibc-cp"><primary>nisplus</primary><secondary>bütünlük</secondary></indexterm>
Şimdi, bu <command>[NOTFOUND=return]</command> eylemi neden kullanışlıdır? Sebebini anlayabilmek için <command>nisplus</command> hizmetinin çoğunlukla bir bütünlük arzettiğini bilmemiz gerekir. Yani, bir girdi NIS+ tablolarında mevcut değilse başka hiçbir yerde bulunamaz. Bu durum bu eylem öğesinin neden böyle belirtildiğini açıklar: diğer hizmetler zaten bir sonuç vermeyeceğinden onlara bakmak gereksizdir.
    </para>
   <para><indexterm scope="glibc-cp"><primary>nisplus</primary><secondary>sistem açılışı</secondary></indexterm>
NIS+ hizmetinin makinenin yeniden başlatılması nedeniyle yokluğu farklı bir durum olurdu. Bu durumda arama işlevinin dönüş değeri <command>notfound</command> değil, <command>unavail</command> olur. Yukarıdaki satırın açılımda da görebileceğiniz gibi bu durumda <command>db</command> ve <command>files</command> hizmetleri kullanılır. Güzel değil mi? Sistem çalışmaya tamamen hazır olmadığı bir anda (sistem açılışı, kapanışı ya da bir ağ sorunu nedeniyle) sistem yöneticisinin özel bir çaba harcaması gerekmeyecektir.
    </para>
  </section>
  <section xml:id="glibc-Notes-on-NSS-Configuration-File">
   <info>
    <title>NSS Yapılandırma Dosyası için İpuçları</title>
    <titleabbrev>NSS yapılandırılırken dikkat edilmesi gerekenler.</titleabbrev>
   </info>
   <para>
Son olarak bir kaç ipucu. <command>/etc/nsswitch.conf</command> dosyasının olmayışı durumunda NSS gerçeklemesi sizi tamamen çaresiz bırakmaz. Desteklenen tüm veritabanları için bir öntanımlı değer vardır, böylece dosya bozuk da olsa hiç olmasa da sistemin normal çalışması mümkün olacaktır.
    </para>
   <para><indexterm scope="glibc-cp"><primary>NSS</primary><secondary>öntanımlı değer</secondary></indexterm><command>hosts</command> ve <command>networks</command> veritabanları için öntanımlı değer <command>dns [!UNAVAIL=return] files</command> şeklindedir.  Yani sistem DNS hizmeti olmaksızın hazırsa ama yanıt varsa dönüş kesindir.
    </para>
   <para><command>passwd</command>, <command>group</command> ve <command>shadow</command> veritabanları geleneksel olarak özel bir yolla elde edilir. <filename>/etc</filename> dizinindeki ilgili dosyalar okunur, bunlar içinde <command>+</command> ile başlayan bir isim varsa NIS kullanılır. Bu çeşit bir arama <command>compat</command> adı verilen özel bir arama hizmeti kullanılarak mümkün olur. Bu hizmet için öntanımlı değer <command>compat [NOTFOUND=return] files</command> şeklindedir.
    </para>
   <para>
Kalan tüm veritabanları için öntanımlı değer <command>nis [NOTFOUND=return] files</command> şeklindedir.  Bu çözüm NIS ve dosya temelli arama kullanıldığından en iyi şansı verir.
    </para>
   <para><indexterm scope="glibc-cp"><primary>NSS</primary><secondary>eniyileme</secondary></indexterm><indexterm scope="glibc-cp"><primary>eniyileme</primary><secondary>NSS</secondary></indexterm>
İkinci bir nokta da kullanıcının arama sürecini eniyilemeye çalışmasıdır. Her hizmetin kendine özgü bir yanıt süresi vardır. Basit dosya araması bir yerel dosya üzerinde hızlı olabilirdi ama dosya uzunsa ve gerekli girdi dosyanın sonlarına doğruysa bu biraz vakit alır. Bu durumda büyük veri kümelerine daha hızlı erişim sağlayan <command>db</command> hizmetinin kullanılması daha iyi olabilir.
    </para>
   <para>
Sıkça rastlanan bir durum NIS gibi kapsamlı bilgi hizmetlerinin kullanıldığı durumdur. Bu durumda <command>nis</command> vs. gibi hizmet girdilerinin kullanılması kaçınılmazdır. Fakat bunun gibi yavaş hizmetlerden mümkün olduğunca kaçınılmalıdır.
    </para>
  </section>
 </chapter>
 <chapter xml:id="glibc-NSS-Module-Internals">
  <info>
   <title>NSS Modül Yapısı</title>
   <titleabbrev>Modüller dahili anlamda nasıl çalışır.</titleabbrev>
  </info>
  <para>
Artık modüllerin nasıl çalıştığını açıklamaya başlayabiliriz. Bir modülde bulunan işlevler isimleriyle anılırlar. Yani, bir sıçrama tablosu ya da benzeri bir şey yoktur. Bunun nasıl yapıldığıyla burada ilgilenmeyeceğiz; bunlarla ilgileniyorsanız Özdevimli İlintileme hakkında birşeyler okumalısınız.
   </para>
  <section xml:id="glibc-NSS-Module-Names">
   <info>
    <title>NSS Modüllerinin İsimlendirme Şeması</title>
    <titleabbrev>NSS modüllerinin arayüz işlevinin oluşturulması.</titleabbrev>
   </info>
   <para>
Her işlevin ismi çeşitli parçaların bir araya getirilmesiyle oluşur:
    </para>
   <para>
    <literallayout indent="0" class="normal">
      _nss_<varname>hizmet</varname>_<varname>işlev</varname>
</literallayout>
   </para>
   <para><varname>hizmet</varname> şüphesiz bu işlevi içeren modülün isminden gelecektir.<footnote><para>Şimdi soracaksınız, niçin bu bilgi işlevlerin de ismine sokuluyor, modülün isminde zaten var. Yanıtı, biz bunun paylaşımlı nesenelerle birlikte ilintilenmesinin mümkün olmasını istiyoruz.</para></footnote>   <varname>işlev</varname> parçası C kütüphanesindeki arayüz işlevinden türetilir. Eğer kullanılan hizmet <command>files</command> ve bu hizmetin modülünde kullanılan işlev <command>gethostbyname</command> ise:
    </para>
   <para>
    <literallayout indent="0" class="normal">
       libnss_files.so.2
</literallayout>
   </para>
   <para>modülündeki</para>
   <para>
    <literallayout indent="0" class="normal">
      _nss_files_gethostbyname_r
</literallayout>
   </para>
   <para>işlevinden bahsediyor, oluruz.
    </para>
   <para><indexterm scope="glibc-cp"><primary>evresel NSS işlevleri</primary></indexterm>
Gördüğünüz gibi, yukarıda açıkladıklarımız gerçeğin tümü değildir. Aslında NSS modülleri arama işlevlerinin sadece evresel sürümlerini içerir. Yani yazılımcı aslında <command>gethostbyname_r</command> işlevini kullanacağından bunu işlevin isminde <command>gethostbyname_r</command> olarak ('gethostbayname_r'eentrant) belirtmelidir. Tüm kullanıcı arayüzü işlevleri için C kütüphanesi bu çağrıları evresel işlev çağrılarına eşler. Evresel işlevler için arayüz hemen hemen aynı olduğundan bu sıradan bir işlemdir. Evresel eşdeğeri olmayan işlevler için ise kütüphane, kullanılan dahili tamponları kullanıcı tanımlı tamponlarla değiştirerek tutar.
    </para>
   <para>
Yani evresel işlevlerin benzer karşılıkları olabilir. Tüm veritabanları için işlevler içermesi için ya da tüm veritabanlarının erişebileceği şekilde tasarlanmış bir hizmet modülü yoktur. Bir işlevin yokluğu halinde işlevin <command>unavail</command> döndüreceği varsayılmıştır (Bkz. <xref linkend="glibc-Actions-in-the-NSS-configuration"/>).
    </para>
   <para><command>libnss_files.so.2</command> dosya ismi bir Solaris 2 sistemde <command>nss_files.so.2</command> olarak görünür.  Bu farktan daha önce sözedilmişti. Sun'ın NSS modülleri sadece dolaylı olarak yüklenen modüller olarak kullanılabilir.
    </para>
   <para>
GNU C Kitaplığındaki NSS modülleri, normal kitaplık olarak kullanılmak
üzere hazırlanmıştır. Fakat, bu, şu anda geçerli
<emphasis>değildir</emphasis>. Fakat modüllerdeki isim uzayının
organizasyonu, bunu, Solaris'in aksine imkansız kılmamaktadır.
Modüllerin kitaplık olması bundan kaynaklanmaktadır. <footnote><para>
İkinci bir açıklama da şu: Makefile'ları, <command>lib</command> ile
başlamayan paylaşımlı nesnelerin oluşturulması için değiştirmeye
üşendik, ama bunu kimseye söylemeyin. </para></footnote>
    </para>
  </section>
  <section xml:id="glibc-NSS-Modules-Interface">
   <info>
    <title>NSS Modüllerinde İşlev Arayüzü</title>
    <titleabbrev>NSS modül işlevleriyle arayüzün geliştirilmesi.</titleabbrev>
   </info>
   <para>
Artık, modüllerdeki işlevler hakkında bilgimiz var. Şimdi türleri açıklayalım. Bir önceki bölümde işlevlerin evresel sürümlerinden bahsetmiştik. Bu, işlevin evresel olmayan sürümüne göre ek argümanlar gerektiği anlamına gelir. <command>gethostbyname</command> işlevinin evresel olmayan ve evresel sürümlerinin prototiplerine bakalım:
    </para>
   <para>
    <screen>struct hostent *gethostbyname (const char *isim)

int gethostbyname_r (const char     *isim,
                    struct hostent  *sonuc_tamponu,
                    char            *tampon,
                    size_t           tampon_uzunlugu,
                    struct hostent **sonuc,
                    int             *hata_durumu)
</screen>
   </para>
   <para>
İşlevin NSS modülündeki prototipi ise şöyle olur:
    </para>
   <para>
    <screen>
enum nss_status _nss_files_gethostbyname_r (const char     *isim,
                                            struct hostent  *sonuc_tamponu,
                                            char            *tampon,
                                            size_t           tampon_uzunlugu,
                                            int             *hata_num,
                                            int             *hata_durumu)
</screen>
   </para>
   <para>
Yani, arayüz işlevi aslında <varname>sonuc</varname> argümanı olmayan ve dönüş değeri değişmiş evresel işlevdir. İşlevin evresel olmayan sürümü sonuca bir gösterici ile dönerken evresel sürümü bir <command>enum nss_status</command> değeri ile döner:
    </para>
   <para>
    <variablelist>
     <varlistentry>
      <term>
       <literal>NSS_STATUS_TRYAGAIN</literal>
      </term>
      <listitem>
       <para>
sayısal değeri: <command>-2</command>
    </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <literal>NSS_STATUS_UNAVAIL</literal>
      </term>
      <listitem>
       <para>
sayısal değeri: <command>-1</command>
    </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <literal>NSS_STATUS_NOTFOUND</literal>
      </term>
      <listitem>
       <para>
sayısal değeri: <command>0</command>
    </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <literal>NSS_STATUS_SUCCESS</literal>
      </term>
      <listitem>
       <para>
sayısal değeri: <command>1</command>
    </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
Şimdi, <command>/etc/nsswitch.conf</command> dosyasında kullanılar eylem öğelerinin yerini görelim.
    </para>
   <para>
Kaynak kodunu incelerseniz, beşinci bir değerin varlığını görürsünüz: <command>NSS_STATUS_RETURN</command>.  Bu sadece dahili olarak kullanılan bir değerdir, bir kaç işlev tarafından yukarıdaki değerin kullanılamadığı yerlerde kullanılır. Eğer gerekliyse, daha fazla ayrıntıya kaynak kodunu inceleyerek ulaşabilirsiniz.
    </para>
   <para>

Arayüz işlevinin bir hata döndürmesi durumunda, doğru hata numarasının <varname>*hata_num</varname> içinde saklanması önemlidir. Bazı dönüş durum değerleri sadece bir hata kodu ile ilgiliyken diğerleri daha fazlası ile ilgilidir.
    </para>
   <para>
    <informaltable frame="none" style="background:#999999;">
     <tgroup cols="3">
      <colspec colwidth="22*"/>
      <colspec colwidth="14*"/>
      <colspec colwidth="36*"/>
      <tbody>
       <row style="background:#ffffee;">
        <entry>
         <command>NSS_STATUS_TRYAGAIN</command>
        </entry>
        <entry>
         <command>EAGAIN</command>
        </entry>
        <entry> Kullanılan işlevlerden biri ya geçici olarak özkaynaksız çalıştı ya da hizmet şu an kullanışsız. </entry>
       </row>
       <row style="background:#ffffee;">
        <entry/>
        <entry>
         <command>ERANGE</command>
        </entry>
        <entry> Belirtilen tampon yeterince geniş değil. İşlev tekrar daha geniş bir tamponla çağrılmalı. </entry>
       </row>
       <row style="background:#ffffee;">
        <entry>
         <command>NSS_STATUS_UNAVAIL</command>
        </entry>
        <entry>
         <command>ENOENT</command>
        </entry>
        <entry> Gerekli girdi dosyalarından biri bulunamadı. </entry>
       </row>
       <row style="background:#ffffee;">
        <entry>
         <command>NSS_STATUS_NOTFOUND</command>
        </entry>
        <entry>
         <command>ENOENT</command>
        </entry>
        <entry>İstenen girdi elverişli değil.</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
   <para>
Bunlar önerilen değerlerdir. Başka hata kodları olabileceği gibi açıklanan hata kodları farklı anlamlara da gelebilir. <emphasis>Biri dışında:</emphasis> <command>NSS_STATUS_TRYAGAIN</command> döndüğünde, hata kodu, belirtilen tamponun yetersiz olduğun anlatan <command>ERANGE</command> <emphasis>olmalıdır</emphasis>. Bunun dışında kritik önemde bir şey yoktur.
    </para>
   <para>
Yukarıdaki işlev hemen hemen diğer tüm modül işlevlerinde olmayan bazı özelliklere sahiptir. <varname>hata_durumu</varname> diye bir argümanı var. Bu argümanın gösterdiği değişkene, işlev bir şekilde başarısız olduğunda hata durumu konulacaktır. Evresel işlevler <varname>h_errno</varname> genel değişkenini kullanamazlar; <command>gethostbyname_r</command> ile yapılan <command>gethostbyname</command> çağrılarında son argüman <varname>&amp;hata_durumu</varname> olarak belirtilir.
    </para>
   <para><command>get<varname>XXX</varname>by<varname>YYY</varname></command> işlevleri
NSS modüllerinde en önemli işlevlerdir. Ancak başka yöntemlerle erişilen veritabanları da vardır (<command>setpwent</command>, <command>getpwent</command> ve <command>endpwent</command> işlevleri ile erişilen parola veritabanını buna örnek verebiliriz). Bunlar daha sonra ayrıntılı olarak açıklanacaktır. Modül işlevinin imzasını saptayacak genel bir yöntem:
    </para>
   <para>
    <itemizedlist>
     <listitem>
dönüş değeri <command>int</command>'dir;
      </listitem>
     <listitem>
ismi <xref linkend="glibc-NSS-Module-Names"/> bölümünde açıklandığı gibidir;
      </listitem>
     <listitem>
işlevin ilk argümanları evresel olmayan eşdeğerinin argümanları ile aynıdır;
      </listitem>
     <listitem>
      <para>
sonraki argümanları şunlardır:
      </para>
      <para>
       <glosslist>
        <glossentry>
         <glossterm>
          <literal>STRUCT_TYPE *</literal>
          <command>
           <varname>sonuc_tamponu</varname>
          </command>
         </glossterm>
         <glossdef>
          <para>
sonucun saklandığı tampona gösterici.  <command>STRUCT_TYPE</command>, normalde veritabanının karşılığı olan bir yapıdır.
      </para>
         </glossdef>
        </glossentry>
        <glossentry>
         <glossterm>
          <literal>char *</literal>
          <command>
           <varname>tampon</varname>
          </command>
         </glossterm>
         <glossdef>
          <para>
sonuçla ilgili ek verilerin saklanabileceği tampona gösterici.
      </para>
         </glossdef>
        </glossentry>
        <glossentry>
         <glossterm>
          <literal>size_t </literal>
          <command>
           <varname>tampon_uzunlugu</varname>
          </command>
         </glossterm>
         <glossdef>
          <para><varname>tampon</varname> ile gösterilen tamponun uzunluğu.
      </para>
         </glossdef>
        </glossentry>
       </glosslist>
      </para>
     </listitem>
     <listitem>
konak ismi ve ağ ismi arama işlevlerinde <varname>hata_durumu</varname> hep son argüman olarak görünür.
      </listitem>
    </itemizedlist>
   </para>
   <para><command>set…ent</command> ve <command>end…ent</command> işlevleri dışında tüm işlevler için, bu liste geçerlidir.
    </para>
  </section>
 </chapter>
 <chapter xml:id="glibc-Extending-NSS">
  <info>
   <title>NSS'nin Genişletilmesi</title>
   <titleabbrev>Yeni hizmetler ve veritabanlarını eklemek için ne yapılır.</titleabbrev>
  </info>
  <para>
Evvelce bahsedildiği gibi NSS'nin getirilerinden biri kolayca genişletilebilmesidir. Genişletme iki yolla yapılabilir: İlki normalde sadece C kütüphanesi geliştiricileri tarafından yapılır. Burada önemli olan, başka bir veritabanının bağımsız olarak eklenmesi gerektiğini unutmamaktır. Çünkü bir hizmet tüm veritabanlarını ve arama işlevlerini desteklemek zorunda değildir.
   </para>
  <para>
Bir yeni hizmetin tasarımcısı/gerçekleştiricisi ilgilendiği veritabanlarını seçmekte özgür olduğu gibi kalanı daha sonraya da bırakabilir (veya tamamen terkedebilir).
   </para>
  <section xml:id="glibc-Adding-another-Service-to-NSS">
   <info>
    <title>NSS'ye Başka Hizmetlerin Eklenmesi</title>
    <titleabbrev>Yeni bir hizmet eklenirken ne yapılır.</titleabbrev>
   </info>
   <para>
Yeni hizmetin kaynakları GNU C kütüphanesinin parçası olmak zorunda değildir (hatta olmamalıdır). Geliştiricinin kaynaklar ve tasarım üzerinde tam hakimiyeti olmalıdır. C kütüphanesi ile yeni hizmet modülü arasındaki bağları sadece arayüz işlevleri oluşturur.
    </para>
   <para>
Her modül burada açıklanan özel bir arayüz belirtimine göre tasarlanır. Şimdilik sürümü 2'dir (arayüzün 1. sürümü yetersizdi) ve bu NSS modülünün paylaşımlı kütüphane nesnesinin sürüm numarası olarak belirtilir: bu nesnelerin isimleri <command>.2</command> uzantısını içerir. Eğer arayüz şimdikiyle uyumsuz olarak değitirilirse bu numara artacak ama eski arayüzü kullanan modüller hala kullanılabilir olacaktır.
    </para>
   <para>
Yeni hizmetin geliştiricileri modülün doğru arayüz numarası kullanılarak oluşturuduğundan emin olmak zorundadır. Yani, dosyanın ismi doğru tanımlanacak ve ELF sistemlerde paylaşımlı nesne ismi (so uzantısı) ayrıca bu numarayı içerecektir. Bir modül, bir ELF sisteminde GNU CC ile nesne dosyalarından şöyle derlenir:
    </para>
   <para>
    <screen>gcc -shared -o libnss_NAME.so.2 -Wl,-soname,libnss_NAME.so.2 <varname>nesneler</varname>
</screen>
   </para>
   <para>
Bu komut satırı hakkında daha fazla bilgi için: <literal>info gcc 'Options for Linking'</literal>
    </para>
   <para>
Yeni modülü, onu kullanacak kütüphane bulabilmelidir. Bu özdevimli ilintileyici seçenekleri kullanılarak yapılabilir, böylece ikilik nesne dosyasının yerleştirildiği dizini bulabilir. ELF sistemlerde bu, modülün bulunduğu dizini <command>LD_LIBRARY_PATH</command> ortam değişkenine ekleyerek yapılır.
    </para>
   <para>
Fakat bu, bazı uygulamalar bu değişkeni yoksaydığından (bunlar kullanıcının kimliğini kullanmazlar) daima mümkün olmaz. Bu nedenle, modülün kararlı sürümü özdevimli ilintileyicinin araştırdığı dizinlere konulması önem kazanır. Normalde bu dizin <varname>önek</varname><filename>/lib</filename> dizini olmalıdır, burada <varname>önek</varname> derleme öncesi yapılandırma sırasında <command>--prefix</command> seçeneğinde belirtilen dizindir. Ama dikkatli olmalısınız: bu sadece, modül herhangi bir bozukluğa yol açmıyorsa yapılabilir. Sistem yöneticisi bu bakımdan dikkatli olmalıdır.
    </para>
  </section>
  <section xml:id="glibc-NSS-Module-Function-Internals">
   <info>
    <title>NSS Modül İşlevlerinin Özellikleri</title>
    <titleabbrev>Yeni NSS hizmet işlevlerini yazmak için bilinmesi gerekenler.</titleabbrev>
   </info>
   <para>
Şimdiye kadar NSS modülündeki işlevlerin sözdizimsel arayüzünden bahsettik. Her işlevin gerçeklenmesi ister istemez farklı olacağında aslında söylenebilecek fazla bir şey yoktur. Fakat tüm işlevlerin uyması gereken bir kaç genel kuraldan bahsedilebilir.
    </para>
   <para>
Aslında arayüzde görülebilecek dört farklı işlev çeşidi vardır. Hepsi sistem veritabanları için kullanılan geleneksel işlevlerden türetilir. Aşağıdaki gösterimde <varname>vt</varname>, veritabanı sözcüğünün kısaltmasıdır.
      </para>
   <para>
    <glosslist>
     <glossentry>
      <glossterm>
       <literal>enum nss_status _nss_<varname>veritabanı</varname>_set<varname>vt</varname>ent (void)</literal>
      </glossterm>
      <glossdef>
       <para>
Bu işlev hizmeti belirttiği işlem için hazırlar. Basit bir dosya temelli arama için dosyaları açan, diğer hizmetlerde basitçe hiçbir işlem yapmayan bir işlev olabilir.
       </para>
       <para>
Bu işlev için özel bir durum, <command>sethostent</command> işlevindeki (<xref linkend="glibc-Host-Names"/>) gibi bazı <varname>veritabanı</varname> veritabanları için ek argümanlar alabilmesidir. (<command>int set<varname>vt</varname>ent (int)</command> gösterimi ile karşılaştırılırsa "hosts" veritabanı için "host" kısaltmasının kullanıldığı görülür.)
       </para>
       <para>
Normal dönüş değeri <varname>NSS_STATUS_SUCCESS</varname> olmalı; bir hata durumunda <xref linkend="glibc-NSS-Modules-Interface"/> bölümündeki tabloda belirtilen değerlerden biri olmalıdır.
      </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <literal>enum nss_status _nss_<varname>veritabanı</varname>_end<varname>vt</varname>ent (void)</literal>
      </glossterm>
      <glossdef>
       <para>
Bu işlev hala açık olan tüm dosyaları kapatır ya da bellekten tamponları kaldırır. Kaldırılacak bir tampon ya da kapatılacak bir dosya yoksa, işlev yine basitçe hiçbir işlem yapmayacaktır.
       </para>
       <para>
Normalde <varname>NSS_STATUS_SUCCESS</varname>'dan farklı bir dönüş değeri olmaz.
      </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <literal>enum nss_status _nss_<varname>veritabanı</varname>_get<varname>vt</varname>ent_r (<varname>yapı</varname> *<varname>sonuc</varname>, char *<varname>tampon</varname>, size_t <varname>tampon_boyu</varname>, int *<varname>hata_num</varname>)</literal>
      </glossterm>
      <glossdef>
       <para>
Bu işlev peşpeşe girdi almak için bir satırda defalarca çağrılacağından bir durum bilgisi tutmak zorundadır. Ama bu zorunluluk ayrıca işlevin gerçekte evresel olmayacağı anlamına da gelir. Sadece, bu işlev aynı anda yapılan başka çağrılarıyla verinin alındığı yere veri yazmayı denemeyecekse,  <varname>sonuc</varname> ile belirtilen tampona yazacaksa evresel olabilir. Fakat, bir ortak durumu paylaşan çağrıların varlığında ve bir dosya erişimi durumunda bu, dosyadaki komşu girdilerin dönmesi anlamına gelir.
       </para>
       <para><varname>tampon</varname> tamponunun uzunluğunu belirtmede kullanılan <varname>tampon_boyu</varname> tamponu sonuç ile ilgili bazı ek verilerin saklanması için kullanılabilir ama bu durumda işlevin sonraki çağrılarının aynı tamponla yapılabilmesi mümkün olmaz. Ancak, bu tamponun bazı durum bilgilerini döndürmesinden hareketle bu tampon, bir çağrıdan diğerine durum bilgisini aktarmak için kullanılmamalıdır.
       </para>
       <para>
İşlev dönmeden önce, gerçekleme <varname>hata_num</varname> ile gösterilen değeri <varname>errno</varname> genel değişkeninde saklamalıdır. Modülün durağan ilintili yazılımlarla da çalışabilmesini sağlamak için bunun böyle olması önemlidir.
       </para>
       <para>
Evvelce açıklandığı gibi bu işlev ayrıca bir ek argüman alabilir. Bu kullanılan veritabanına bağlıdır; sadece <command>hosts</command> ve <command>networks</command> veritabanlarında görülür.
       </para>
       <para>
İşlev <command>NSS_STATUS_SUCCESS</command> ile döneceği gibi başka değerlerle de dönebilir. Son girdi okunduktan sonra <command>NSS_STATUS_NOTFOUND</command> dönebilir. Belirtilen tampon gereğinden küçükse <command>NSS_STATUS_TRYAGAIN</command> ile dönebilir. Bir <command>_nss_<varname>veritabanı</varname>_set<varname>vt</varname>ent</command> çağrısı ile hizmet başta ilklendirilemediğinde bu işlev için izin verilen tüm dönüş değerleri burada ayrıca döndürülebilir.
      </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm>
       <literal>enum nss_status _nss_<varname>veritabanı</varname>_get<varname>vt</varname>by<varname>xx</varname>_r (<varname>parametreler</varname>, <varname>yapı</varname> *<varname>sonuc</varname>, char *<varname>tampon</varname>, size_t <varname>tampon_boyu</varname>, int *<varname>hata_num</varname>)</literal>
      </glossterm>
      <glossdef>
       <para>
Bu işlev veritabanından <varname>parametreler</varname> ile adreslenen girdiyi döndürür. Bu argümanların sayısı ve türü değişebilir. Bunlar tek tek kullanıcı seviyesi arayüz işlevlerine bakarak saptanır. İşlevin evresel olmayan sürümünde belirtilen tüm argümanlar burada <varname>parametreler</varname> alanında belirtilmelidir.
       </para>
       <para>
Sonuç <varname>sonuc</varname> ile gösterilen yapıda saklanmalıdır. Eğer döndürülecek başka veriler varsa (örn, dizgeler <varname>sonuc</varname> yapısında sadece göstericilerle içerilebilir) işlev <varname>tampon</varname> ya da <varname>tampon_boyu</varname> ile gösterilen tamponları kullanmalıdır. Sabitler biçiminde olmayan hiçbir genel değişkenli veri olmamalıdır.
       </para>
       <para>
Bu işlevi gerçeklemesi <command>set<varname>vt</varname>ent</command> işlevi tarafından atanan <varname>açıkkal</varname> seçeneği ile de bu bir gereklilikse ilgilenmelidir.
       </para>
       <para>
İşlev dönmeden önce, gerçekleme <varname>hata_num</varname> ile gösterilen değeri <varname>errno</varname> genel değişkeninde saklamalıdır. Modülün durağan ilintili yazılımlarla da çalışabilmesini sağlamak için bunun böyle olması önemlidir.
       </para>
       <para>
Evvelce açıklandığı gibi bu işlev <command>hosts</command> ve <command>networks</command> veritabanları için ayrıca bir ek argüman alabilir.
       </para>
       <para>
İşlevin dönüş değerleri daima <xref linkend="glibc-NSS-Modules-Interface"/> bölümünde açıklanan kurallara uygun olmalıdır.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
  </section>
 </chapter>
</part>
