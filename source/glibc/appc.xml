<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appc.xml
******************************************************************** -->
<appendix xml:id="glibc-Installation" xmlns="http://docbook.org/ns/docbook"
      version="5.0" xml:lang="tr">
 <info>
  <title>GNU C Kütüphanesinin Kurulması</title>
  <titleabbrev>GNU C Kütüphanesi nasıl kurulur?</titleabbrev>
 </info>
 <para>
Hiçbir şey yapmadan, önce kaynak ağacının kök dizinindeki <filename>FAQ</filename> dosyasını okumalısınız. Bu dosyada kurulum ve derleme ile ilgili olarak bazı sorular ve bu sorulara verilmiş yanıtlar bulacaksınız.  Bu dosya, bu kılavuzdan daha sık güncellenir.
  </para>
 <para>
GNU Libc'ye eklenebilen özellikler <firstterm>add-on</firstterm> paketleri ile eklenebilir. Bu paketler kaynak ağacının kök dizininde açılarak kaynak ağacına eklenirler. Bundan sonra <command>configure</command> betiğini <command>--enable-add-ons</command> seçeneği ile çalıştırarak bunları etkinleştirebilir ve bunları kütüphane ile birlikte derleyebilirsiniz.
  </para>
 <para>
Ayrıca GNU araçlarının en son sürümlerine de ihtiyacınız olacak: GCC, GNU Make ve olası diğerleri.  Bkz. <xref linkend="glibc-Tools-for-Compilation"/>.
  </para>
 <section xml:id="glibc-Configuring-and-compiling">
  <info>
   <title>GNU Libc'nin Yapılandırılması ve Derlenmesi</title>
   <titleabbrev>GNU libc nasıl derlenir ve nasıl sınanır?</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>yapılandırma</primary></indexterm><indexterm scope="glibc-cp"><primary>derleme</primary></indexterm>
GNU libc kaynak ağacının kök dizininde derlenemez. Ayrı bir <filename>build</filename> dizininde derlemelisiniz. Örneğin, glibc kaynak paketini <filename>/usr/src/gnu/glibc-2.4</filename> dizinine açtıysanız, <filename>/usr/src/gnu/glibc-build</filename> adında bir dizin daha oluşturup derlenen nesne dosyalarının bu dizinde bulunmasını sağlamalısınız. Böylece, derleme sırasında bir hata oluşursa basitçe bu dizini içindekilerle birlikte silip yeniden temiz bir derleme yapabilirsiniz.
   </para>
  <para><command>configure</command> betiğini <filename>/usr/src/gnu/glibc-build</filename> dizininden aşağıdaki komutla çalıştırırsanız, derleme sırasında nesne dosyaları bu dizinde yer alacaktır:
   </para>
  <para>
   <screen>$ ../glibc-2.4/configure <varname>argümanlar…</varname></screen>
  </para>
  <para>
Burada anlatıldığı gibi paketi ayrı bir dizinde derlerken bile kaynak dizindeki bazı dosyaların derleme sırasında değişeceğini bilmelisiniz. Özellikle <filename>manual</filename> dizinindeki dosyalar bundan etkilenecektir.
   </para>
  <para><command>configure</command> betiği çok sayıda seçenek kabul eder, ancak burada önemli olan tek bir seçenek üzerinde duracağız: <command>--prefix</command>.  Bu seçenek ile glibc'nin kurulmasını istediğiniz yeri belirtebilirsiniz. Bu seçenek için  <filename>/usr/local</filename> öntanımlıdır fakat standart sistem kütüphanesi olarak bu seçenek GNU/Linux sistemleri için  <command>--prefix=/usr</command>, GNU/Hurd sistemleri için ise <command>--prefix=</command> (boş önekle) biçiminde belirtilmelidir.
   </para>
  <para>
Ayrıca, <command>configure</command> betiği çalıştırılırken <literal>CC</literal> ve <literal>CFLAGS</literal> değişkenlerini de ortama dahil etmek yararlı olabilir. <literal>CC</literal> değişkeni ile kullanılacak C derleyicisi, <literal>CFLAGS</literal> ile derleyicinin kullanacağı eniyilemeler belirtilebilir.
   </para>
  <para><command>configure</command> betiğinde kullanılabilecek komut satırı seçeneklerinin listesi:
   </para>
  <para>
   <glosslist>
    <glossentry>
     <glossterm>
      <literal><command>--prefix</command>=<emphasis>dizin</emphasis></literal>
     </glossterm>
     <glossdef>
      <para>
Makineye bağımlı veri dosyaları <varname>dizin</varname> dizininin alt dizinlerine kurulur. Öntanımlı olarak <filename>/usr/local</filename> dizinidir.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal><command>--exec-prefix</command>=<emphasis>dizin</emphasis></literal>
     </glossterm>
     <glossdef>
      <para>
Kütüphane ve makineye bağımlı diğer veri dosyaları <varname>dizin</varname> dizininin alt dizinlerine kurulur. Öntanımlı değeri eğer belirtilmişse <command>--prefix</command> seçeneğinde belirtilen dizindir, aksi takdirde <filename>/usr/local</filename> dizinidir.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal><command>--with-headers</command>=<emphasis>dizin</emphasis></literal>
     </glossterm>
     <glossdef>
      <para>
Çekirdek başlık dosyaları <filename>/usr/include</filename> dizininde değil, <varname>dizin</varname> dizininde aranır. Glibc normalde  <filename>/usr/include</filename> dizine bakar, ancak bu seçenekle farklı bir dizin belirtirseniz <varname>dizin</varname> dizinine bakar.
      </para>
      <para>
Bu seçenek öncelikli olarak <filename>/usr/include</filename>  içindeki başlık dosyaları glibc'nin daha eski bir sürümünden gelen bir sistemde yararlı olur. Bu durumda kimi vakit çelişkiler oluşur. Linux libc5'in glibc'nin daha eski bir sürümünü nitelediğine dikkat edin. Bu seçeneği ayrıca glibc'yi <filename>/usr/include</filename> içindeki dosyalardan daha yeni bir çekirdeğin başlık dosyalarıyla derlemek isterseniz de kullanabilirsiniz.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--enable-add-ons</command>
      <literal>[=</literal>
      <emphasis>liste</emphasis>
      <literal>]</literal>
     </glossterm>
     <glossdef>
      <para>
Derleme sırasında dahil edilecek eklentiler belirtilir. Eğer bu seçenek listesiz olarak belirtilirse, ana kaynak dizininde bulunan bütün eklentiler etkinleştirilir; bu öntanımlı davranıştır. Etkin olmasını istediklerinizin listesini aralarına boşluk veya virgül koyarak belirtebilirsiniz (boşluk kullanacaksanız onları kabuktan korumak için tırnak içine almayı unutmayın). <varname>liste</varname> içindeki her eklenti bir mutlak dizin ismi olabileceği gibi ana kaynak dizinine göreli bir dizin ismi, hatta derleme dizinine (yani, o anki çalışma dizinine) göreli bir dizin ismi olabilir. Örnek: <command>--enable-add-ons=nptl,../glibc-libidn-2.4</command>.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal><command>--enable-kernel</command>=<emphasis>sürüm</emphasis></literal>
     </glossterm>
     <glossdef>
      <para>
Bu seçenek şimdilik sadece GNU/Linux sistemlerinde kullanışlıdır.  <varname>sürüm</varname> parametresi X.Y.Z şeklinde belirtilmeli ve üretilen kütüphanenin destekleyeceği en küçük Linux çekirdeğinin sürümü olmalıdır. Daha yüksek <varname>sürüm</varname> numarası daha az uyumluluk kodu ekler ve kod daha hızlı olur.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal><command>--with-binutils</command>=<emphasis>dizin</emphasis></literal>
     </glossterm>
     <glossdef>
      <para>
C derleyicinin öntanımlı kullandığı değil, <varname>dizin</varname> ile belirtilen yerdeki binutils (çevirici ve ilintileyici) kullanılır. Eğer GNU C kütüphanesindeki oluşumlar sisteminizdeki öntanımlı binutils ile çalışamayacaksa bu seçeneği kullanabilirsiniz. Bu durumda, <command>configure</command> sorunu saptar ve bu oluşumları bastırır, böylece kütüphane hala kullanılabilir kalabilir, ancak işlevsellik kaybolabilir; örneğin, eski binutils ile bir paylaşımlı libc derleyemezsiniz.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--without-fp</command>
     </glossterm>
     <glossdef>
      <para>
Makinenin donanımında kayan noktalı sayılar için destek yoksa ve işletim sistemi de bu desteği yazılımsal olarak içermiyorsa bu seçeneği kullanmalısınız.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--disable-shared</command>
     </glossterm>
     <glossdef>
      <para>
Mümkün olsa bile paylaşımlı kütüphaneler oluşturulmaz. Tüm sistemlerde paylaşımlı kütüphane desteği yoktur; paylaşımlı kütüphaneler için ELF desteği ve GNU ilintileyici gerekir.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--disable-profile</command>
     </glossterm>
     <glossdef>
      <para>
Kütüphaneler profil desteği ile derlenmez. Profil desteğine ihtiyacınız olmayacağını düşünüyorsanız bu seçeneği kullanabilirsiniz.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--enable-omitfp</command>
     </glossterm>
     <glossdef>
      <para>
Normal (durağan ve paylaşımlı) kütüphaneler için en yüksek eniyileme kullanılır ve durağan kütüphaneler ayrı olarak hata ayıklama bilgileri ile eniyilemesiz derlenir. Bunu yapmanızı tavsiye etmiyoruz. Fazladan bir eniyileme size fazla birşey kazandırmadığı gibi derleyici hatalarını uyandırabilir ve C kütüphanesi üzerinden hataları izlemek mümkün olmayabilir.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--disable-versioning</command>
     </glossterm>
     <glossdef>
      <para>
Paylaşımlı kütüphaneleri sembol sürüm bilgileri ile derlemez. Böyle yaparak derlenen kütüphane eski ikilik dosyalarla uyumsuz olacaktır, bu bakımdan tavsiye edilmez.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--enable-static-nss</command>
     </glossterm>
     <glossdef>
      <para>
NSS kütüphanelerinin durağan sürümleri derlenir. Bu NSS'in amacını bozacağından tavsiye edilmez; NSS kütüphaneleriyle durağan ilintili bir yazılım farklı bir isim veritabanını kullanmak için yeniden özdevimli olarak yapılandırılamaz.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>--without-tls</command>
     </glossterm>
     <glossdef>
      <para>
Öntanımlı olarak C kütüphanesi evreye özel saklama alanı (thread-local storage) desteği ile derlenir.  Bu seçenek kullanılarak bunun olmaması sağlanabilir ama uyumluluk sorunlarına yol açacağından genellikle böyle birşeye gerek yoktur.
   </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal><command>--build</command>=<emphasis>derleme-sistemi</emphasis></literal>
     </glossterm>
     <glossterm>
      <literal><command>--host</command>=<emphasis>çalışma-sistemi</emphasis></literal>
     </glossterm>
     <glossdef>
      <para>
Bu seçenekler çapraz derleme için kullanılır.Her iki seçeneği de belirtirseniz ve  <varname>derleme-sistemi</varname> ile <varname>çalışma-sistemi</varname> farklıysa, <command>configure</command> betiği glibc'yi <varname>çalışma-sistemi</varname> üzerinde <varname>derleme-sistemi</varname> olarak kullanılacak şekilde çapraz derlemeye hazırlar. Büyük ihtimalle <command>--with-headers</command> seçeneğine de ihtiyacınız olacaktır, ayrıca betiğin derleyici ve/veya binutils seçimlerini değiştirmek zorunda kalabilirsiniz.
      </para>
      <para>
Sadece <command>--host</command> seçeneğini kullanırsanız, betik sizin sisteminiz yerine belirttiğiniz sistem için sistemdeki mevcut derleme araçlarıyla derlenecek şekilde glibc'yi derlemeye hazırlar Bu daha alt seviyede bir işlemci belirtmek için yararlıdır. Örneğin, <command>configure</command> betiği sizin makinenizi <command>i586-pc-linux-gnu</command> olarak belirlemişse ve siz bunun yerine kütüphaneyi 386'lar üzerinde çalışacak şekilde derlemek isterseniz seçeneği <command>--host=i386-pc-linux-gnu</command> ya da sadece <command>--host=i386-linux</command> olarak belirtebilir ve <literal>CFLAGS</literal> değişkeninde derleyiciye <command>--mcpu=i386</command> belirtebilirsiniz.
      </para>
      <para>
Sadece <command>--build</command> seçeneğinin belirtilmesi betiğin şaşırmasına sebep olacaktır.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </para>
  <para>
Kütüphaneyi ve ilgili uygulamaları derlemek için <command>make</command> komutunu kullanın. Derleme sırasında epey bir çıktı üretilir, bazıları da hata gibi görünebilir ama değildir. <command>make</command>'in ürettiği iletiler <command>***</command> içeriyorsa bunlar hata iletileridir. Bunlar bazı şeylerin yanlış gittiğini belirtirler.
   </para>
  <para>
Derleme işlemi yapılandırmanıza ve makinenizin hızına bağlı olarak biraz uzun sürebilir. Bazı karmaşık modüllerin derlenmesi çok uzun zaman alabilir, daha yavaş makineler için bu daha da artar. Eğer derleyici çökmüş gibi görünürse paniklemeyin, işini bitirmesini bekleyin.
   </para>
  <para>
Paralel derleme yapmak isterseniz <command>make</command>'e <command>-j</command> seçeneği ile uygun sayısal parametreleri vermeniz yeterlidir. Bunun için en son GNU <command>make</command> sürümüne ihtiyacınız var.
   </para>
  <para>
Bazı kütüphane oluşumlarının çalışıp çalışmadığını sınamak isterseniz sınama yazılımlarını derlemek ve çalıştırmak için <command>make check</command> komutunu verebilirsiniz. Bu işlem başarıyla tamamlanmazsa derlenen kütüphaneyi kullanmayın ve sorunun bilinenlerden biri olmadığını saptarsanız hatayı raporlayın. Hata raporlama hakkında daha fazla bilgi için  <xref linkend="glibc-Reporting-Bugs"/> bölümüne bakınız. Bazı sınamaların yapılması <command>root</command> tarafından çalışıtırılmış olmamayı gerektirir. Glibc'yi derlerken ve sınarken ayrıcalıksız kullanıcı olmanızı öneririz.
   </para>
  <para>
Hataları raporlamadan önce sorunun sizin sisteminizden kaynaklanmadığından emin olmalısınız. Sınamalar (daha sonra da kurulum) <filename>/etc/passwd</filename>, <filename>/etc/nsswitch.conf</filename>, vb. sistem dosyalarını kullanır. Bu dosyaların hepsi doğru içeriğe sahip olmalıdır.
   </para>
  <para><citation>GNU C Kütüphanesi Kılavuzu</citation>'nu yazdırmaya hazırlamak isterseniz <command>make dvi</command> komutunu verin. Bunu yapabilmek için çalışan bir TeX kurulumuna ihtiyacınız vardır. Kılavuzun Info dosyaları pakette biçimlenmiş olarak zaten vardır. Bunları yeniden üretmek isterseniz <command>make info</command> komutunu verebilirsiniz ama bu gerekmez.
   </para>
  <para>
Kütüphane, <command>Makeconfig</command> içinde bulabileceğiniz bir miktar özel amaçlı yapılandırma parametresine sahiptir. Bunlar <command>configparms</command> dosyası ile değiştirilebilir.  Bunları değiştirmek isterseniz derleme işlemini yapacağınız dizinde bir <command>configparms</command> dosyası oluşturun ve içine sisteminize uygun değerleri ekleyin. Bu dosya <command>make</command> tarafından derleme ortamına dahil edilir.
   </para>
  <para>
GNU C kütüphanesini çapraz derleme için yapılandırmak  <command>configparms</command> içine bir kaç tanım ekleyerek kolayca yapılabilir.  <literal>CC</literal> değişkenine kütüphaneyi kendisi için yapılandıracağınız hedef derleyiciyi atayabilirsiniz; bu değerin <command>configure</command> betiğini çalıştırırken kullanılacak <literal>CC</literal> değeri ile aynı olması önemlidir. Örnek: <literal>CC=<emphasis>hedef</emphasis>-gcc </literal><command>configure </command><varname> hedef</varname>.  Derlenen kütüphanenin parçası olacağı sistemde çalışacak yazılımlar için kullanılacak derleyiciyi <literal>BUILD_CC</literal> değişkenine atayın. Eğer yerel araçlar hedefteki nesne dosyaları ile çalışacak şekilde yapılandırılmamışsa, hedef sistemde çalışacak <command>ar</command> ve <command>ranlib</command> araçlarını  <literal>AR</literal> ve <literal>RANLIB</literal> değişkenlerinde belirtmeniz gerekebilir.
   </para>
 </section>
 <section xml:id="glibc-Running-make-install">
  <info>
   <title>C Kütüphanesinin Kurulması</title>
   <titleabbrev>Kütüphane derlendikten sonra sisteme nasıl kurulur?</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>kurulum</primary></indexterm>
Kütüphaneyi, başlık dosyalarını ve kılavuzun Info dosyalarını kurmak için  <command>env LANGUAGE=C LC_ALL=C make install</command> komutunu verin. Eğer daha önce derleme yapılmamışsa, bu komut önce paketi derleyecek sonra da kuracaktır. Ancak kurulumdan önce derleme işlemini bitirmiş ve gerekli sınamaları yapmış olmanız daha iyidir.  Eğer glibc'yi birincil C kütüphanesi olarak kuruyorsanız, önce sistemi tek kullanıcılı kipe almanız ve kurulumdan sonra sistemi yeniden başlatmanız önerilir. Bu işlem, kütüphaneyi temelden değiştirirken bazı bozucu şeylerin oluşturacağı riskleri en aza indirir.
   </para>
  <para>
Linux libc5'den yükseltme ya da başka bir C kütüphanesinden geçiş yapıyorsanız <command>/usr/include</command> dizininin boşaltılması önem kazanır. Yeni <command>/usr/include</command> Linux başlık dosyalarından başka birşey içermemelidir.
   </para>
  <para>
Bunun için önce kütüphaneyi derlemelisiniz (<command>make</command>), isterseniz sınayabilirsiniz (<command>make check</command>) sonra başlık dosyalarını içeren dizini değiştirin ve kütüphaneyi kurun (<command>make install</command>).  İşlem bu sırayla yapılmalıdır. Kurulumdan önce başlık dosyalarını içeren dizinin değiştirilmemesi, eski kütüphanenin başlık dosyalarıyla istenmeyen bir karışımın oluşmasına yol açacaktır. Ancak bu değiştirme işleminin kurulumdan hemen önce yapılması gerekir; çünkü yapılandırma, derleme ve sınama işlemleri bu eski başlık dosyaları kullanılarak yapılacaktır.
   </para>
  <para>
Glibc 2.0 veya 2.1 sürümünden yükseltme yapıyorsanız, <command>make install</command> komutu bütün işi kendisi yapacaktır. Eski başlık dosyalarını kaldırmanıza gerek kalmayacaktır. Ama yapmak isterseniz bir mahsuru yok, yukarıda anlatılan adımları uygulayabilirsiniz.
   </para>
  <para>
Ayrıca GCC'yi yeni kütüphane ile çalışacak şekilde yeniden yapılandırmanız gerekebilir. Bunu yapmanın en kolay yolu tekrar çalışır hale getirmek için derleyici seçeneklerini yapılandırıp (GNU/Linux sistemlerde <command>-Wl,--dynamic-linker=/lib/ld-linux.so.2</command> çalışmalıdır) gcc'yi yeniden derlemektir. Ayrıca <filename>specs</filename> dosyasını (<literal>/usr/lib/gcc-lib/<emphasis>HEDEF</emphasis>/<emphasis>SÜRÜM</emphasis>/specs</literal>) yeniden düzenlemeniz gerekebilir, ancak bu biraz kara sanattır.
   </para>
  <para>
Glibc'yi yapılandırdığınız yerden farklı bir yere kurmak isterseniz kuracağınız yeri <command>make install</command> komut satırında <command>install_root</command> değişkeni ile belirtebilirsiniz. Bu değişkenin değeri tüm kurulum yollarını önceleyerek değiştirir. Bu bağlı bir dosya sistemindeki başka sisteme ait bir kök dosya sistemine (chroot) kurulum yapmak ya da ikilik bir dağıtım hazırlamak için yararlıdır. Belirtilen dizin bir mutlak dosya yolu olarak belirtilmelidir.
   </para>
  <para>
Glibc 2.2 <command>nscd</command> olarak bilinen bir artalan yazılımı içerir. <command>nscd</command> isim hizmeti aramalarnda arabellekleme yapar. NIS+ ile başarımı oldukça yükseltir ve DNS'ye de yardımcı olur.
   </para>
  <para>
Bir yardımcı yazılım, <filename>/usr/libexec/pt_chown</filename>, setuid <command>root</command> olarak kurulmalıdır. Yazılım <command>grantpt</command> işlevi tarafından çalıştırılır; işlev çağrıldığı süreç için uçbirimsiler üzerindeki izinleri ayarlar. Böylelikle, <command>xterm</command> ve <command>screen</command> gibi yazılımların setuid olmaları gerekmez. (Bunların ayrıcalıklara ihtiyaç duyma sebepleri olabilir.) Eğer 2.1 veya daha yeni bir Linux çekirdeğini <command>devptsfs</command> veya <command>devfs</command> desteği ile kullanıyorsanız bu yazılıma ihtyacınız olmaz; aksi takdirde ihiyacınız olacaktır. <command>pt_chown</command> yazılımının kodu <filename>login/programs/pt_chown.c</filename> dosyasındadır.
   </para>
  <para>
Kurulumdan sonra sisteminizde yerel ve zaman dilimi yapılandırmasını yapmak isteyebilirsiniz. GNU C kütüphanesi <command>localedef</command> ile yapılandırılabilen bir yerel veritabanı ile gelir. Örneğin Türkçe yerelini <command>tr_TR</command> ismiyle ayarlamak isterseniz <command>localedef -i tr_TR -f ISO-8859-9 tr_TR</command> komutu yeterli olur.  Glibc tarafından desteklenen tüm yerelleri yapılandırmak isterseniz, kütüphaneyi derlediğiniz dizinde  <command>make localedata/install-locales</command> komutunu verin.
   </para>
  <para>
Zaman dilimini yapılandırmak için <command>TZ</command> ortam değişkenini kullanabilirsiniz. <command>tzselect</command> betiği doğru değeri seçmenize yardımcı olur. Örneğin Türkiye için <command>tzselect</command>, <command>TZ='Europe/Istanbul'</command> ataması yapmanızı önerecektir. Sistem çapında yapılandırma için  <command>/usr/share/zoneinfo</command> içindeki zaman dilimi dosyasından <command>/etc/localtime</command> dosyasına bir sembolik bağ yapın. Türkiye için, <command>ln -s /usr/share/zoneinfo/Europe/Istanbul /etc/localtime</command> komutu yeterli olacaktır.
   </para>
 </section>
 <section xml:id="glibc-Tools-for-Compilation">
  <info>
   <title>Derleme için Önerilen Araçlar</title>
   <titleabbrev>Öncelikle bunlara ihtiyacınız var.</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>kurulum araçları</primary></indexterm>
GNU C Kütüphanesini derlemeye başlamadan önce aşağıdaki GNU araçlarını kurmanızı öneririz:
   </para>
  <para>
   <variablelist>
    <varlistentry>
     <term>GNU <literal>make</literal> 3.79 veya üstü</term>
     <listitem>
      <para>
GNU <command>make</command>'in en son sürümüne ihtiyacınız olacak. GNU C Kütüphanesini başka bir <command>make</command> için değiştirmek zor olacağından GNU <command>make</command> kullanmanızı öneririz. Tavsiyemiz, GNU <command>make</command>'in 3.79 sürümü olacaktır.  Daha eski tüm sürümleri çeşitli hatalar içerir ya da kütüphanenin özellikleri ile uyumlu değildir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>GCC 3.4 veya üstü, GCC 4.1 önerilir</term>
     <listitem>
      <para>
GNU C Kütüphanesi sadece GNU C derleyici ailesi ile derlenebilir. 2.3 sürümlerinin derlenmesi için GCC 3.2 veya üstü bir sürüm gerekir; 2.3 sürümlerini derlemek için biz GCC 3.4'ü öneriyoruz.  2.4 sürümlerinin derlenmesi için GCC 3.4 veya üstü bir sürüm gerekir; bu sürümü yazarken GCC 4.1'i kullandık ve şimdiki sürümler için onu öneriyoruz. <command>powerpc64</command> iceren bazı makinelerde GCC 4.0 öncesi derleyicilerin C kütüphanesinin 2.4 sürümlerini derlemekten kaçınmanızı gerektirecek sorunları vardır. Diğer makinelerde, doğru <command>long double</command> türü biçim destekli C kütüphanesi derlemek için GCC 4.1 gerekir; <literal>powerpc</literal> (32 bit), <literal>s390</literal> ve <literal>s390x</literal> dahil.
     </para>
      <para>
GNU libc'yi kullanacak yazılımları derlerken istediğiniz derleyiciyi kullanabilirsiniz. Ancak, GCC 2.7 ve 2.8 sürümlerinde kayan noktalı sayılara destek sorunludur. Matematik kütüphanesi doğru çalışmaz. Buna dikkat edin.
     </para>
      <para>
Kütüphaneyi kullanacağınız platforma özel derleyici sorunları için FAQ dosyasına bakabilirsiniz.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>GNU <literal>binutils</literal> 2.15 veya üstü</term>
     <listitem>
      <para>
GNU C kütüphanesini derlemek için GNU <command>binutils</command> (as ve ld) kullanmalısınız. Şu an gerekli işlevselliği sağlayacak başka bir çevirici ve ilintileyici yoktur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>GNU <literal>texinfo</literal> 3.12f</term>
     <listitem>
      <para>
Texinfo belgeleri düzgün olarak dönüştürmek ve kurmak için <command>texinfo</command> paketinin bu sürümü gerekir. Daha eski sürümleri belgelerde kullanılan tüm yaftaları anlayamaz ve info dosyaları için kurulum mekanizması ya mevcut değildir ya da farklı çalışır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>GNU <literal>awk</literal> 3.0 veya üstü</term>
     <listitem>
      <para><command>awk</command> çeşitli yerlerde dosya üretmek için kullanılmıştır.  <command>gawk</command> 3.0 işe yaramaktadır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Perl 5</term>
     <listitem>
      <para>
Perl derleme için gerekmez, ama kurulumun sınanması sırasında kullanılmıştır. İlerde kullanmayı düşünebiliriz.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>GNU <command>sed</command> 3.02 veya üstü</term>
     <listitem>
      <para><command>sed</command> çeşitli yerlerde dosya üretmek için kullanılmıştır.  Betiklerin çoğu <command>sed</command>'in herhangi bir sürümü ile çalışır. Sınama amaçlı kullanılan <command>msgs.h</command> dosyasını üreten <command>intl</command> altdizinindeki <command>po2test.sed</command> betiği bunun dışındadır. Bu betik sadece GNU <command>sed</command> 3.02 ile düzgün çalışır. Kurulumu sınamayı düşünüyorsanız <command>sed</command>'i mutlaka güncellemelisiniz.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para><command>configure.in</command> dosyalarında bazı değişiklikler yapmak niyetindeyseniz,
   </para>
  <para>
   <itemizedlist>
    <listitem>
GNU <command>autoconf</command> 2.53 veya üstü
     </listitem>
   </itemizedlist>
  </para>
  <para>
gerekir. Eğer ileti çeviri dosyalarını değiştirmek isterseniz,
     </para>
  <para>
   <itemizedlist>
    <listitem>
GNU <command>gettext</command> 0.10.36 veya üstü
     </listitem>
   </itemizedlist>
  </para>
  <para>
gerekir. Eğer kaynak ağacını yamalarla yükseltecekseniz bu paketlere yine de ihtiyacınız olacaktır ama bundan kaçınmayı deneseniz daha iyi olur.
   </para>
 </section>
 <section xml:id="glibc-Linux">
  <info>
   <title>GNU/Linux Sistemlere Özgü Tavsiyeler</title>
  </info>
  <para><indexterm scope="glibc-cp"><primary>libc5'ten yükseltme</primary></indexterm><indexterm scope="glibc-cp"><primary>çekirdek başlık dosyaları</primary></indexterm>
GNU libc'yi bir GNU/Linux sisteme kurucaksanız, sisteminizdeki Linux çekirdeğinin başlık dosyalarının 2.2 sürümü ya da daha yeni bir çekirdeğin başlık dosyaları olmalıdır. ia64, sh ve hppa gibi bazı mimarilerde ise bu en az 2.3.99 (sh ve hppa) ya da 2.4.0 (ia64) olmalıdır. Böyle bir çekirdeği kullanmaya ihtiyacınız yoksa, sadece glibc'nin onları bulabilmesini sağlamanız yeterlidir. Bunu yapmanın en kolay yolu <filename>/usr/src/linux-2.2.1</filename> gibi bir dizine çekirdek kaynak kodunu yerleştirdikten sonra <command>make config</command> komutunu verin ve öntanımlı yapılandırmayı kabul edin, sonra da <command>make include/linux/version.h</command> komutunu verin. Son olarak glibc'yi <command>--with-headers=/usr/src/linux-2.2.1/include</command> seçeneği ile yapılandırın ve derleyin. Bu işlemi en son çıkan çekirdekle yapmaya çalışın.
   </para>
  <para>
Bir diğer taktik ise yukarıdaki gibi 2.2 veya üstü bir çekirdeği yine yükeyin ve aynı şekilde <command>make config</command> yapın. Sonra <filename>/usr/include</filename> dizinini ya silin ya da ismini değiştirin ve yeni <filename>/usr/include</filename> dizini içinde çekirdek kaynak koduna <filename>/usr/include/linux</filename> ve <filename>/usr/include/asm</filename> sembolik bağlarını yapın. Bu taktikte glibc'yi yapılandırırken özel bir seçenek kullanmanıza gerek yoktur. Eğer libc5'ten yükseltme yapıyorsanız bu taktiği kullanmalısınız, çünkü artık eski başlık dosyalarına hiç ihtiyacınız olmayacaktır.
   </para>
  <para>
GNU libc'yi sisteme kurduktan sonra <filename>/usr/include/linux</filename> ve <filename>/usr/include/asm</filename> dizinlerini ya silin ya da isimlerini değiştirin ve bunların içeriklerini glibc kurulumunda kullandığınız çekirdek kaynak kodundaki <filename>include/linux</filename> ve <command>include/asm-$</command><varname>MİMARİ</varname> dizinlerinin içerikleri ile değiştirin. Burada <varname>MİMARİ</varname> kütüphanenin kurulduğu makinenin mimarisi (<command>i386</command> veya <command>alpha</command> gibi) olacaktır. Glibc'yi yapılandırırken <command>--with-headers</command> seçeneğini kullanmadıysanız bu işlemi yapmak zorunda değilsiniz. Yalnız, burada dikkat edeceğiniz husus işlemin sembolik bağlarla değil kopyalama ile yapılacağıdır.
   </para>
  <para><filename>/usr/include/net</filename> ve <filename>/usr/include/scsi</filename> dizinlerinin içerikleri çekirdek kaynak koduna sembolik bağ olmamalıdır. Bu dosyalar için GNU libc kendi sürümlerini içerir.
   </para>
  <para>
GNU/Linux'ta libc'nin bazı bileşenlerinin <filename>/lib</filename> içinde bazılarının da <filename>/usr/lib</filename> içinde olması gerekir. Eğer glibc'yi <command>--prefix=/usr</command> ile yapılandırırsanız kurulumda bu zaten böyle olur. Eğer öntanımlı yapılandırmayı tercih ederseniz bu dosyalar <filename>/usr/local</filename> altına kurulacaktır.
   </para>
  <para>
Libc5'ten yükseltme yapıyorsanız, her paylaşımlı kütüphanenin yeni kütüphaneye göre yeniden derlenmesi gerekir, ancak eski çalıştırılabilirlerin kullandığı eski kütüphaneleri de tutmanız gerekir. Bu işlem biraz karmaşık ve zordur. Bu konuda daha ayrıntılı bilgiyi <link xlink:href="http://www.imaxx.net/~thrytis/glibc">Glibc2 HOWTO</link>'da bulabilirsiniz.
   </para>
  <para><command>nscd</command>'yi çekirdekteki evre desteği sorunlu olduğundan 2.0 çekirdeklerle kullanamayabilirsiniz. Belki, <command>nscd</command> bu sorunlara zor da olsa uyum sağlayabilir, ama diğer evreli yazılımlarla sorunlar çıkabilir.
   </para>
 </section>
 <section xml:id="glibc-Reporting-Bugs">
  <info>
   <title>Yazılım Hatalarının Raporlanması</title>
   <titleabbrev>Düzeltilmesini istediklerinizi nasıl bildireceksiniz?</titleabbrev>
  </info>
  <para><indexterm scope="glibc-cp"><primary>hataların raporlanması</primary></indexterm>
GNU C kütüphanesinde bazı kodlama hataları olabilir. Bu kılavuzda da hatalar ya da gözden kaçmış konular olabilir. Bunları raporlarsanız düzeltilecektir. Yapmazsanız, bundan kimsenin haberi olmayacağından düzeltilmeden kalacaktır.
   </para>
  <para>
Sorunu raporlamadan önce zaten raporlanmış olup olmadığına bakmak daha iyidir. Bunlar iki yerde belgelenmiştir: <filename>BUGS</filename> dosyasında bilinen sorunlar listelenmiştir. Ayrıca, <uri xlink:href="http://sources.redhat.com/bugzilla/">http://sources.redhat.com/bugzilla/</uri> adresinde bir hata izleme sistemi bulunur. Bu adreste henüz açık bulunan ya da kapanmış raporları bulabilirsiniz. Kapatılmış raporlarda bir yama ya da sorunu çözen bir ipucu vardır.
   </para>
  <para>
Bir sorunu raporlamak için önce onu bulmalısınız. Bu işin zor kısmıdır. Sorunu saptadıktan sonra bunun gerçekten bir hata olup olmadığından emin olmalısınız. Bunun en kolay yolu diğer C kütüphanelerinin böyle bir durumda nasıl davrandıklarına bakmaktır. Eğer davranışlar aynıysa, siz birşeyleri yanlış yapmışsınızdır ve kütüphaneler doğrudur. Değilse, kütüphanelerden biri bir ihtimal yanlış olabilir. Hatta yanlış olan GNU kütüphanesi de olmayabilir. Unix C kütüphanelerinin çoğu geçmişten gelerek bazı şeylere izin verirler, biz vermeyiz, örneğin bir dosyanın iki kere kapatılması gibi.
   </para>
  <para>
Eğer GNU C kütüphanesinin bazı şeyleri <link linkend="glibc-Standards-and-Portability">ISO ve POSIX standartlarına</link> uygun olarak yapmadığını düşünüyorsanız, bu bir hatadır. Onu raporlayın!
   </para>
  <para>
Bir hata bulduğunuza emin olduktan sonra, sorunu üreten en küçük sınama şartını oluşturun. Eğer mümkünse bir işlev çağrısına kadar sorunu küçültün. Bu çok zor olmasa gerek.
   </para>
  <para>
Son adım hatayı raporlamaktır. Bunu <uri xlink:href="http://sources.redhat.com/bugzilla/">http://sources.redhat.com/bugzilla/</uri> arayüzünden yapın.
   </para>
  <para>
Eğer bir işlevin nasıl davranması gerektiğinden emin olamıyorsanız ve bu kılavuz da bunu size söylemiyorsa, bu kılavuzdaki bir hatadır. Onu da raporlayın! Eğer işlev bu kılavuzda yazıldığı gibi davranmıyorsa ya kütüphane ya da kılavuz yanlıştır. Bu kılavuzda herhangi bir hata ya da eksik bulursanız bunu <uri xlink:href="http://sources.redhat.com/bugzilla/">http://sources.redhat.com/bugzilla/</uri> arayüzünden raporlayın. Sorunu raporlarken hatanın hangi bölümün neresinde olduğunu açıkça belirtmeye çalışın.
   </para>
  <para>
(Sorunu kılavuzun türkçe çevirisine göre saptamaya çalışmamanızı öneririm. Çevirmen hatalarından kütüphanenin yazarları sorumlu olamaz, bu bakımdan kılavuzun İngilizce özgün sürümünde sorun varsa bu adrese bunu raporlayın. Hata bir çeviri hatası ise bunu lütfen bana (<email>nilgun@belgeler·gen·tr</email>) bildirin. Çevirinin güncel olmasını sağlamaya çalışacağımdan özgün sürüme yapılan eklemeler ve düzeltmeler çeviriye er ya da geç yansıtılacaktır.)
   </para>
 </section>
</appendix>
