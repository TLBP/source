<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-c.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-C"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>C</title>
  </info>
  <para>
   <glosslist>
    <glossentry>
     <glossterm>
      <literal>double <command>cabs</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>cabsf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>cabsl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>cacos</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>cacosf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>cacosh</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>cacoshf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>cacoshl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>cacosl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void * <command>calloc</command> (size_t <varname>count</varname>, size_t <varname>eltsize</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>malloc.h</literal>, <literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Allocating-Cleared-Space"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>canonicalize_file_name</command> (const char *<varname>name</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-Symbolic-Links"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>carg</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>cargf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>cargl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>casin</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>casinf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>casinh</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>casinhf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>casinhl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>casinl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>catan</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>catanf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>catanh</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>catanhf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>catanhl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>catanl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Inverse-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>nl_catd <command>catopen</command> (const char *<varname>cat_name</varname>, int <varname>flag</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>nl_types.h</literal> (X/Open):  <xref linkend="glibc-The-catgets-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>cbc_crypt</command> (char *<varname>key</varname>, char *<varname>blocks</varname>, unsigned <varname>len</varname>, unsigned <varname>mode</varname>, char *<varname>ivec</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>rpc/des_crypt.h</literal> (SUNRPC):  <xref linkend="glibc-DES-Encryption"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>cbrt</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>cbrtf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>cbrtl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>ccos</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>ccosf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>ccosh</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>ccoshf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>ccoshl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>ccosl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cc_t</command>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Mode-Data-Types"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CCTS_OFLOW</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>ceil</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>ceilf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>ceill</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>cexp</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>cexpf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>cexpl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>speed_t <command>cfgetispeed</command> (const struct termios *<varname>termios-p</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Line-Speed"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>speed_t <command>cfgetospeed</command> (const struct termios *<varname>termios-p</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Line-Speed"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>cfmakeraw</command> (struct termios *<varname>termios-p</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Noncanonical-Input"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>cfree</command> (void *<varname>ptr</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (Sun):  <xref linkend="glibc-Freeing-after-Malloc"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>cfsetispeed</command> (struct termios *<varname>termios-p</varname>, speed_t <varname>speed</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Line-Speed"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>cfsetospeed</command> (struct termios *<varname>termios-p</varname>, speed_t <varname>speed</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Line-Speed"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>cfsetspeed</command> (struct termios *<varname>termios-p</varname>, speed_t <varname>speed</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Line-Speed"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>CHAR_BIT</command>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Width-of-Type"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>CHAR_MAX</command>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Range-of-Type"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>CHAR_MIN</command>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Range-of-Type"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>chdir</command> (const char *<varname>filename</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Working-Directory"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>CHILD_MAX</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-General-Limits"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>chmod</command> (const char *<varname>filename</varname>, mode_t <varname>mode</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/stat.h</literal> (POSIX.1):  <xref linkend="glibc-Setting-Permissions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>chown</command> (const char *<varname>filename</varname>, uid_t <varname>owner</varname>, gid_t <varname>group</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-File-Owner"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CIGNORE</command></literal>
     </glossterm>
     <glossdef>
      <para><command>termios.h</command> (BSD):  <xref linkend="glibc-Control-Modes"/>
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>cimag</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>cimagf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>cimagl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>clearenv</command> (void)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-Environment-Access"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>clearerr</command> (FILE *<varname>stream</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Error-Recovery"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>clearerr_unlocked</command> (FILE *<varname>stream</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Error-Recovery"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>CLK_TCK</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (POSIX.1):  <xref linkend="glibc-CPU-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CLOCAL</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>clock_t <command>clock</command> (void)</literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (ISO):  <xref linkend="glibc-CPU-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>CLOCKS_PER_SEC</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (ISO):  <xref linkend="glibc-CPU-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>clock_t</command>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (ISO):  <xref linkend="glibc-CPU-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>clog</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>clog10</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (GNU):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>clog10f</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (GNU):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>clog10l</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (GNU):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>clogf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>clogl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>close</command> (int <varname>filedes</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Opening-and-Closing-Files"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>closedir</command> (DIR *<varname>dirstream</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>dirent.h</literal> (POSIX.1):  <xref linkend="glibc-Reading-Closing-Directory"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>closelog</command> (void)</literal>
     </glossterm>
     <glossdef>
      <para><literal>syslog.h</literal> (BSD):  <xref linkend="glibc-closelog"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>COLL_WEIGHTS_MAX</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>limits.h</literal> (POSIX.2):  <xref linkend="glibc-Utility-Limits"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>size_t <command>confstr</command> (int <varname>parameter</varname>, char *<varname>buf</varname>, size_t <varname>len</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>conj</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>conjf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>conjl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>connect</command> (int <varname>socket</varname>, struct sockaddr *<varname>addr</varname>, socklen_t <varname>length</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Connecting"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cookie_close_function</command>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Hook-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cookie_io_functions_t</command>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Streams-and-Cookies"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cookie_read_function</command>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Hook-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cookie_seek_function</command>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Hook-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cookie_write_function</command>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Hook-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>copysign</command> (double <varname>x</varname>, double <varname>y</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>copysignf</command> (float <varname>x</varname>, float <varname>y</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>copysignl</command> (long double <varname>x</varname>, long double <varname>y</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Bit-Twiddling"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>cos</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>cosf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>cosh</command> (double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>coshf</command> (float <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>coshl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>cosl</command> (long double <varname>x</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>cpow</command> (complex double <varname>base</varname>, complex double <varname>power</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>cpowf</command> (complex float <varname>base</varname>, complex float <varname>power</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>cpowl</command> (complex long double <varname>base</varname>, complex long double <varname>power</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>cproj</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>cprojf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>cprojl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>CPU_CLR</command> (int <varname>cpu</varname>, cpu_set_t *<varname>set</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sched.h</literal> (GNU):  <xref linkend="glibc-CPU-Affinity"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>CPU_ISSET</command> (int <varname>cpu</varname>, const cpu_set_t *<varname>set</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sched.h</literal> (GNU):  <xref linkend="glibc-CPU-Affinity"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>CPU_SET</command> (int <varname>cpu</varname>, cpu_set_t *<varname>set</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sched.h</literal> (GNU):  <xref linkend="glibc-CPU-Affinity"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>CPU_SETSIZE</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>sched.h</literal> (GNU):  <xref linkend="glibc-CPU-Affinity"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>cpu_set_t</command>
     </glossterm>
     <glossdef>
      <para><literal>sched.h</literal> (GNU):  <xref linkend="glibc-CPU-Affinity"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>void <command>CPU_ZERO</command> (cpu_set_t *<varname>set</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>sched.h</literal> (GNU):  <xref linkend="glibc-CPU-Affinity"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CREAD</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>double <command>creal</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>float <command>crealf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>long double <command>creall</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Operations-on-Complex"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>creat</command> (const char *<varname>filename</varname>, mode_t <varname>mode</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Opening-and-Closing-Files"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>int <command>creat64</command> (const char *<varname>filename</varname>, mode_t <varname>mode</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>fcntl.h</literal> (Unix98):  <xref linkend="glibc-Opening-and-Closing-Files"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CRTS_IFLOW</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>crypt</command> (const char *<varname>key</varname>, const char *<varname>salt</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>crypt.h</literal> (BSD, SVID):  <xref linkend="glibc-crypt"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>crypt_r</command> (const char *<varname>key</varname>, const char *<varname>salt</varname>, struct crypt_data * <varname>data</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>crypt.h</literal> (GNU):  <xref linkend="glibc-crypt"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CS5</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CS6</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CS7</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CS8</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>csin</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>csinf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>csinh</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>csinhf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>csinhl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>csinl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CSIZE</command></literal>
     </glossterm>
     <glossdef>
      <para><command>termios.h</command> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS64_CFLAGS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS64_LDFLAGS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS64_LIBS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS64_LINTFLAGS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS_CFLAGS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS_LDFLAGS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS_LIBS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_LFS_LINTFLAGS</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (Unix98):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <command>_CS_PATH</command>
     </glossterm>
     <glossdef>
      <para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-String-Parameters"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>csqrt</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>csqrtf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>csqrtl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>tcflag_t <command>CSTOPB</command></literal>
     </glossterm>
     <glossdef>
      <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Control-Modes"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>ctan</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>ctanf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex double <command>ctanh</command> (complex double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex float <command>ctanhf</command> (complex float <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>ctanhl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Hyperbolic-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>complex long double <command>ctanl</command> (complex long double <varname>z</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>complex.h</literal> (ISO):  <xref linkend="glibc-Trig-Functions"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>ctermid</command> (char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (POSIX.1):  <xref linkend="glibc-Identifying-the-Terminal"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>ctime</command> (const time_t *<varname>time</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (ISO):  <xref linkend="glibc-Formatting-Calendar-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>ctime_r</command> (const time_t *<varname>time</varname>, char *<varname>buffer</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>time.h</literal> (POSIX.1c):  <xref linkend="glibc-Formatting-Calendar-Time"/>.
     </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <literal>char * <command>cuserid</command> (char *<varname>string</varname>)</literal>
     </glossterm>
     <glossdef>
      <para><literal>stdio.h</literal> (POSIX.1):  <xref linkend="glibc-Who-Logged-In"/>.
     </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </para>
 </section>
