<?xml version="1.0" encoding="UTF-8"?>

<!-- ********************************************************************
     $Id: appb.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->
<appendix xml:id="glibc-Library-Summary">
  <title>Kütüphane Oluşumlarının Özeti</title>
  <titleabbrev>Her kütüphane oluşumunu türetildiği kaynak, başlık dosyası ve sözdizimini
  gösteren bir özet.</titleabbrev>
  <para>
    Bu ek, GNU C kütüphanesi ile sağlanmış başlık dosyaları içinde bildirilmiş
    oluşumların eksiksiz bir listesidir. Her girdi, türetildiği standart ya da diğer
    kaynağın ismi ile onun hakkında daha ayrıntılı bilgiyi bu kılavuzun neresinde
    bulabileceğinize ilişkin bilgi de içerir.
  </para>

  &libc-appb-a.xml;
  &libc-appb-b.xml;
  &libc-appb-c.xml;
  &libc-appb-d.xml;
  &libc-appb-e.xml;
  &libc-appb-f.xml;
  &libc-appb-g.xml;
  &libc-appb-hi.xml;
  &libc-appb-jkl.xml;
  &libc-appb-mn.xml;
  &libc-appb-o.xml;
  &libc-appb-p.xml;
  &libc-appb-qr.xml;
  &libc-appb-s.xml;
  &libc-appb-tu.xml;

  <sect1 xml:id="glibc-Library-Summary-V"><title>V</title>
    <para><glosslist><glossentry><glossterm><command>va_alist</command></glossterm><glossdef><para><literal>varargs.h</literal> (Unix):  <xref linkend="glibc-Old-Varargs"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal><varname>type</varname> <command>va_arg</command> (va_list <varname>ap</varname>, <varname>type</varname>)</literal></glossterm><glossdef><para><literal>stdarg.h</literal> (ISO):  <xref linkend="glibc-Argument-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>__va_copy</command> (va_list <varname>dest</varname>, va_list <varname>src</varname>)</literal></glossterm><glossdef><para><literal>stdarg.h</literal> (GNU):  <xref linkend="glibc-Argument-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>va_dcl</command></glossterm><glossdef><para><literal>varargs.h</literal> (Unix):  <xref linkend="glibc-Old-Varargs"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>va_end</command> (va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdarg.h</literal> (ISO):  <xref linkend="glibc-Argument-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>va_list</command></glossterm><glossdef><para><literal>stdarg.h</literal> (ISO):  <xref linkend="glibc-Argument-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void * <command>valloc</command> (size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>malloc.h</literal>, <literal>stdlib.h</literal> (BSD):  <xref linkend="glibc-Aligned-Memory-Blocks"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vasprintf</command> (char **<varname>ptr</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>va_start</command> (va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>varargs.h</literal> (Unix):  <xref linkend="glibc-Old-Varargs"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>va_start</command> (va_list <varname>ap</varname>, <varname>last-required</varname>)</literal></glossterm><glossdef><para><literal>stdarg.h</literal> (ISO):  <xref linkend="glibc-Argument-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VDISCARD</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Other-Special"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VDSUSP</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Signal-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VEOF</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VEOL</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VEOL2</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VERASE</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>verr</command> (int <varname>status</varname>, const char *<varname>format</varname>, va_list)</literal></glossterm><glossdef><para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>verrx</command> (int <varname>status</varname>, const char *<varname>format</varname>, va_list)</literal></glossterm><glossdef><para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>versionsort</command> (const void *<varname>a</varname>, const void *<varname>b</varname>)</literal></glossterm><glossdef><para><literal>dirent.h</literal> (GNU):  <xref linkend="glibc-Scanning-Directory-Content"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>versionsort64</command> (const void *<varname>a</varname>, const void *<varname>b</varname>)</literal></glossterm><glossdef><para><literal>dirent.h</literal> (GNU):  <xref linkend="glibc-Scanning-Directory-Content"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>vfork</command> (void)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (BSD):  <xref linkend="glibc-Creating-a-Process"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vfprintf</command> (FILE *<varname>stream</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vfscanf</command> (FILE *<varname>stream</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vfwprintf</command> (FILE *<varname>stream</varname>, const wchar_t *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vfwscanf</command> (FILE *<varname>stream</varname>, const wchar_t *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VINTR</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Signal-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VKILL</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vlimit</command> (int <varname>resource</varname>, int <varname>limit</varname>)</literal></glossterm><glossdef><para><literal>sys/vlimit.h</literal> (BSD):  <xref linkend="glibc-Limits-on-Resources"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VLNEXT</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Other-Special"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VMIN</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Noncanonical-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vprintf</command> (const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VQUIT</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Signal-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VREPRINT</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vscanf</command> (const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vsnprintf</command> (char *<varname>s</varname>, size_t <varname>size</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vsprintf</command> (char *<varname>s</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vsscanf</command> (const char *<varname>s</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VSTART</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Start-Stop-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VSTATUS</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Other-Special"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VSTOP</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Start-Stop-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VSUSP</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Signal-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vswprintf</command> (wchar_t *<varname>s</varname>, size_t <varname>size</varname>, const wchar_t *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vswscanf</command> (const wchar_t *<varname>s</varname>, const wchar_t *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>vsyslog</command> (int <varname>facility_priority</varname>, char *<varname>format</varname>, va_list arglist)</literal></glossterm><glossdef><para><literal>syslog.h</literal> (BSD):  <xref linkend="glibc-syslog--vsyslog"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VTIME</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Noncanonical-Input"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vtimes</command> (struct vtimes <varname>current</varname>, struct vtimes <varname>child</varname>)</literal></glossterm><glossdef><para><literal>vtimes.h</literal> (vtimes.h):  <xref linkend="glibc-Resource-Usage"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>vwarn</command> (const char *<varname>format</varname>, va_list)</literal></glossterm><glossdef><para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>vwarnx</command> (const char *<varname>format</varname>, va_list)</literal></glossterm><glossdef><para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>VWERASE</command></literal></glossterm><glossdef><para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Editing-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vwprintf</command> (const wchar_t *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Output"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>vwscanf</command> (const wchar_t *<varname>template</varname>, va_list <varname>ap</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Variable-Arguments-Input"/>.
     </para></glossdef></glossentry></glosslist>
    </para>
  </sect1><sect1 xml:id="glibc-Library-Summary-W"><title>W</title>
    <para><glosslist><glossentry><glossterm><literal>pid_t <command>wait</command> (int *<varname>status-ptr</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>wait3</command> (union wait *<varname>status-ptr</varname>, int <varname>options</varname>, struct rusage *<varname>usage</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (BSD):  <xref linkend="glibc-BSD-Wait-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>wait4</command> (pid_t <varname>pid</varname>, int *<varname>status-ptr</varname>, int <varname>options</varname>, struct rusage *<varname>usage</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (BSD):  <xref linkend="glibc-Process-Completion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>pid_t <command>waitpid</command> (pid_t <varname>pid</varname>, int *<varname>status-ptr</varname>, int <varname>options</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>warn</command> (const char *<varname>format</varname>, …)</literal></glossterm><glossdef><para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>warnx</command> (const char *<varname>format</varname>, …)</literal></glossterm><glossdef><para><literal>err.h</literal> (BSD):  <xref linkend="glibc-Error-Messages"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WCHAR_MAX</command></glossterm><glossdef><para><literal>limits.h</literal> (GNU):  <xref linkend="glibc-Range-of-Type"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>WCHAR_MAX</command></literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>WCHAR_MIN</command></literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>wchar_t</command></glossterm><glossdef><para><literal>stddef.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WCOREDUMP</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (BSD):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcpcpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcpncpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcrtomb</command> (char *restrict <varname>s</varname>, wchar_t <varname>wc</varname>, mbstate_t *restrict <varname>ps</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-a-Character"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wcscasecmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_T *<varname>ws2</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcscat</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcschr</command> (const wchar_t *<varname>wstring</varname>, int <varname>wc</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcschrnul</command> (const wchar_t *<varname>wstring</varname>, wchar_t <varname>wc</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wcscmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>ws2</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wcscoll</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>ws2</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Collation-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcscpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcscspn</command> (const wchar_t *<varname>wstring</varname>, const wchar_t *<varname>stopset</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcsdup</command> (const wchar_t *<varname>ws</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcsftime</command> (wchar_t *<varname>s</varname>, size_t <varname>size</varname>, const wchar_t *<varname>template</varname>, const struct tm *<varname>brokentime</varname>)</literal></glossterm><glossdef><para><literal>time.h</literal> (ISO/Amend1):  <xref linkend="glibc-Formatting-Calendar-Time"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcslen</command> (const wchar_t *<varname>ws</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-String-Length"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wcsncasecmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>s2</varname>, size_t <varname>n</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcsncat</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wcsncmp</command> (const wchar_t *<varname>ws1</varname>, const wchar_t *<varname>ws2</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcsncpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcsnlen</command> (const wchar_t *<varname>ws</varname>, size_t <varname>maxlen</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-String-Length"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcsnrtombs</command> (char *restrict <varname>dst</varname>, const wchar_t **restrict <varname>src</varname>, size_t <varname>nwc</varname>, size_t <varname>len</varname>, mbstate_t *restrict <varname>ps</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Converting-Strings"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcspbrk</command> (const wchar_t *<varname>wstring</varname>, const wchar_t *<varname>stopset</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcsrchr</command> (const wchar_t *<varname>wstring</varname>, wchar_t <varname>c</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcsrtombs</command> (char *restrict <varname>dst</varname>, const wchar_t **restrict <varname>src</varname>, size_t <varname>len</varname>, mbstate_t *restrict <varname>ps</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-Strings"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcsspn</command> (const wchar_t *<varname>wstring</varname>, const wchar_t *<varname>skipset</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcsstr</command> (const wchar_t *<varname>haystack</varname>, const wchar_t *<varname>needle</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>double <command>wcstod</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>float <command>wcstof</command> (const wchar_t *<varname>string</varname>, wchar_t **<varname>tailptr</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>intmax_t <command>wcstoimax</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcstok</command> (wchar_t *<varname>newstring</varname>, const char *<varname>delimiters</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Finding-Tokens-in-a-String"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long int <command>wcstol</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long double <command>wcstold</command> (const wchar_t *<varname>string</varname>, wchar_t **<varname>tailptr</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Floats"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long long int <command>wcstoll</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcstombs</command> (char *<varname>string</varname>, const wchar_t *<varname>wstring</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-String-Conversion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long long int <command>wcstoq</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>unsigned long int <command>wcstoul</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>unsigned long long int <command>wcstoull</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>uintmax_t <command>wcstoumax</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>unsigned long long int <command>wcstouq</command> (const wchar_t *restrict <varname>string</varname>, wchar_t **restrict <varname>tailptr</varname>, int <varname>base</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Parsing-of-Integers"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wcswcs</command> (const wchar_t *<varname>haystack</varname>, const wchar_t *<varname>needle</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (XPG):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>size_t <command>wcsxfrm</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *<varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Collation-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wctob</command> (wint_t <varname>c</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-a-Character"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wctomb</command> (char *<varname>string</varname>, wchar_t <varname>wchar</varname>)</literal></glossterm><glossdef><para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-Character-Conversion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wctrans_t <command>wctrans</command> (const char *<varname>property</varname>)</literal></glossterm><glossdef><para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Wide-Character-Case-Conversion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>wctrans_t</command></glossterm><glossdef><para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Wide-Character-Case-Conversion"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wctype_t <command>wctype</command> (const char *<varname>property</varname>)</literal></glossterm><glossdef><para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>wctype_t</command></glossterm><glossdef><para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WEOF</command></literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-EOF-and-Errors"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wint_t <command>WEOF</command></literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WEXITSTATUS</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WIFEXITED</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WIFSIGNALED</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WIFSTOPPED</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>wint_t</command></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Extended-Char-Intro"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wmemchr</command> (const wchar_t *<varname>block</varname>, wchar_t <varname>wc</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wmemcmp</command> (const wchar_t *<varname>a1</varname>, const wchar_t *<varname>a2</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wcjar.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wmemcpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wmemmove</command> (wchar *<varname>wto</varname>, const wchar_t *<varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wmempcpy</command> (wchar_t *restrict <varname>wto</varname>, const wchar_t *restrict <varname>wfrom</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>wchar_t * <command>wmemset</command> (wchar_t *<varname>block</varname>, wchar_t <varname>wc</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>W_OK</command></literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Testing-File-Access"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wordexp</command> (const char *<varname>words</varname>, wordexp_t *<varname>word-vector-ptr</varname>, int <varname>flags</varname>)</literal></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>wordexp_t</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>void <command>wordfree</command> (wordexp_t *<varname>word-vector-ptr</varname>)</literal></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wprintf</command> (const wchar_t *<varname>template</varname>, …)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Formatted-Output-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_APPEND</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_BADCHAR</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_BADVAL</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_CMDSUB</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_DOOFFS</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_NOCMD</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_NOSPACE</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_REUSE</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_SHOWERR</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_SYNTAX</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Calling-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>WRDE_UNDEF</command></glossterm><glossdef><para><literal>wordexp.h</literal> (POSIX.2):  <xref linkend="glibc-Flags-for-Wordexp"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>ssize_t <command>write</command> (int <varname>filedes</varname>, const void *<varname>buffer</varname>, size_t <varname>size</varname>)</literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-I-O-Primitives"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>ssize_t <command>writev</command> (int <varname>filedes</varname>, const struct iovec *<varname>vector</varname>, int <varname>count</varname>)</literal></glossterm><glossdef><para><literal>sys/uio.h</literal> (BSD):  <xref linkend="glibc-Scatter-Gather"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>wscanf</command> (const wchar_t *<varname>template</varname>, …)</literal></glossterm><glossdef><para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Formatted-Input-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WSTOPSIG</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>int <command>WTERMSIG</command> (int <varname>status</varname>)</literal></glossterm><glossdef><para><literal>sys/wait.h</literal> (POSIX.1):  <xref linkend="glibc-Process-Completion-Status"/>.
     </para></glossdef></glossentry></glosslist>
    </para>
  </sect1><sect1 xml:id="glibc-Library-Summary-X"><title>X</title>
    <para><glosslist><glossentry><glossterm><literal>int <command>X_OK</command></literal></glossterm><glossdef><para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Testing-File-Access"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>_XOPEN_SOURCE</command></glossterm><glossdef><para>
(X/Open):  <xref linkend="glibc-Feature-Test-Macros"/>.
     </para></glossdef></glossentry><glossentry><glossterm><command>_XOPEN_SOURCE_EXTENDED</command></glossterm><glossdef><para>
(X/Open):  <xref linkend="glibc-Feature-Test-Macros"/>.
     </para></glossdef></glossentry></glosslist>
    </para>
  </sect1><sect1 xml:id="glibc-Library-Summary-Y"><title>Y</title>
    <para><glosslist><glossentry><glossterm><literal>double <command>y0</command> (double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>float <command>y0f</command> (float <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long double <command>y0l</command> (long double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>double <command>y1</command> (double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>float <command>y1f</command> (float <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long double <command>y1l</command> (long double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>double <command>yn</command> (int n, double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>float <command>ynf</command> (int n, float <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry><glossentry><glossterm><literal>long double <command>ynl</command> (int n, long double <varname>x</varname>)</literal></glossterm><glossdef><para><literal>math.h</literal> (SVID):  <xref linkend="glibc-Special-Functions"/>.
     </para></glossdef></glossentry></glosslist>
    </para>
  </sect1>
</appendix>
