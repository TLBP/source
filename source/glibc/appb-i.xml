<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-i.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-I"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>I</title>
  </info>
  <glosslist>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>ICANON</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Local-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>iconv</command> (iconv_t <varname>cd</varname>, char **<varname>inbuf</varname>, size_t *<varname>inbytesleft</varname>, char **<varname>outbuf</varname>, size_t *<varname>outbytesleft</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>iconv.h</literal> (XPG2):  <xref linkend="glibc-Generic-Conversion-Interface"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iconv_close</command> (iconv_t <varname>cd</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>iconv.h</literal> (XPG2):  <xref linkend="glibc-Generic-Conversion-Interface"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>iconv_t <command>iconv_open</command> (const char *<varname>tocode</varname>, const char *<varname>fromcode</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>iconv.h</literal> (XPG2):  <xref linkend="glibc-Generic-Conversion-Interface"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>iconv_t</command>
    </glossterm>
    <glossdef>
     <para><literal>iconv.h</literal> (XPG2):  <xref linkend="glibc-Generic-Conversion-Interface"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>ICRNL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IEXTEN</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Local-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>if_freenameindex</command> (struct if_nameindex *ptr)</literal>
    </glossterm>
    <glossdef>
     <para><literal>net/if.h</literal> (IPv6 basic API):  <xref linkend="glibc-Interface-Naming"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>if_indextoname</command> (unsigned int ifindex, char *ifname)</literal>
    </glossterm>
    <glossdef>
     <para><literal>net/if.h</literal> (IPv6 basic API):  <xref linkend="glibc-Interface-Naming"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct if_nameindex * <command>if_nameindex</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>net/if.h</literal> (IPv6 basic API):  <xref linkend="glibc-Interface-Naming"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>unsigned int <command>if_nametoindex</command> (const char *ifname)</literal>
    </glossterm>
    <glossdef>
     <para><literal>net/if.h</literal> (IPv6 basic API):  <xref linkend="glibc-Interface-Naming"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>IFNAMSIZ</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>net/if.h</literal> (net/if.h):  <xref linkend="glibc-Interface-Naming"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>IFTODT</command> (mode_t <varname>mode</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (BSD):  <xref linkend="glibc-Directory-Entries"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IGNBRK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IGNCR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IGNPAR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ilogb</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ilogbf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ilogbl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Exponents-and-Logarithms"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>intmax_t <command>imaxabs</command> (intmax_t <varname>number</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>inttypes.h</literal> (ISO):  <xref linkend="glibc-Absolute-Value"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IMAXBEL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>imaxdiv_t <command>imaxdiv</command> (intmax_t <varname>numerator</varname>, intmax_t <varname>denominator</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>inttypes.h</literal> (ISO):  <xref linkend="glibc-Integer-Division"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>imaxdiv_t</command>
    </glossterm>
    <glossdef>
     <para><literal>inttypes.h</literal> (ISO):  <xref linkend="glibc-Integer-Division"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct in6_addr <command>in6addr_any</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (IPv6 basic API):  <xref linkend="glibc-Host-Address-Data-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct in6_addr <command>in6addr_loopback</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (IPv6 basic API):  <xref linkend="glibc-Host-Address-Data-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>INADDR_ANY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Data-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>INADDR_BROADCAST</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Data-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>INADDR_LOOPBACK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Data-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>INADDR_NONE</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Data-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>index</command> (const char *<varname>string</varname>, int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (BSD):  <xref linkend="glibc-Search-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>inet_addr</command> (const char *<varname>name</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>inet_aton</command> (const char *<varname>name</varname>, struct in_addr *<varname>addr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>inet_lnaof</command> (struct in_addr <varname>addr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct in_addr <command>inet_makeaddr</command> (uint32_t <varname>net</varname>, uint32_t <varname>local</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>inet_netof</command> (struct in_addr <varname>addr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>uint32_t <command>inet_network</command> (const char *<varname>name</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>inet_ntoa</command> (struct in_addr <varname>addr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (BSD):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>const char * <command>inet_ntop</command> (int <varname>af</varname>, const void *<varname>cp</varname>, char *<varname>buf</varname>, size_t <varname>len</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (IPv6 basic API):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>inet_pton</command> (int <varname>af</varname>, const char *<varname>cp</varname>, void *<varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>arpa/inet.h</literal> (IPv6 basic API):  <xref linkend="glibc-Host-Address-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>INFINITY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Infinity-and-NaN"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>initgroups</command> (const char *<varname>user</varname>, gid_t <varname>group</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>grp.h</literal> (BSD):  <xref linkend="glibc-Setting-Groups"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>INIT_PROCESS</command>
    </glossterm>
    <glossdef>
     <para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>INIT_PROCESS</command>
    </glossterm>
    <glossdef>
     <para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>initstate</command> (unsigned int <varname>seed</varname>, void *<varname>state</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):  <xref linkend="glibc-BSD-Random"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>initstate_r</command> (unsigned int <varname>seed</varname>, char *restrict <varname>statebuf</varname>, size_t <varname>statelen</varname>, struct random_data *restrict <varname>buf</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-BSD-Random"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>INLCR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>innetgr</command> (const char *<varname>netgroup</varname>, const char *<varname>host</varname>, const char *<varname>user</varname>, const char *<varname>domain</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>netdb.h</literal> (BSD):  <xref linkend="glibc-Netgroup-Membership"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>ino64_t</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (Unix98):  <xref linkend="glibc-Attribute-Meanings"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>ino_t</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (POSIX.1):  <xref linkend="glibc-Attribute-Meanings"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>INPCK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>INT_MAX</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Range-of-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>INT_MIN</command>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Range-of-Type"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ioctl</command> (int <varname>filedes</varname>, int <varname>command</varname>, …)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/ioctl.h</literal> (BSD):  <xref linkend="glibc-IOCTLs"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>_IOFBF</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Controlling-Buffering"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>_IOLBF</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Controlling-Buffering"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>_IONBF</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (ISO):  <xref linkend="glibc-Controlling-Buffering"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>IPPORT_RESERVED</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Ports"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>IPPORT_USERRESERVED</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>netinet/in.h</literal> (BSD):  <xref linkend="glibc-Ports"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isalnum</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isalpha</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isascii</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (SVID, BSD):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isatty</command> (int <varname>filedes</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.1):  <xref linkend="glibc-Is-It-a-Terminal"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isblank</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (GNU):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iscntrl</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isdigit</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isfinite</command> (<replaceable>float-type</replaceable><varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isgraph</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isgreater</command> (<replaceable>real-floating</replaceable><varname>x</varname>, <replaceable>real-floating</replaceable><varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Comparison-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isgreaterequal</command> (<replaceable>real-floating</replaceable><varname>x</varname>, <replaceable>real-floating</replaceable><varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Comparison-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>ISIG</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Local-Modes"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isinf</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isinff</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isinfl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isless</command> (<replaceable>real-floating</replaceable><varname>x</varname>, <replaceable>real-floating</replaceable><varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Comparison-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>islessequal</command> (<replaceable>real-floating</replaceable><varname>x</varname>, <replaceable>real-floating</replaceable><varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Comparison-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>islessgreater</command> (<replaceable>real-floating</replaceable><varname>x</varname>, <replaceable>real-floating</replaceable><varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Comparison-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>islower</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isnan</command> (double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isnan</command> (<replaceable>float-type</replaceable><varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isnanf</command> (float <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isnanl</command> (long double <varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (BSD):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isnormal</command> (<replaceable>float-type</replaceable><varname>x</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Floating-Point-Classes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>_ISOC99_SOURCE</command>
    </glossterm>
    <glossdef>
     <para>: <xref linkend="glibc-Feature-Test-Macros"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isprint</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>ispunct</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isspace</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>ISTRIP</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isunordered</command> (<replaceable>real-floating</replaceable><varname>x</varname>, <replaceable>real-floating</replaceable><varname>y</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-FP-Comparison-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isupper</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswalnum</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswalpha</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswblank</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (GNU):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswcntrl</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswctype</command> (wint_t <varname>wc</varname>, wctype_t <varname>desc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswdigit</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswgraph</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswlower</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswprint</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswpunct</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswspace</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswupper</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>iswxdigit</command> (wint_t <varname>wc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Wide-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>isxdigit</command> (int <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ctype.h</literal> (ISO):  <xref linkend="glibc-Classification-of-Characters"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>ITIMER_PROF</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-Setting-an-Alarm"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>ITIMER_REAL</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-Setting-an-Alarm"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>ITIMER_VIRTUAL</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/time.h</literal> (BSD):  <xref linkend="glibc-Setting-an-Alarm"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IXANY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IXOFF</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>IXON</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Input-Modes"/>.</para>
    </glossdef>
   </glossentry>
  </glosslist>
 </section>
