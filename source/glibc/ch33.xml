<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: ch33.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->
<part xml:id="glibc-Debugging-Support">
  <title>Hata Ayıklama Desteği</title>
  <titleabbrev>Hata ayıklama uygulamalarına yardımcı işlevler.</titleabbrev>
  <partintro><para>
Uygulamaların hataları genellikle amacı hata ayıklamak olan yazılımlar kullanılarak ayıklanır. Fakat kimi zaman bu mümkün olmaz ve sorunlar hakkında deneyim kazandıkça yazılımcıya mümkün olan en fazla bilgiyi sağlamak gerekir. Bu sebeple, yazılımcının sorunun kaynağına daha kolay erişebilmesini mümkün kılacak bir kaç işlev sağlanmıştır.
  </para></partintro>
  <chapter xml:id="glibc-Backtraces">
    <title>Köken Arama Listeleri</title>
    <titleabbrev>O anki yığıtın geriye doğru izlenmesi ve çıktılanması.</titleabbrev>
    <para>
<indexterm scope="glibc-cp"><primary>köken arama</primary></indexterm>
<indexterm scope="glibc-cp"><primary>backtrace_symbols</primary></indexterm>
<indexterm scope="glibc-cp"><primary>backtrace_fd</primary></indexterm>
Bir <firstterm>köken arama listesi</firstterm> (backtrace), bir evre içindeki o an etkin olan işlev çağrılarının bir listesidir. Bir yazılımın köken arama listesini elde etmenin en uygun yolu <command>gdb</command> gibi harici bir hata ayıklayıcı kullanmaktır. Ancak, kimi zaman bir köken arama listesini günlük tutma, tanı koyma gibi amaçlarla yazılım içinde kodlayarak elde etmek de gerekebilir.
<indexterm scope="glibc-pg"><primary>execinfo.h</primary></indexterm>
   </para><para>
Geçerli evrenin köken arama listesini elde eden ve onunla çalışan üç işlev vardır ve bunlar <filename>execinfo.h</filename> başlık dosyasında bildirilmiştir.
   </para><para>
<indexterm scope="glibc-fn"><primary>backtrace</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" xml:id="glibc-backtrace">
<funcdef>int <command>backtrace</command></funcdef>
<paramdef>(void **<varname>tampon</varname>,
 int    <varname>boyut</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>backtrace</command> işlevi o anki evrenin köken arama listesini elde eder ve bir liste göstericisi olarak <varname>tampon</varname> içine yerleştirir.  <varname>boyut</varname> argümanı <varname>tampon</varname> içinde bulunacak <command>void *</command> türündeki elemanların sayısı olmalıdır. İşlev <varname>tampon</varname> içine konmuş olan listenin eleman sayısı ile döner.
   </para><para>
<varname>tampon</varname> içine yerleştirilen göstericiler aslında araştırılan yığıttan edinilen dönüş adresleridir, yani her yığıt çerçevesi için bir dönüş adresi vardır.
   </para><para>
Belli derleyici eniyilemelerinin edinilen bir geçerli köken arama listesi ile etkileşeceğini gözardı etmemelisiniz. Satıriçine alma işlemi satıriçi işlevlerin bir yığıt çerçevesine sahip olmamasına sebep olur; uç çağrı eniyilemesi bir yığıt çerçevesini bir diğeri ile değiştirir; çerçeve göstericisi elemesi yığıt içeriğinin <command>backtrace</command> tarafından doğru olarak yorumlanmasının engelleyecektir.
</para></funcdescr></funcsynopsis>
</para><para>
<indexterm scope="glibc-fn"><primary>backtrace_symbols</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" xml:id="glibc-backtrace_symbols">
<funcdef>char **<command>backtrace_symbols</command></funcdef>
<paramdef>(void *const *<varname>tampon</varname>,
 int          <varname>boyut</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>backtrace_symbols</command> işlevi <command>backtrace</command> işleviyle edinilen listeyi bir dizge dizisine dönüştürür. <varname>tampon</varname> argümanı <command>backtrace</command> işleviyle elde edilen adres dizisinin göstericisi, <varname>boyut</varname> ise bu dizinin eleman sayısı (<command>backtrace</command> işlevinin dönüş değeri) olmalıdır.
   </para><para>
İşlevin dönüş değeri <varname>boyut</varname> dizgelik dizge dizisine bir göstericidir. Her dizge <varname>tampon</varname> içindeki her elemanın basılabilir içeriğini gösterir. Saptanabiliyorsa işlev ismi, işleve bir başlangıç konumu ve geçerli dönüş adresini (onaltılık tabanda) içerir.
   </para><para>
Şimdilik işlev ismi ve başlangıç konumu sadece kütüphaneler ve uygulamalar için ELF ikilik biçimi kullanılan sistemlerde elde edilebilmektedir. Diğer sistemlerde ise sadece onaltılık tabandaki dönüş adresi elde edilebilmektedir. Ayrıca, yazılımın işlev isimlerini içermesi için ilintileyiciye ek seçenekler belirtilebilir. (Örneğin, GNU <command>ld</command>'ye <option>--rdynamic</option> seçeneğini aktarabilirsiniz.)
   </para><para>
<command>backtrace_symbols</command> işlevinin dönüş değeri <command>malloc</command> işlevi üzerinden edinilen ve <command>free</command> ile serbest bırakılması gereken bir göstericidir. Yalnız, sadece dönüş değeri serbest bırakılmalı, içerdiği dizgeler serbest bırakılmamalıdır.
   </para><para>
Edinilen dizgeleri saklamak için bellek yetersizse işlev <command>NULL</command> ile döner.
</para></funcdescr></funcsynopsis>
</para><para>
<indexterm scope="glibc-fn"><primary>backtrace_symbols_fd</primary></indexterm>
<funcsynopsis><funcprototype role="işlev" xml:id="glibc-backtrace_symbols_fd">
<funcdef>void <command>backtrace_symbols_fd</command></funcdef>
<paramdef>(void *const *<varname>tampon</varname>,
 int          <varname>boyut</varname>,
 int          <varname>dosyatanıtıcı</varname>)</paramdef>
</funcprototype><funcdescr><para>
<command>backtrace_symbols_fd</command> işlevi <command>backtrace_symbols</command> işlevinin yaptığı dönüşümün aynısını yapar, ancak farklı olarak, dizgelere bir gösterici döndürmek yerine her dizge bir satır olmak üzere dizgeleri <varname>dosyatanıtıcı</varname> tanıtıcısına yazar. <command>malloc</command> işlevini kullanmaz ve dosya tanıtıcılara yazan işlevlerin başarısız olmasına sebep olan durumlarda bu işlev de başarısız olabilir.
</para></funcdescr></funcsynopsis></para><para>
Aşağıdaki yazılımda bu işlevlerin kullanımı gösterilmiştir. <command>backtrace</command> tarafından döndürülen gösterici dizisinin adresinin yığıt üzerine ayrıldığına dikkat edin. Bu bakımdan, bu kod  <command>malloc</command> üzerinden bellek ayrılamayan sistemlerde kullanılabilir (bu gibi durumlarda <command>backtrace_symbols</command> yerine <command>backtrace_symbols_fd</command> işlevi de kullanılabilir). Dönüş adreslerinin sayısı normalde çok fazla olmayacaktır. Nadiren diyelim ki 50'den fazla iç içelik içeren çok karmaşık yazılımlarda bile 200 girdi olabilir.
   </para><para>
<screen>#include &lt;execinfo.h>
#include &lt;stdio.h>
#include &lt;stdlib.h>

/* Köken arama listesini edinip stdout'a basalım. */
void
print_trace (void)
{
  void *array[10];
  size_t size;
  char **strings;
  size_t i;

  size = backtrace (array, 10);
  strings = backtrace_symbols (array, size);

  printf ("%zd yığıt çerçevesi elde edildi.\n", size);

  for (i = 0; i &lt; size; i++)
      printf ("%s\n", strings[i]);

  free (strings);
}

/* Köken arama listesini biraz daha ilginç hale getirmek
   için (iç içelik olsun diye) bir işlev. */
void
dummy_function (void)
{
  print_trace ();
}

int
main (void)
{
  dummy_function ();
  return 0;
}
</screen>
</para>
</chapter>
</part>

