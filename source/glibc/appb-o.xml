<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-o.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-O"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>O</title>
  </info>
  <glosslist>
   <glossentry>
    <glossterm>
     <literal>int <command>O_ACCMODE</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_APPEND</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_ASYNC</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (BSD):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_1grow</command> (struct obstack *<varname>obstack-ptr</varname>, char <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_1grow_fast</command> (struct obstack *<varname>obstack-ptr</varname>, char <varname>c</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Extra-Fast-Growing"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_alignment_mask</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Obstacks-Data-Alignment"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>obstack_alloc</command> (struct obstack *<varname>obstack-ptr</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Allocation-in-an-Obstack"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>obstack_alloc_failed_handler</command>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Preparing-for-Obstacks"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>obstack_base</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Status-of-an-Obstack"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_blank</command> (struct obstack *<varname>obstack-ptr</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_blank_fast</command> (struct obstack *<varname>obstack-ptr</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Extra-Fast-Growing"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_chunk_size</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Obstack-Chunks"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>obstack_copy</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>address</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Allocation-in-an-Obstack"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>obstack_copy0</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>address</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Allocation-in-an-Obstack"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>obstack_finish</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_free</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>object</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Freeing-Obstack-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_grow</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>data</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_grow0</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>data</varname>, int <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_init</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Preparing-for-Obstacks"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_int_grow</command> (struct obstack *<varname>obstack-ptr</varname>, int <varname>data</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_int_grow_fast</command> (struct obstack *<varname>obstack-ptr</varname>, int <varname>data</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Extra-Fast-Growing"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>obstack_next_free</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Status-of-an-Obstack"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_object_size</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_object_size</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Status-of-an-Obstack"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_printf</command> (struct obstack *<varname>obstack</varname>, const char *<varname>template</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Dynamic-Output"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_ptr_grow</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>data</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Growing-Objects"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>obstack_ptr_grow_fast</command> (struct obstack *<varname>obstack-ptr</varname>, void *<varname>data</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Extra-Fast-Growing"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_room</command> (struct obstack *<varname>obstack-ptr</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>obstack.h</literal> (GNU):  <xref linkend="glibc-Extra-Fast-Growing"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>obstack_vprintf</command> (struct obstack *<varname>obstack</varname>, const char *<varname>template</varname>, va_list <varname>ap</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Variable-Arguments-Output"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_CREAT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_EXCL</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_EXEC</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_EXLOCK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (BSD):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>off64_t</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (Unix98):  <xref linkend="glibc-File-Position-Primitive"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>offsetof</command> (<varname>type</varname>, <varname>member</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stddef.h</literal> (ISO):  <xref linkend="glibc-Structure-Measurement"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>off_t</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (POSIX.1):  <xref linkend="glibc-File-Position-Primitive"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_FSYNC</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (BSD):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_IGNORE_CTTY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OLD_TIME</command>
    </glossterm>
    <glossdef>
     <para><literal>utmp.h</literal> (SVID):  <xref linkend="glibc-Manipulating-the-Database"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OLD_TIME</command>
    </glossterm>
    <glossdef>
     <para><literal>utmpx.h</literal> (XPG4.2):  <xref linkend="glibc-XPG-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NDELAY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (BSD):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>on_exit</command> (void (*<varname>function</varname>)(int <varname>status</varname>, void *<varname>arg</varname>), void *<varname>arg</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (SunOS):  <xref linkend="glibc-Cleanups-on-Exit"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>ONLCR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Output-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NOATIME</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NOCTTY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>ONOEOT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Output-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NOLINK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NONBLOCK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NONBLOCK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_NOTRANS</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>open</command> (const char *<varname>filename</varname>, int <varname>flags</varname>[, mode_t <varname>mode</varname>])</literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Opening-and-Closing-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>open64</command> (const char *<varname>filename</varname>, int <varname>flags</varname>[, mode_t <varname>mode</varname>])</literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (Unix98):  <xref linkend="glibc-Opening-and-Closing-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>DIR * <command>opendir</command> (const char *<varname>dirname</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (POSIX.1):  <xref linkend="glibc-Opening-a-Directory"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>openlog</command> (const char *<varname>ident</varname>, int <varname>option</varname>, int <varname>facility</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>syslog.h</literal> (BSD):  <xref linkend="glibc-openlog"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>OPEN_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-General-Limits"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>FILE * <command>open_memstream</command> (char **<varname>ptr</varname>, size_t *<varname>sizeloc</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-String-Streams"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>FILE * <command>open_obstack_stream</command> (struct obstack *<varname>obstack</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdio.h</literal> (GNU):  <xref linkend="glibc-Obstack-Streams"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>openpty</command> (int *<varname>amaster</varname>, int *<varname>aslave</varname>, char *<varname>name</varname>, struct termios *<varname>termp</varname>, struct winsize *<varname>winp</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>pty.h</literal> (BSD):  <xref linkend="glibc-Pseudo-Terminal-Pairs"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>OPOST</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (POSIX.1):  <xref linkend="glibc-Output-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>optarg</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-Using-Getopt"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>opterr</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-Using-Getopt"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>optind</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-Using-Getopt"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OPTION_ALIAS</command>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Option-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OPTION_ARG_OPTIONAL</command>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Option-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OPTION_DOC</command>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Option-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OPTION_HIDDEN</command>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Option-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>OPTION_NO_USAGE</command>
    </glossterm>
    <glossdef>
     <para><literal>argp.h</literal> (GNU):  <xref linkend="glibc-Argp-Option-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>optopt</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>unistd.h</literal> (POSIX.2):  <xref linkend="glibc-Using-Getopt"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_RDONLY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_RDWR</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_READ</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_SHLOCK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (BSD):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_SYNC</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (BSD):  <xref linkend="glibc-Operating-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_TRUNC</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Open-time-Flags"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_WRITE</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (GNU):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>O_WRONLY</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>fcntl.h</literal> (POSIX.1):  <xref linkend="glibc-Access-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>OXTABS</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Output-Modes"/>.</para>
    </glossdef>
   </glossentry>
  </glosslist>
 </section>
