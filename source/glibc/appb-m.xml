<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         appb-m.xml
     ******************************************************************** -->
 <section xml:id="glibc-Library-Summary-M"
          xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="tr">
  <info>
   <title>M</title>
  </info>
  <glosslist>
   <glossentry>
    <glossterm>
     <literal>int <command>madvise</command> (void *<varname>addr</varname>, size_t <varname>length</varname>, int <varname>advice</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX):  <xref linkend="glibc-Memory-mapped-I-O"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>makecontext</command> (ucontext_t *<varname>ucp</varname>, void (*<varname>func</varname>) (void), int <varname>argc</varname>, â€¦)</literal>
    </glossterm>
    <glossdef>
     <para><literal>ucontext.h</literal> (SVID):  <xref linkend="glibc-System-V-contexts"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>struct mallinfo <command>mallinfo</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal> (SVID):  <xref linkend="glibc-Statistics-of-Malloc"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>malloc</command> (size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal>, <literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Basic-Allocation"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>__malloc_hook</command>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal> (GNU):  <xref linkend="glibc-Hooks-for-Malloc"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>__malloc_initialize_hook</command>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal> (GNU):  <xref linkend="glibc-Hooks-for-Malloc"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MAX_CANON</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-Limits-for-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MAX_INPUT</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (POSIX.1):  <xref linkend="glibc-Limits-for-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MAXNAMLEN</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>dirent.h</literal> (BSD):  <xref linkend="glibc-Limits-for-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MAXSYMLINKS</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/param.h</literal> (BSD):  <xref linkend="glibc-Symbolic-Links"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MB_CUR_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Selecting-the-Conversion"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mblen</command> (const char *<varname>string</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-Character-Conversion"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MB_LEN_MAX</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>limits.h</literal> (ISO):  <xref linkend="glibc-Selecting-the-Conversion"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>mbrlen</command> (const char *restrict <varname>s</varname>, size_t <varname>n</varname>, mbstate_t *<varname>ps</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-a-Character"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>mbrtowc</command> (wchar_t *restrict <varname>pwc</varname>, const char *restrict <varname>s</varname>, size_t <varname>n</varname>, mbstate_t *restrict <varname>ps</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-a-Character"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mbsinit</command> (const mbstate_t *<varname>ps</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Keeping-the-state"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>mbsnrtowcs</command> (wchar_t *restrict <varname>dst</varname>, const char **restrict <varname>src</varname>, size_t <varname>nmc</varname>, size_t <varname>len</varname>, mbstate_t *restrict <varname>ps</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (GNU):  <xref linkend="glibc-Converting-Strings"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>mbsrtowcs</command> (wchar_t *restrict <varname>dst</varname>, const char **restrict <varname>src</varname>, size_t <varname>len</varname>, mbstate_t *restrict <varname>ps</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Converting-Strings"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>mbstate_t</command>
    </glossterm>
    <glossdef>
     <para><literal>wchar.h</literal> (ISO):  <xref linkend="glibc-Keeping-the-state"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>size_t <command>mbstowcs</command> (wchar_t *<varname>wstring</varname>, const char *<varname>string</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-String-Conversion"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mbtowc</command> (wchar_t *restrict <varname>result</varname>, const char *restrict <varname>string</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (ISO):  <xref linkend="glibc-Non-reentrant-Character-Conversion"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mcheck</command> (void (*<varname>abortfn</varname>) (enum mcheck_status <varname>status</varname>))</literal>
    </glossterm>
    <glossdef>
     <para><literal>mcheck.h</literal> (GNU):  <xref linkend="glibc-Heap-Consistency-Checking"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>tcflag_t <command>MDMBUF</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>termios.h</literal> (BSD):  <xref linkend="glibc-Control-Modes"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memalign</command> (size_t <varname>boundary</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal> (BSD):  <xref linkend="glibc-Aligned-Memory-Blocks"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>__memalign_hook</command>
    </glossterm>
    <glossdef>
     <para><literal>malloc.h</literal> (GNU):  <xref linkend="glibc-Hooks-for-Malloc"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memccpy</command> (void *restrict <varname>to</varname>, const void *restrict <varname>from</varname>, int <varname>c</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (SVID):  <xref linkend="glibc-Copying-and-Concatenation"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memchr</command> (const void *<varname>block</varname>, int <varname>c</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):  <xref linkend="glibc-Search-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>memcmp</command> (const void *<varname>a1</varname>, const void *<varname>a2</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):  <xref linkend="glibc-String-Array-Comparison"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memcpy</command> (void *restrict <varname>to</varname>, const void *restrict <varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memfrob</command> (void *<varname>mem</varname>, size_t <varname>length</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):  <xref linkend="glibc-Trivial-Encryption"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memmem</command> (const void *<varname>haystack</varname>, size_t <varname>haystack-len</varname>,const void *<varname>needle</varname>, size_t <varname>needle-len</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):  <xref linkend="glibc-Search-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memmove</command> (void *<varname>to</varname>, const void *<varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>mempcpy</command> (void *restrict <varname>to</varname>, const void *restrict <varname>from</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):  <xref linkend="glibc-Copying-and-Concatenation"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memrchr</command> (const void *<varname>block</varname>, int <varname>c</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (GNU):  <xref linkend="glibc-Search-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>memset</command> (void *<varname>block</varname>, int <varname>c</varname>, size_t <varname>size</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>string.h</literal> (ISO):  <xref linkend="glibc-Copying-and-Concatenation"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mkdir</command> (const char *<varname>filename</varname>, mode_t <varname>mode</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):  <xref linkend="glibc-Creating-Directories"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>mkdtemp</command> (char *<varname>template</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):  <xref linkend="glibc-Temporary-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mkfifo</command> (const char *<varname>filename</varname>, mode_t <varname>mode</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (POSIX.1):  <xref linkend="glibc-FIFO-Special-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mknod</command> (const char *<varname>filename</varname>, int <varname>mode</varname>, int <varname>dev</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/stat.h</literal> (BSD):  <xref linkend="glibc-Making-Special-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mkstemp</command> (char *<varname>template</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (BSD):  <xref linkend="glibc-Temporary-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>char * <command>mktemp</command> (char *<varname>template</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (Unix):  <xref linkend="glibc-Temporary-Files"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>time_t <command>mktime</command> (struct tm *<varname>brokentime</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>time.h</literal> (ISO):  <xref linkend="glibc-Broken-down-Time"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mlock</command> (const void *<varname>addr</varname>, size_t <varname>len</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX.1b):  <xref linkend="glibc-Page-Lock-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mlockall</command> (int <varname>flags</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX.1b):  <xref linkend="glibc-Page-Lock-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>mmap</command> (void *<varname>address</varname>, size_t <varname>length</varname>,int <varname>protect</varname>, int <varname>flags</varname>, int <varname>filedes</varname>, off_t <varname>offset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX):  <xref linkend="glibc-Memory-mapped-I-O"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>mmap64</command> (void *<varname>address</varname>, size_t <varname>length</varname>,int <varname>protect</varname>, int <varname>flags</varname>, int <varname>filedes</varname>, off64_t <varname>offset</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (LFS):  <xref linkend="glibc-Memory-mapped-I-O"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <command>mode_t</command>
    </glossterm>
    <glossdef>
     <para><literal>sys/types.h</literal> (POSIX.1):  <xref linkend="glibc-Attribute-Meanings"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>double <command>modf</command> (double <varname>value</varname>, double *<varname>integer-part</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>float <command>modff</command> (float <varname>value</varname>, float *<varname>integer-part</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long double <command>modfl</command> (long double <varname>value</varname>, long double *<varname>integer-part</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>math.h</literal> (ISO):  <xref linkend="glibc-Rounding-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mount</command> (const char *<varname>special_file</varname>, const char *<varname>dir</varname>, const char *<varname>fstype</varname>, unsigned long int <varname>options</varname>, const void *<varname>data</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mount.h</literal> (SVID, BSD):  <xref linkend="glibc-Mount-Unmount-Remount"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>long int <command>mrand48</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (SVID):  <xref linkend="glibc-SVID-Random"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>mrand48_r</command> (struct drand48_data *<varname>buffer</varname>, double *<varname>result</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>stdlib.h</literal> (GNU):  <xref linkend="glibc-SVID-Random"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void * <command>mremap</command> (void *<varname>address</varname>, size_t <varname>length</varname>, size_t <varname>new_length</varname>, int <varname>flag</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (GNU):  <xref linkend="glibc-Memory-mapped-I-O"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MSG_DONTROUTE</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Socket-Data-Options"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MSG_OOB</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Socket-Data-Options"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>MSG_PEEK</command></literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/socket.h</literal> (BSD):  <xref linkend="glibc-Socket-Data-Options"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>msync</command> (void *<varname>address</varname>, size_t <varname>length</varname>, int <varname>flags</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX):  <xref linkend="glibc-Memory-mapped-I-O"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>mtrace</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>mcheck.h</literal> (GNU):  <xref linkend="glibc-Tracing-malloc"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>munlock</command> (const void *<varname>addr</varname>, size_t <varname>len</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX.1b):  <xref linkend="glibc-Page-Lock-Functions"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>munlockall</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX.1b):  <xref linkend="glibc-Page-Lock-Functions"/>.
</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>int <command>munmap</command> (void *<varname>addr</varname>, size_t <varname>length</varname>)</literal>
    </glossterm>
    <glossdef>
     <para><literal>sys/mman.h</literal> (POSIX):  <xref linkend="glibc-Memory-mapped-I-O"/>.</para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <literal>void <command>muntrace</command> (void)</literal>
    </glossterm>
    <glossdef>
     <para><literal>mcheck.h</literal> (GNU):  <xref linkend="glibc-Tracing-malloc"/>.</para>
    </glossdef>
   </glossentry>
  </glosslist>
 </section>
