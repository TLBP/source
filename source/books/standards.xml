<?xml version="1.0" encoding="UTF-8"?>

<!-- ********************************************************************
     $Id: standards.xml,v 1.2 2002/12/20 22:29:48 nilgun Exp $
******************************************************************** -->

<book id="standards" lang="tr">
<?dbhtml dir="../gnu-std"?>
  <bookinfo>
   <title>GNU Kodlama Standartları</title>
   <author role="translator">
    <firstname>M.</firstname>
    <othername>Barış</othername>
    <surname>Demiray</surname>
    <affiliation>
      <address>
        <email>barisdemiray@yahoo.com</email>
      </address>
    </affiliation>
    <lineage>Free Software Foundation Türkçe Çevirmeni</lineage>
  </author>
 <date>Çeviriye başlanma tarihi: 10 Ocak 2004</date>
  <abstract>
   <para>GNU kodlama standartları, 29 Nisan 2003 tarihli güncellemenin çevirisidir.
   </para><para>
Çeviri sürmektedir. Kitap çevrilmemiş bölümleri de içerdiğinden Türkçe metinler içinde İngilizce bağlar veya İngilizce metinler içinde Türkçe bağlar olabilir. Bu durum kitabın taslağının XML dosyalardan oluşmasından kaynaklanmaktadır. Çeviri tamamlandığında bu durum ortadan kalkacak ve kitap Tefrika bölümünden çıkarılıp Linux Kitaplığına alınacaktır.
   </para>
 </abstract>
 <legalnotice><title>Legal Notice</title><para>
Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
   </para><para>
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.1 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license is included in the section entitled "GNU Free Documentation License".
   </para>
   </legalnotice><legalnotice><title>Yasal Uyarı</title><para>
Telif hakkı © 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
   </para><para>
Bu belgeyi  -bölümleri değiştirmeden, Ön-Kapak ve Arka-Kapak yazısı olmadan- kopyalama, dağıtma ve(ya) değiştirme izni; Free Software Foundation, Inc tarafından yayınlanan GNU Özgür Belgelendirme Lisansı'nın (1.1 ya da sonraki herhangi bir sürüm) şartları altında verilmiştir. GNU Özgür Belgelendirme Lisansının bir kopyasını <ulink url="http://www.gnu.org/copyleft/fdl.html"/> adresinde bulabilirsiniz.
   </para></legalnotice>
 </bookinfo>
 <chapter id="standards-Preface">
  <title>GNU Kodlama Standartları Hakkında</title>
  <para>
GNU Kodlama Standartları, Richard Stallman ve diğer GNU Projesi gönüllüleri tarafından yazıldı. Amaçları, GNU sistemini, kusursuz, tutarlı ve kolay yüklenebilir bir hale getirmekti. Bu belge, aynı zamanda; taşınabilir, sağlam ve güvenilir yazılımlar geliştirmek için bir rehber olarak da kabul edilebilir. Bu belge, C'de geliştirilen yazılımlara odaklanmıştır; ancak başka bir dilde yazılım geliştirseniz bile kuralların ve ilkelerin çoğu hala işinize yarayacaktır. İfade edilen kurallar, bir sebebe dayandığından belirli bir tarz belirleyip bu tarzda yazılım geliştirmeniz için yol gösterir.
  </para><para>
GNU Kodlama Standartları'nın bu sürümü en son 29 Nisan 2003 tarihinde güncellenmiştir.
  </para>
  <para>
<indexterm scope="standards-cp"><primary><userinput>standards.texi</userinput> nerede bulunur</primary></indexterm>
<indexterm scope="standards-cp"><primary>kılavuzun indirilmesi</primary></indexterm>
Eğer bu dosyayı yakın zamanlarda ve doğrudan GNU Projesi'nden almadıysanız, lütfen yeni sürümü olup olmadığına bakınız. GNU Kodlama Standartları'nı; GNU sanalyöre sunucularından değişik biçimlerde alabilirsiniz: <ulink url="http://www.gnu.org/prep/standards.text"/>,<sbr/>
<ulink url="http://www.gnu.org/prep/standards.info"/>,<sbr/>
<ulink url="http://www.gnu.org/prep/standards.dvi"/><sbr/>
ve iki Texinfo dosyaya bölünmüş olarak: <ulink url="http://www.gnu.org/prep/standards.texi"/> ve <ulink url="http://www.gnu.org/prep/make-stds.texi"/>.<sbr/>
GNU Kodlama Standartları HTML biçiminde de bulunmaktadır:<sbr/> <ulink url="http://www.gnu.org/prep/standards_toc.html"/>.
  </para><para>
Bu belge için düzeltmeler ve öneriler <email>bug-standards@gnu.org</email> adresine gönderilmelidir. Bir öneri sunarsanız lütfen düşündüğünüz yeni ifade şeklini de yazın; zamanımız sınırlıdır. <filename>standards.texi</filename> veya <filename>make-stds.texi</filename> dosyalarındaki gibi farklılıkları belirten bir bağlam tercih ederiz, ancak eğer bu belgelere sahip değilseniz, önerilerinizi e-posta ile herhangi bir şekilde de yollayabilirsiniz.
  </para><para>
Bu standartlar bir GNU paketi yazarken önemli olanların en azını kapsar. Muhtemelen, diğer standartlar için de ihtiyaçlar doğacaktır. Bazen, bu standartların da bu belgeye eklenmesini teklif edebilirsiniz. Eğer standartlarınızın genel olarak kullanışlı olacağını düşünüyorsanız, lütfen önerilerinizi bize yollayın.
  </para><para>
Siz de burada açıkça belirtilmeyen bir çok sorunda kendi paketiniz için standartlar belirlemelisiniz. En önemli nokta, tutarlı olmanız ve seçtiğiniz teamüllere sadık kalarak onları mümkün olduğunca belgelemenizdir. Böylece, programınız diğerleri tarafından üzerinde daha kolay çalışılabilir hale gelecektir.
  </para><para>
GNU Hello yazılımı, <userinput>Hello,
world!</userinput> yazan sıradan bir uygulama üzerinde GNU Kodlama Standartları'nın nasıl uygulandığının bir örneğidir: <ulink url="http://www.gnu.org/software/hello/hello.html"/>.
  </para></chapter>
 <chapter id="standards-Legal-Issues">
  <title>Özgür Yazılımı Özgür Tutmak</title>
  <para>
<indexterm scope="standards-cp"><primary>yasal görünüm</primary></indexterm>
Bu kısımda, GNU yazılımının yasal zorluklardan nasıl kaçındığını ve diğer ilgili konular ele alınmıştır.
  </para>
  <sect1 id="standards-Reading-Non-Free-Code">
   <title>Kamu Malı Olmayan Yazılımları Kaynak Göstermek</title>
   <para>
<indexterm scope="standards-cp"><primary>sahipli yazılımlar</primary></indexterm>
<indexterm scope="standards-cp"><primary>sahipli yazılımlar</primary><secondary>kaçının</secondary></indexterm>
Unix kaynak kodunu hiçbir koşulda işiniz için kaynak olarak göstermeyin! (veya herhangi başka bir kamuya ait olmayan yazılımı)
   </para><para>
Eğer belirli-belirsiz olarak bir Unix yazılımının iç yapısını hatırlıyorsanız, bu kesinlikle onun bir taklidini yazamayacağınız anlamına gelmez, fakat hatırladığınız kısımları farklı satırlar olarak düzenlemeye çalışın, bu, Unix sürümünün ayrıntıda sizin sonuçlarınızdan farklı ve ilgisiz olmasını sağlamak içindir.
   </para><para>
Örneğin, Unix araçları genellikle bellek kullanımını küçültmek için eniyileştirilirler; bunun yerine yazılımınızın hızını eniyileştirmeye çalışırsanız yazılımınız oldukça farklılaşacaktır. Stdio (Standart Girdi/Çıktı) kullanmak yerine, girdi dosyasını tümüyle bellekte tutabilir ve oradan tarayabilirsiniz. Unix yazılımından daha sonra bulunmuş daha hızlı bir algoritma da kullanabilirsiniz. Geçici dosyaların kullanımını da kaldırın. Bunu iki yerine bir geçişte yapın (biz <userinput>assembler</userinput>'da bunu yaptık).
   </para><para>
Ya da, bunun aksine, hız yerine basitliği vurgulayıp bunun üzerinde çalışın. Bugünün bilgisayarları bazı uygulamalar için daha basit algoritmaların bile yeterli olmasını sağlıyor.
   </para><para>
Ya da genellemeler yapın. Örnek olarak Unix yazılımları çoğunlukla durağan tablolara ve sabit uzunluklu dizgelere sahiptirler; bunun yerine özdevimli bellek ayırma kullanın. Yazılımınızın NULL ve diğer garip karakterleri ele aldığından da emin olun. Esneklik için de başka bir yazılım geliştirme dili ekleyebilir ve yazılımınızın bir kısmını o dille yazabilirsiniz.
   </para><para>
Ya da yazılımınızın bazı kısımlarını bağımsız olarak kullanılabilir kütüphanelere dönüştürün. Ya da sadece boş bellek alanı kalmadığında iz sürmek yerine basit bir çöp toplayıcı kullanın ya da <link linkend="glibc-Obstacks"> yığınaklar</link> gibi yeni bir GNU oluşumunu kullanın.
   </para></sect1>
  <sect1 id="standards-Contributions">
   <title>Yardımları Kabul Etmek</title>
   <para>
<indexterm scope="standards-cp"><primary>yasal kağıtlar</primary></indexterm>
<indexterm scope="standards-cp"><primary>yardımları kabul etmek</primary></indexterm>
Eğer telif hakları Free Software Foundation'a ait olan bir yazılım üzerinde çalışıyorsanız, biri size yazılıma eklemeniz için bir kısım kod gönderdiğinde onu kullanabilmemiz için tıpkı sizden de imzalamanızı istediklerimiz gibi yasal belgeler gerekir. Yazılımın başlık kısmını temiz tutmamız için; yazılıma önemli bir katkı yapan <emphasis>herkes</emphasis> bir çeşit yasal belge imzalamak zorundadır, tek başına ana yazar ismi yeterli değildir.
   </para><para>
Böyle bir durumda, diğer kişilerden gelen katkıları dahil etmeden önce lütfen bize haber verin, böylece yasal belgeleri almak için anlaşabiliriz. Bundan sonra ise imzalanmış belgeleri aldığımızı söyleyene kadar katkıyı kullanmadan bekleyin.
   </para><para>
Bu kurallar, yazılımı dağıtmanızdan önce ve dağıttıktan sonra da geçerlidir. Eğer bir hatayı düzeltmek için farklılıkları belirten dosyalar alırsanız ve bunlar yazılımınızda kayda değer değişiklikler yapıyorsa, bu değişiklikler için de hukuki belgelere ihtiyacımız var.
   </para><para>
Bu kurallar yorum satırları ve belgelemeler için de geçerlidir. Telif hakları yasasına göre, yorumlar ve kodlar sadece yazıdır. Telif hakları tüm yazı türleri için geçerli olduğundan hepsi için yasal belgelere ihtiyacımız var.
   </para><para>
Yasal kağıtlar istemenin sinir bozucu olduğunu biliyoruz; bu bizim için de sinir bozucu. Fakat bir yasal belgeyi beklemezseniz başınızı derde sokabilirsiniz, örnek olarak katkıda bulunan kimsenin patronu bir yalanlama düzenlerse ne olacak? Bu kodu yazılımdan çıkarmak zorunda kalabilirsiniz!
   </para><para>
Herhangi bir yerde olan bir kaç satırlık değişiklikler için hukuki belgeler istemenize gerek yoktur, çünkü bu gibi küçük değişikliler telif hakları yasalarında kayda değer değildirler. Eğer bir öneriden sadece bir kaç fikir edinirseniz, yani kullanacağınız gerçek kod almadıysanız, yine yasal kağıtlara ihtiyacınız yoktur. Örnek olarak biri size bir uygulama yolladıysa ve siz aynı fikre dayalı başka bir uygulama yazdıysanız yasal kağıtları almanıza gerek yoktur.
   </para><para>
Katkı yapan insandan bize bahsetmeyi unutmanız ise çok kötü bir şeydir. Bunun sonucunda, bir gün mahkemede çok mahçup duruma düşebiliriz.
   </para><para>
Yazılımların üzerinde çalışıp sürekliliğini sağlayanlar için ise daha ayrıntılı tavsiyelerimiz vardır; eğer dağıtılmış ya da henüz dağıtılmamış bir GNU yazılımı üzerinde çalışma aşamasına erişmişseniz, lütfen bize danışıp bu önerilerin bir kopyasını isteyin.
   </para></sect1>
  <sect1 id="standards-Trademarks">
   <title>Ticari Markalar</title>
   <para>
<indexterm scope="standards-cp"><primary>ticari markalar</primary></indexterm>
Lütfen GNU yazılım paketleri ve belgelerine herhangi bir ticari markadan bildirimler koymayın.
   </para><para>
Ticari marka bildirimleri, "falanca, filancanın bir ticari markasıdır" gibi ifadelerdir. GNU Projesinin ticari markaların temel fikrine herhangi bir itirazı yoktur, ancak bu bildirimler diz çökme ve tapınma hissi uyandırır ve bunun için herhangi bir yasal gereklilik olmadığından onları kullanmayız.
   </para><para>
Yasal olarak gerekli olan şey ise; okuyucunun, başka insanların ticari markalarını bizim bir yazılımımız veya etkinliğimizmiş gibi anlayacağı yazım yöntemlerinden kaçınmaktır. Örnek olarak, "Objective C" bir ticari marka ise (ya da en azından öyleydi), bizim, "Objective C Derleyicisi" yerine "Objective C Dili için bir derleyici" sunduğumuzu söyleyip söylemediğimizi kontrol ettik ve bunun için gerekeni yaptık. İlk ifade, ikincisinin kısaltılmış şekli olarak anlaşılabilir, ancak aradaki ilişkiyi açık olarak ifade etmediğinden "Objective C" dil için bir etiket olduğu halde, derleyicinin etiketiymiş gibi yanlış anlamalara yol açabilir.
   </para><para>
Lütfen GNU yazılımlarında ya da belgelemelerinde, "win" sözcüğünü Microsoft Windows için bir kısaltma olarak kullanmayın. Hacker terminolojisinde, bir şeyden "win" diye bahsetmek onu övmek anlamına gelir. Eğer kendiniz konuşurken Microsoft Windows'u övmek isterseniz bunu herhangi bir biçimde yapabilirsiniz, ancak GNU yazılımlarında değil. Çoğunlukla biz "windows" kelimesini tam olarak yazarız, fakat kısalık çok önemliyse (dosya isimlerinde ya da bazen simge isimlerinde olduğu gibi), onu "w" olarak kısaltırız. Örnek olarak, Emacs'deki Windows ile ilgili dosyalar ve işlevler <userinput>w32</userinput> ile başlar.
   </para></sect1></chapter>
 <chapter id="standards-Design-Advice">
  <title>Genel Yazılım Tasarımı</title>
  <para>
<indexterm scope="standards-cp"><primary>yazılım tasarımı</primary></indexterm>
Bu kısımda yazılımlarınızı tasarlarken göz önüne almanız gereken bazı durumlar ele alınmıştır.
  </para>

  <sect1 id="standards-Source-Language">
   <title>Kullanılacak Dilin Seçimi</title>
   <para>
<indexterm scope="standards-cp"><primary>yazılım geliştirme dilleri</primary></indexterm>
Derlenen ve yüksek hızlarda çalışan bir dil istediğinizde, kullanabileceğiniz en iyi dil C'dir. Başka bir dili kullanmak, standart olmayan bir özelliği kullanmak gibidir: kullanıcıların başına dert açar. GCC kullanacağınız diğer bir dili desteklese bile; yazılımınızı oluşturmak için başka bir derleyici yüklemek kullanıcılar tarafından zahmetli bulunabilir. Örnek olarak, yazılımınızı C++ dilinde geliştirdiğiniz takdirde kullanıcılar yazılımınızı derlemek için GNU C++ derleyicisini yüklemek zorunda kalacaklardır.
   </para><para>
C'nin, C++ ve diğer derlenen dillere karşı bir diğer üstünlüğü de C'yi bilen insanların daha fazla olmasıdır. Yani, eğer bir yazılım C ile geliştirilmişse, çok daha fazla insan tarafından kolayca okunabilecek ve değiştirilebilecektir.
   </para><para>
Bu yüzden, karşılaştırılabilir diğer seçenekler yerine C kullanmak çok daha iyidir.
   </para><para>
Fakat bu sonucu sağlamayan iki istisna vardır:
   </para><para><itemizedlist mark="bullet">
     <listitem><para>
Belirli bir dil ile kullanılacak bir aracın o dil ile yazılmasında herhangi bir sakınca yoktur. Çünkü bu aracı sistemlerine kuracak insanlar o dili zaten yüklemiş kişiler olacaktır.
     </para></listitem><listitem><para>
Eğer bir uygulama, topluluğun sadece küçük bir kısmını ilgilendiriyorsa, yazılımın geliştirildiği dil topluluğun geri kalanını daha az ilgilendirecektir, bu yüzden canınızın istediği gibi davranabilirsiniz.
     </para></listitem></itemizedlist>
   </para><para>
Bir çok yazılım genişletilebilir olması için tasarlanır: C'den daha yüksek seviyeli bir dil için yorumlayıcı içerebilir. Çoğunlukla da, yazılımın büyük kısmı bu dilde yazılır. Emacs metin düzenleyicisi bu tekniğin öncüsüdür.
   </para><para>
<indexterm scope="standards-cp"><primary>GUILE</primary></indexterm>
GNU yazılımları için standart genişletilebilirlik yorumlayıcısı, Scheme (Lisp'in açık ve basit bir türü) dilinde geliştirmiş olan <ulink url="http://www.gnu.org/software/guile/">GUILE</ulink>'dır. Ancak biz Perl ve Python gibi diğer <command>betik dilleri</command>yle geliştirilen yazılımları da geri çevirmeyiz, fakat GNU sisteminin genel tutarlılığı açısından GUILE'ı kullanmak önemlidir.
   </para>
</sect1>
  <sect1 id="standards-Compatibility">
   <title>Diğer Uygulamalar ile Uyumluluk</title>
   <para>
<indexterm scope="standards-cp"><primary>uyumluluk</primary><secondary>C ve POSIX standartları ile</secondary></indexterm>
<indexterm scope="standards-cp"><primary>POSIX uyumluluğu</primary></indexterm>
Zaman zaman gerçekleşen istisnalar haricinde; GNU yazılımlarının ve kütüphanelerinin davranışları, bu davranışları Standart C belirlemişse Standart C uyumunu sağlayarak, POSIX belirlemişse POSIX uyumunu sağlayarak Berkeley Unix'de bulunan karşılıklarıyla bire bir uyumluluk göstermelidir.
   </para><para>
Bu standartların birbiriyle çeliştiği durumlarda ise her bir standart için uyumluluk kiplerinin teklif edilmesi faydalı olur.
   </para><para>
<indexterm scope="standards-cp"><primary>uyumluluk</primary><secondary>seçenekler</secondary></indexterm>
Standart C ve POSIX, bir çok oluşum türünün kullanımını yasaklar. Yalnız, yine de bu oluşumları kullanmaktan çekinmeyin ve <userinput>-ansi</userinput>,
<userinput>-posix</userinput> veya <userinput>-compatible</userinput> gibi seçenekleri ekleyerek gerektiğinde bunların kapatın.  Bununla birlikte, eğer bir oluşum kodunuzdan çıkarıldığında yazılımı ya da betiği bozacak derecede öneme sahipse, yazılımınız gerçekte üst standatlara uyumlu değildir. Bu yüzden, üst standartlara uyumlu hale gelmesi için yazılımınızı yeniden tasarlamalısınız.
   </para><para>
<indexterm scope="standards-cp"><primary>ortam değişkenleri</primary><secondary><userinput>POSIXLY_CORRECT</userinput></secondary></indexterm>
<userinput>POSIXLY_CORRECT</userinput> ortam değişkeni tanımlı olduğunda (bir değer atanmamış bile olsa), bir çok GNU yazılımı POSIX ile uyumlu olmayan oluşumları kullanmaz. Eğer sizin için uygunsa, lütfen yazılımınızın bu değişkeni tanımasını sağlayın.
   </para><para>
Bir özellik sadece kullanıcılar tarafından (komut dosyaları ya da uygulamalar tarafından değil) kullanılıyorsa ve o özellik Unix'te kötü bir şekilde gerçeklenmişse; onu tamamen farklı ve daha iyi bir gerçeklemesi ile değiştirmekten çekinmeyin. (Örnek olarak <userinput>vi</userinput>, Emacs ile değiştirilmiştir.) Fakat bunu yaparken yanında uyumlu bir öğeyi sunmak iyi olur (Bizim de sunduğumuz özgür bir <userinput>vi</userinput> klonu var).
   </para><para>
Geçmişte bir örneği olsa da olmasa da ekleyeceğiniz diğer kullanışlı özellikleri de memnuniyetle karşılarız.
   </para></sect1>
  <sect1 id="standards-Using-Extensions">
   <title>Standart Olmayan Özelliklerin Kullanılması</title>
   <para>
<indexterm scope="standards-cp"><primary>standart dışı oluşumlar</primary></indexterm>
Şu an ki bir çok GNU uygulaması benzer Unix yazılımlarından daha fazla oluşumu destekler, fakat burada da karşınıza yazılımınızı geliştirirken bu oluşumları kullanıp kullanmayacağınız gibi zor bir sorun çıkar.
   </para><para>
Bir taraftan, bu oluşumların kullanılması yazılımınızı daha açık ve kusursuz bir hale getirebilecekken diğer taraftan, insanlar gereken diğer GNU araçları olmadan yazılımınızı kuramayacaklardır. Bu durum yazılımınızın olabileceğinden daha az makina çeşidinde çalışmasına neden olabilir.
   </para><para>
Bazı oluşumları kullanarak var olan bütün durumlara uygun seçenekler sunulabilir. Örnek olarak; işlevlerin derleyiciye bağlı olarak <userinput>INLINE</userinput> “anahtar sözcüğü” ile makro olarak tanımlanabiliyorsa <userinput>inline</userinput> olarak ya da doğrudan kodlayarak yazılımınızda içerilmesini sağlayabilirsiniz.
   </para><para>
Genellikle en iyi yöntem, eğer bu oluşumlar olmadan yapabiliyorsanız onları kullanmamak; ancak çok büyük gelişim sağlıyorlarsa kullanmaktır.
   </para><para>
Bu kurala bir istisna ise büyük bir kesimin kullandığı (Emacs gibi) ve önemli sayıda farklı sistem üzerinde çalışan uygulamalardır. Bu gibi yazılımlarda GNU oluşumlarını kullanmak bir çok kullanıcıyı mutsuz edebileceğinden bunu yapmayız.
   </para><para>
Diğer bir istisna ise derleme işleminin bir parçası olarak kullanılan uygulamalardır: GNU derleme uygulamalarını gerektiren hiçbir şey olmamalı, herşey diğer derleyicilerle derlenebilmelidir. Eğer bunlar GNU derleyicisine ihtiyaç duyuyorsa; kimse onları GNU derleme uygulamalarını yüklemeden derleyemez. Bazen bu durum aşırı derecede can sıkıcı olabilmektedir.
   </para></sect1>
  <sect1 id="standards-Standard-C">
   <title>Standart C ve Standart C Öncesi</title>
   <para>
<indexterm scope="standards-cp"><primary>ansi C standardı</primary></indexterm>
C'nin 1989 Standardının özellikleri yeni yazılımlarda kullanılabilecek  kadar yaygınlaşmıştır. Bu duruma sadece tek bir istisna vardır, bu da Standart C'nin "üçlü harf" özelliğini asla kullanmamaktır.
   </para><para>
C'nin 1999 Standardı henüz yeterince yaygın değildir; bu yüzden lütfen yazılımlarınızı bu standardın özelliklerini gerektirecek şekilde tasarlamayın. Eğer bu özellikler zaten mevcutsa kullanmanızda sorun yoktur.
   </para><para>
Yine de, çoğu durumda, standart öncesi derleyicileri desteklemek kolay olduğundan, eğer bunu nasıl yapacağınızı biliyorsanız rahatsınız demektir. Eğer üzerinde çalıştığınız yazılım bu gibi bir desteğe sahipse, o özelliği çalışır durumda tutmalısınız.
   </para><para>
<indexterm scope="standards-cp"><primary>işlev prototipleri</primary></indexterm>
Standart öncesi C'yi desteklemek için, işlev tanımlarını aşağıdaki şekilde standart biçimiyle yazmak yerine;
   </para><para>
<screen>int
foo (int x, int y)
&hellip;
</screen>
   </para><para>
aşağıdaki standart öncesi biçimiyle yazın:
   </para><para>
<screen>int
foo (x, y)
     int x, y;
&hellip;
</screen>
   </para> <para>
ve argüman prototipini belirtmek için ayrı bir bildirim yapın:
   </para><para>
<screen>int foo (int, int);</screen>
   </para><para>
İşlevin, çağırıldığı her dosyada tanımlı olabilmesi için bir başlık dosyasında bildirilmesi gerektiğinden böyle bir bildirime zaten ihtiyacınız vardır. Bildirimi zaten yazacağınıza göre, işlev tanımını standart öncesi biçimiyle yazmakla hiçbir şey kaybetmezsiniz.
   </para><para>
Bu teknik <userinput>int</userinput> türünden daha dar olan veri türleriyle çalışmaz. Eğer bir işlev argümanının <userinput>int</userinput>'den daha dar olduğunu düşünüyorsanız, onu <userinput>int</userinput> olarak bildirin.
   </para><para>
Ancak bu tekniği kullanmanın zor olduğu bazı özel durumlar vardır. Örnek olarak, eğer bir işlev argümanı <userinput>dev_t</userinput> sistem türünü tutmak zorundaysa başınız dertte demektir. Çünkü <userinput>dev_t</userinput> bazı makinalarda <userinput>int</userinput> türünden daha kısadır; fakat onun yerine <userinput>int</userinput> türünü kullanamazsınız, çünkü  bazı makinelerde de <userinput>dev_t</userinput> türü <userinput>int</userinput> türünden daha geniştir. Her makinede standart-dışı tanımda güvenle kullanabileceğiniz bir tür yoktur. Standart olmayan C'yi desteklemenin ve işleve bu tür bir değer aktarmanın tek yolu Autoconf kullanarak <userinput>dev_t</userinput> türünün genişliğini kontrol etmek ve ona göre bir veri türü seçmektir. Bu da yarattığı sıkıntıya değmeyebilir.
   </para><para>
Prototipleri tanımayan standart öncesi derleyicileri desteklemek için aşağıdaki gibi bir önişlemci makrosu kullanmak isteyebilirsiniz:
   </para><para>
<screen>/* Genel ve harici bir işlev için prototip bildirimi.  */
#if defined (__STDC__) || defined (WINDOWSNT)
#define P_(proto) proto
#else
#define P_(proto) ()
#endif
</screen>
      </para>
</sect1>
  <sect1 id="standards-Conditional-Compilation">
   <title>Koşullu Derleme</title>
   <para>
Yazılımın derlenmesi aşamasında bilinen yapılandırma seçeneklerini desteklemek için koşullu derleme yerine <userinput>if (...)</userinput> deyimini kullanmayı tercih ederiz. Bu seçenek -bir önceki durumda da olduğu gibi- derleyicinin bütün kod yollarında daha kapsamlı bir kontrol yapabilmesini sağlar.
   </para><para>
Örneğin,şu şekilde değil;</para><para>
<screen>  #ifdef HAS_FOO
    ...
  #else
    ...
  #endif
</screen>
   </para><para>lütfen aşağıdaki şekilde yazın:</para><para>
<screen>  if (HAS_FOO)
    ...
  else
    ...
</screen>
   </para><para>
GCC gibi çağdaş bir derleyici her iki durumda da tam olarak aynı kodu üretecektir; benzer teknikleri biz de bir kaç projede başarıyla kullanıyoruz. Tabii ki, ikinci teknik <userinput>HAS_FOO</userinput>'nun 0 ya da 1 olarak tanımlandığını varsayar.
   </para><para>
Bu politika, tüm taşınabilirlik problemlerini çözen sihirli bir değnek değildir. Üstelik her durum için uygun da olmayabilir. Ancak bu yolu takip etmek GCC geliştiricilerine yılda saatler, hatta günler kazandırabilirdi.
   </para><para>
GCC'de <userinput>REVERSIBLE_CC_MODE</userinput> gibi işlev benzeri makrolar <userinput>if(...)</userinput> deyimleri içinde basit şekliyle kullanılamaz, ancak bu durumun üstesinden gelmenin kolay bir yolu vardır. Bunun için bir diğer makro olan <userinput>HAS_REVERSIBLE_CC_MODE</userinput> makrosunu aşağıdaki örnekte olduğu gibi kullanabilirsiniz:
   </para><para>
<screen>  #ifdef REVERSIBLE_CC_MODE
  #define HAS_REVERSIBLE_CC_MODE 1
  #else
  #define HAS_REVERSIBLE_CC_MODE 0
  #endif
</screen></para>
</sect1></chapter>
 <chapter id="standards-Program-Behavior">
  <title>Tüm Yazılımlar için Davranışlar</title>
  <para>
Bu kısımda, sağlam yazılımları geliştirmek için yararlanılan uzlaşımlar anlatılmıştır. Bunun yanında hata iletileri, komut satırı arayüzleri ve kütüphanelerin nasıl davranması gerektiğinden de bahsedilmiştir.
  </para>

  <sect1 id="standards-Semantics">
   <title>Sağlam Yazılımların Geliştirmesi</title>
   <para>
<indexterm scope="standards-cp"><primary>verilerdeki keyfî sınırlar</primary></indexterm>
Herhangi bir veri yapısının, ki buna dosya adları, satırlar, dosyalar ve semboller dahildir, boyutuna veya sayısına keyfi sınırlar koymaktan kaçının. Tüm ayırma işlemlerini özdevinimli yaparak bunu sağlayabilirsiniz. Çoğu UNIX uygulamasında “uzun satırlar sessizce kesilir ve kısaltılır”. Bu yöntem bir GNU uygulamasında kabul edilebilir değildir.
   </para><para>
<indexterm scope="standards-cp"><primary><userinput>NUL</userinput> karakteri</primary></indexterm>
Dosyaları okuyan uygulamalar, NUL karakteri ya da 0177'nin üzerindeki diğer basılamayan karakterleri gözardı etmemelidir. Buna tek mantıklı istisna, bu karakterleri işleyemeyen uçbirimler ve yazıcılar için özel olarak yazılmış uygulamalardır. Mümkün olduğunca, UTF-8 ve benzeri karakter kodlamalarını kullanan ve çokbaytlı karakterleri temsil eden bayt dizileri ile uyumlu çalışabilecek yazılımlar geliştirmeye çalışın.
   </para><para>
<indexterm scope="standards-cp"><primary>hata iletileri</primary></indexterm>
Hataları özellikle gözardı etmek istemediğiniz sürece her sistem çağrısının geri döndürdüğü değeri ve olası hata değerlerini sınayın. Başarısız olan bir sistem çağrısından sonraki her hata iletisine, sistem hata iletisini (<userinput>perror</userinput> ya da başka bir benzerinden), eğer varsa dosya adını ve uygulamanın ismini ekleyin. Sadece “foo.c açılamıyor” ya da “stat başarısız oldu” demek yeterli değildir.
   </para><para>
<indexterm scope="standards-cp"><primary><userinput>malloc</userinput> işlevinin dönüş değeri</primary></indexterm>
<indexterm scope="standards-cp"><primary>bellek ayırma hataları</primary></indexterm>
Her <userinput>malloc</userinput> ya da <userinput>realloc</userinput> çağrısının geri dönüş değerinin sıfır olup olmadığını sınayın. Bellek bloğunu küçültüyor olsanız bile <userinput>realloc</userinput>'un dönüş değerini sınayın. Çünkü, blok boyutlarını 2'nin katlarına yuvarlayan bir sistemde daha az yer istediğiniz halde istediğinizden farklı bir blok alabilirsiniz.
   </para><para>
UNIX'te, eğer <userinput>realloc</userinput> sıfır dönerse bellek bloğuna hasar verebilir. GNU <userinput>realloc</userinput>'ta bu sorun yoktur; başarısız olması durumunda asıl blok değiştirilmeden kalır. Rahatlıkla bu sorunun düzeltildiğini varsayabilirsiniz. Eğer uygulamanızı UNIX'te çalıştırmak ve böyle bir durumda hasardan kaçınmak istiyorsanız, GNU <userinput>malloc</userinput>'u kullanabilirsiniz.
   </para><para>
<userinput>free</userinput>'nin serbest bırakılan bloğun içeriğini değiştireceğini aklınızdan çıkarmamalısınız. Bir bloktan almak istediğiniz herhangi bir veriyi <userinput>free</userinput>'yi çağırmadan önce almak zorundasınız.
   </para><para>
Eğer <userinput>malloc</userinput> kullanıcıyla etkileşime girmeyen bir yazılımda başarısız olursa bunu ölümcül bir hata yapın. Etkileşimli (kullanıcıdan komutlar alan) bir yazılımda ise komutu yarıda kesmek ve komut okuma döngüsüne dönmek daha iyidir. Bu, kullanıcıya diğer süreçleri öldürerek bir miktar sanal bellek alanı serbest bırakması ve komutu tekrar denemesi için olanak sağlar.
   </para><para>
<indexterm scope="standards-cp"><primary>komut satırı argümanları</primary><secondary>yorumlanması</secondary></indexterm>
Argüman sözdizimi bunu olanaksız kılmadıkça argümanları çözümlemek için <userinput>getopt_long</userinput>'u kullanın.
   </para><para>
Yazılımın çalışması sırasında durağan bir belleğe yazım yapılacaksa, o alanın C  ilklendirmesini beklemeksizin yapın. Değişmeyecek veriler için ilklendirmeli C bildirimlerini ise erteleyin.
   </para><para>
Uyumlu çalışma olasılıkları düşük olduğundan, açık ve belirli olmayan Unix veri yapılarına (dosya dizinleri, utmp veya çekirdek belleğinin düzeni gibi) erişirken alt seviye arayüzler kullanmaktan kaçının. Eğer bir dizindeki bütün dosyaları bulmanız gerekiyorsa <userinput>readdir</userinput> ya da başka bir yüksek seviyeli arayüz kullanın. Bunlar GNU tarafından desteklenirler ve uyumludurlar.
   </para><para>
<indexterm scope="standards-cp"><primary>sinyal işleme</primary></indexterm>
Tercih edilen sinyal işlem yöntemi <userinput>signal</userinput>'ın BSD türevi ve <userinput>sigaction</userinput> işlevidir; diğer bir seçenek olan USG <userinput>signal</userinput> arayüzü kötü bir tasarımdır.
   </para><para>
Bugünlerde, bir yazılımı taşınabilir yapmanın en kolay yolu belki de POSIX sinyal işlevlerini kullanmaktır. Eğer <userinput>signal</userinput>'i kullanırsanız, GNU libc sürüm 1 çalışan GNU/Linux sistemlerde BSD davranışını elde etmek için yazılımınıza <filename>signal.h</filename> yerine <filename>bsd/signal.h</filename> başlık dosyasını dahil etmelisiniz. <userinput>signal</userinput>'in sadece USG davranışına sahip olduğu sistemleri destekleyip desteklememek size kalmıştır, en iyisi boşverin gitsin.
   </para><para>
<indexterm scope="standards-cp"><primary>imkansız durumlar</primary></indexterm>
“İmkansız” durumları yakalayan bir hata sınamasında basitçe yazılımı sonlandırın. Genellikle bu gibi durumlarda herhangi bir hata iletisi yazdırmanın bir anlamı yoktur. Bu gibi sınamalar yazılım hatalarının varlığına işarettir. Bu hataları düzeltmek isteyenler kaynak kodu okumak ve bir hata ayıklayıcı çalıştırmak zorundadırlar. Bu yüzden kaynak kod içinde yorum satırları kullanarak sorunu açıklayın. İlgili veri, -bir hata ayıklayıcı ile sınamanın kolay olduğu- değişkenlerin içinde saklı olacaktır ve bu yüzden bunları başka bir yere taşımanın bir anlamı yoktur.
   </para><para>
Bir yazılımdaki hataların sayısını çıkış değeri olarak kullanmayın. Bu yöntem, çıkış değerleri 8 bitle (0'dan 255'e kadar) sınırlandırıldığı için çalışmayacaktır. Bir yazılım tek bir çalışmada 256 tane hataya sahip olabilir ve 256'yı çıkış değeri olarak kullanırsanız üst süreç durum değeri olarak 0 görecek ve yazılımınız başarılı olmuş gibi gözükecektir.
   </para><para>
<indexterm scope="standards-cp"><primary>geçici dosyalar</primary></indexterm>
<indexterm scope="standards-cp"><primary>ortam değişkenleri</primary><secondary><userinput>TMPDIR</userinput></secondary></indexterm>
Eğer geçici dosyalar oluşturuyorsanız <literal>TMPDIR</literal> ortam değişkenini sınayın ve eğer tanımlıysa <filename>/tmp</filename> yerine orada belirtilen dizini kullanın.
   </para><para>
Buna ek olarak, başkaları tarafından yazılabilen dizinlerde geçici dosya oluşturmanın bazı muhtemel güvenlik sorunlarına yol açabileceğini aklınızdan çıkarmayın. C'de, geçici dosyaları şöyle oluşturarak:
   </para><para>
<screen>fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, 0600);
</screen>
   </para><para>
ya da libiberty'deki <userinput>mkstemps</userinput> işlevini kullanarak bu sorundan kaçınabilirsiniz.
   </para><para>
Bash'te ise bu sorundan kaçınmak için <userinput>set -C</userinput> komutunu kullanın.
   </para>
  </sect1><sect1 id="standards-Libraries">
   <title>Kütüphane Davranışı</title>
   <para>
<indexterm scope="standards-cp"><primary>kütüphaneler</primary></indexterm>
Kütüphane işlevlerini evresel yapmaya çalışın. Eğer işlevler özdevinimli bellek tahsisine ihtiyaç duyuyorlarsa, en azından, evreselliğin <userinput>malloc</userinput>'un kendisi tarafından bozulmamasını sağlamaya çalışın.
   </para><para>
İşte size isim çakışmalarından kaçınmak için bir kaç kütüphane isimlendirme uzlaşımı.
   </para><para>
İki karakterden daha uzun olmak üzere, kütüphane için bir isim öneki seçin. Tüm harici işlev ve değişken isimleri bu önekle başlamalıdır. Buna ek olarak, herhangi bir kütüphane üyesinde bunlardan sadece bir tane olmalıdır. Bu genellikle her birini ayrı bir kaynak dosyasına koymak anlamına gelir.
   </para><para>
İki harici sembol her zaman beraber kullanılıyorsa bir istisna yapılabilir, çünkü hiçbir yazılım biri olmadan diğerini kullanamayacağından ikisi aynı dosya içinde yer alabilirler.
   </para><para>
Kullanıcı için belgelendirilmemiş giriş noktaları olan harici semboller <userinput>_</userinput> ile başlayan isimlere sahip olmalıdır. Diğer kütüphanelerle çakışmayı önlemek için ise <userinput>_</userinput> karakterini seçilmiş isim öneki izlemelidir. Eğer isterseniz bunlar kullanıcı giriş noktalarıyla aynı dosyada yer alabilirler.
   </para><para>
Durağan işlev ve değişkenleri ise istediğiniz gibi kullanabilirsiniz. Bunlar herhangi bir isimlendirme geleneğine uymak zorunda değildirler.
   </para>
  </sect1><sect1 id="standards-Errors">
   <title>Hata İletilerinin Biçimlenmesi</title>
   <para>
<indexterm scope="standards-cp"><primary>hata iletileri</primary><secondary>biçimlenmesi</secondary></indexterm>
<indexterm scope="standards-cp"><primary>biçimleme</primary><secondary>hata iletileri</secondary></indexterm>
Derleyicilerin hata iletileri şunun gibi gözükmelidir:
   </para><para>
<literallayout>    <varname>kaynak-dosya-ismi</varname>:<varname>satırnum</varname>: <varname>ileti</varname>
</literallayout>
   </para><para>
Eğer sütun numarasından da bahsetmek istiyorsanız şu biçimlerden birini kullanın:
   </para><para>
<literallayout>    <varname>kaynak-dosya-ismi</varname>:<varname>satırnum</varname>:<varname>sütun</varname>: <varname>ileti</varname>
    <varname>kaynak-dosya-ismi</varname>:<varname>satırnum</varname>.<varname>sütun</varname>: <varname>ileti</varname>
</literallayout>
   </para><para>
Satır numaraları dosyanın başlangıcından; sütun numaraları ise satır başlangıcından itibaren olmak üzere 1'den başlamalıdır (Bu uzlaşımların ikisi de uyumluluk adına böyle seçilmiştir). Sütun numaralarını hesaplarken; bütün basılabilir ASCII karakterleri ve boşluğun eşit genişlikte olduğunu ve sekme karakterinin 8 sütun genişliğinde olduğunu varsayın.
   </para><para>
Hata iletileri, hatalı metnin başlangıcıyla beraber bitiş yerini de gösterebilir. Yinelenen satırlar gibi gereksiz bilgileri engelleyebileceğiniz bir kaç tane biçim vardır. Kullanılabilecek biçimler şunlardır:
   </para><para>
<literallayout>    <varname>kaynak-dosya-ismi</varname>:<varname>satırnum-1</varname>.<varname>sütun-1</varname>-<varname>satırnum-2</varname>.<varname>sütun-2</varname>: <varname>ileti</varname>
    <varname>kaynak-dosya-ismi</varname>:<varname>satırnum-1</varname>.<varname>sütun-1</varname>-<varname>sütun-2</varname>: <varname>ileti</varname>
    <varname>kaynak-dosya-ismi</varname>:<varname>satırnum-1</varname>-<varname>satırnum-2</varname>: <varname>ileti</varname>
</literallayout>
   </para><para>
Hata bir kaç dosyada birden oluştuğunda ise şu biçimlendirmeyi kullanabilirsiniz:
   </para><para>
<literallayout>    <varname>dosya-1</varname>:<varname>satırnum-1</varname>.<varname>sütun-1</varname>-<varname>dosya-2</varname>:<varname>satırnum-2</varname>.<varname>sütun-2</varname>: <varname>ileti</varname>
</literallayout>
   </para>
   <para>
Etkileşimli olmayan diğer programlardaki hata iletileri ise şunun gibi gözükmeli:
   </para><para><itemizedlist><listitem><para>
Eğer uygun bir kaynak dosyası varsa:
<literallayout>   <varname>yazılım</varname>:<varname>kaynak-dosya-ismi</varname>:<varname>satırnum</varname>: <varname>ileti</varname>
</literallayout>
    </para></listitem><listitem><para>
yoksa:
   </para><para>
<literallayout>   <varname>yazılım</varname>: <varname>ileti</varname>
</literallayout>
   </para></listitem><listitem><para>
Sütun numarasından bahsetmek istiyorsanız da aşağıdaki biçimi kullanın:
   </para><para>
<literallayout>   <varname>yazılım</varname>:<varname>kaynak-dosya-ismi</varname>:<varname>satırnum</varname>:<varname>sütun</varname>: <varname>ileti</varname>
</literallayout>
   </para></listitem></itemizedlist></para><para>
Etkileşimli (uçbirimden komutlar okuyan) bir yazılımda ise yazılım adını hata iletisine dahil etmemek daha iyi bir yaklaşımdır. Hangi yazılımın çalıştığının görüntüleneceği yer ise komut istemi ya da yazılımın ekran düzenindeki bir yer olabilir (Bahsi geçen yazılım uçbirimden farklı bir kaynaktan girdi alarak çalışıyorsa etkileşimli değildir ve hataları etkileşimli olmayan biçimde yazdırmak en iyisi olabilir).
   </para><para>
<varname>ileti</varname> dizgesi, bir yazılım adı ve(ya) dosya adının ardından yazıldığında büyük harfle başlamamalıdır, çünkü bu bir cümle başlangıcı değildir. (Genelgeçer bir kavram olarak; bir cümle, satır başında başlar). Ayrıca, bir noktayla da bitmemelidir.
   </para><para>
Etkileşimli yazılımlardaki hata iletileri ve kullanım iletileri gibi diğer iletiler büyük harfle başlamalıdır. Ancak noktayla bitmemeleri gerekir.
   </para>
  </sect1><sect1 id="standards-User-Interfaces">
   <title>Her Çeşit Arayüz için Standartlar</title>
   <para>
<indexterm scope="standards-cp"><primary>yazılım ismine bağlı davranış</primary></indexterm>
<indexterm scope="standards-cp"><primary>davranış</primary><secondary>yazılım ismine göre</secondary></indexterm>
Lütfen bir uygulamanın davranışını onun çağırıldığı isme göre belirlemeyin. Bazen bir uygulamaya farklı bir isimle bağlantı vermek kullanışlı olabilir ve bu yazılımınızın davranışını değiştirmemelidir.
   </para><para>
Bunun yerine bir çalışma ya da derleme zamanı seçeneği (ya da ikisi birden) ile öteki davranışlardan birini seçme şansı tanıyın.
   </para><para>
<indexterm scope="standards-cp"><primary>davranış</primary><secondary>çıktı aygıtına göre</secondary></indexterm>
Aynı şekilde, yazılımınızın davranışının kullanılan çıktı aygıtına göre değişmesine de izin vermeyin. Bir sistemin tasarımında aygıttan bağımsızlık önemli bir ilkedir. Bunu, birilerini sadece bir seçenek yazmaktan kurtarmak için tehlikeye atmayın (Bir uçbirim kullanırken hata iletilerindeki değişiklikler sorun olmaz; çünkü bu insanlara bağlı olmayan bir durumdur).
   </para><para>
Eğer bir davranışın, çıktı aygıtı uçbirimken en kullanışlı olduğunu, bir diğerinin ise dosya ya da boru iken en kullanışlı olduğunu düşünüyorsanız; en iyisi varsayılan davranışı uçbirim için uygun olan olarak belirlemek ve diğer davranışlar için de birer seçenek koymak olacaktır.
   </para><para>
Uyumluluk, bazı yazılımların çıktı aygıtlarına göre davranmasını gerektirir. <userinput>ls</userinput> veya <userinput>sh</userinput>'in tüm kullanıcıların beklediği gibi davranmaması bir felaket olurdu. Bu gibi durumlar için kullanıcılara yazılımın çıktı aygıtından bağımsız sürümlerini de sunarız. Örnek olarak, <userinput>ls</userinput> gibi olan ama varsayılan çıktı biçemi çok sütunlu olan <userinput>dir</userinput> uygulamasını sağladık.
   </para></sect1>
  <sect1 id="standards-Graphical-Interfaces">
   <title>Çizgesel Arayüzler için Standartlar</title>
   <para>
<indexterm scope="standards-cp"><primary>çizgesel kullanıcı arayüzü</primary></indexterm>
<indexterm scope="standards-cp"><primary>GTK</primary></indexterm>
Çizgesel kullanıcı arabirimi olan bir yazılım geliştiriyorsanız; yazılımın işlevselliği özellikle başka bir seçeneği gerektirmedikçe (mesela “uçbirim kipindeyken jpeg resimleri görüntülemek”) lütfen tasarımınızı X Windows ve GTK araç takımı ile çalışabilecek şekilde tasarlayın.
   </para><para>
Bunlara ek olarak işlevselliği denetlemek için bir komut satırı arayüzü de sağlamayı ihmal etmeyin. (Bir çok durumda çizgesel kullanıcı arayüzleri komut satırlı yazılımları çağıran ayrı bir uygulama içerebilmektedir). Böylece aynı iş betiklerle de yapılabilir.
   </para><para>
<indexterm scope="standards-cp"><primary>CORBA</primary></indexterm>
<indexterm scope="standards-cp"><primary>GNOME</primary></indexterm>
Lütfen ayrıca bir CORBA arayüzü (GNOME'dan kullanmak için), bir kütüphane arayüzü (C'den kullanmak için) ve belki de klavye ile kullanılacak bir konsol arayüzü (konsol kipindeki kullanıcılar tarafından kullanılmak üzere) bulundurmayı da düşünün. İşlevselliği sağlarken ve çizgesel arayüzü oluştururken bunları yapmak çok fazla ek iş gerektirmeyecektir.
   </para></sect1>
  <sect1 id="standards-Command-Line-Interfaces">
   <title>Komut Satırı Arayüzleri için Standartlar</title>
   <para>
<indexterm scope="standards-cp"><primary>komut satırı arayüzleri</primary></indexterm>
<indexterm scope="standards-fn"><primary><userinput>getopt</userinput></primary></indexterm>
Bir yazılımın komut satırı seçenekleri için posix yönergelerini izlemek iyi bir fikirdir. Bunları yapmanın en kolay yolu da onları <userinput>getopt</userinput> kullanarak ayrıştırmaktır. <userinput>getopt</userinput>'un GNU sürümünün, özel <userinput>--</userinput> seçeneği kullanılmadıkça seçeneklerin herhangi bir yerde bulunmasına izin verdiğine dikkat edin. Bu POSIX'in belirlediği bir şey değil; bir GNU oluşumudur.
   </para><para>
<indexterm scope="standards-cp"><primary>uzun isimli seçenekler</primary></indexterm>
Tek harfli UNIX tarzı seçeneklere eşdeğer olan uzun isimli seçenekleri de tanımlayın. Bu şekilde GNU'yu daha kullanıcı dostu yapacağımızı umuyoruz. Bunun yapılması, bir GNU işlevi olan <userinput>getopt_long</userinput> ile kolaylaştırılmıştır.
   </para><para>
Uzun isimli seçeneklerin bir yararı da yazılımdan yazılıma tutarlı olabilmeleridir. Örneğin, bir kullanıcı herhangi bir GNU uygulamasının aynen <option>--verbose</option> olarak yazılan bir “verbose” (varsayılandan daha uzun olarak ifade edilen ve açıklayıcı) seçeneğinin olduğunu umabilmelidirler. Bu eş biçimlilik ve tutarlılığa erişebilmek için yazılımınızın seçenek isimlerini seçerken <link linkend="standards-Option-Table">yaygın uzun seçenekler tablosuna</link> bakın.
   </para><para>
Tek başlarına sıradan birer argüman olarak verilen dosya adlarını sadece girdi dosyaları olarak kabul etmek ve çıktı dosyalarının seçeneklerle (tercihen <option>-o</option> ya da <option>--output</option>) belirtilmesini sağlamak genelde iyi bir fikirdir. Bir uyumluluk adına çıktı dosyasının tek başına bir argüman olmasına izin verseniz bile onu belirtmek için farklı bir yol olarak ayrı bir seçenek olmasını sağlayın. Bu, GNU uygulamaları arasında bir tutarlılık olmasını sağlayacak ve kullanıcıların yazarların huylarına göre değişiklik gösteren isimlerden daha azını hatırlamak zorunda kalmasını sağlayacaktır.
   </para><para>
<indexterm scope="standards-cp"><primary>standart komut satırı seçenekleri</primary></indexterm>
<indexterm scope="standards-cp"><primary>seçenekler</primary><secondary>standart komut satırı</secondary></indexterm>
<indexterm scope="standards-cp"><primary>CGI uygulamaları için standart seçenekler</primary></indexterm>
<indexterm scope="standards-cp"><primary><literal>PATH_INFO</literal> (standart seçeneklerin belirtilmesi)</primary></indexterm>
 CGI uygulamaları bunları komut satırı seçenekleri olarak kabul etmeli ve eğer <literal>PATH_INFO</literal> olarak verilirse, örneğin tarayıcıda <emphasis>http://örnek.org/p.cgi/--help</emphasis> adresini ziyaret eder gibi komut satırından <userinput>p.cgi --help</userinput> komutunu vermek ile aynı çıktıyı üretmelidir.
   </para><para>
Bütün yazılımlar iki standart seçeneği desteklemelidir: <userinput>--version</userinput> ve <userinput>--help</userinput>.
   </para><para>
   <variablelist><varlistentry>
     <term><option>--version</option></term>
     <listitem><para>
<indexterm scope="standards-cp"><primary><userinput>--version</userinput> seçeneği</primary></indexterm>
Bu seçenek yazılıma; standart çıktıya adı, sürümü, kökeni ve yasal durumu gibi kendi hakkında bilgi vermesini ve başarıyla sonlanmasını söylemelidir. Diğer seçenekler bu seçenek görüldüğü zaman gözardı edilmeli ve yazılım olağan işlevini yerine getirmemelidir.
      </para><para>
<indexterm scope="standards-cp"><primary>yazılımın belirleyici ismi</primary></indexterm>
İlk satırın, bir yazılım için kolay çözümlenebilir olması beklenir; sürüm numarası tam olarak son boşluktan hemen sonra başlar. Buna ek olarak, yazılımın belirleyici ismini de
      </para><para>
<screen>GNU Emacs 19.30</screen>
      </para><para>
örneğindeki biçimde içerir.
      </para><para>
Yazılımın adı sabit bir dizge olmalı ve <literal>argv[0]</literal>'dan alınmamalıdır. Ana fikir yazılımın dosya adını kullanmak değil; aksine standart ya da belirleyici yazılım adını vurgulamaktır. Komut, <literal>PATH</literal> ortam değişkenini ile belirlenen yerlerde bulunuyorsa ona özel dosya adını bulmanın başka yolları da vardır.
      </para><para>
Eğer yazılım daha büyük bir paketin bütünleyici bir parçası ise parantez içinde paket isminden söz edin:
      </para><para>
<screen>emacsserver (GNU Emacs) 19.30</screen>
      </para><para>
Eğer paketin sürüm numarası yazılımınkinden farklı ise paketin sürüm numarasını parentezin içinde belirtebilirsiniz.
      </para><para>
Eğer paketten ayrı olarak dağıtılan ve yazılımı içeren kütüphanelerin sürüm numaralarından da bahsetmek isterseniz bunu istediğiniz her bir kütüphane için ek bir satırda sürüm numaralarını yazarak yapabilirsiniz. Tüm satırlarda ilk satırdaki ile aynı biçimi kullanın.
      </para><para>
Lütfen “sadece bütünlük” için yazılımın kullandığı tüm kütüphaneleri yazmayın. Bu bir sürü karışıklığa neden olacaktır. Lütfen, sadece, bir kütüphane, o da sadece size göre hata ayıklama için çok gerekliyse onun adını yazın.
      </para><para>
Sürüm numarası satır ya da satırlarından bir sonraki satır bir telif hakkı bildirimi olmalıdır. Eğer ilgili birden fazla telif hakkı bildirimi varsa herbirini ayrı satırlarda yazın.
      </para><para>
Bunları, yazılımın özgür bir yazılım olduğunu ve kullanıcıların belirli şartlar altında onu kopyalama ve değiştirme haklarına sahip olduğunu belirten kısa bir ifade izlemelidir. Eğer program GNU GPL tarafından korunuyorsa bunu burada söyleyebilirsiniz. İlgili kanunun icbar ettiği durumlar ve yazılı anlaşma haricinde hiçbir garanti olmadığından da burada bahsedin.
      </para><para>
Çıktıyı yazılımın başlıca yazarlarının listesi ile sonlandırmak itibar kazandırmanın bir yolu olarak iyi olabilir.
      </para><para>
İşte bu kurallara uyan bir çıktı:
      </para><para>
<screen>
GNU Emacs 19.34.5
Telif Hakkı, © 1996 Free Software Foundation, Inc.
GNU Emacs ilgili kanunların icbar ettiği durumlar
haricinde HİÇBİR GARANTİ İÇERMEZ.
GNU Emacs'in kopyalarını, GNU Genel Kamu Lisansı
koşulları altında yeniden dağıtabilirsiniz.
Bu konular hakkında daha fazla bilgi için,
COPYING dosyasına bakınız.
</screen>
      </para><para>
Bunu, tabii ki uygun yıl, telif hakkı sahibi, yazılım ismi ve dağıtımla ilgili koşullar ve diğer ifadeleri de değişmesi gerektiği biçimiyle yazarak kendi yazılımınıza uyarlamalısınız.
      </para><para>
Bu telif hakkı bildiriminde sadece en son değişiklik yapılan yılın belirtilmesi gerekir. Önceki sürümlerin değişikliklerinin yıllarını listelemenize gerek yoktur. Eğer sizin için uygun değilse, bu bildirimlerde yazılımın adını tekrar tekrar bulundurmanıza gerek yoktur; çünkü zaten ilk satırda bulunmaktadır.
      </para><para>
Yukarıdaki satırların çevirileri telif haklarının geçerliliğini korumalıdır (bkz. <xref linkend="standards-Internationalization"/>). Eğer çevirinin karakter kümesi destekliyorsa, telif hakkı simgesi olan <literal>(C)</literal> yerine <literal>&copy;</literal> yazılmalıdır (yukarıdaki örnekteki gibi).
      </para><para>
“Copyright” (telif hakkı) kelimesini aynen İngilizce'de olduğu şekliyle yazın. Bu kelimeyi başka bir dile çevirmeyin. Uluslararası antlaşmalar İngilizce “Copyright” kelimesini tanırlar ve başka dillere çevirilerin uluslararası anlamda herhangi bir hükmü yoktur.<footnote><para>Uluslararası alanda bile olsa her bağlam kendi dilinde değerlendirilir, Türkçe en az İngilizce kadar tanınan bir insan dilidir.  Unutmayın, ilgili kanunda (5846 sayılı Fikir ve Sanat Eserleri Kanunu) telif hakkından copyright diye söz edilmiyor. Bu bakımdan copyright'ı çevirmelisiniz. -- NBB</para></footnote>
    </para></listitem></varlistentry>
    <varlistentry>
     <term><literal>--help</literal></term>
     <listitem><para>
<indexterm scope="standards-cp"><primary><userinput>--help</userinput> seçeneği</primary></indexterm>
Bu seçenek standart çıktıya yazılımın nasıl çalıştırılacağını anlatan özet bir belge yazmalı ve yazılım başarılı olarak sonlanmalıdır. Bu seçenek verildiğinde yazılım olağan işlevini yerine getirmemeli ve diğer seçenekler gözardı edilmelidir.
      </para><para>
<indexterm scope="standards-cp"><primary>hata bildirme adresi</primary></indexterm>
<userinput>--help</userinput> seçeneğinin çıktısının sonlarına doğru hata raporlarının nereye postalanabileceği yazmalıdır. Burası aşağıdaki biçimde olmalıdır:
      </para><para>
<screen>
Yazılım hatalarını <varname>eposta-adresi</varname> adresine bildiriniz.
</screen>
     </para></listitem></varlistentry></variablelist></para>
  </sect1>
  <sect1 id="standards-Option-Table">
   <title>Uzun Seçenekler Tablosu</title>
   <para>
<indexterm scope="standards-cp"><primary>uzun seçenek isimleri</primary></indexterm>
Burada GNU uygulamalarında kullanılan uzun seçenekler listelenmiştir. Bu liste elbette ki bütün seçenekleri kapsamıyor; ancak bizim amacımız yeni uygulamaların uyumlu olmak isteyebileceği seçeneklerin tümünü listelemek. Eğer listede olmayan isimler kullanıyorsanız lütfen <email>bug-standarts@gnu.org</email> adresine bunların bir listesini ve anlamlarını gönderin. Bu sayede bu listeyi güncelleyebiliriz.
   </para><para><variablelist><varlistentry>
     <term><option>after-date</option></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-N</userinput>.
      </para></listitem></varlistentry><varlistentry>
     <term><option>all</option></term>
     <listitem><para>
<userinput>du</userinput>, <userinput>ls</userinput>, <userinput>nm</userinput>, <userinput>stty</userinput>, <userinput>uname</userinput>,
ve <userinput>unexpand</userinput>'daki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>all-text</literal></term>
     <listitem><para>
<userinput>diff</userinput>'deki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>almost-all</literal></term>
     <listitem><para>
<userinput>ls</userinput>'deki <userinput>-A</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>append</literal></term>
     <listitem><para>
<userinput>etags</userinput>, <userinput>tee</userinput> ve <userinput>time</userinput>'daki <userinput>-a</userinput> seçeneği ile
<userinput>tar</userinput>'daki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>archive</literal></term>
     <listitem><para>
<userinput>cp</userinput>'deki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>archive-name</literal></term>
     <listitem><para>
<userinput>shar</userinput>'daki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>arglength</literal></term>
     <listitem><para>
<userinput>m4</userinput>'deki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ascii</literal></term>
     <listitem><para>
<userinput>diff</userinput>'deki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>assign</literal></term>
     <listitem><para>
<userinput>gawk</userinput>'daki <userinput>-v</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>assume-new</literal></term>
     <listitem><para>
<userinput>make</userinput>'deki <userinput>-W</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>assume-old</literal></term>
     <listitem><para>
<userinput>make</userinput>'deki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>auto-check</literal></term>
     <listitem><para>
<userinput>recode</userinput>'daki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>auto-pager</literal></term>
     <listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>auto-reference</literal></term>
     <listitem><para>
<userinput>ptx</userinput>'deki <userinput>-A</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>avoid-wraps</literal></term>
     <listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>background</literal></term>
     <listitem><para>
Sunucu uygulamalarının artalanda çalışmasını sağlar.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>backward-search</literal></term>
     <listitem><para>
<userinput>ctags</userinput>'daki <userinput>-B</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>basename</literal></term>
     <listitem><para>
<userinput>shar</userinput>'daki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>batch</literal></term>
     <listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>baud</literal></term>
     <listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>before</literal></term>
     <listitem><para>
<userinput>tac</userinput>'daki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>binary</literal></term>
     <listitem><para>
<userinput>cpio</userinput> ve <userinput>diff</userinput>'deki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>bits-per-code</literal></term>
     <listitem><para>
<userinput>shar</userinput>'daki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>block-size</literal></term>
     <listitem><para>
<userinput>cpio</userinput> ve <userinput>tar</userinput> tarafından kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>blocks</literal></term>
     <listitem><para>
<userinput>head</userinput> ve <userinput>tail</userinput>'deki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>break-file</literal></term>
     <listitem><para>
<userinput>ptx</userinput>'deki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>brief</literal></term>
     <listitem><para>
Çeşitli uygulamalarda daha kısa çıktı üretmek için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>bytes</literal></term>
     <listitem><para>
<userinput>head</userinput>, <userinput>split</userinput> ve <userinput>tail</userinput>'deki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>c++</literal></term>
     <listitem><para>
<userinput>etags</userinput>'daki <userinput>-C</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>catenate</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-A</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>cd</literal></term>
     <listitem><para>
Çeşitli uygulamalarda kullanılacak dizini belirtmek için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>changes</literal></term>
     <listitem><para>
<userinput>chgrp</userinput> ve <userinput>chown</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>classify</literal></term>
     <listitem><para>
<userinput>ls</userinput>'deki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>colons</literal></term>
     <listitem><para>
<userinput>recode</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>command</literal></term>
     <listitem><para>
<userinput>su</userinput>'daki <userinput>-c</userinput> seçeneği ile
GDB'deki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>compare</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>compat</literal></term>
     <listitem><para>
<userinput>gawk</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>compress</literal></term>
     <listitem><para>
<userinput>tar</userinput> ve <userinput>shar</userinput>'daki <userinput>-Z</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>concatenate</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-A</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>confirmation</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>context</literal></term>
     <listitem><para>
<userinput>diff</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>copyleft</literal></term>
     <listitem><para>
<userinput>gawk</userinput>'daki <userinput>-W copyleft</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>copyright</literal></term>
     <listitem><para>
<userinput>ptx</userinput>, <userinput>recode</userinput> ve <userinput>wdiff</userinput>'deki <userinput>-C</userinput> seçeneği ile
<userinput>gawk</userinput>'daki <userinput>-W copyright</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>core</literal></term>
     <listitem><para>
GDB tarafından kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>count</literal></term>
     <listitem><para>
<userinput>who</userinput>'daki <userinput>-q</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>count-links</literal></term>
     <listitem><para>
<userinput>du</userinput>'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>create</literal></term>
     <listitem><para>
<userinput>tar</userinput> ve <userinput>cpio</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>cut-mark</literal></term>
     <listitem><para>
<userinput>shar</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>cxref</literal></term>
     <listitem><para>
<userinput>ctags</userinput>'daki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>date</literal></term>
     <listitem><para>
<userinput>touch</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>debug</literal></term>
     <listitem><para>
Make ve <userinput>m4</userinput>'deki <userinput>-d</userinput> seçeneği ile Bison'daki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>define</literal></term>
     <listitem><para>
<userinput>m4</userinput>'deki <userinput>-D</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>defines</literal></term>
     <listitem><para>
Bison ve <userinput>ctags</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>delete</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-D</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>dereference</literal></term>
     <listitem><para>
<userinput>chgrp</userinput>, <userinput>chown</userinput>, <userinput>cpio</userinput>, <userinput>du</userinput>, <userinput>ls</userinput>'deki <userinput>-L</userinput> seçeneği ile <userinput>tar</userinput>'daki <userinput>-h</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>dereference-args</literal></term>
     <listitem><para>
<userinput>du</userinput>'daki <userinput>-D</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>device</literal></term>
     <listitem><para>
Bir G/Ç aygıtı (özel aygıt dosyası) belirtmek için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>diacritics</literal></term>
     <listitem><para>
<userinput>recode</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>dictionary-order</literal></term>
     <listitem><para>
<userinput>look</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>diff</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>digits</literal></term>
     <listitem><para>
<userinput>csplit</userinput>'deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>directory</literal></term>
     <listitem><para>
Çeşitli uygulamalarda kullanılacak dizini belirtir. <userinput>ls</userinput>'te, dizinlerin içerikleri yerine kendilerinin gösterilmesi anlamına gelir. <userinput>rm</userinput> ve <userinput>ln</userinput>'de ise, dizin sembolik bağı dizine özel olarak ele alınmaz.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>discard-all</literal></term>
     <listitem><para>
<userinput>strip</userinput>'deki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>discard-locals</literal></term>
     <listitem><para>
<userinput>strip</userinput>'deki <userinput>-X</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>dry-run</literal></term>
     <listitem><para>
Make'deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ed</literal></term>
     <listitem><para>
<userinput>diff</userinput>'deki <userinput>-e</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>elide-empty-files</literal></term>
     <listitem><para>
<userinput>csplit</userinput>'deki <userinput>-z</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>end-delete</literal></term>
     <listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>end-insert</literal></term>
     <listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-z</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>entire-new-file</literal></term>
     <listitem><para>
<userinput>diff</userinput>'deki <userinput>-N</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>environment-overrides</literal></term>
     <listitem><para>
Make'deki <userinput>-e</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>eof</literal></term>
     <listitem><para>
<userinput>xargs</userinput>'daki <userinput>-e</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>epoch</literal></term>
     <listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>error-limit</literal></term>
     <listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>error-output</literal></term>
     <listitem><para>
<userinput>m4</userinput>'deki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>escape</literal></term>
     <listitem><para>
<userinput>ls</userinput>'deki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>exclude-from</literal></term>
     <listitem><para>
<userinput>tar</userinput>'daki <userinput>-X</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>exec</literal></term>
     <listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>exit</literal></term>
     <listitem><para>
<userinput>xargs</userinput>'daki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>exit-0</literal></term>
     <listitem><para>
<userinput>unshar</userinput>'daki <userinput>-e</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>expand-tabs</literal></term>
     <listitem><para>
<userinput>diff</userinput>'deki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
    <term><literal>expression</literal></term>
     <listitem><para>
<userinput>sed</userinput>'deki <userinput>-e</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>extern-only</literal></term>
     <listitem><para>
<userinput>nm</userinput>'deki <userinput>-g</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>extract</literal></term>
     <listitem><para>
<userinput>cpio</userinput>'daki <userinput>-i</userinput> seçeneği ile <userinput>tar</userinput>'daki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>faces</literal></term>
     <listitem><para>
<userinput>finger</userinput>'daki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>fast</literal></term>
     <listitem><para>
<userinput>su</userinput>'daki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>fatal-warnings</literal></term>
     <listitem><para>
<userinput>m4</userinput>'deki <userinput>-E</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>file</literal></term>
     <listitem><para>
<userinput>info</userinput>, <userinput>gawk</userinput>, Make, <userinput>mt</userinput> ve <userinput>tar</userinput>'daki <userinput>-f</userinput> seçeneği; <userinput>sed</userinput>'deki <userinput>-n</userinput> seçeneği; <userinput>touch</userinput>'daki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>field-separator</literal></term>
     <listitem><para>
<userinput>gawk</userinput>'taki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>file-prefix</literal></term>
     <listitem><para>
Bison'daki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>file-type</literal></term>
     <listitem><para>
<userinput>ls</userinput>'teki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>files-from</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>fill-column</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>flag-truncation</literal></term><listitem><para>
<userinput>ptx</userinput>'deki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>fixed-output-files</literal></term><listitem><para>
Bison'daki <userinput>-y</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>follow</literal></term><listitem><para>
<userinput>tail</userinput>'deki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>footnote-style</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>force</literal></term><listitem><para>
<userinput>cp</userinput>, <userinput>ln</userinput>, <userinput>mv</userinput> ve <userinput>rm</userinput>'deki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>force-prefix</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>foreground</literal></term><listitem><para>
Çeşitli uygulamaları önalanda çalıştırmak için kullanılır; başka bir deyişle, sunucunun artalana özel işlemleri önalanda yapılmaz.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>format</literal></term><listitem><para>
<userinput>ls</userinput>, <userinput>time</userinput> ve <userinput>ptx</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>freeze-state</literal></term><listitem><para>
<userinput>m4</userinput>'deki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>fullname</literal></term><listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>gap-size</literal></term><listitem><para>
<userinput>ptx</userinput>'teki <userinput>-g</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>get</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>graphic</literal></term><listitem><para>
<userinput>ul</userinput>'deki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>graphics</literal></term><listitem><para>
<userinput>recode</userinput>'daki <userinput>-g</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>group</literal></term><listitem><para>
<userinput>install</userinput>'daki <userinput>-g</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>gzip</literal></term><listitem><para>
<userinput>tar</userinput> ve <userinput>shar</userinput>'daki <userinput>-z</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>hashsize</literal></term><listitem><para>
<userinput>m4</userinput>'deki <userinput>-H</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>header</literal></term><listitem><para>
<userinput>objdump</userinput> ve <userinput>recode</userinput>'daki <userinput>-h</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>heading</literal></term><listitem><para>
<userinput>who</userinput>'daki <userinput>-H</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>help</literal></term><listitem><para>
Kısa kullanım bilgisi almak için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>here-delimiter</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>hide-control-chars</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-q</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>html</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da HTML çıktılamak için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>idle</literal></term><listitem><para>
<userinput>who</userinput>'daki <userinput>-u</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ifdef</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-D</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-I</userinput> seçeneği;
<userinput>recode</userinput>'daki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-all-space</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-backups</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-B</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-blank-lines</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-B</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-case</literal></term><listitem><para>
<userinput>look</userinput> ve <userinput>ptx</userinput>'teki <userinput>-f</userinput> seçeneği;
<userinput>diff</userinput> ve <userinput>wdiff</userinput>'teki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-errors</literal></term><listitem><para>
Make'deki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-file</literal></term><listitem><para>
<userinput>ptx</userinput>'teki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-indentation</literal></term><listitem><para>
<userinput>etags</userinput>'daki <userinput>-I</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-init-file</literal></term><listitem><para>
Oleo'daki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-interrupts</literal></term><listitem><para>
<userinput>tee</userinput>'deki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-matching-lines</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-I</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-space-change</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>ignore-zeros</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>include</literal></term><listitem><para>
<userinput>etags</userinput>'daki <userinput>-i</userinput> seçeneği;
<userinput>m4</userinput>'teki <userinput>-I</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>include-dir</literal></term><listitem><para>
Make'deki <userinput>-I</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>incremental</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-G</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>info</literal></term><listitem><para>
Finger'daki <userinput>-i</userinput>, <userinput>-l</userinput> ve <userinput>-m</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>init-file</literal></term><listitem><para>
Bazı uygulamalarda kullanıcının ilklendirme dosyası olarak okunacak dosyanın adını belirtmekte kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>initial</literal></term><listitem><para>
<userinput>expand</userinput>'daki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>initial-tab</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>inode</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>interactive</literal></term><listitem><para>
<userinput>cp</userinput>, <userinput>ln</userinput>, <userinput>mv</userinput> ve  <userinput>rm</userinput>'deki <userinput>-i</userinput> seçeneği; <userinput>m4</userinput>'teki <userinput>-e</userinput> seçeneği; <userinput>xargs</userinput>'daki <userinput>-p</userinput> seçeneği; <userinput>tar</userinput>'daki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>intermix-type</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>iso-8601</literal></term><listitem><para>
<userinput>date</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>jobs</literal></term><listitem><para>
Make'deki <userinput>-j</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>just-print</literal></term><listitem><para>
Make'deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>keep-going</literal></term><listitem><para>
Make'deki <userinput>-k</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>keep-files</literal></term><listitem><para>
<userinput>csplit</userinput>'deki <userinput>-k</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>kilobytes</literal></term><listitem><para>
<userinput>du</userinput> ve <userinput>ls</userinput>'deki <userinput>-k</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>language</literal></term><listitem><para>
<userinput>etags</userinput>'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>less-mode</literal></term><listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>level-for-gzip</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-g</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>line-bytes</literal></term><listitem><para>
<userinput>split</userinput>'teki <userinput>-C</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>lines</literal></term><listitem><para>
<userinput>split</userinput>, <userinput>head</userinput> ve <userinput>tail</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>link</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>lint</literal></term>
     <term><literal>lint-old</literal></term><listitem><para>
<userinput>gawk</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>list</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-t</userinput> seçeneği; <userinput>recode</userinput>'daki <userinput>-l</userinput> seçeneği; <userinput>tar</userinput>'daki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>literal</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-N</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>load-average</literal></term><listitem><para>
Make'deki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>login</literal></term><listitem><para>
<userinput>su</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>machine</literal></term><listitem><para>
Henüz bu seçeneği kullanan uygulamaların bir listesi yok; biri bunun varlığını sınamalı ve eğer kullanan bir uygulama varsa bunu <email>gnu@gnu.org</email> adresine bildirmeli.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>macro-name</literal></term><listitem><para>
<userinput>ptx</userinput>'deki <userinput>-M</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>mail</literal></term><listitem><para>
<userinput>hello</userinput> ve <userinput>uname</userinput>'deki <userinput>-m</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>make-directories</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>makefile</literal></term><listitem><para>
Make'deki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>mapped</literal></term><listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>max-args</literal></term><listitem><para>
<userinput>xargs</userinput>'daki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>max-chars</literal></term><listitem><para>
<userinput>xargs</userinput>'daki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>max-lines</literal></term><listitem><para>
<userinput>xargs</userinput>'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>max-load</literal></term><listitem><para>
Make'deki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>max-procs</literal></term><listitem><para>
<userinput>xargs</userinput>'daki <userinput>-P</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>mesg</literal></term><listitem><para>
<userinput>who</userinput>'daki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>message</literal></term><listitem><para>
<userinput>who</userinput>'daki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>minimal</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>mixed-uuencode</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-M</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>mode</literal></term><listitem><para>
<userinput>install</userinput>, <userinput>mkdir</userinput> ve <userinput>mkfifo</userinput>'daki <userinput>-m</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>modification-time</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-m</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>multi-volume</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-M</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>name-prefix</literal></term><listitem><para>
Bison'daki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>nesting-limit</literal></term><listitem><para>
<userinput>m4</userinput>'deki <userinput>-L</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>net-headers</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>new-file</literal></term><listitem><para>
Make'deki <userinput>-W</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-builtin-rules</literal></term><listitem><para>
Make'deki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-character-count</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-check-existing</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-x</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-common</literal></term><listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-3</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-create</literal></term><listitem><para>
<userinput>touch</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-defines</literal></term><listitem><para>
<userinput>etags</userinput>'daki <userinput>-D</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-deleted</literal></term><listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-1</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-dereference</literal></term><listitem><para>
<userinput>cp</userinput>'deki <userinput>-d</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-inserted</literal></term><listitem><para>
<userinput>wdiff</userinput>'deki <userinput>-2</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-keep-going</literal></term><listitem><para>
Make'deki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-lines</literal></term><listitem><para>
Bison'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-piping</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-P</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-prof</literal></term><listitem><para>
<userinput>gprof</userinput>'daki <userinput>-e</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-regex</literal></term><listitem><para>
<userinput>etags</userinput>'daki <userinput>-R</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-sort</literal></term><listitem><para>
<userinput>nm</userinput>'deki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-splash</literal></term><listitem><para>
Uygulama başlatıldığında tanıtım penceresini göstermez.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-split</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-static</literal></term><listitem><para>
<userinput>gprof</userinput>'daki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-time</literal></term><listitem><para>
<userinput>gprof</userinput>'daki <userinput>-E</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-timestamp</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-m</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-validate</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-wait</literal></term><listitem><para>
<userinput>emacsclient</userinput>'te  kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>no-warn</literal></term><listitem><para>
Çeşitli uygulamalarda uyarıları engellemek için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>node</literal></term><listitem><para>
<userinput>info</userinput>'daki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>nodename</literal></term><listitem><para>
<userinput>uname</userinput>'deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>nonmatching</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>nstuff</literal></term><listitem><para>
<userinput>objdump</userinput>'taki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>null</literal></term><listitem><para>
<userinput>xargs</userinput>'daki <userinput>-0</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>number</literal></term><listitem><para>
<userinput>cat</userinput>'teki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>number-nonblank</literal></term><listitem><para>
<userinput>cat</userinput>'teki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>numeric-sort</literal></term><listitem><para>
<userinput>nm</userinput>^deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>numeric-uid-gid</literal></term><listitem><para>
<userinput>cpio</userinput> ve <userinput>ls</userinput>'seki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>nx</literal></term><listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>old-archive</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>old-file</literal></term><listitem><para>
Make'deki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>one-file-system</literal></term><listitem><para>
<userinput>tar</userinput>, <userinput>cp</userinput> ve <userinput>du</userinput>'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>only-file</literal></term><listitem><para>
<userinput>ptx</userinput>'deki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>only-prof</literal></term><listitem><para>
<userinput>gprof</userinput>'daki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>only-time</literal></term><listitem><para>
<userinput>gprof</userinput>'daki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>options</literal></term><listitem><para>
<userinput>getopt</userinput>, <userinput>fdlist</userinput>, <userinput>fdmount</userinput>, <userinput>fdmountd</userinput> ve <userinput>fdumount</userinput>'taki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>output</literal></term><listitem><para>
Çeşitli uygulamalarda çıktı dosyasının ismini belirtmek için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>output-prefix</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>override</literal></term><listitem><para>
<userinput>rm</userinput>'deki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>overwrite</literal></term><listitem><para>
<userinput>unshar</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>owner</literal></term><listitem><para>
<userinput>install</userinput>'daki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>paginate</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>paragraph-indent</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>parents</literal></term><listitem><para>
<userinput>-p</userinput> seçeneği <userinput>mkdir</userinput> and <userinput>rmdir</userinput>.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>pass-all</literal></term><listitem><para>
<userinput>ul</userinput>'deki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>pass-through</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>port</literal></term><listitem><para>
<userinput>finger</userinput>'daki <userinput>-P</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>portability</literal></term><listitem><para>
<userinput>cpio</userinput> ve <userinput>tar</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>posix</literal></term><listitem><para>
<userinput>gawk</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>prefix-builtins</literal></term><listitem><para>
<userinput>m4</userinput>'teki <userinput>-P</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>prefix</literal></term><listitem><para>
<userinput>csplit</userinput>'teki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>preserve</literal></term><listitem><para>
<userinput>tar</userinput> ve <userinput>cp</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>preserve-environment</literal></term><listitem><para>
<userinput>su</userinput>'daki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>preserve-modification-time</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-m</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>preserve-order</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>preserve-permissions</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>print</literal></term><listitem><para>
<userinput>diff</userinput>'teki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>print-chars</literal></term><listitem><para>
<userinput>cmp</userinput>'deki <userinput>-L</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>print-data-base</literal></term><listitem><para>
Make'deki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>print-directory</literal></term><listitem><para>
Make'deki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>print-file-name</literal></term><listitem><para>
<userinput>nm</userinput>'deki <userinput>-o</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>print-symdefs</literal></term><listitem><para>
<userinput>nm</userinput>'deki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>printer</literal></term><listitem><para>
<userinput>wdiff</userinput>'teki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>prompt</literal></term><listitem><para>
<userinput>ed</userinput>'deki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>proxy</literal></term><listitem><para>
Bir HTTP vekili belirtir.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>query-user</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-X</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>question</literal></term><listitem><para>
Make'deki <userinput>-q</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>quiet</literal></term><listitem><para>
Bir çok yazılımda olağan çıktıyı engellemek için kullanılır.</para><para><note><para><userinput>--quiet</userinput>'i kabul eden her yazılım eşanlamlısı olarak <userinput>--silent</userinput>'ı da kabul etmelidir.</para></note>
      </para></listitem></varlistentry><varlistentry>
     <term><literal>quiet-unshar</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-Q</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>quote-name</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-Q</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>rcs</literal></term><listitem><para>
<userinput>diff</userinput>'teki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>re-interval</literal></term><listitem><para>
<userinput>gawk</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>read-full-blocks</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-B</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>readnow</literal></term><listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>recon</literal></term><listitem><para>
Make'deki <userinput>-n</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>record-number</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-R</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>recursive</literal></term><listitem><para>
<userinput>chgrp</userinput>, <userinput>chown</userinput>, <userinput>cp</userinput>, <userinput>ls</userinput>, <userinput>diff</userinput>,
ve <userinput>rm</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>reference-limit</literal></term><listitem><para>
<userinput>makeinfo</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>references</literal></term><listitem><para>
<userinput>ptx</userinput>'deki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>regex</literal></term><listitem><para>
<userinput>tac</userinput> ve <userinput>etags</userinput>'daki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>release</literal></term><listitem><para>
<userinput>uname</userinput>'deki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>reload-state</literal></term><listitem><para>
<userinput>m4</userinput>'teki <userinput>-R</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>relocation</literal></term><listitem><para>
<userinput>objdump</userinput>'taki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>rename</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>replace</literal></term><listitem><para>
<userinput>xargs</userinput>'daki <userinput>-i</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>report-identical-files</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>reset-access-time</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>reverse</literal></term><listitem><para>
<userinput>ls</userinput> ve <userinput>nm</userinput>'deki <userinput>-r</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>reversed-ed</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-f</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>right-side-defs</literal></term><listitem><para>
<userinput>ptx</userinput>'teki <userinput>-R</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>same-order</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>same-permissions</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>save</literal></term><listitem><para>
<userinput>stty</userinput>'deki <userinput>-g</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>se</literal></term><listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>sentence-regexp</literal></term><listitem><para>
<userinput>ptx</userinput>'deki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>separate-dirs</literal></term><listitem><para>
<userinput>du</userinput>'daki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>separator</literal></term><listitem><para>
<userinput>tac</userinput>'deki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>sequence</literal></term><listitem><para>
<userinput>recode</userinput> tarafından ardışık geçişlerde dosya ya da boruları seçmek için kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>shell</literal></term><listitem><para>
<userinput>su</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>show-all</literal></term><listitem><para>
<userinput>cat</userinput>'teki <userinput>-A</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>show-c-function</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-p</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>show-ends</literal></term><listitem><para>
<userinput>cat</userinput>'teki <userinput>-E</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>show-function-line</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-F</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>show-tabs</literal></term><listitem><para>
<userinput>cat</userinput>'teki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>silent</literal></term><listitem><para>
Bir çok uygulamada olağan çıktıyı engellemek için kullanılır.
</para><para><note><para><userinput>--silent</userinput>'i kabul eden her yazılım <userinput>--quiet</userinput>'ı da eşanlamlısı olarak kabul etmelidir.</para></note>
      </para></listitem></varlistentry><varlistentry>
     <term><literal>size</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>socket</literal></term><listitem><para>
Bir ağ sunucusuna, soketinde kullanması için yeni bir soket açıp bağlanmak yerine belirtilen dosya tanıtıcısını kullanmasını bildirir. Bu yöntem, normalde bu ihtiyaca ayrılmış bir porta ihtiyaç duyan bir sunucunun ayrıcalıklı olmayan bir süreç içinden çalışması için bir yol sunar.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>sort</literal></term><listitem><para>
<userinput>ls</userinput>'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>source</literal></term><listitem><para>
<userinput>gawk</userinput>'daki <userinput>-W source</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>sparse</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>speed-large-files</literal></term><listitem><para>
<userinput>diff</userinput>'deki <userinput>-H</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>split-at</literal></term><listitem><para>
<userinput>unshar</userinput>'daki <userinput>-E</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>split-size-limit</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-L</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>squeeze-blank</literal></term><listitem><para>
<userinput>cat</userinput>'teki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>start-delete</literal></term><listitem><para>
<userinput>wdiff</userinput>'teki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>start-insert</literal></term><listitem><para>
<userinput>wdiff</userinput>'teki <userinput>-y</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>starting-file</literal></term><listitem><para>
<userinput>tar</userinput> ve <userinput>diff</userinput>te kullanılır ve işleme bir dizin içindeki dosyalardan hangisi ile başlanacağının belirtilmesini sağlar.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>statistics</literal></term><listitem><para>
<userinput>wdiff</userinput>'teki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>stdin-file-list</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>stop</literal></term><listitem><para>
Make'deki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
    <term><literal>strict</literal></term><listitem><para>
<userinput>recode</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>strip</literal></term><listitem><para>
<userinput>install</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>strip-all</literal></term><listitem><para>
<userinput>strip</userinput>'teki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>strip-debug</literal></term><listitem><para>
<userinput>strip</userinput>'teki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>submitter</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>suffix</literal></term><listitem><para>
<userinput>cp</userinput>, <userinput>ln</userinput> ve <userinput>mv</userinput>'deki <userinput>-S</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>suffix-format</literal></term><listitem><para>
<userinput>csplit</userinput>'deki <userinput>-b</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>sum</literal></term><listitem><para>
<userinput>gprof</userinput>'taki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>summarize</literal></term><listitem><para>
<userinput>du</userinput>'daki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>symbolic</literal></term><listitem><para>
<userinput>ln</userinput>'deki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>symbols</literal></term><listitem><para>
<userinput>objdump</userinput> ve GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>synclines</literal></term><listitem><para>
<userinput>m4</userinput>'teki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>sysname</literal></term><listitem><para>
<userinput>uname</userinput>'deki <userinput>-s</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>tabs</literal></term><listitem><para>
<userinput>expand</userinput> ve <userinput>unexpand</userinput>'daki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>tabsize</literal></term><listitem><para>
<userinput>ls</userinput>'deki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>terminal</literal></term><listitem><para>
<userinput>tput</userinput> ve <userinput>ul</userinput>'deki <userinput>-T</userinput> seçeneği; <userinput>wdiff</userinput>'teki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>text</literal></term><listitem><para>
<userinput>diff</userinput>'teki <userinput>-a</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>text-files</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>time</literal></term><listitem><para>
<userinput>ls</userinput> ve <userinput>touch</userinput>'da kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>timeout</literal></term><listitem><para>
Bir işlemde vazgeçmeden önce ne kadar süre bekleneceğini belirtir.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>to-stdout</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-O</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>total</literal></term><listitem><para>
<userinput>du</userinput>'daki <userinput>-c</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>touch</literal></term><listitem><para>
Make, <userinput>ranlib</userinput> ve <userinput>recode</userinput>'daki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>trace</literal></term><listitem><para>
<userinput>m4</userinput>'teki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>traditional</literal></term><listitem><para>
<userinput>hello</userinput>'daki <userinput>-t</userinput> seçeneği;
<userinput>gawk</userinput>'taki <userinput>-W traditional</userinput> seçeneği;
<userinput>ed</userinput>, <userinput>m4</userinput> ve <userinput>ptx</userinput>'teki <userinput>-G</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>tty</literal></term><listitem><para>
GDB'de kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>typedefs</literal></term><listitem><para>
<userinput>ctags</userinput>'daki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>typedefs-and-c++</literal></term><listitem><para>
<userinput>ctags</userinput>'daki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>typeset-mode</literal></term><listitem><para>
<userinput>ptx</userinput>'teki <userinput>-t</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>uncompress</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-z</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>unconditional</literal></term><listitem><para>
<userinput>cpio</userinput>'daki <userinput>-u</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>undefine</literal></term><listitem><para>
<userinput>m4</userinput>'teki <userinput>-U</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>undefined-only</literal></term><listitem><para>
<userinput>nm</userinput>'deki <userinput>-u</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>update</literal></term><listitem><para>
<userinput>cp</userinput>, <userinput>ctags</userinput>, <userinput>mv</userinput> ve <userinput>tar</userinput>'daki <userinput>-u</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>usage</literal></term><listitem><para>
<userinput>gawk</userinput>'da <userinput>--help</userinput> anlamında kullanılır.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>uuencode</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-B</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>vanilla-operation</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-V</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>verbose</literal></term><listitem><para>
Aşama hakkında daha çok bilgi verilir. Bir çok uygulama bunu destekler.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>verify</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-W</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>version</literal></term><listitem><para>
Sürüm numarasını basar.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>version-control</literal></term><listitem><para>
<userinput>cp</userinput>, <userinput>ln</userinput> ve <userinput>mv</userinput>'deki <userinput>-V</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>vgrind</literal></term><listitem><para>
<userinput>ctags</userinput>'daki <userinput>-v</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>volume</literal></term><listitem><para>
<userinput>tar</userinput>'daki <userinput>-V</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>what-if</literal></term><listitem><para>
Make'deki <userinput>-W</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>whole-size-limit</literal></term><listitem><para>
<userinput>shar</userinput>'daki <userinput>-l</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>width</literal></term><listitem><para>
<userinput>ls</userinput> ve <userinput>ptx</userinput>'teki <userinput>-w</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>word-regexp</literal></term><listitem><para>
<userinput>ptx</userinput>'teki <userinput>-W</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>writable</literal></term><listitem><para>
<userinput>who</userinput>'daki <userinput>-T</userinput> seçeneği.
      </para></listitem></varlistentry><varlistentry>
     <term><literal>zeros</literal></term><listitem><para>
<userinput>gprof</userinput>'taki <userinput>-z</userinput> seçeneği.
      </para></listitem></varlistentry></variablelist>
    </para>
  </sect1><sect1 id="standards-Memory-Usage">
   <title>Bellek Kullanımı</title>
   <para>
<indexterm scope="standards-cp"><primary>bellek kullanımı</primary></indexterm>
Eğer bir bir yazılım genelde sadece bir kaç megabayt bellek alanı kullanıyorsa; bellek kullanımını azaltmak için herhangi bir çaba göstererek kendinizi sıkıntıya sokmayın. Örnek olarak, eğer bazı sebeplerden dolayı bir kaç megabayttan büyük dosyalar üzerinde çalışmak elverişsiz ise tüm girdi dosyalarını belleğe alarak orada çalışmak daha mantıklıdır.
   </para><para>
Bununla birlikte, <userinput>cat</userinput> ya da <userinput>tail</userinput> gibi çok büyük dosyalar üzerinde çalışan uygulamalarda bu yöntemden kaçınmak önemlidir çünkü bu yöntem işlenecek dosya sayısını sınırlayabilir. Eğer bir yazılım satırlarla çalışıyorsa ve kullanıcı tarafından girilen keyfi dosyalar üzerinde kullanılabiliyorsa bellekte sadece tek bir satırı tutmalıdır. Çünkü bu yöntem çok zor değildir ve kullanıcılar tek seferde bellekte tutulabileceğinden daha büyük dosyalar üzerinde çalışmak isteyeceklerdir.
   </para><para>
Eğer yazılımınız karmaşık veri yapıları oluşturuyorsa bunların tamamını belleğe alın ve eğer <userinput>malloc</userinput> sıfır döndürürse bir ölümcül hata verin.
   </para></sect1>
  <sect1 id="standards-File-Usage">
   <title>Dosya Kullanımı</title>
   <para><indexterm scope="standards-cp"><primary>dosya kullanımı</primary></indexterm>
Yazılımlar <filename>/usr</filename> ve <filename>/etc</filename> salt okunur olduğu zaman da çalışabilecek şekilde hazırlanmalıdır. Bu yüzden, eğer yazılım günlük dosyaları, kilit dosyaları, yedek dosyaları, puanlama dosyaları ve bunun gibi diğer dosyaları iç işlevselliği doğrultusunda değiştiriyorsa, bu dosyalar <filename>/usr</filename> ve <filename>/etc</filename>'de saklanmamalıdır.
   </para><para>
Buna iki istisna vardır. <filename>/etc</filename> sistem ayar bilgilerinin saklanması için kullanılır ve bir yazılım sistem ayarlarını güncelleyeceği zaman <filename>/etc</filename> içindeki dosyaları değiştirmesi kabul edilebilir. Bir de, eğer kullanıcı uygulamadan özellikle bir dizindeki dosyaları değiştirmesini isterse, uygulamanın, diğer dosyaları da aynı dizinde saklaması makul olacaktır.
   </para></sect1></chapter>
 <chapter id="standards-Writing-C">
  <title>Making The Best Use of C</title>
  <para>
This chapter provides advice on how best to use the C language
when writing GNU software.
  </para>

  <sect1 id="standards-Formatting">
   <title>Formatting Your Source Code</title>
   <para>
<indexterm scope="standards-cp"><primary>formatting source code</primary></indexterm>
<indexterm scope="standards-cp"><primary>open brace</primary></indexterm>
<indexterm scope="standards-cp"><primary>braces, in C source</primary></indexterm>
It is important to put the open-brace that starts the body of a C
function in column zero, and avoid putting any other open-brace or
open-parenthesis or open-bracket in column zero.  Several tools look
for open-braces in column zero to find the beginnings of C functions.
These tools will not work on code not formatted that way.
   </para>
   <para>
It is also important for function definitions to start the name of the
function in column zero.  This helps people to search for function
definitions, and may also help certain tools recognize them.  Thus,
the proper format is this:
   </para>
   <para><screen>static char *
concat (s1, s2)        /* Name starts in column zero here */
     char *s1, *s2;
{                     /* Open brace in column zero here */
  &hellip;
}
</screen>      </para>

   <para>
or, if you want to use Standard C syntax, format the definition like
this:
   </para>

   <para><screen>
static char *
concat (char *s1, char *s2)
{
  &hellip;
}
</screen>   </para>
   <para>
In Standard C, if the arguments don't fit nicely on one line,
split it like this:
   </para>
   <para><screen>
int
lots_of_args (int an_integer, long a_long, short a_short,
              double a_double, float a_float)
&hellip;
</screen>      </para>
   <para>
The rest of this section gives our recommendations for other aspects of
C formatting style, which is also the default style of the <userinput>indent</userinput>
program in version 1.2 and newer.  It corresponds to the options
   </para>
   <para><screen>
-nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2
-ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob
</screen>      </para>
   <para>
We don't think of these recommendations as requirements, because it
causes no problems for users if two different programs have different
formatting styles.
   </para>
   <para>
But whatever style you use, please use it consistently, since a mixture
of styles within one program tends to look ugly.  If you are
contributing changes to an existing program, please follow the style of
that program.
   </para>
   <para>
For the body of the function, our recommended style looks like this:
   </para>
   <para><screen>
if (x &lt; foo (y, z))
  haha = bar[4] + 5;
else
  {
    while (z)
      {
        haha += foo (z, z);
        z--;
      }
    return ++x + bar ();
  }
</screen>      </para>
   <para>
<indexterm scope="standards-cp"><primary>spaces before open-paren</primary></indexterm>
We find it easier to read a program when it has spaces before the
open-parentheses and after the commas.  Especially after the commas.
   </para>
   <para>
When you split an expression into multiple lines, split it
before an operator, not after one.  Here is the right way:
   </para>
   <para>
<indexterm scope="standards-cp"><primary>expressions, splitting</primary></indexterm>
<screen>
if (foo_this_is_long &amp;&amp; bar &gt; win (x, y, z)
    &amp;&amp; remaining_condition)
</screen>      </para>
   <para>
Try to avoid having two operators of different precedence at the same
level of indentation.  For example, don't write this:
   </para>
   <para><screen>
mode = (inmode[j] == VOIDmode
        || GET_MODE_SIZE (outmode[j]) &gt; GET_MODE_SIZE (inmode[j])
        ? outmode[j] : inmode[j]);
</screen>      </para>
   <para>
Instead, use extra parentheses so that the indentation shows the nesting:
   </para>
   <para><screen>
mode = ((inmode[j] == VOIDmode
         || (GET_MODE_SIZE (outmode[j]) &gt; GET_MODE_SIZE (inmode[j])))
        ? outmode[j] : inmode[j]);
</screen>      </para>
   <para>
Insert extra parentheses so that Emacs will indent the code properly.
For example, the following indentation looks nice if you do it by hand,
   </para>
   <para><screen>
v = rup-&gt;ru_utime.tv_sec*1000 + rup-&gt;ru_utime.tv_usec/1000
    + rup-&gt;ru_stime.tv_sec*1000 + rup-&gt;ru_stime.tv_usec/1000;
</screen>      </para>

   <para>
but Emacs would alter it.  Adding a set of parentheses produces
something that looks equally nice, and which Emacs will preserve:
   </para>

   <para><screen>
v = (rup-&gt;ru_utime.tv_sec*1000 + rup-&gt;ru_utime.tv_usec/1000
     + rup-&gt;ru_stime.tv_sec*1000 + rup-&gt;ru_stime.tv_usec/1000);
</screen>   </para>
   <para>
Format do-while statements like this:
   </para>
   <para><screen>
do
  {
    a = foo (a);
  }
while (a &gt; 0);
</screen>      </para>
   <para>
<indexterm scope="standards-cp"><primary>formfeed</primary></indexterm>
<indexterm scope="standards-cp"><primary>control-L</primary></indexterm>
Please use formfeed characters (control-L) to divide the program into
pages at logical places (but not within a function).  It does not matter
just how long the pages are, since they do not have to fit on a printed
page.  The formfeeds should appear alone on lines by themselves.
   </para>
</sect1>
  <sect1 id="standards-Comments">
   <title>Commenting Your Work</title>
   <para>
<indexterm scope="standards-cp"><primary>commenting</primary></indexterm>
Every program should start with a comment saying briefly what it is for.
Example: <userinput>fmt - filter for simple filling of text</userinput>.
   </para>
   <para>
Please write the comments in a GNU program in English, because English
is the one language that nearly all programmers in all countries can
read.  If you do not write English well, please write comments in
English as well as you can, then ask other people to help rewrite them.
If you can't write comments in English, please find someone to work with
you and translate your comments into English.
   </para>
   <para>
Please put a comment on each function saying what the function does,
what sorts of arguments it gets, and what the possible values of
arguments mean and are used for.  It is not necessary to duplicate in
words the meaning of the C argument declarations, if a C type is being
used in its customary fashion.  If there is anything nonstandard about
its use (such as an argument of type <userinput>char *</userinput> which is really the
address of the second character of a string, not the first), or any
possible values that would not work the way one would expect (such as,
that strings containing newlines are not guaranteed to work), be sure
to say so.
   </para>
   <para>
Also explain the significance of the return value, if there is one.
   </para>
   <para>
Please put two spaces after the end of a sentence in your comments, so
that the Emacs sentence commands will work.  Also, please write
complete sentences and capitalize the first word.  If a lower-case
identifier comes at the beginning of a sentence, don't capitalize it!
Changing the spelling makes it a different identifier.  If you don't
like starting a sentence with a lower case letter, write the sentence
differently (e.g., "The identifier lower-case is &hellip;").
   </para>
   <para>
The comment on a function is much clearer if you use the argument
names to speak about the argument values.  The variable name itself
should be lower case, but write it in upper case when you are speaking
about the value rather than the variable itself.  Thus, "the inode
number NODE_NUM" rather than "an inode".
   </para>
   <para>
There is usually no purpose in restating the name of the function in
the comment before it, because the reader can see that for himself.
There might be an exception when the comment is so long that the function
itself would be off the bottom of the screen.
   </para>
   <para>
There should be a comment on each static variable as well, like this:
   </para>
   <para><screen>/* Nonzero means truncate lines in the display;
   zero means continue them.  */
int truncate_lines;
</screen>      </para>
   <para>
<indexterm scope="standards-cp"><primary>conditionals, comments for</primary></indexterm>
<indexterm scope="standards-cp"><primary><userinput>#endif</userinput>, commenting</primary></indexterm>
Every <userinput>#endif</userinput> should have a comment, except in the case of short
conditionals (just a few lines) that are not nested.  The comment should
state the condition of the conditional that is ending, <emphasis>including
its sense</emphasis>.  <userinput>#else</userinput> should have a comment describing the condition
<emphasis>and sense</emphasis> of the code that follows.  For example:
   </para>
   <para><screen>
#ifdef foo
  &hellip;
#else /* not foo */
  &hellip;
#endif /* not foo */
     #ifdef foo
  &hellip;
#endif /* foo */
</screen>   </para>

   <para>
but, by contrast, write the comments this way for a <userinput>#ifndef</userinput>:
   </para>

   <para><screen>
#ifndef foo
  &hellip;
#else /* foo */
  &hellip;
#endif /* foo */
     #ifndef foo
  &hellip;
#endif /* not foo */
</screen>   </para>

</sect1>
  <sect1 id="standards-Syntactic-Conventions">
   <title>Clean Use of C Constructs</title>
   <para>
<indexterm scope="standards-cp"><primary>syntactic conventions</primary></indexterm>
<indexterm scope="standards-cp"><primary>implicit <userinput>int</userinput></primary></indexterm>
<indexterm scope="standards-cp"><primary>function argument, declaring</primary></indexterm>
Please explicitly declare the types of all objects.  For example, you
should explicitly declare all arguments to functions, and you should
declare functions to return <userinput>int</userinput> rather than omitting the
<userinput>int</userinput>.
   </para>

   <para>
<indexterm scope="standards-cp"><primary>compiler warnings</primary></indexterm>
<indexterm scope="standards-cp"><primary><userinput>-Wall</userinput> compiler option</primary></indexterm>
Some programmers like to use the GCC <userinput>-Wall</userinput> option, and change the
code whenever it issues a warning.  If you want to do this, then do.
Other programmers prefer not to use <userinput>-Wall</userinput>, because it gives
warnings for valid and legitimate code which they do not want to change.
If you want to do this, then do.  The compiler should be your servant,
not your master.
   </para>

   <para>
Declarations of external functions and functions to appear later in the
source file should all go in one place near the beginning of the file
(somewhere before the first function definition in the file), or else
should go in a header file.  Don't put <userinput>extern</userinput> declarations inside
functions.
   </para>

   <para>
<indexterm scope="standards-cp"><primary>temporary variables</primary></indexterm>
It used to be common practice to use the same local variables (with
names like <userinput>tem</userinput>) over and over for different values within one
function.  Instead of doing this, it is better declare a separate local
variable for each distinct purpose, and give it a name which is
meaningful.  This not only makes programs easier to understand, it also
facilitates optimization by good compilers.  You can also move the
declaration of each local variable into the smallest scope that includes
all its uses.  This makes the program even cleaner.
   </para>

   <para>
Don't use local variables or parameters that shadow global identifiers.
   </para>

   <para>
<indexterm scope="standards-cp"><primary>multiple variables in a line</primary></indexterm>
Don't declare multiple variables in one declaration that spans lines.
Start a new declaration on each line, instead.  For example, instead
of this:
   </para>

   <para><screen>int    foo,
       bar;
     </screen>   </para>


   <para>
write either this:
   </para>

   <para><screen>
int foo, bar;
</screen>   </para>

   <para>
or this:
   </para>

   <para><screen>
int foo;
int bar;
</screen>   </para>

   <para>
(If they are global variables, each should have a comment preceding it
anyway.)
   </para>

   <para>
When you have an <userinput>if</userinput>-<userinput>else</userinput> statement nested in another
<userinput>if</userinput> statement, always put braces around the <userinput>if</userinput>-<userinput>else</userinput>.
Thus, never write like this:
   </para>

   <para><screen>
if (foo)
  if (bar)
    win ();
  else
    lose ();
</screen>   </para>

   <para>
always like this:
   </para>

   <para><screen>
if (foo)
  {
    if (bar)
      win ();
    else
      lose ();
  }
</screen>   </para>
   <para>
If you have an <userinput>if</userinput> statement nested inside of an <userinput>else</userinput>
statement, either write <userinput>else if</userinput> on one line, like this,
   </para>
   <para><screen>
if (foo)
  &hellip;
else if (bar)
  &hellip;
</screen>      </para>

   <para>
with its <userinput>then</userinput>-part indented like the preceding <userinput>then</userinput>-part,
or write the nested <userinput>if</userinput> within braces like this:
   </para>

   <para><screen>
if (foo)
  &hellip;
else
  {
    if (bar)
      &hellip;
  }
</screen>   </para>
   <para>
Don't declare both a structure tag and variables or typedefs in the
same declaration.  Instead, declare the structure tag separately
and then use it to declare the variables or typedefs.
   </para>
   <para>
Try to avoid assignments inside <userinput>if</userinput>-conditions.  For example,
don't write this:
   </para>
   <para><screen>
if ((foo = (char *) malloc (sizeof *foo)) == 0)
  fatal ("virtual memory exhausted");
</screen>      </para>

   <para>
instead, write this:
   </para>

   <para><screen>
foo = (char *) malloc (sizeof *foo);
if (foo == 0)
  fatal ("virtual memory exhausted");
</screen>   </para>
   <para>
<indexterm scope="standards-pg"><primary>lint</primary></indexterm>
Don't make the program ugly to placate <userinput>lint</userinput>.  Please don't insert any
casts to <userinput>void</userinput>.  Zero without a cast is perfectly fine as a null
pointer constant, except when calling a varargs function.
   </para>
</sect1>
  <sect1 id="standards-Names">
   <title>Naming Variables, Functions, and Files</title>
   <para>
<indexterm scope="standards-cp"><primary>names of variables, functions, and files</primary></indexterm>
The names of global variables and functions in a program serve as
comments of a sort.  So don't choose terse names--instead, look for
names that give useful information about the meaning of the variable or
function.  In a GNU program, names should be English, like other
comments.
   </para>
   <para>
Local variable names can be shorter, because they are used only within
one context, where (presumably) comments explain their purpose.
   </para>
   <para>
Try to limit your use of abbreviations in symbol names.  It is ok to
make a few abbreviations, explain what they mean, and then use them
frequently, but don't use lots of obscure abbreviations.
   </para>
   <para>
Please use underscores to separate words in a name, so that the Emacs
word commands can be useful within them.  Stick to lower case; reserve
upper case for macros and <userinput>enum</userinput> constants, and for name-prefixes
that follow a uniform convention.
   </para>
   <para>
For example, you should use names like <userinput>ignore_space_change_flag</userinput>;
don't use names like <userinput>iCantReadThis</userinput>.
   </para>
   <para>
Variables that indicate whether command-line options have been
specified should be named after the meaning of the option, not after
the option-letter.  A comment should state both the exact meaning of
the option and its letter.  For example,
   </para>
   <para><screen>/* Ignore changes in horizontal whitespace (-b).  */
int ignore_space_change_flag;
     </screen>   </para>
   <para>
When you want to define names with constant integer values, use
<userinput>enum</userinput> rather than <userinput>#define</userinput>.  GDB knows about enumeration
constants.
   </para>
   <para>
<indexterm scope="standards-cp"><primary>file-name limitations</primary></indexterm>
<indexterm scope="standards-pg"><primary>doschk</primary></indexterm>
You might want to make sure that none of the file names would conflict
the files were loaded onto an MS-DOS file system which shortens the
names.  You can use the program <userinput>doschk</userinput> to test for this.
   </para>
   <para>
Some GNU programs were designed to limit themselves to file names of 14
characters or less, to avoid file name conflicts if they are read into
older System V systems.  Please preserve this feature in the existing
GNU programs that have it, but there is no need to do this in new GNU
programs.  <userinput>doschk</userinput> also reports file names longer than 14
characters.
   </para>
</sect1>
  <sect1 id="standards-System-Portability">
   <title>Portability between System Types</title>
   <para>
<indexterm scope="standards-cp"><primary>portability, between system types</primary></indexterm>
In the Unix world, "portability" refers to porting to different Unix
versions.  For a GNU program, this kind of portability is desirable, but
not paramount.
   </para>
   <para>
The primary purpose of GNU software is to run on top of the GNU kernel,
compiled with the GNU C compiler, on various types of cpu.  So the
kinds of portability that are absolutely necessary are quite limited.
But it is important to support Linux-based GNU systems, since they
are the form of GNU that is popular.
   </para>
   <para>
Beyond that, it is good to support the other free operating systems
(*BSD), and it is nice to support other Unix-like systems if you want
to.  Supporting a variety of Unix-like systems is desirable, although
not paramount.  It is usually not too hard, so you may as well do it.
But you don't have to consider it an obligation, if it does turn out to
be hard.
   </para>
   <para>
<indexterm scope="standards-pg"><primary>autoconf</primary></indexterm>
The easiest way to achieve portability to most Unix-like systems is to
use Autoconf.  It's unlikely that your program needs to know more
information about the host platform than Autoconf can provide, simply
because most of the programs that need such knowledge have already been
written.
   </para>
   <para>
Avoid using the format of semi-internal data bases (e.g., directories)
when there is a higher-level alternative (<userinput>readdir</userinput>).
   </para>
   <para>
<indexterm scope="standards-cp"><primary>non-posix systems, and portability</primary></indexterm>
As for systems that are not like Unix, such as MSDOS, Windows, the
Macintosh, VMS, and MVS, supporting them is often a lot of work.  When
that is the case, it is better to spend your time adding features that
will be useful on GNU and GNU/Linux, rather than on supporting other
incompatible systems.
   </para>
   <para>
If you do support Windows, please do not abbreviate it as "win".  In
hacker terminology, calling something a "win" is a form of praise.
You're free to praise Microsoft Windows on your own if you want, but
please don't do this in GNU packages.  Instead of abbreviating
"Windows" to "un", you can write it in full or abbreviate it to
"woe" or "w".  In GNU Emacs, for instance, we use <userinput>w32</userinput> in
file names of Windows-specific files, but the macro for Windows
conditionals is called <userinput>WINDOWSNT</userinput>.
   </para>
   <para>
It is a good idea to define the "feature test macro"
<userinput>_GNU_SOURCE</userinput> when compiling your C files.  When you compile on GNU
or GNU/Linux, this will enable the declarations of GNU library extension
functions, and that will usually give you a compiler error message if
you define the same function names in some other way in your program.
(You don't have to actually <emphasis>use</emphasis> these functions, if you prefer
to make the program more portable to other systems.)
   </para>
   <para>
But whether or not you use these GNU extensions, you should avoid
using their names for any other meanings.  Doing so would make it hard
to move your code into other GNU programs.
   </para></sect1>
  <sect1 id="standards-CPU-Portability">
   <title>Portability between cpus</title>
   <para>
<indexterm scope="standards-cp"><primary>data types, and portability</primary></indexterm>
<indexterm scope="standards-cp"><primary>portability, and data types</primary></indexterm>
Even GNU systems will differ because of differences among cpu
types--for example, difference in byte ordering and alignment
requirements.  It is absolutely essential to handle these differences.
However, don't make any effort to cater to the possibility that an
<userinput>int</userinput> will be less than 32 bits.  We don't support 16-bit machines
in GNU.
   </para>
   <para>
Similarly, don't make any effort to cater to the possibility that
<userinput>long</userinput> will be smaller than predefined types like <userinput>size_t</userinput>.
For example, the following code is ok:
   </para>
   <para><screen>printf ("size = %lu\n", (unsigned long) sizeof array);
printf ("diff = %ld\n", (long) (pointer2 - pointer1));
</screen>      </para>
   <para>
1989 Standard C requires this to work, and we know of only one
counterexample: 64-bit programs on Microsoft Windows IA-64.  We will
leave it to those who want to port GNU programs to that environment
to figure out how to do it.
   </para>
   <para>
Predefined file-size types like <userinput>off_t</userinput> are an exception: they are
longer than <userinput>long</userinput> on many platforms, so code like the above won't
work with them.  One way to print an <userinput>off_t</userinput> value portably is to
print its digits yourself, one by one.
   </para>
   <para>
Don't assume that the address of an <userinput>int</userinput> object is also the
address of its least-significant byte.  This is false on big-endian
machines.  Thus, don't make the following mistake:
   </para>
   <para><screen>
int c;
&hellip;
while ((c = getchar()) != EOF)
  write(file_descriptor, &amp;c, 1);
</screen>      </para>
   <para>
When calling functions, you need not worry about the difference between
pointers of various types, or between pointers and integers.  On most
machines, there's no difference anyway.  As for the few machines where
there is a difference, all of them support Standard C prototypes, so you can
use prototypes (perhaps conditionalized to be active only in Standard C)
to make the code work on those systems.
   </para>
   <para>
In certain cases, it is ok to pass integer and pointer arguments
indiscriminately to the same function, and use no prototype on any
system.  For example, many GNU programs have error-reporting functions
that pass their arguments along to <userinput>printf</userinput> and friends:
   </para>
   <para><screen>
error (s, a1, a2, a3)
     char *s;
     char *a1, *a2, *a3;
{
  fprintf (stderr, "error: ");
  fprintf (stderr, s, a1, a2, a3);
}
</screen>      </para>

   <para>
In practice, this works on all machines, since a pointer is generally
the widest possible kind of argument; it is much simpler than any
"correct" alternative.  Be sure <emphasis>not</emphasis> to use a prototype for such
functions.
   </para>

   <para>
If you have decided to use Standard C, then you can instead define
<userinput>error</userinput> using <userinput>stdarg.h</userinput>, and pass the arguments along to
<userinput>vfprintf</userinput>.
   </para>

   <para>
<indexterm scope="standards-cp"><primary>casting pointers to integers</primary></indexterm>
Avoid casting pointers to integers if you can.  Such casts greatly
reduce portability, and in most programs they are easy to avoid.  In the
cases where casting pointers to integers is essential--such as, a Lisp
interpreter which stores type information as well as an address in one
word--you'll have to make explicit provisions to handle different word
sizes.  You will also need to make provision for systems in which the
normal range of addresses you can get from <userinput>malloc</userinput> starts far away
from zero.
   </para>

</sect1>
  <sect1 id="standards-System-Functions">
   <title>Calling System Functions</title>
   <para>
<indexterm scope="standards-cp"><primary>library functions, and portability</primary></indexterm>
<indexterm scope="standards-cp"><primary>portability, and library functions</primary></indexterm>
C implementations differ substantially.  Standard C reduces but does
not eliminate the incompatibilities; meanwhile, many GNU packages still
support pre-standard compilers because this is not hard to do.  This
chapter gives recommendations for how to use the more-or-less standard C
library functions to avoid unnecessary loss of portability.
   </para>

   <itemizedlist mark="bullet">
    <listitem>
     <para>
Don't use the return value of <userinput>sprintf</userinput>.  It returns the number of
characters written on some systems, but not on all systems.
     </para>
</listitem>
    <listitem>
     <para>
Be aware that <userinput>vfprintf</userinput> is not always available.
     </para>
</listitem>
    <listitem>
     <para><userinput>main</userinput> should be declared to return type <userinput>int</userinput>.  It should
terminate either by calling <userinput>exit</userinput> or by returning the integer
status code; make sure it cannot ever return an undefined value.
     </para>

     <para>
<indexterm scope="standards-cp"><primary>declaration for system functions</primary></indexterm>
     </para></listitem>
    <listitem>
     <para>
Don't declare system functions explicitly.
     </para>

     <para>
Almost any declaration for a system function is wrong on some system.
To minimize conflicts, leave it to the system header files to declare
system functions.  If the headers don't declare a function, let it
remain undeclared.
     </para>

     <para>
While it may seem unclean to use a function without declaring it, in
practice this works fine for most system library functions on the
systems where this really happens; thus, the disadvantage is only
theoretical.  By contrast, actual declarations have frequently caused
actual conflicts.
     </para>
</listitem>
    <listitem>
     <para>
If you must declare a system function, don't specify the argument types.
Use an old-style declaration, not a Standard C prototype.  The more you
specify about the function, the more likely a conflict.
     </para>
</listitem>
    <listitem>
     <para>
In particular, don't unconditionally declare <userinput>malloc</userinput> or
<userinput>realloc</userinput>.
     </para>

     <para>
Most GNU programs use those functions just once, in functions
conventionally named <userinput>xmalloc</userinput> and <userinput>xrealloc</userinput>.  These
functions call <userinput>malloc</userinput> and <userinput>realloc</userinput>, respectively, and
check the results.
     </para>

     <para>
Because <userinput>xmalloc</userinput> and <userinput>xrealloc</userinput> are defined in your program,
you can declare them in other files without any risk of type conflict.
     </para>

     <para>
On most systems, <userinput>int</userinput> is the same length as a pointer; thus, the
calls to <userinput>malloc</userinput> and <userinput>realloc</userinput> work fine.  For the few
exceptional systems (mostly 64-bit machines), you can use
<emphasis>conditionalized</emphasis> declarations of <userinput>malloc</userinput> and
<userinput>realloc</userinput>--or put these declarations in configuration files
specific to those systems.
     </para>

     <para>
<indexterm scope="standards-cp"><primary>string library functions</primary></indexterm>     </para></listitem>
    <listitem>
     <para>
The string functions require special treatment.  Some Unix systems have
a header file <userinput>string.h</userinput>; others have <userinput>strings.h</userinput>.  Neither
file name is portable.  There are two things you can do: use Autoconf to
figure out which file to include, or don't include either file.
     </para>
</listitem>
    <listitem>
     <para>
If you don't include either strings file, you can't get declarations for
the string functions from the header file in the usual way.
     </para>

     <para>
That causes less of a problem than you might think.  The newer standard
string functions should be avoided anyway because many systems still
don't support them.  The string functions you can use are these:
     </para>

     <para><screen>strcpy   strncpy   strcat   strncat
strlen   strcmp    strncmp
strchr   strrchr
</screen>          </para>

     <para>
The copy and concatenate functions work fine without a declaration as
long as you don't use their values.  Using their values without a
declaration fails on systems where the width of a pointer differs from
the width of <userinput>int</userinput>, and perhaps in other cases.  It is trivial to
avoid using their values, so do that.
     </para>

     <para>
The compare functions and <userinput>strlen</userinput> work fine without a declaration
on most systems, possibly all the ones that GNU software runs on.
You may find it necessary to declare them <emphasis>conditionally</emphasis> on a
few systems.
     </para>

     <para>
The search functions must be declared to return <userinput>char *</userinput>.  Luckily,
there is no variation in the data type they return.  But there is
variation in their names.  Some systems give these functions the names
<userinput>index</userinput> and <userinput>rindex</userinput>; other systems use the names
<userinput>strchr</userinput> and <userinput>strrchr</userinput>.  Some systems support both pairs of
names, but neither pair works on all systems.
     </para>

     <para>
You should pick a single pair of names and use it throughout your
program.  (Nowadays, it is better to choose <userinput>strchr</userinput> and
<userinput>strrchr</userinput> for new programs, since those are the standard
names.)  Declare both of those names as functions returning <userinput>char
*</userinput>.  On systems which don't support those names, define them as macros
in terms of the other pair.  For example, here is what to put at the
beginning of your file (or in a header) if you want to use the names
<userinput>strchr</userinput> and <userinput>strrchr</userinput> throughout:
     </para>

     <para><screen>
#ifndef HAVE_STRCHR
#define strchr index
#endif
#ifndef HAVE_STRRCHR
#define strrchr rindex
#endif

char *strchr ();
char *strrchr ();
</screen>          </para></listitem></itemizedlist>

   <para>
Here we assume that <userinput>HAVE_STRCHR</userinput> and <userinput>HAVE_STRRCHR</userinput> are
macros defined in systems where the corresponding functions exist.
One way to get them properly defined is to use Autoconf.
   </para>

</sect1>
  <sect1 id="standards-Internationalization">
   <title>Internationalization</title>
   <para>
<indexterm scope="standards-cp"><primary>internationalization</primary></indexterm>
<indexterm scope="standards-pg"><primary>gettext</primary></indexterm>
GNU has a library called GNU gettext that makes it easy to translate the
messages in a program into various languages.  You should use this
library in every program.  Use English for the messages as they appear
in the program, and let gettext provide the way to translate them into
other languages.
   </para>

   <para>
Using GNU gettext involves putting a call to the <userinput>gettext</userinput> macro
around each string that might need translation--like this:
   </para>

   <para><screen>printf (gettext ("Processing file `%s'..."));
</screen>   </para>

   <para>
This permits GNU gettext to replace the string <userinput>"Processing file
`%s'..."</userinput> with a translated version.
   </para>

   <para>
Once a program uses gettext, please make a point of writing calls to
<userinput>gettext</userinput> when you add new strings that call for translation.
   </para>

   <para>
Using GNU gettext in a package involves specifying a <firstterm>text domain
name</firstterm> for the package.  The text domain name is used to separate the
translations for this package from the translations for other packages.
Normally, the text domain name should be the same as the name of the
package--for example, <userinput>fileutils</userinput> for the GNU file utilities.
   </para>

   <para>
<indexterm scope="standards-cp"><primary>message text, and internationalization</primary></indexterm>
To enable gettext to work well, avoid writing code that makes
assumptions about the structure of words or sentences.  When you want
the precise text of a sentence to vary depending on the data, use two or
more alternative string constants each containing a complete sentences,
rather than inserting conditionalized words or phrases into a single
sentence framework.
   </para>

   <para>
Here is an example of what not to do:
   </para>

   <para><screen>
printf ("%d file%s processed", nfiles,
        nfiles != 1 ? "s" : "");
</screen>   </para>

   <para>
The problem with that example is that it assumes that plurals are made
by adding `s'.  If you apply gettext to the format string, like this,
   </para>

   <para><screen>
printf (gettext ("%d file%s processed"), nfiles,
        nfiles != 1 ? "s" : "");
</screen>   </para>

   <para>
the message can use different words, but it will still be forced to use
`s' for the plural.  Here is a better way:
   </para>

   <para><screen>
printf ((nfiles != 1 ? "%d files processed"
         : "%d file processed"),
        nfiles);
</screen>   </para>

   <para>
This way, you can apply gettext to each of the two strings
independently:
   </para>

   <para><screen>
printf ((nfiles != 1 ? gettext ("%d files processed")
         : gettext ("%d file processed")),
        nfiles);
</screen>   </para>

   <para>
This can be any method of forming the plural of the word for "file", and
also handles languages that require agreement in the word for
"processed".
   </para>

   <para>
A similar problem appears at the level of sentence structure with this
code:
   </para>

   <para><screen>
printf ("#  Implicit rule search has%s been done.\n",
        f-&gt;tried_implicit ? "" : " not");
</screen>   </para>

   <para>
Adding <userinput>gettext</userinput> calls to this code cannot give correct results for
all languages, because negation in some languages requires adding words
at more than one place in the sentence.  By contrast, adding
<userinput>gettext</userinput> calls does the job straightfowardly if the code starts
out like this:
   </para>

   <para><screen>
printf (f-&gt;tried_implicit
        ? "#  Implicit rule search has been done.\n",
        : "#  Implicit rule search has not been done.\n");
</screen>   </para>
</sect1>
  <sect1 id="standards-Mmap">
   <title>Mmap</title>
   <para>
<indexterm scope="standards-fn"><primary>mmap</primary></indexterm>
Don't assume that <userinput>mmap</userinput> either works on all files or fails
for all files.  It may work on some files and fail on others.
   </para>
   <para>
The proper way to use <userinput>mmap</userinput> is to try it on the specific file for
which you want to use it--and if <userinput>mmap</userinput> doesn't work, fall back on
doing the job in another way using <userinput>read</userinput> and <userinput>write</userinput>.
   </para>
   <para>
The reason this precaution is needed is that the GNU kernel (the HURD)
provides a user-extensible file system, in which there can be many
different kinds of "ordinary files."  Many of them support
<userinput>mmap</userinput>, but some do not.  It is important to make programs handle
all these kinds of files.
   </para></sect1></chapter>
 <chapter id="standards-Documentation">
  <title>Documenting Programs</title>
  <para>
<indexterm scope="standards-cp"><primary>documentation</primary></indexterm>
A GNU program should ideally come with full free documentation, adequate
for both reference and tutorial purposes.  If the package can be
programmed or extended, the documentation should cover programming or
extending it, as well as just using it.
  </para>

  <sect1 id="standards-GNU-Manuals">
   <title>GNU Manuals</title>
   <para>
The preferred document format for the GNU system is the Texinfo
formatting language.  Every GNU package should (ideally) have
documentation in Texinfo both for reference and for learners.  Texinfo
makes it possible to produce a good quality formatted book, using
TeX, and to generate an Info file.  It is also possible to generate
HTML output from Texinfo source.  See the Texinfo manual, either the
hardcopy, or the on-line version available through <userinput>info</userinput> or the
Emacs Info subsystem (<userinput>C-h i</userinput>).
   </para>
   <para>
Nowadays some other formats such as Docbook and Sgmltexi can be
converted automatically into Texinfo.  It is ok to produce the Texinfo
documentation by conversion this way, as long as it gives good results.
   </para>
   <para>
Programmers often find it most natural to structure the documentation
following the structure of the implementation, which they know.  But
this structure is not necessarily good for explaining how to use the
program; it may be irrelevant and confusing for a user.
   </para>
   <para>
At every level, from the sentences in a paragraph to the grouping of
topics into separate manuals, the right way to structure documentation
is according to the concepts and questions that a user will have in mind
when reading it.  Sometimes this structure of ideas matches the
structure of the implementation of the software being documented--but
often they are different.  Often the most important part of learning to
write good documentation is learning to notice when you are structuring
the documentation like the implementation, and think about better
alternatives.
   </para>
   <para>
For example, each program in the GNU system probably ought to be
documented in one manual; but this does not mean each program should
have its own manual.  That would be following the structure of the
implementation, rather than the structure that helps the user
understand.
   </para>
   <para>
Instead, each manual should cover a coherent <emphasis>topic</emphasis>.  For example,
instead of a manual for <userinput>diff</userinput> and a manual for <userinput>diff3</userinput>, we
have one manual for "comparison of files" which covers both of those
programs, as well as <userinput>cmp</userinput>.  By documenting these programs
together, we can make the whole subject clearer.
   </para>
   <para>
The manual which discusses a program should certainly document all of
the program's command-line options and all of its commands.  It should
give examples of their use.  But don't organize the manual as a list
of features.  Instead, organize it logically, by subtopics.  Address
the questions that a user will ask when thinking about the job that
the program does.  Don't just tell the reader what each feature can
do--say what jobs it is good for, and show how to use it for those
jobs.  Explain what is recommended usage, and what kinds of usage
users should avoid.
   </para>
   <para>
In general, a GNU manual should serve both as tutorial and reference.
It should be set up for convenient access to each topic through Info,
and for reading straight through (appendixes aside).  A GNU manual
should give a good introduction to a beginner reading through from the
start, and should also provide all the details that hackers want.
The Bison manual is a good example of this--please take a look at it
to see what we mean.
   </para>
   <para>
That is not as hard as it first sounds.  Arrange each chapter as a
logical breakdown of its topic, but order the sections, and write their
text, so that reading the chapter straight through makes sense.  Do
likewise when structuring the book into chapters, and when structuring a
section into paragraphs.  The watchword is, <emphasis>at each point, address
the most fundamental and important issue raised by the preceding text.</emphasis>
   </para>
   <para>
If necessary, add extra chapters at the beginning of the manual which
are purely tutorial and cover the basics of the subject.  These provide
the framework for a beginner to understand the rest of the manual.  The
Bison manual provides a good example of how to do this.
   </para>
   <para>
To serve as a reference, a manual should have an Index that list all the
functions, variables, options, and important concepts that are part of
the program.  One combined Index should do for a short manual, but
sometimes for a complex package it is better to use multiple indices.
The Texinfo manual includes advice on preparing good index entries, see
, and see .
   </para>
   <para>
Don't use Unix man pages as a model for how to write GNU documentation;
most of them are terse, badly structured, and give inadequate
explanation of the underlying concepts.  (There are, of course, some
exceptions.)  Also, Unix man pages use a particular format which is
different from what we use in GNU manuals.
   </para>
   <para>
Please include an email address in the manual for where to report
bugs <emphasis>in the text of the manual</emphasis>.
   </para>
   <para>
Please do not use the term "pathname" that is used in Unix
documentation; use "file name" (two words) instead.  We use the term
"path" only for search paths, which are lists of directory names.
   </para>
   <para>
Please do not use the term "illegal" to refer to erroneous input to
a computer program.  Please use "invalid" for this, and reserve the
term "illegal" for activities prohibited by law.
   </para></sect1>
  <sect1 id="standards-Doc-Strings-and-Manuals">
   <title>Doc Strings and Manuals</title>
   <para>
Some programming systems, such as Emacs, provide a documentation string
for each function, command or variable.  You may be tempted to write a
reference manual by compiling the documentation strings and writing a
little additional text to go around them--but you must not do it.  That
approach is a fundamental mistake.  The text of well-written
documentation strings will be entirely wrong for a manual.
   </para>
   <para>
A documentation string needs to stand alone--when it appears on the
screen, there will be no other text to introduce or explain it.
Meanwhile, it can be rather informal in style.
   </para>
   <para>
The text describing a function or variable in a manual must not stand
alone; it appears in the context of a section or subsection.  Other text
at the beginning of the section should explain some of the concepts, and
should often make some general points that apply to several functions or
variables.  The previous descriptions of functions and variables in the
section will also have given information about the topic.  A description
written to stand alone would repeat some of that information; this
redundance looks bad.  Meanwhile, the informality that is acceptable in
a documentation string is totally unacceptable in a manual.
   </para>
   <para>
The only good way to use documentation strings in writing a good manual
is to use them as a source of information for writing good text.
   </para></sect1>
  <sect1 id="standards-Manual-Structure-Details">
   <title>Manual Structure Details</title>
   <para>
<indexterm scope="standards-cp"><primary>manual structure</primary></indexterm>
The title page of the manual should state the version of the programs or
packages documented in the manual.  The Top node of the manual should
also contain this information.  If the manual is changing more
frequently than or independent of the program, also state a version
number for the manual in both of these places.
   </para>
   <para>
Each program documented in the manual should have a node named
<userinput><varname>program</varname> Invocation</userinput> or <userinput>Invoking <varname>program</varname></userinput>.  This
node (together with its subnodes, if any) should describe the program's
command line arguments and how to run it (the sort of information people
would look in a man page for).  Start with an <userinput>@example</userinput>
containing a template for all the options and arguments that the program
uses.
   </para>
   <para>
Alternatively, put a menu item in some menu whose item name fits one of
the above patterns.  This identifies the node which that item points to
as the node for this purpose, regardless of the node's actual name.
   </para>
   <para>
The <userinput>-usage</userinput> feature of the Info reader looks for such a node
or menu item in order to find the relevant text, so it is essential
for every Texinfo file to have one.
   </para>
   <para>
If one manual describes several programs, it should have such a node for
each program described in the manual.
   </para></sect1>
  <sect1 id="standards-License-for-Manuals">
   <title>License for Manuals</title>
   <para>
<indexterm scope="standards-cp"><primary>license for manuals</primary></indexterm>
Please use the GNU Free Documentation License for all GNU manuals that
are more than a few pages long.  Likewise for a collection of short
documents--you only need one copy of the GNU FDL for the whole
collection.  For a single short document, you can use a very permissive
non-copyleft license, to avoid taking up space with a long license.
   </para>
   <para>
See http://www.gnu.org/copyleft/fdl-howto.html for more explanation
of how to employ the GFDL.
   </para>
   <para>
Note that it is not obligatory to include a copy of the GNU GPL or GNU
LGPL in a manual whose license is neither the GPL nor the LGPL.  It can
be a good idea to include the program's license in a large manual; in a
short manual, whose size would be increased considerably by including
the program's license, it is probably better not to include it.
   </para></sect1>
  <sect1 id="standards-Manual-Credits">
   <title>Manual Credits</title>
   <para>
<indexterm scope="standards-cp"><primary>credits for manuals</primary></indexterm>
Please credit the principal human writers of the manual as the authors,
on the title page of the manual.  If a company sponsored the work, thank
the company in a suitable place in the manual, but do not cite the
company as an author.
   </para></sect1>
  <sect1 id="standards-Printed-Manuals">
   <title>Printed Manuals</title>
   <para>
The FSF publishes some GNU manuals in printed form.  To encourage sales
of these manuals, the on-line versions of the manual should mention at
the very start that the printed manual is available and should point at
information for getting it--for instance, with a link to the page
<wordasword>http://www.gnu.org/order/order.html</wordasword>.  This should not be included
in the printed manual, though, because there it is redundant.
   </para>
   <para>
It is also useful to explain in the on-line forms of the manual how the
user can print out the manual from the sources.
   </para></sect1>
  <sect1 id="standards-NEWS-File">
   <title>The NEWS File</title>
   <para>
<indexterm scope="standards-cp"><primary><userinput>NEWS</userinput> file</primary></indexterm>
In addition to its manual, the package should have a file named
<userinput>NEWS</userinput> which contains a list of user-visible changes worth
mentioning.  In each new release, add items to the front of the file and
identify the version they pertain to.  Don't discard old items; leave
them in the file after the newer items.  This way, a user upgrading from
any previous version can see what is new.
   </para>
   <para>
If the <userinput>NEWS</userinput> file gets very long, move some of the older items
into a file named <userinput>ONEWS</userinput> and put a note at the end referring the
user to that file.
   </para></sect1>
  <sect1 id="standards-Change-Logs">
   <title>Change Logs</title>
   <para>
<indexterm scope="standards-cp"><primary>change logs</primary></indexterm>
Keep a change log to describe all the changes made to program source
files.  The purpose of this is so that people investigating bugs in the
future will know about the changes that might have introduced the bug.
Often a new bug can be found by looking at what was recently changed.
More importantly, change logs can help you eliminate conceptual
inconsistencies between different parts of a program, by giving you a
history of how the conflicting concepts arose and who they came from.
   </para>

   <sect2 id="standards-Change-Log-Concepts">
    <title>Change Log Concepts</title>
    <para>
You can think of the change log as a conceptual "undo list" which
explains how earlier versions were different from the current version.
People can see the current version; they don't need the change log
to tell them what is in it.  What they want from a change log is a
clear explanation of how the earlier version differed.
    </para>
    <para>
The change log file is normally called <userinput>ChangeLog</userinput> and covers an
entire directory.  Each directory can have its own change log, or a
directory can use the change log of its parent directory-it's up to
you.
    </para>
    <para>
Another alternative is to record change log information with a version
control system such as RCS or CVS.  This can be converted automatically
to a <userinput>ChangeLog</userinput> file using <userinput>rcs2log</userinput>; in Emacs, the command
<userinput>C-x v a</userinput> (<userinput>vc-update-change-log</userinput>) does the job.
    </para>
    <para>
There's no need to describe the full purpose of the changes or how they
work together.  If you think that a change calls for explanation, you're
probably right.  Please do explain it--but please put the explanation
in comments in the code, where people will see it whenever they see the
code.  For example, "New function" is enough for the change log when
you add a function, because there should be a comment before the
function definition to explain what it does.
    </para>
    <para>
In the past, we recommended not mentioning changes in non-software
files (manuals, help files, etc.) in change logs.  However, we've been
advised that it is a good idea to include them, for the sake of
copyright records.
    </para>
    <para>
However, sometimes it is useful to write one line to describe the
overall purpose of a batch of changes.
    </para>
    <para>
The easiest way to add an entry to <userinput>ChangeLog</userinput> is with the Emacs
command <userinput>M-x add-change-log-entry</userinput>.  An entry should have an
asterisk, the name of the changed file, and then in parentheses the name
of the changed functions, variables or whatever, followed by a colon.
Then describe the changes you made to that function or variable.
    </para></sect2>
   <sect2 id="standards-Style-of-Change-Logs">
    <title>Style of Change Logs</title>
    <para>
<indexterm scope="standards-cp"><primary>change logs, style</primary></indexterm>
Here are some simple examples of change log entries, starting with the
header line that says who made the change and when it was installed,
followed by descriptions of specific changes.  (These examples are
drawn from Emacs and GCC.)
    </para>
    <para><screen>1998-08-17  Richard Stallman  &lt;rms@gnu.org&gt;

* register.el (insert-register): Return nil.
(jump-to-register): Likewise.

* sort.el (sort-subr): Return nil.

* tex-mode.el (tex-bibtex-file, tex-file, tex-region):
Restart the tex shell if process is gone or stopped.
(tex-shell-running): New function.

* expr.c (store_one_arg): Round size up for move_block_to_reg.
(expand_call): Round up when emitting USE insns.
* stmt.c (assign_parms): Round size up for move_block_from_reg.
</screen>       </para>
    <para>
It's important to name the changed function or variable in full.  Don't
abbreviate function or variable names, and don't combine them.
Subsequent maintainers will often search for a function name to find all
the change log entries that pertain to it; if you abbreviate the name,
they won't find it when they search.
    </para>
    <para>
For example, some people are tempted to abbreviate groups of function
names by writing <userinput>* register.el ({insert,jump-to}-register)</userinput>;
this is not a good idea, since searching for <userinput>jump-to-register</userinput> or
<userinput>insert-register</userinput> would not find that entry.
    </para>
    <para>
Separate unrelated change log entries with blank lines.  When two
entries represent parts of the same change, so that they work together,
then don't put blank lines between them.  Then you can omit the file
name and the asterisk when successive entries are in the same file.
    </para>
    <para>
Break long lists of function names by closing continued lines with
<userinput>)</userinput>, rather than <userinput>,</userinput>, and opening the continuation with
<userinput>(</userinput> as in this example:
    </para>
    <para><screen>
* keyboard.c (menu_bar_items, tool_bar_items)
(Fexecute_extended_command): Deal with `keymap' property.
</screen>       </para>
    <para>
When you install someone else's changes, put the contributor's name in
the change log entry rather than in the text of the entry.  In other
words, write this:
    </para>
    <para><screen>
2002-07-14  John Doe  &lt;jdoe@gnu.org&gt;

        * sewing.c: Make it sew.
</screen>       </para>

    <para>
rather than this:
    </para>

    <para><screen>
2002-07-14  Usual Maintainer  &lt;usual@gnu.org&gt;

        * sewing.c: Make it sew.  Patch by jdoe@gnu.org.
</screen>    </para>
    <para>
As for the date, that should be the date you applied the change.
    </para>
</sect2>
   <sect2 id="standards-Simple-Changes">
    <title>Simple Changes</title>
    <para>
Certain simple kinds of changes don't need much detail in the change
log.
    </para>
    <para>
When you change the calling sequence of a function in a simple fashion,
and you change all the callers of the function to use the new calling
sequence, there is no need to make individual entries for all the
callers that you changed.  Just write in the entry for the function
being called, "All callers changed"--like this:
    </para>
    <para><screen>* keyboard.c (Fcommand_execute): New arg SPECIAL.
All callers changed.
</screen>       </para>
    <para>
When you change just comments or doc strings, it is enough to write an
entry for the file, without mentioning the functions.  Just "Doc
fixes" is enough for the change log.
    </para>
    <para>
There's no technical need to make change log entries for documentation
files.  This is because documentation is not susceptible to bugs that
are hard to fix.  Documentation does not consist of parts that must
interact in a precisely engineered fashion.  To correct an error, you
need not know the history of the erroneous passage; it is enough to
compare what the documentation says with the way the program actually
works.
    </para>
    <para>
However, you should keep change logs for documentation files when the
project gets copyright assignments from its contributors, so as to
make the records of authorship more accurate.
    </para>
</sect2>
   <sect2 id="standards-Conditional-Changes">
    <title>Conditional Changes</title>
    <para>
<indexterm scope="standards-cp"><primary>conditional changes, and change logs</primary></indexterm>
<indexterm scope="standards-cp"><primary>change logs, conditional changes</primary></indexterm>
C programs often contain compile-time <userinput>#if</userinput> conditionals.  Many
changes are conditional; sometimes you add a new definition which is
entirely contained in a conditional.  It is very useful to indicate in
the change log the conditions for which the change applies.
    </para>
    <para>
Our convention for indicating conditional changes is to use square
brackets around the name of the condition.
    </para>
    <para>
Here is a simple example, describing a change which is conditional but
does not have a function or entity name associated with it:
    </para>
    <para><screen>* xterm.c [SOLARIS2]: Include string.h.
</screen>       </para>
    <para>
Here is an entry describing a new definition which is entirely
conditional.  This new definition for the macro <userinput>FRAME_WINDOW_P</userinput> is
used only when <userinput>HAVE_X_WINDOWS</userinput> is defined:
    </para>
    <para><screen>
* frame.h [HAVE_X_WINDOWS] (FRAME_WINDOW_P): Macro defined.
</screen>       </para>
    <para>
Here is an entry for a change within the function <userinput>init_display</userinput>,
whose definition as a whole is unconditional, but the changes themselves
are contained in a <userinput>#ifdef HAVE_LIBNCURSES</userinput> conditional:
    </para>
    <para><screen>
* dispnew.c (init_display) [HAVE_LIBNCURSES]: If X, call tgetent.
</screen>       </para>
    <para>
Here is an entry for a change that takes affect only when
a certain macro is <emphasis>not</emphasis> defined:
    </para>
    <para><screen>
(gethostname) [!HAVE_SOCKETS]: Replace with winsock version.
</screen>       </para>
</sect2>
   <sect2 id="standards-Indicating-the-Part-Changed">
    <title>Indicating the Part Changed</title>
    <para>
Indicate the part of a function which changed by using angle brackets
enclosing an indication of what the changed part does.  Here is an entry
for a change in the part of the function <userinput>sh-while-getopts</userinput> that
deals with <userinput>sh</userinput> commands:
    </para>
    <para><screen>* progmodes/sh-script.el (sh-while-getopts) &lt;sh&gt;: Handle case that
user-specified option string is empty.
</screen>       </para>
</sect2></sect1>
  <sect1 id="standards-Man-Pages">
   <title>Man Pages</title>
   <para>
<indexterm scope="standards-cp"><primary>man pages</primary></indexterm>
In the GNU project, man pages are secondary.  It is not necessary or
expected for every GNU program to have a man page, but some of them do.
It's your choice whether to include a man page in your program.
   </para>
   <para>
When you make this decision, consider that supporting a man page
requires continual effort each time the program is changed.  The time
you spend on the man page is time taken away from more useful work.
   </para>
   <para>
For a simple program which changes little, updating the man page may be
a small job.  Then there is little reason not to include a man page, if
you have one.
   </para>
   <para>
For a large program that changes a great deal, updating a man page may
be a substantial burden.  If a user offers to donate a man page, you may
find this gift costly to accept.  It may be better to refuse the man
page unless the same person agrees to take full responsibility for
maintaining it--so that you can wash your hands of it entirely.  If
this volunteer later ceases to do the job, then don't feel obliged to
pick it up yourself; it may be better to withdraw the man page from the
distribution until someone else agrees to update it.
   </para>
   <para>
When a program changes only a little, you may feel that the
discrepancies are small enough that the man page remains useful without
updating.  If so, put a prominent note near the beginning of the man
page explaining that you don't maintain it and that the Texinfo manual
is more authoritative.  The note should say how to access the Texinfo
documentation.
   </para></sect1>
  <sect1 id="standards-Reading-other-Manuals">
   <title>Reading other Manuals</title>
   <para>
There may be non-free books or documentation files that describe the
program you are documenting.
   </para>
   <para>
It is ok to use these documents for reference, just as the author of a
new algebra textbook can read other books on algebra.  A large portion
of any non-fiction book consists of facts, in this case facts about how
a certain program works, and these facts are necessarily the same for
everyone who writes about the subject.  But be careful not to copy your
outline structure, wording, tables or examples from preexisting non-free
documentation.  Copying from free documentation may be ok; please check
with the FSF about the individual case.
   </para></sect1></chapter>
 <chapter id="standards-Managing-Releases">
  <title>The Release Process</title>
  <para>
<indexterm scope="standards-cp"><primary>releasing</primary></indexterm>
Making a release is more than just bundling up your source files in a
tar file and putting it up for FTP.  You should set up your software so
that it can be configured to run on a variety of systems.  Your Makefile
should conform to the GNU standards described below, and your directory
layout should also conform to the standards discussed below.  Doing so
makes it easy to include your package into the larger framework of
all GNU software.
  </para>

  <sect1 id="standards-Configuration">
   <title>How Configuration Should Work</title>
   <para>
<indexterm scope="standards-cp"><primary>program configuration</primary></indexterm>
<indexterm scope="standards-pg"><primary>configure</primary></indexterm>
Each GNU distribution should come with a shell script named
<userinput>configure</userinput>.  This script is given arguments which describe the
kind of machine and system you want to compile the program for.
   </para>
   <para>
The <userinput>configure</userinput> script must record the configuration options so
that they affect compilation.
   </para>
   <para>
One way to do this is to make a link from a standard name such as
<userinput>config.h</userinput> to the proper configuration file for the chosen system.
If you use this technique, the distribution should <emphasis>not</emphasis> contain a
file named <userinput>config.h</userinput>.  This is so that people won't be able to
build the program without configuring it first.
   </para>
   <para>
Another thing that <userinput>configure</userinput> can do is to edit the Makefile.  If
you do this, the distribution should <emphasis>not</emphasis> contain a file named
<userinput>Makefile</userinput>.  Instead, it should include a file <userinput>Makefile.in</userinput> which
contains the input used for editing.  Once again, this is so that people
won't be able to build the program without configuring it first.
   </para>
   <para>
If <userinput>configure</userinput> does write the <userinput>Makefile</userinput>, then <userinput>Makefile</userinput>
should have a target named <userinput>Makefile</userinput> which causes <userinput>configure</userinput>
to be rerun, setting up the same configuration that was set up last
time.  The files that <userinput>configure</userinput> reads should be listed as
dependencies of <userinput>Makefile</userinput>.
   </para>
   <para>
All the files which are output from the <userinput>configure</userinput> script should
have comments at the beginning explaining that they were generated
automatically using <userinput>configure</userinput>.  This is so that users won't think
of trying to edit them by hand.
   </para>
   <para>
The <userinput>configure</userinput> script should write a file named <userinput>config.status</userinput>
which describes which configuration options were specified when the
program was last configured.  This file should be a shell script which,
if run, will recreate the same configuration.
   </para>
   <para>
The <userinput>configure</userinput> script should accept an option of the form
<userinput>-srcdir=<varname>dirname</varname></userinput> to specify the directory where sources are found
(if it is not the current directory).  This makes it possible to build
the program in a separate directory, so that the actual source directory
is not modified.
   </para>
   <para>
If the user does not specify <userinput>-srcdir</userinput>, then <userinput>configure</userinput> should
check both <userinput>.</userinput> and <userinput>..</userinput> to see if it can find the sources.  If
it finds the sources in one of these places, it should use them from
there.  Otherwise, it should report that it cannot find the sources, and
should exit with nonzero status.
   </para>
   <para>
Usually the easy way to support <userinput>-srcdir</userinput> is by editing a
definition of <userinput>VPATH</userinput> into the Makefile.  Some rules may need to
refer explicitly to the specified source directory.  To make this
possible, <userinput>configure</userinput> can add to the Makefile a variable named
<userinput>srcdir</userinput> whose value is precisely the specified directory.
   </para>
   <para>
The <userinput>configure</userinput> script should also take an argument which specifies the
type of system to build the program for.  This argument should look like
this:
   </para>
   <para><screen><varname>cpu</varname>-<varname>company</varname>-<varname>system</varname>
</screen>      </para>
   <para>
For example, an Athlon-based GNU/Linux system might be
<userinput>i686-pc-linux-gnu</userinput>.
   </para>
   <para>
The <userinput>configure</userinput> script needs to be able to decode all plausible
alternatives for how to describe a machine.  Thus,
<userinput>athlon-pc-gnu/linux</userinput> would be a valid alias.
There is a shell script called
ftp://ftp.gnu.org/gnu/config/config.sub<userinput>config.sub</userinput>
that you can use
as a subroutine to validate system types and canonicalize aliases.
   </para>
   <para>
The <userinput>configure</userinput> script should also take the option
<userinput>-build=<varname>buildtype</varname></userinput>, which should be equivalent to a
plain <varname>buildtype</varname> argument.  For example, <userinput>configure
-build=i686-pc-linux-gnu</userinput> is equivalent to <userinput>configure
i686-pc-linux-gnu</userinput>.  When the build type is not specified by an option
or argument, the <userinput>configure</userinput> script should normally guess it
using the shell script
ftp://ftp.gnu.org/gnu/config/config.guess<userinput>config.guess</userinput>.
   </para>
   <para>
<indexterm scope="standards-cp"><primary>optional features, configure-time</primary></indexterm>
Other options are permitted to specify in more detail the software
or hardware present on the machine, and include or exclude optional
parts of the package:
   </para>

   <variablelist>
    <varlistentry>
     <term><literal>-enable-<varname>feature</varname>[=<varname>parameter</varname>]</literal></term>
     <listitem>
      <para>
Configure the package to build and install an optional user-level
facility called <varname>feature</varname>.  This allows users to choose which
optional features to include.  Giving an optional <varname>parameter</varname> of
<userinput>no</userinput> should omit <varname>feature</varname>, if it is built by default.
      </para>

      <para>
No <userinput>-enable</userinput> option should <emphasis>ever</emphasis> cause one feature to
replace another.  No <userinput>-enable</userinput> option should ever substitute one
useful behavior for another useful behavior.  The only proper use for
<userinput>-enable</userinput> is for questions of whether to build part of the program
or exclude it.
      </para>
</listitem></varlistentry>
    <varlistentry>
     <term><literal>-with-<varname>package</varname></literal></term>
     <listitem>
      <para>
The package <varname>package</varname> will be installed, so configure this package
to work with <varname>package</varname>.
      </para>


      <para>
Possible values of <varname>package</varname> include
<userinput>gnu-as</userinput> (or <userinput>gas</userinput>), <userinput>gnu-ld</userinput>, <userinput>gnu-libc</userinput>,
<userinput>gdb</userinput>,
<userinput>x</userinput>,
and
<userinput>x-toolkit</userinput>.
      </para>

      <para>
Do not use a <userinput>-with</userinput> option to specify the file name to use to
find certain files.  That is outside the scope of what <userinput>-with</userinput>
options are for.
      </para></listitem></varlistentry></variablelist>
   <para>
All <userinput>configure</userinput> scripts should accept all of these "detail"
options, whether or not they make any difference to the particular
package at hand.  In particular, they should accept any option that
starts with <userinput>-with-</userinput> or <userinput>-enable-</userinput>.  This is so users will
be able to configure an entire GNU source tree at once with a single set
of options.
   </para>
   <para>
You will note that the categories <userinput>-with-</userinput> and <userinput>-enable-</userinput>
are narrow: they <emphasis>do not</emphasis> provide a place for any sort of option
you might think of.  That is deliberate.  We want to limit the possible
configuration options in GNU software.  We do not want GNU programs to
have idiosyncratic configuration options.
   </para>
   <para>
Packages that perform part of the compilation process may support
cross-compilation.  In such a case, the host and target machines for the
program may be different.
   </para>
   <para>
The <userinput>configure</userinput> script should normally treat the specified type of
system as both the host and the target, thus producing a program which
works for the same type of machine that it runs on.
   </para>
   <para>
To compile a program to run on a host type that differs from the build
type, use the configure option <userinput>-host=<varname>hosttype</varname></userinput>, where
<varname>hosttype</varname> uses the same syntax as <varname>buildtype</varname>.  The host type
normally defaults to the build type.
   </para>
   <para>
To configure a cross-compiler, cross-assembler, or what have you, you
should specify a target different from the host, using the configure
option <userinput>-target=<varname>targettype</varname></userinput>.  The syntax for
<varname>targettype</varname> is the same as for the host type.  So the command would
look like this:
   </para>
   <para><screen>
./configure --host=<varname>hosttype</varname> --target=<varname>targettype</varname>
</screen>      </para>
   <para>
The target type normally defaults to the host type.
Programs for which cross-operation is not meaningful need not accept the
<userinput>-target</userinput> option, because configuring an entire operating system for
cross-operation is not a meaningful operation.
   </para>
   <para>
Some programs have ways of configuring themselves automatically.  If
your program is set up to do this, your <userinput>configure</userinput> script can simply
ignore most of its arguments.
   </para>
</sect1>
  <chapter id="standards-Makefile-Conventions">
   <title>Makefile Conventions</title>
   <para>
<indexterm scope="standards-cp"><primary>makefile, conventions for</primary></indexterm>
<indexterm scope="standards-cp"><primary>conventions for makefiles</primary></indexterm>
<indexterm scope="standards-cp"><primary>standards for makefiles</primary></indexterm>
   </para>
   <para>
This chapter describes conventions for writing the Makefiles for GNU programs.
Using Automake will help you write a Makefile that follows these
conventions.
   </para>

   <sect1 id="standards-Makefile-Basics">
    <title>General Conventions for Makefiles</title>
    <para>
Every Makefile should contain this line:
    </para>
    <para><screen>SHELL = /bin/sh
</screen>       </para>

    <para>
to avoid trouble on systems where the <userinput>SHELL</userinput> variable might be
inherited from the environment.  (This is never a problem with GNU
<userinput>make</userinput>.)
    </para>

    <para>
Different <userinput>make</userinput> programs have incompatible suffix lists and
implicit rules, and this sometimes creates confusion or misbehavior.  So
it is a good idea to set the suffix list explicitly using only the
suffixes you need in the particular Makefile, like this:
    </para>

    <para><screen>
.SUFFIXES:
.SUFFIXES: .c .o
</screen>    </para>

    <para>
The first line clears out the suffix list, the second introduces all
suffixes which may be subject to implicit rules in this Makefile.
    </para>

    <para>
Don't assume that <userinput>.</userinput> is in the path for command execution.  When
you need to run programs that are a part of your package during the
make, please make sure that it uses <userinput>./</userinput> if the program is built as
part of the make or <userinput>$(srcdir)/</userinput> if the file is an unchanging part
of the source code.  Without one of these prefixes, the current search
path is used.
    </para>

    <para>
The distinction between <userinput>./</userinput> (the <firstterm>build directory</firstterm>) and
<userinput>$(srcdir)/</userinput> (the <firstterm>source directory</firstterm>) is important because
users can build in a separate directory using the <userinput>-srcdir</userinput> option
to <userinput>configure</userinput>.  A rule of the form:
    </para>

    <para><screen>
foo.1 : foo.man sedscript
        sed -e sedscript foo.man &gt; foo.1
</screen>    </para>

    <para>
will fail when the build directory is not the source directory, because
<userinput>foo.man</userinput> and <userinput>sedscript</userinput> are in the source directory.
    </para>

    <para>
When using GNU <userinput>make</userinput>, relying on <userinput>VPATH</userinput> to find the source
file will work in the case where there is a single dependency file,
since the <userinput>make</userinput> automatic variable <userinput>$&lt;</userinput> will represent the
source file wherever it is.  (Many versions of <userinput>make</userinput> set <userinput>$&lt;</userinput>
only in implicit rules.)  A Makefile target like
    </para>

    <para><screen>
foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o
</screen>    </para>

    <para>
should instead be written as
    </para>

    <para><screen>
foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&lt; -o $@
</screen>    </para>

    <para>
in order to allow <userinput>VPATH</userinput> to work correctly.  When the target has
multiple dependencies, using an explicit <userinput>$(srcdir)</userinput> is the easiest
way to make the rule work well.  For example, the target above for
<userinput>foo.1</userinput> is best written as:
    </para>

    <para><screen>
foo.1 : foo.man sedscript
        sed -e $(srcdir)/sedscript $(srcdir)/foo.man &gt; $@
</screen>    </para>
    <para>
GNU distributions usually contain some files which are not source
files--for example, Info files, and the output from Autoconf, Automake,
Bison or Flex.  Since these files normally appear in the source
directory, they should always appear in the source directory, not in the
build directory.  So Makefile rules to update them should put the
updated files in the source directory.
    </para>
    <para>
However, if a file does not appear in the distribution, then the
Makefile should not put it in the source directory, because building a
program in ordinary circumstances should not modify the source directory
in any way.
    </para>
    <para>
Try to make the build and installation targets, at least (and all their
subtargets) work correctly with a parallel <userinput>make</userinput>.
    </para>
</sect1>
   <sect1 id="standards-Utilities-in-Makefiles">
    <title>Utilities in Makefiles</title>
    <para>
Write the Makefile commands (and any shell scripts, such as
<userinput>configure</userinput>) to run in <userinput>sh</userinput>, not in <userinput>csh</userinput>.  Don't use any
special features of <userinput>ksh</userinput> or <userinput>bash</userinput>.
    </para>
    <para>
The <userinput>configure</userinput> script and the Makefile rules for building and
installation should not use any utilities directly except these:
    </para>
    <para><screen>cat cmp cp diff echo egrep expr false grep install-info
ln ls mkdir mv pwd rm rmdir sed sleep sort tar test touch true
</screen>       </para>
    <para>
The compression program <userinput>gzip</userinput> can be used in the <userinput>dist</userinput> rule.
    </para>
    <para>
Stick to the generally supported options for these programs.  For
example, don't use <userinput>mkdir -p</userinput>, convenient as it may be, because
most systems don't support it.
    </para>
    <para>
It is a good idea to avoid creating symbolic links in makefiles, since a
few systems don't support them.
    </para>
    <para>
The Makefile rules for building and installation can also use compilers
and related programs, but should do so via <userinput>make</userinput> variables so that the
user can substitute alternatives.  Here are some of the programs we
mean:
    </para>
    <para><screen>
ar bison cc flex install ld ldconfig lex
make makeinfo ranlib texi2dvi yacc
</screen>       </para>
    <para>
Use the following <userinput>make</userinput> variables to run those programs:
    </para>
    <para><screen>
$(AR) $(BISON) $(CC) $(FLEX) $(INSTALL) $(LD) $(LDCONFIG) $(LEX)
$(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)
</screen>       </para>
    <para>
When you use <userinput>ranlib</userinput> or <userinput>ldconfig</userinput>, you should make sure
nothing bad happens if the system does not have the program in question.
Arrange to ignore an error from that command, and print a message before
the command to tell the user that failure of this command does not mean
a problem.  (The Autoconf <userinput>AC_PROG_RANLIB</userinput> macro can help with
this.)
    </para>
    <para>
If you use symbolic links, you should implement a fallback for systems
that don't have symbolic links.
    </para>
    <para>
Additional utilities that can be used via Make variables are:
    </para>
    <para><screen>
chgrp chmod chown mknod
</screen>       </para>
    <para>
It is ok to use other utilities in Makefile portions (or scripts)
intended only for particular systems where you know those utilities
exist.
    </para>
</sect1>
   <sect1 id="standards-Command-Variables">
    <title>Variables for Specifying Commands</title>
    <para>
Makefiles should provide variables for overriding certain commands, options,
and so on.
    </para>
    <para>
In particular, you should run most utility programs via variables.
Thus, if you use Bison, have a variable named <userinput>BISON</userinput> whose default
value is set with <userinput>BISON = bison</userinput>, and refer to it with
<userinput>$(BISON)</userinput> whenever you need to use Bison.
    </para>
    <para>
File management utilities such as <userinput>ln</userinput>, <userinput>rm</userinput>, <userinput>mv</userinput>, and
so on, need not be referred to through variables in this way, since users
don't need to replace them with other programs.
    </para>
    <para>
Each program-name variable should come with an options variable that is
used to supply options to the program.  Append <userinput>FLAGS</userinput> to the
program-name variable name to get the options variable name--for
example, <userinput>BISONFLAGS</userinput>.  (The names <userinput>CFLAGS</userinput> for the C
compiler, <userinput>YFLAGS</userinput> for yacc, and <userinput>LFLAGS</userinput> for lex, are
exceptions to this rule, but we keep them because they are standard.)
Use <userinput>CPPFLAGS</userinput> in any compilation command that runs the
preprocessor, and use <userinput>LDFLAGS</userinput> in any compilation command that
does linking as well as in any direct use of <userinput>ld</userinput>.
    </para>
    <para>
If there are C compiler options that <emphasis>must</emphasis> be used for proper
compilation of certain files, do not include them in <userinput>CFLAGS</userinput>.
Users expect to be able to specify <userinput>CFLAGS</userinput> freely themselves.
Instead, arrange to pass the necessary options to the C compiler
independently of <userinput>CFLAGS</userinput>, by writing them explicitly in the
compilation commands or by defining an implicit rule, like this:
    </para>
    <para><screen>CFLAGS = -g
ALL_CFLAGS = -I. $(CFLAGS)
.c.o:
        $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $&lt;
</screen>       </para>
    <para>
Do include the <userinput>-g</userinput> option in <userinput>CFLAGS</userinput>, because that is not
<emphasis>required</emphasis> for proper compilation.  You can consider it a default
that is only recommended.  If the package is set up so that it is
compiled with GCC by default, then you might as well include <userinput>-O</userinput>
in the default value of <userinput>CFLAGS</userinput> as well.
    </para>
    <para>
Put <userinput>CFLAGS</userinput> last in the compilation command, after other variables
containing compiler options, so the user can use <userinput>CFLAGS</userinput> to
override the others.
    </para>
    <para><userinput>CFLAGS</userinput> should be used in every invocation of the C compiler,
both those which do compilation and those which do linking.
    </para>
    <para>
Every Makefile should define the variable <userinput>INSTALL</userinput>, which is the
basic command for installing a file into the system.
    </para>
    <para>
Every Makefile should also define the variables <userinput>INSTALL_PROGRAM</userinput>
and <userinput>INSTALL_DATA</userinput>.  (The default for <userinput>INSTALL_PROGRAM</userinput> should
be <userinput>$(INSTALL)</userinput>; the default for <userinput>INSTALL_DATA</userinput> should be
<userinput>${INSTALL} -m 644</userinput>.)  Then it should use those variables as the
commands for actual installation, for executables and nonexecutables
respectively.  Use these variables as follows:
    </para>
    <para><screen>
$(INSTALL_PROGRAM) foo $(bindir)/foo
$(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a
</screen>       </para>
    <para>
Optionally, you may prepend the value of <userinput>DESTDIR</userinput> to the target
filename.  Doing this allows the installer to create a snapshot of the
installation to be copied onto the real target filesystem later.  Do not
set the value of <userinput>DESTDIR</userinput> in your Makefile, and do not include it
in any installed files.  With support for <userinput>DESTDIR</userinput>, the above
examples become:
    </para>
    <para><screen>
$(INSTALL_PROGRAM) foo $(DESTDIR)$(bindir)/foo
$(INSTALL_DATA) libfoo.a $(DESTDIR)$(libdir)/libfoo.a
</screen>       </para>

    <para>
Always use a file name, not a directory name, as the second argument of
the installation commands.  Use a separate command for each file to be
installed.
    </para>

</sect1>
   <sect1 id="standards-Directory-Variables">
    <title>Variables for Installation Directories</title>

    <para>
Installation directories should always be named by variables, so it is
easy to install in a nonstandard place.  The standard names for these
variables are described below.  They are based on a standard filesystem
layout; variants of it are used in SVR4, 4.4BSD, GNU/Linux, Ultrix v4,
and other modern operating systems.
    </para>

    <para>
These two variables set the root for the installation.  All the other
installation directories should be subdirectories of one of these two,
and nothing should be directly installed into these two directories.
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>prefix</literal></term>
      <listitem>
       <para>
<indexterm scope="standards-vr"><primary>prefix</primary></indexterm>
A prefix used in constructing the default values of the variables listed
below.  The default value of <userinput>prefix</userinput> should be <userinput>/usr/local</userinput>.
When building the complete GNU system, the prefix will be empty and
<userinput>/usr</userinput> will be a symbolic link to <userinput>/</userinput>.
(If you are using Autoconf, write it as <userinput>@prefix@</userinput>.)
       </para>

       <para>
Running <userinput>make install</userinput> with a different value of <userinput>prefix</userinput> from
the one used to build the program should <emphasis>not</emphasis> recompile the
program.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>exec_prefix</literal></term>
      <listitem>
       <para>
<indexterm scope="standards-vr"><primary>exec_prefix</primary></indexterm>
A prefix used in constructing the default values of some of the
variables listed below.  The default value of <userinput>exec_prefix</userinput> should
be <userinput>$(prefix)</userinput>.
(If you are using Autoconf, write it as <userinput>@exec_prefix@</userinput>.)
       </para>

       <para>
Generally, <userinput>$(exec_prefix)</userinput> is used for directories that contain
machine-specific files (such as executables and subroutine libraries),
while <userinput>$(prefix)</userinput> is used directly for other directories.
       </para>

       <para>
Running <userinput>make install</userinput> with a different value of <userinput>exec_prefix</userinput>
from the one used to build the program should <emphasis>not</emphasis> recompile the
program.
       </para></listitem></varlistentry></variablelist>
    <para>
Executable programs are installed in one of the following directories.
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>bindir</literal></term>
      <listitem>
       <para>
<indexterm scope="standards-vr"><primary>bindir</primary></indexterm>
The directory for installing executable programs that users can run.
This should normally be <userinput>/usr/local/bin</userinput>, but write it as
<userinput>$(exec_prefix)/bin</userinput>.
(If you are using Autoconf, write it as <userinput>@bindir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>sbindir</literal></term>
      <listitem>
       <para>
<indexterm scope="standards-vr"><primary>sbindir</primary></indexterm>
The directory for installing executable programs that can be run from
the shell, but are only generally useful to system administrators.  This
should normally be <userinput>/usr/local/sbin</userinput>, but write it as
<userinput>$(exec_prefix)/sbin</userinput>.
(If you are using Autoconf, write it as <userinput>@sbindir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>libexecdir</literal></term>
      <listitem>
       <para>
<indexterm scope="standards-vr"><primary>libexecdir</primary></indexterm>
The directory for installing executable programs to be run by other
programs rather than by users.  This directory should normally be
<userinput>/usr/local/libexec</userinput>, but write it as <userinput>$(exec_prefix)/libexec</userinput>.
(If you are using Autoconf, write it as <userinput>@libexecdir@</userinput>.)
       </para></listitem></varlistentry></variablelist>
    <para>
Data files used by the program during its execution are divided into
categories in two ways.
    </para>

    <itemizedlist mark="bullet">
     <listitem>
      <para>
Some files are normally modified by programs; others are never normally
modified (though users may edit some of these).
      </para>
</listitem>
     <listitem>
      <para>
Some files are architecture-independent and can be shared by all
machines at a site; some are architecture-dependent and can be shared
only by machines of the same kind and operating system; others may never
be shared between two machines.
      </para></listitem></itemizedlist>
    <para>
This makes for six different possibilities.  However, we want to
discourage the use of architecture-dependent files, aside from object
files and libraries.  It is much cleaner to make other data files
architecture-independent, and it is generally not hard.
    </para>
    <para>
Here are the variables Makefiles should use to specify directories
to put these various kinds of files in:
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>datarootdir</literal></term>
      <listitem>
       <para>
The root of the directory tree for read-only architecture-independent
data files.  This should normally be <userinput>/usr/local/share</userinput>, but
write it as <userinput>$(prefix)/share</userinput>.  <userinput>datadir</userinput>'s default value is
based on this variable; so are <userinput>infodir</userinput>, <userinput>mandir</userinput>, and others.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>datadir</literal></term>
      <listitem>
       <para>
The directory for installing ideosyncratic read-only
architecture-independent data files for this program.  This is usually
the same place as <userinput>datarootdir</userinput>, but we use the two separate
variables so that you can move these ideosyncratic files without
altering the location for Info files, man pages, etc.
       </para>

       <para>
The default definition of <userinput>datadir</userinput> should be
<userinput>$(datarootdir)</userinput>.  (If you are using Autoconf, write it as
<userinput>@datadir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>sysconfdir</literal></term>
      <listitem>
       <para>
The directory for installing read-only data files that pertain to a
single machine-that is to say, files for configuring a host.  Mailer
and network configuration files, <userinput>/etc/passwd</userinput>, and so forth belong
here.  All the files in this directory should be ordinary ASCII text
files.  This directory should normally be <userinput>/usr/local/etc</userinput>, but
write it as <userinput>$(prefix)/etc</userinput>.
(If you are using Autoconf, write it as <userinput>@sysconfdir@</userinput>.)
       </para>

       <para>
Do not install executables here in this directory (they probably belong
in <userinput>$(libexecdir)</userinput> or <userinput>$(sbindir)</userinput>).  Also do not install
files that are modified in the normal course of their use (programs
whose purpose is to change the configuration of the system excluded).
Those probably belong in <userinput>$(localstatedir)</userinput>.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>sharedstatedir</literal></term>
      <listitem>
       <para>
The directory for installing architecture-independent data files which
the programs modify while they run.  This should normally be
<userinput>/usr/local/com</userinput>, but write it as <userinput>$(prefix)/com</userinput>.
(If you are using Autoconf, write it as <userinput>@sharedstatedir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>localstatedir</literal></term>
      <listitem>
       <para>
The directory for installing data files which the programs modify while
they run, and that pertain to one specific machine.  Users should never
need to modify files in this directory to configure the package's
operation; put such configuration information in separate files that go
in <userinput>$(datadir)</userinput> or <userinput>$(sysconfdir)</userinput>.  <userinput>$(localstatedir)</userinput>
should normally be <userinput>/usr/local/var</userinput>, but write it as
<userinput>$(prefix)/var</userinput>.
(If you are using Autoconf, write it as <userinput>@localstatedir@</userinput>.)
       </para></listitem></varlistentry></variablelist>
    <para>
These variables specify the directory for installing certain specific
types of files, if your program has them.  Every GNU package should
have Info files, so every program needs <userinput>infodir</userinput>, but not all
need <userinput>libdir</userinput> or <userinput>lispdir</userinput>.
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>includedir</literal></term>
      <listitem>
       <para>
The directory for installing header files to be included by user
programs with the C <userinput>#include</userinput> preprocessor directive.  This
should normally be <userinput>/usr/local/include</userinput>, but write it as
<userinput>$(prefix)/include</userinput>.
(If you are using Autoconf, write it as <userinput>@includedir@</userinput>.)
       </para>

       <para>
Most compilers other than GCC do not look for header files in directory
<userinput>/usr/local/include</userinput>.  So installing the header files this way is
only useful with GCC.  Sometimes this is not a problem because some
libraries are only really intended to work with GCC.  But some libraries
are intended to work with other compilers.  They should install their
header files in two places, one specified by <userinput>includedir</userinput> and one
specified by <userinput>oldincludedir</userinput>.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>oldincludedir</literal></term>
      <listitem>
       <para>
The directory for installing <userinput>#include</userinput> header files for use with
compilers other than GCC.  This should normally be <userinput>/usr/include</userinput>.
(If you are using Autoconf, you can write it as <userinput>@oldincludedir@</userinput>.)
       </para>

       <para>
The Makefile commands should check whether the value of
<userinput>oldincludedir</userinput> is empty.  If it is, they should not try to use
it; they should cancel the second installation of the header files.
       </para>

       <para>
A package should not replace an existing header in this directory unless
the header came from the same package.  Thus, if your Foo package
provides a header file <userinput>foo.h</userinput>, then it should install the header
file in the <userinput>oldincludedir</userinput> directory if either (1) there is no
<userinput>foo.h</userinput> there or (2) the <userinput>foo.h</userinput> that exists came from the Foo
package.
       </para>

       <para>
To tell whether <userinput>foo.h</userinput> came from the Foo package, put a magic
string in the file--part of a comment--and <userinput>grep</userinput> for that string.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>infodir</literal></term>
      <listitem>
       <para>
The directory for installing the Info files for this package.  By
default, it should be <userinput>/usr/local/share/info</userinput>, but it should be
written as <userinput>$(datarootdir)/info</userinput>.  (If you are using Autoconf,
write it as <userinput>@infodir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>libdir</literal></term>
      <listitem>
       <para>
The directory for object files and libraries of object code.  Do not
install executables here, they probably ought to go in <userinput>$(libexecdir)</userinput>
instead.  The value of <userinput>libdir</userinput> should normally be
<userinput>/usr/local/lib</userinput>, but write it as <userinput>$(exec_prefix)/lib</userinput>.
(If you are using Autoconf, write it as <userinput>@libdir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>lispdir</literal></term>
      <listitem>
       <para>
The directory for installing any Emacs Lisp files in this package.  By
default, it should be <userinput>/usr/local/share/emacs/site-lisp</userinput>, but it
should be written as <userinput>$(datarootdir)/emacs/site-lisp</userinput>.
       </para>

       <para>
If you are using Autoconf, write the default as <userinput>@lispdir@</userinput>.
In order to make <userinput>@lispdir@</userinput> work, you need the following lines
in your <userinput>configure.in</userinput> file:
       </para>

       <para><screen>lispdir='${datarootdir}/emacs/site-lisp'
AC_SUBST(lispdir)
</screen>            </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>localedir</literal></term>
      <listitem>
       <para>
The directory for installing locale-specific message catalogs for this
package.  By default, it should be <userinput>/usr/local/share/locale</userinput>, but
it should be written as <userinput>$(datarootdir)/locale</userinput>.  (If you are
using Autoconf, write it as <userinput>@localedir@</userinput>.)
       </para></listitem></varlistentry></variablelist>
    <para>
Unix-style man pages are installed in one of the following:
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>mandir</literal></term>
      <listitem>
       <para>
The top-level directory for installing the man pages (if any) for this
package.  It will normally be <userinput>/usr/local/share/man</userinput>, but you
should write it as <userinput>$(datarootdir)/man</userinput>.  (If you are using
Autoconf, write it as <userinput>@mandir@</userinput>.)
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>man1dir</literal></term>
      <listitem>
       <para>
The directory for installing section 1 man pages.  Write it as
<userinput>$(mandir)/man1</userinput>.
       </para></listitem></varlistentry>
     <varlistentry>
      <term><literal>man2dir</literal></term>
      <listitem>
       <para>
The directory for installing section 2 man pages.  Write it as
<userinput>$(mandir)/man2</userinput>
       </para></listitem></varlistentry>
     <varlistentry>
      <term><literal>&hellip;</literal></term>
      <listitem>

       <para><emphasis>Don't make the primary documentation for any GNU software be a
man page.  Write a manual in Texinfo instead.  Man pages are just for
the sake of people running GNU software on Unix, which is a secondary
application only.</emphasis>
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>manext</literal></term>
      <listitem>
       <para>
The file name extension for the installed man page.  This should contain
a period followed by the appropriate digit; it should normally be <userinput>.1</userinput>.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>man1ext</literal></term>
      <listitem>
       <para>
The file name extension for installed section 1 man pages.
       </para></listitem></varlistentry>
     <varlistentry>
      <term><literal>man2ext</literal></term>
      <listitem>
       <para>
The file name extension for installed section 2 man pages.
       </para></listitem></varlistentry>
     <varlistentry>
      <term><literal>&hellip;</literal></term>
      <listitem>
       <para>
Use these names instead of <userinput>manext</userinput> if the package needs to install man
pages in more than one section of the manual.
       </para></listitem></varlistentry></variablelist>
    <para>
And finally, you should set the following variable:
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>srcdir</literal></term>
      <listitem>
       <para>
The directory for the sources being compiled.  The value of this
variable is normally inserted by the <userinput>configure</userinput> shell script.
(If you are using Autconf, use <userinput>srcdir = @srcdir@</userinput>.)
       </para></listitem></varlistentry></variablelist>
    <para>
For example:
    </para>
    <para><screen>
# Common prefix for installation directories.
# NOTE: This directory must exist when you start the install.
prefix = /usr/local
datarootdir = $(prefix)/share
datadir = $(datarootdir)
exec_prefix = $(prefix)
# Where to put the executable for the command `gcc'.
bindir = $(exec_prefix)/bin
# Where to put the directories used by the compiler.
libexecdir = $(exec_prefix)/libexec
# Where to put the Info files.
infodir = $(datarootdir)/info
</screen>       </para>
    <para>
If your program installs a large number of files into one of the
standard user-specified directories, it might be useful to group them
into a subdirectory particular to that program.  If you do this, you
should write the <userinput>install</userinput> rule to create these subdirectories.
    </para>
    <para>
Do not expect the user to include the subdirectory name in the value of
any of the variables listed above.  The idea of having a uniform set of
variable names for installation directories is to enable the user to
specify the exact same values for several different GNU packages.  In
order for this to be useful, all the packages must be designed so that
they will work sensibly when the user does so.
    </para>
</sect1>
   <sect1 id="standards-Standard-Targets">
    <title>Standard Targets for Users</title>
    <para>
All GNU programs should have the following targets in their Makefiles:
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>all</literal></term>
      <listitem>
       <para>
Compile the entire program.  This should be the default target.  This
target need not rebuild any documentation files; Info files should
normally be included in the distribution, and DVI files should be made
only when explicitly asked for.
       </para>

       <para>
By default, the Make rules should compile and link with <userinput>-g</userinput>, so
that executable programs have debugging symbols.  Users who don't mind
being helpless can strip the executables later if they wish.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>install</literal></term>
      <listitem>
       <para>
Compile the program and copy the executables, libraries, and so on to
the file names where they should reside for actual use.  If there is a
simple test to verify that a program is properly installed, this target
should run that test.
       </para>

       <para>
Do not strip executables when installing them.  Devil-may-care users can
use the <userinput>install-strip</userinput> target to do that.
       </para>

       <para>
If possible, write the <userinput>install</userinput> target rule so that it does not
modify anything in the directory where the program was built, provided
<userinput>make all</userinput> has just been done.  This is convenient for building the
program under one user name and installing it under another.
       </para>

       <para>
The commands should create all the directories in which files are to be
installed, if they don't already exist.  This includes the directories
specified as the values of the variables <userinput>prefix</userinput> and
<userinput>exec_prefix</userinput>, as well as all subdirectories that are needed.
One way to do this is by means of an <userinput>installdirs</userinput> target
as described below.
       </para>

       <para>
Use <userinput>-</userinput> before any command for installing a man page, so that
<userinput>make</userinput> will ignore any errors.  This is in case there are systems
that don't have the Unix man page documentation system installed.
       </para>

       <para>
The way to install Info files is to copy them into <userinput>$(infodir)</userinput>
with <userinput>$(INSTALL_DATA)</userinput> (<xref linkend="standards-Command-Variables"/>), and then run
the <userinput>install-info</userinput> program if it is present.  <userinput>install-info</userinput>
is a program that edits the Info <userinput>dir</userinput> file to add or update the
menu entry for the given Info file; it is part of the Texinfo package.
Here is a sample rule to install an Info file:
       </para>

       <para><screen>$(DESTDIR)$(infodir)/foo.info: foo.info
        $(POST_INSTALL)
# There may be a newer info file in . than in srcdir.
        -if test -f foo.info; then d=.; \
         else d=$(srcdir); fi; \
        $(INSTALL_DATA) $$d/foo.info $(DESTDIR)$@; \
# Run install-info only if it exists.
# Use `if' instead of just prepending `-' to the
# line so we notice real errors from install-info.
# We use `$(SHELL) -c' because some shells do not
# fail gracefully when there is an unknown command.
        if $(SHELL) -c 'install-info --version' \
           &gt;/dev/null 2&gt;&amp;1; then \
          install-info --dir-file=$(DESTDIR)$(infodir)/dir \
                       $(DESTDIR)$(infodir)/foo.info; \
        else true; fi
</screen>            </para>

       <para>
When writing the <userinput>install</userinput> target, you must classify all the
commands into three categories: normal ones, <firstterm>pre-installation</firstterm>
commands and <firstterm>post-installation</firstterm> commands.  <xref linkend="standards-Install-Command-Categories"/>.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>uninstall</literal></term>
      <listitem>
       <para>
Delete all the installed files--the copies that the <userinput>install</userinput>
target creates.
       </para>

       <para>
This rule should not modify the directories where compilation is done,
only the directories where files are installed.
       </para>

       <para>
The uninstallation commands are divided into three categories, just like
the installation commands.  <xref linkend="standards-Install-Command-Categories"/>.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>install-strip</literal></term>
      <listitem>
       <para>
Like <userinput>install</userinput>, but strip the executable files while installing
them.  In simple cases, this target can use the <userinput>install</userinput> target in
a simple way:
       </para>

       <para><screen>
install-strip:
        $(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' \
                install
</screen>            </para>

       <para>
But if the package installs scripts as well as real executables, the
<userinput>install-strip</userinput> target can't just refer to the <userinput>install</userinput>
target; it has to strip the executables but not the scripts.
       </para>

       <para><userinput>install-strip</userinput> should not strip the executables in the build
directory which are being copied for installation.  It should only strip
the copies that are installed.
       </para>

       <para>
Normally we do not recommend stripping an executable unless you are sure
the program has no bugs.  However, it can be reasonable to install a
stripped executable for actual execution while saving the unstripped
executable elsewhere in case there is a bug.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>clean</literal></term>
      <listitem>

       <para>
Delete all files from the current directory that are normally created by
building the program.  Don't delete the files that record the
configuration.  Also preserve files that could be made by building, but
normally aren't because the distribution comes with them.
       </para>

       <para>
Delete <userinput>.dvi</userinput> files here if they are not part of the distribution.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>distclean</literal></term>
      <listitem>
       <para>
Delete all files from the current directory that are created by
configuring or building the program.  If you have unpacked the source
and built the program without creating any other files, <userinput>make
distclean</userinput> should leave only the files that were in the distribution.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>mostlyclean</literal></term>
      <listitem>
       <para>
Like <userinput>clean</userinput>, but may refrain from deleting a few files that people
normally don't want to recompile.  For example, the <userinput>mostlyclean</userinput>
target for GCC does not delete <userinput>libgcc.a</userinput>, because recompiling it
is rarely necessary and takes a lot of time.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>maintainer-clean</literal></term>
      <listitem>
       <para>
Delete almost everything from the current directory that can be
reconstructed with this Makefile.  This typically includes everything
deleted by <userinput>distclean</userinput>, plus more: C source files produced by
Bison, tags tables, Info files, and so on.
       </para>

       <para>
The reason we say "almost everything" is that running the command
<userinput>make maintainer-clean</userinput> should not delete <userinput>configure</userinput> even if
<userinput>configure</userinput> can be remade using a rule in the Makefile.  More generally,
<userinput>make maintainer-clean</userinput> should not delete anything that needs to
exist in order to run <userinput>configure</userinput> and then begin to build the
program.  This is the only exception; <userinput>maintainer-clean</userinput> should
delete everything else that can be rebuilt.
       </para>

       <para>
The <userinput>maintainer-clean</userinput> target is intended to be used by a maintainer of
the package, not by ordinary users.  You may need special tools to
reconstruct some of the files that <userinput>make maintainer-clean</userinput> deletes.
Since these files are normally included in the distribution, we don't
take care to make them easy to reconstruct.  If you find you need to
unpack the full distribution again, don't blame us.
       </para>

       <para>
To help make users aware of this, the commands for the special
<userinput>maintainer-clean</userinput> target should start with these two:
       </para>

       <para><screen>
@echo 'This command is intended for maintainers to use; it'
@echo 'deletes files that may need special tools to rebuild.'
</screen>            </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>TAGS</literal></term>
      <listitem>
       <para>
Update a tags table for this program.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>info</literal></term>
      <listitem>
       <para>
Generate any Info files needed.  The best way to write the rules is as
follows:
       </para>

       <para><screen>
info: foo.info

foo.info: foo.texi chap1.texi chap2.texi
        $(MAKEINFO) $(srcdir)/foo.texi
</screen>            </para>


       <para>
You must define the variable <userinput>MAKEINFO</userinput> in the Makefile.  It should
run the <userinput>makeinfo</userinput> program, which is part of the Texinfo
distribution.
       </para>

       <para>
Normally a GNU distribution comes with Info files, and that means the
Info files are present in the source directory.  Therefore, the Make
rule for an info file should update it in the source directory.  When
users build the package, ordinarily Make will not update the Info files
because they will already be up to date.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>dvi</literal></term>
      <listitem>
       <para>
Generate DVI files for all Texinfo documentation.
For example:
       </para>

       <para><screen>
dvi: foo.dvi

foo.dvi: foo.texi chap1.texi chap2.texi
        $(TEXI2DVI) $(srcdir)/foo.texi
</screen>            </para>


       <para>
You must define the variable <userinput>TEXI2DVI</userinput> in the Makefile.  It should
run the program <userinput>texi2dvi</userinput>, which is part of the Texinfo
distribution.<footnote><para><userinput>texi2dvi</userinput> uses TeX to do the real work
of formatting. TeX is not distributed with Texinfo.</para></footnote>  Alternatively,
write just the dependencies, and allow GNU <userinput>make</userinput> to provide the command.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>dist</literal></term>
      <listitem>
       <para>
Create a distribution tar file for this program.  The tar file should be
set up so that the file names in the tar file start with a subdirectory
name which is the name of the package it is a distribution for.  This
name can include the version number.
       </para>

       <para>
For example, the distribution tar file of GCC version 1.40 unpacks into
a subdirectory named <userinput>gcc-1.40</userinput>.
       </para>

       <para>
The easiest way to do this is to create a subdirectory appropriately
named, use <userinput>ln</userinput> or <userinput>cp</userinput> to install the proper files in it, and
then <userinput>tar</userinput> that subdirectory.
       </para>

       <para>
Compress the tar file with <userinput>gzip</userinput>.  For example, the actual
distribution file for GCC version 1.40 is called <userinput>gcc-1.40.tar.gz</userinput>.
       </para>

       <para>
The <userinput>dist</userinput> target should explicitly depend on all non-source files
that are in the distribution, to make sure they are up to date in the
distribution.
<xref linkend="standards-Releases"/>.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>check</literal></term>
      <listitem>
       <para>
Perform self-tests (if any).  The user must build the program before
running the tests, but need not install the program; you should write
the self-tests so that they work when the program is built but not
installed.
       </para></listitem></varlistentry></variablelist>
    <para>
The following targets are suggested as conventional names, for programs
in which they are useful.
    </para>

    <variablelist>
     <varlistentry>
      <term><literal>installcheck</literal></term>
      <listitem>
       <para>
Perform installation tests (if any).  The user must build and install
the program before running the tests.  You should not assume that
<userinput>$(bindir)</userinput> is in the search path.
       </para>
</listitem></varlistentry>
     <varlistentry>
      <term><literal>installdirs</literal></term>
      <listitem>
       <para>
It's useful to add a target named <userinput>installdirs</userinput> to create the
directories where files are installed, and their parent directories.
There is a script called <userinput>mkinstalldirs</userinput> which is convenient for
this; you can find it in the Texinfo package.
You can use a rule like this:
       </para>

       <para><screen># Make sure all installation directories (e.g. $(bindir))
# actually exist by making them if necessary.
installdirs: mkinstalldirs
        $(srcdir)/mkinstalldirs $(bindir) $(datadir) \
                                $(libdir) $(infodir) \
                                $(mandir)
</screen>            </para>


       <para>
or, if you wish to support <userinput>DESTDIR</userinput>,
       </para>

       <para><screen>
# Make sure all installation directories (e.g. $(bindir))
# actually exist by making them if necessary.
installdirs: mkinstalldirs
        $(srcdir)/mkinstalldirs \
            $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \
            $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \
            $(DESTDIR)$(mandir)
</screen>            </para>

       <para>
This rule should not modify the directories where compilation is done.
It should do nothing but create installation directories.
       </para></listitem></varlistentry></variablelist>
</sect1>
   <sect1 id="standards-Install-Command-Categories">
    <title>Install Command Categories</title>
    <para>
<indexterm scope="standards-cp"><primary>pre-installation commands</primary></indexterm>
<indexterm scope="standards-cp"><primary>post-installation commands</primary></indexterm>
When writing the <userinput>install</userinput> target, you must classify all the
commands into three categories: normal ones, <firstterm>pre-installation</firstterm>
commands and <firstterm>post-installation</firstterm> commands.
    </para>
    <para>
Normal commands move files into their proper places, and set their
modes.  They may not alter any files except the ones that come entirely
from the package they belong to.
    </para>
    <para>
Pre-installation and post-installation commands may alter other files;
in particular, they can edit global configuration files or data bases.
    </para>
    <para>
Pre-installation commands are typically executed before the normal
commands, and post-installation commands are typically run after the
normal commands.
    </para>
    <para>
The most common use for a post-installation command is to run
<userinput>install-info</userinput>.  This cannot be done with a normal command, since
it alters a file (the Info directory) which does not come entirely and
solely from the package being installed.  It is a post-installation
command because it needs to be done after the normal command which
installs the package's Info files.
    </para>
    <para>
Most programs don't need any pre-installation commands, but we have the
feature just in case it is needed.
    </para>
    <para>
To classify the commands in the <userinput>install</userinput> rule into these three
categories, insert <firstterm>category lines</firstterm> among them.  A category line
specifies the category for the commands that follow.
    </para>
    <para>
A category line consists of a tab and a reference to a special Make
variable, plus an optional comment at the end.  There are three
variables you can use, one for each category; the variable name
specifies the category.  Category lines are no-ops in ordinary execution
because these three Make variables are normally undefined (and you
<emphasis>should not</emphasis> define them in the makefile).
    </para>
    <para>
Here are the three possible category lines, each with a comment that
explains what it means:
    </para>
    <para><screen>        $(PRE_INSTALL)     # Pre-install commands follow.
        $(POST_INSTALL)    # Post-install commands follow.
        $(NORMAL_INSTALL)  # Normal commands follow.
</screen>       </para>
    <para>
If you don't use a category line at the beginning of the <userinput>install</userinput>
rule, all the commands are classified as normal until the first category
line.  If you don't use any category lines, all the commands are
classified as normal.
    </para>
    <para>
These are the category lines for <userinput>uninstall</userinput>:
    </para>
    <para><screen>
        $(PRE_UNINSTALL)     # Pre-uninstall commands follow.
        $(POST_UNINSTALL)    # Post-uninstall commands follow.
        $(NORMAL_UNINSTALL)  # Normal commands follow.
</screen>       </para>
    <para>
Typically, a pre-uninstall command would be used for deleting entries
from the Info directory.
    </para>
    <para>
If the <userinput>install</userinput> or <userinput>uninstall</userinput> target has any dependencies
which act as subroutines of installation, then you should start
<emphasis>each</emphasis> dependency's commands with a category line, and start the
main target's commands with a category line also.  This way, you can
ensure that each command is placed in the right category regardless of
which of the dependencies actually run.
    </para>
    <para>
Pre-installation and post-installation commands should not run any
programs except for these:
    </para>
    <para><screen>
[ basename bash cat chgrp chmod chown cmp cp dd diff echo
egrep expand expr false fgrep find getopt grep gunzip gzip
hostname install install-info kill ldconfig ln ls md5sum
mkdir mkfifo mknod mv printenv pwd rm rmdir sed sort tee
test touch true uname xargs yes
</screen>       </para>
    <para>
<indexterm scope="standards-cp"><primary>binary packages</primary></indexterm>
The reason for distinguishing the commands in this way is for the sake
of making binary packages.  Typically a binary package contains all the
executables and other files that need to be installed, and has its own
method of installing them--so it does not need to run the normal
installation commands.  But installing the binary package does need to
execute the pre-installation and post-installation commands.
    </para>
    <para>
Programs to build binary packages work by extracting the
pre-installation and post-installation commands.  Here is one way of
extracting the pre-installation commands:
    </para>
    <para><screen>
make -n install -o all \
      PRE_INSTALL=pre-install \
      POST_INSTALL=post-install \
      NORMAL_INSTALL=normal-install \
  | gawk -f pre-install.awk
</screen>       </para>

    <para>
where the file <userinput>pre-install.awk</userinput> could contain this:
    </para>

    <para><screen>
$0 ~ /^\t[ \t]*(normal_install|post_install)[ \t]*$/ {on = 0}
on {print $0}
$0 ~ /^\t[ \t]*pre_install[ \t]*$/ {on = 1}
</screen>    </para>
    <para>
The resulting file of pre-installation commands is executed as a shell
script as part of installing the binary package.
    </para>
</sect1></chapter>
  <sect1 id="standards-Releases">
   <title>Making Releases</title>
   <para>
<indexterm scope="standards-cp"><primary>packaging</primary></indexterm>
You should identify each release with a pair of version numbers, a
major version and a minor.  We have no objection to using more than
two numbers, but it is very unlikely that you really need them.
   </para>
   <para>
Package the distribution of <userinput>Foo version 69.96</userinput> up in a gzipped tar
file with the name <userinput>foo-69.96.tar.gz</userinput>.  It should unpack into a
subdirectory named <userinput>foo-69.96</userinput>.
   </para>
   <para>
Building and installing the program should never modify any of the files
contained in the distribution.  This means that all the files that form
part of the program in any way must be classified into <firstterm>source
files</firstterm> and <firstterm>non-source files</firstterm>.  Source files are written by humans
and never changed automatically; non-source files are produced from
source files by programs under the control of the Makefile.
   </para>
   <para>
<indexterm scope="standards-cp"><primary><userinput>README</userinput> file</primary></indexterm>
The distribution should contain a file named <userinput>README</userinput> which gives
the name of the package, and a general description of what it does.  It
is also good to explain the purpose of each of the first-level
subdirectories in the package, if there are any.  The <userinput>README</userinput> file
should either state the version number of the package, or refer to where
in the package it can be found.
   </para>
   <para>
The <userinput>README</userinput> file should refer to the file <userinput>INSTALL</userinput>, which
should contain an explanation of the installation procedure.
   </para>
   <para>
The <userinput>README</userinput> file should also refer to the file which contains the
copying conditions.  The GNU GPL, if used, should be in a file called
<userinput>COPYING</userinput>.  If the GNU LGPL is used, it should be in a file called
<userinput>COPYING.LIB</userinput>.
   </para>
   <para>
Naturally, all the source files must be in the distribution.  It is okay
to include non-source files in the distribution, provided they are
up-to-date and machine-independent, so that building the distribution
normally will never modify them.  We commonly include non-source files
produced by Bison, <userinput>lex</userinput>, TeX, and <userinput>makeinfo</userinput>; this helps avoid
unnecessary dependencies between our distributions, so that users can
install whichever packages they want to install.
   </para>
   <para>
Non-source files that might actually be modified by building and
installing the program should <emphasis>never</emphasis> be included in the
distribution.  So if you do distribute non-source files, always make
sure they are up to date when you make a new distribution.
   </para>
   <para>
Make sure that the directory into which the distribution unpacks (as
well as any subdirectories) are all world-writable (octal mode 777).
This is so that old versions of <userinput>tar</userinput> which preserve the
ownership and permissions of the files from the tar archive will be
able to extract all the files even if the user is unprivileged.
   </para>
   <para>
Make sure that all the files in the distribution are world-readable.
   </para>
   <para>
Don't include any symbolic links in the distribution itself.  If the tar
file contains symbolic links, then people cannot even unpack it on
systems that don't support symbolic links.  Also, don't use multiple
names for one file in different directories, because certain file
systems cannot handle this and that prevents unpacking the
distribution.
   </para>
   <para>
Try to make sure that all the file names will be unique on MS-DOS.  A
name on MS-DOS consists of up to 8 characters, optionally followed by a
period and up to three characters.  MS-DOS will truncate extra
characters both before and after the period.  Thus,
<userinput>foobarhacker.c</userinput> and <userinput>foobarhacker.o</userinput> are not ambiguous; they
are truncated to <userinput>foobarha.c</userinput> and <userinput>foobarha.o</userinput>, which are
distinct.
   </para>
   <para>
<indexterm scope="standards-cp"><primary><userinput>texinfo.tex</userinput>, in a distribution</primary></indexterm>
Include in your distribution a copy of the <userinput>texinfo.tex</userinput> you used
to test print any <userinput>*.texinfo</userinput> or <userinput>*.texi</userinput> files.
   </para>
   <para>
Likewise, if your program uses small GNU software packages like regex,
getopt, obstack, or termcap, include them in the distribution file.
Leaving them out would make the distribution file a little smaller at
the expense of possible inconvenience to a user who doesn't know what
other files to get.
   </para></sect1></chapter>
 <chapter id="standards-References">
  <title>References to Non-Free Software and Documentation</title>
  <para>
<indexterm scope="standards-cp"><primary>references to non-free material</primary></indexterm>
A GNU program should not recommend use of any non-free program.  We
can't stop some people from writing proprietary programs, or stop
other people from using them, but we can and should refuse to
advertise them to new potential customers.  Proprietary software is a
social and ethical problem, and the point of GNU is to solve that
problem.
  </para>
  <para>
The GNU definition of free software is found in
<wordasword>http://www.gnu.org/philosophy/free-sw.html</wordasword>, with a list of
important licenses and whether they qualify as free in
<wordasword>http://www.gnu.org/licenses/license-list.html</wordasword>.  The terms
"free" and "non-free", used in this document, refer to that
definition.  If it is not clear whether a license qualifies as free
under this definition, please ask the GNU Project by writing to
<ulink url="mailto:licensing@@gnu.org"></ulink>.  We will answer, and if the license is an
important one, we will add it to the list.
  </para>
  <para>
When a non-free program or system is well known, you can mention it in
passing--that is harmless, since users who might want to use it
probably already know about it.  For instance, it is fine to explain
how to build your package on top of some widely used non-free
operating system, or how to use it together with some widely used
non-free program.
  </para>
  <para>
However, you should give only the necessary information to help those
who already use the non-free program to use your program with
it--don't give, or refer to, any further information about the
proprietary program, and don't imply that the proprietary program
enhances your program, or that its existence is in any way a good
thing.  The goal should be that people already using the proprietary
program will get the advice they need about how to use your free
program with it, while people who don't already use the proprietary
program will not see anything to lead them to take an interest in it.
  </para>
  <para>
If a non-free program or system is obscure in your program's domain,
your program should not mention or support it at all, since doing so
would tend to popularize the non-free program more than it popularizes
your program.  (You cannot hope to find many additional users among
the users of Foobar if the users of Foobar are few.)
  </para>
  <para>
Sometimes a program is free software in itself but depends on a
non-free platform in order to run.  For instance, many Java programs
depend on Sun's Java implementation, and won't run on the GNU Java
Compiler (which does not yet have all the features) or won't run with
the GNU Java libraries.  To recommend that program is inherently to
recommend the non-free platform as well; if you should not do the
latter, then don't do the former.
  </para>
  <para>
A GNU package should not refer the user to any non-free documentation
for free software.  Free documentation that can be included in free
operating systems is essential for completing the GNU system, or any
free operating system, so it is a major focus of the GNU Project; to
recommend use of documentation that we are not allowed to use in GNU
would weaken the impetus for the community to produce documentation
that we can include.  So GNU packages should never recommend non-free
documentation.
  </para>
  <para>
By contrast, it is ok to refer to journal articles and textbooks in
the comments of a program for explanation of how it functions, even
though they be non-free.  This is because we don't include such things
in the GNU system even if we are allowed to-they are outside the
scope of an operating system project.
  </para>
  <para>
Referring to a web site that describes or recommends a non-free
program is in effect promoting that software, so please do not make
links (or mention by name) web sites that contain such material.  This
policy is relevant particulary for the web pages for a GNU package.
  </para>
  <para>
Following links from nearly any web site can lead to non-free
software; this is an inescapable aspect of the nature of the web, and
in itself is no objection to linking to a site.  As long as the site
does not itself recommend a non-free program, there is no need be
concerned about the sites it links to for other reasons.
  </para>
  <para>
Thus, for example, you should not make a link to AT&amp;T's web site,
because that recommends AT&amp;T's non-free software packages; you should
not make a link to a site that links to AT&amp;T's site saying it is a
place to get a non-free program; but if a site you want to link to
refers to AT&amp;T's web site in some other context (such as long-distance
telephone service), that is not a problem.
  </para></chapter>
<index id="standards-cp" condition="multi-index"><title>Index</title></index>
</book>

