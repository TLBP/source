<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        man1/bc.1.xml, v GNU bc 1.07.1, GPLv2+, NBB - Mart 2022
     ******************************************************************** -->
<refentry xml:id="man1-bc" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
 <info>
  <keywordset>
   <keyword>Linux, manpage, kütüphane, kitaplık, belge, belgeler</keyword>
   <keyword>kabuk, komut, kullanıcı, yardım, kılavuz, GNU bc</keyword>
   <keyword>bc, hesaplama, işlem, matematiksel, obase, scale, ibase</keyword>
  </keywordset>
 </info>
 <refmeta>
  <manvolnum>1</manvolnum>
  <refentrytitle>bc</refentrytitle>
  <refmiscinfo>
   <sectdesc>Kullanıcı Komutları</sectdesc>
   <source>GNU bc 1.07.1</source>
   <date>11 Haziran 2006</date>
  </refmiscinfo>
 </refmeta>
 <refnamediv>
  <refname>bc</refname>
  <refpurpose>Keyfî duyarlılıkta hesaplama dili</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <cmdsynopsis>
   <command>bc</command>
   <arg> <option>-hlwsqv</option> </arg>
   <arg> uzun-seçenekler </arg>
   <arg> <replaceable>dosya ...</replaceable> </arg>
  </cmdsynopsis>
 </refsynopsisdiv>
 <refsect1><title>AÇIKLAMA</title>
  <para>
   <command>bc</command>, girilen deyimleri işleterek keyfi uzunlukta ve duyarlılıktaki sayılar üzerinde matematiksel işlemler yapmaya imkan sağlayan etkileşimli bir ortam ve bir yazılım geliştirme dilidir. Sözdizimi açısından C yazılım geliştirme dilini andıran bazı benzerlikler vardır. Komut satırından belirtmek suretiyle kullanabileceğimiz standart bir math  kütüphanesine sahiptir. Eğer gerekli ise; math kütüphanesi, belirtilen dosyalardan daha önce ele alınır. <command>bc</command> işleme tabi tutarken dosyaları komut satırında belirtilen sıraya göre ele alır. Belirtilen dosyaların tümü ele alınıp işlendikten sonra, standart girdiden girişler okunmaya başlar. Kodlar nasıl okunuyorlarsa bu halleriyle işletilirler. (Eğer belirtilen dosyalardan herhangi birinde <command>bc</command>'yi sonlandıracak bir komut yer alırsa, <command>bc</command> sonlanır, bir daha standart girdiden okuyamaz.)
  </para>
  <para>
   <command>bc</command>'nin bu sürümü, geleneksel <command>bc</command> uygulamalarına ve POSIX taslak standardına göre bazı genişletmeler içermektedir. Komut satırı seçenekleri, bu genişletmelerin bir uyarı çıktılamasına veya reddedilmesine neden olabilir. Bu belge, bu işlemci tarafından kabul edilen dili açıklar. Genişletmeler yeri gelince açıklanacaktır.
  </para>
  <refsect2><title>SEÇENEKLER</title>
   <variablelist>
    <varlistentry>
     <term><option>-h</option></term>
     <term><option>--help</option></term>
     <listitem>
      <para>
       Kullanım iletisi basar ve çıkar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-i</option></term>
     <term><option>--interactive</option></term>
     <listitem>
      <para>
       Etkileşimli kipe geçilir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-l</option></term>
     <term><option>--mathlib</option></term>
     <listitem>
      <para>
       Standart math kütüphanesini kullanıma sokar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-w</option></term>
     <term><option>--warn</option></term>
     <listitem>
      <para>
       POSIX <command>bc</command>'ye ek genişletmeler için uyarılar verir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-s</option></term>
     <term><option>--standard</option></term>
     <listitem>
      <para>
       Standart POSIX <command>bc</command> diline uygun olarak işlem yapar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-q</option></term>
     <term><option>--quiet</option></term>
     <listitem>
      <para>
       Normalde gelen, GNU <command>bc</command> hoş geldiniz iletisini görüntülemez.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-v</option></term>
     <term><option>--version</option></term>
     <listitem>
      <para>
       Sürüm ve telif hakkı bilgilerini gösterir ve çıkar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect2>
  <refsect2><title>SAYILAR</title>
   <para>
    <command>bc</command>'deki en temel eleman sayılardır. Sayılar keyfi duyarlılıkta ifade edilirler. Yani <command>bc</command>'de bir sayı, tamsayı kısım ve ondalık kısım olarak ifade edilir. Tüm sayılar normalde iç hesaplamalarda onluk tabanda ele alınırlar ve tüm işlemler onluk tabanda gerçekleştirilir. (Bu sürüm, bölme ve çarpma işlemlerinde sayıların ondalık kısımlarını belli uzunluktan sonra kesmektedir.) <command>bc</command>'de sayıların iki özelliği vardır: uzunluk ve bölüntü. Uzunluk, sayıdaki tüm anlamlı rakamların, bölüntü ise ondalık noktadan sonraki rakamların adedidir. Örneğin:
   </para>
<literallayout class="monospaced">
.000001 sayısının uzunluğu 6 ve bölüntüsü 6'dır.
1935.000 sayısının uzunluğu 7 ve bölüntüsü 3'tür.
</literallayout>
  </refsect2>
  <refsect2><title>DEĞİŞKENLER</title>
   <para>
    Sayılar iki farklı türde değişken olarak saklanabilirler: basit değişkenler ve diziler. Her iki değişken türü için de değişkenlere birer ad verilir. Değişken isimleri bir harfle başlarlar ve sonrasında harfler, rakamlar ve altçizgi karakteri içerebilirler. Tüm harfler küçük harf olmak zorundadır. (Abece-sayısal uzun isimler bir genişletmedir. Çünkü, POSIX <command>bc</command>'de değişken isimleri tek bir küçük harften ibaretttir.) Dizi değişkenleri ise isimden sonra [] (köşeli ayraç) alırlar.
   </para>
   <para>
    <command>bc</command>'de dört tane özel değişken vardır. Bunlar; <command>scale</command>, <command>ibase</command>, <command>obase</command> ve <command>last</command>'dır. <command>scale</command>, işlemlerde ondalık noktadan sonra kaç tane rakamın kullanılacağını belirtir. Öntanımlı <command>scale</command> değeri <command>0</command>'dır. <command>ibase</command> (input base) ve <command>obase</command> (output base) değişkenleri, girdi ve çıktı için sayı tabanlarını belirtir. Örneğin, <option>ibase=10</option> ve <option>obase=2</option> olursa sayılar onluk tabanda girilir ve sonuçlar ekrana ikilik tabanda yazdırılır. <command>ibase</command> ve <command>obase</command> için öntanımlı değer <option>10</option>'dur. <command>last</command> değişkeni (bu bir genişletmedir) ise, en son ekrana yazdırılan sayıyı içeren bir değişkendir. Bu değişkenlere yeni değerler atanabilir. Bunlar ileride daha ayrıntılı olarak ele alınacaktır.
    </para>
  </refsect2>
  <refsect2><title>AÇIKLAMA SATIRLARI</title>
   <para>
    <command>bc</command>'de açıklama satırları <command>/*</command> karakterleri ile başlar ve <command>*/</command> karakterleri ile biter. Açıklamalar herhangi bir yerde başlayabilir ve girdide tek bir boşluk olarak ele alınır. (Yani, bu da açıklamaların girdi elemanları arasında bir ayraç olarak yorumlandığını gösterir. Dolayısıyla, bir değişken ismi içerisinde açıklama yer alamaz.) Açıklamalar sınırlarını belirleyen karakterler arasında satırsonu karakteri içerebilir.
   </para>
   <para>
    Ayrıca <command>bc</command>'de betiklerin kullanılmasını sağlamak için tek satırlık açıklamalar desteklenmektedir ve bu bir genişletmedir. Tek satırlık açıklama <command>#</command> karakterinden sonra başlar ve satır sonuna kadar devam eder. Satırsonu karakteri açıklamaya dahil değildir ve normal karakter olarak ele alınır.
   </para>
  </refsect2>
  <refsect2><title>İFADELER</title>
   <para>
    Sayılar, ifadelerle ve deyimlerle birlikte kullanılırlar. Bu dil, etkileşimli bir çalışma ortamı olarak tasarlandığı için deyimler ve ifadeler de etkileşimli olarak işletilebilir. <command>bc</command>'de '<option>main</option>' yordam kavramı yoktur. Bunun yerine kod, rastlandıkları sırayla hemen yorumlanarak işletilir. (İşlevler, önce tanımlanırlar ve sonradan kullanılabilir - ileride ele alınacaktır).
   </para>
   <para>
    En basit ifade bir 'sabit'tir. <command>bc</command>, <command>ibase</command> değişkeniyle belirtilen o anki girdi tabanını kullanarak sayıyı dahili onluk tabana çevirir. (Ancak, işlevler için bir istisna vardır.) <command>ibase</command> değişkeninin geçerli değerleri <option>2</option>'den <option>36</option>'ya kadardır (<option>16</option>'dan sonrası genişletmedir). Sayılar girilirken, <option>0-9</option> arası rakamlar ve (ascii) <option>A-Z</option> arası harfler ile kullanılabilir. (Dikkat: <option>A-Z</option> büyük harf olmalıdır. Çünkü, küçük harfler değişkenler için kullanılıyor.) Tek rakamlı sayılar, <command>ibase</command> ne olursa olsun, her zaman rakamın ifade ettiği değere sahip olurlar (örn, <option>A = 9</option>)). <command>bc</command> çok rakamlı sayılarda, <command>ibase</command> değerine eşit veya daha büyük rakamları  <command>ibase-1</command> değeriyle ele alarak sayının değerini hesaplar. Bu <command>ZZZ</command> sayısını daima, girdi tabanındaki 3 haneli en büyük sayı yapar.
   </para>
   <para>
    İfadeler, diğer yüksek-düzeyli dillerdekilere oldukça benzer. <command>bc</command>'de sayılar için farklı türler olmadığı için karışık türler için kurallar yoktur. Bunun yerine, sadece ifadelerin bölüntüleri için kurallar vardır. Her ifadenin bir bölüntüsü vardır. Bu, özgün sayıların bölüntülerinden, gerçekleştirilen işlemden ve çoğu durumda da <command>scale</command> değişkeninin değerinden elde edilir. <command>scale</command> değişkeninin alabileceği değerler, 0 ile C'deki tamsayı türü ile ifade edilebilen en büyük tamsayı aralığındadır.
   </para>
   <para>
    Aşağıdaki geçerli ifadelerin açıklamalarında "<replaceable>ifade</replaceable>" eksiksiz bir ifadeyi ve "<replaceable>değişken</replaceable>" ise sıradan bir değişkeni veya bir dizi değişkenini göstermektedir. Bir basit değişken
   </para>
<literallayout  class="monospaced">
<replaceable>isim</replaceable>
</literallayout>
   <para>
    şeklinde ve bir dizi değişkeni ise aşağıdaki gibi belirtilir:
   </para>
<literallayout class="monospaced">
<replaceable>isim</replaceable>[<replaceable>ifade</replaceable>]
</literallayout>
   <para>
    Özel olarak belirtilmemişse sonucun bölüntüsü, ilgili ifadelerin azami bölüntüsü olur.
   </para>
   <variablelist>
    <varlistentry>
     <term><option>-</option> <replaceable>ifade</replaceable></term>
     <listitem>
      <para>
       Sonuç, <replaceable>ifade</replaceable>'nin negatifi olur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>++</option> <replaceable>değişken</replaceable></term>
     <listitem>
      <para>
       <replaceable>değişken</replaceable> 'bir' arttırılır ve yeni değer ifadenin sonucu olur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <option>--</option> <replaceable>değişken</replaceable></term>
     <listitem>
      <para>
       <replaceable>değişken</replaceable> 'bir' eksiltilir ve yeni değer ifadenin sonucu olur.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>değişken</replaceable> <option>++</option></term>
     <listitem>
      <para>
       İfadenin sonucu değişkenin değerine atanır, sonra <replaceable>değişken</replaceable>'in değeri 'bir' artırılır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>değişken</replaceable> <option>--</option></term>
     <listitem>
      <para>
       İfadenin sonucu değişkenin değerine atanır, sonra <replaceable>değişken</replaceable>'in değeri 'bir' eksiltilir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade</replaceable>
      <option>+</option>
      <replaceable>ifade</replaceable></term>
     <listitem>
      <para>
       Sonuç, iki <replaceable>ifade</replaceable>'nin toplamıdır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade</replaceable>
      <option>-</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, iki <replaceable>ifade</replaceable>'nin farkıdır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade</replaceable>
      <option>*</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, iki <replaceable>ifade</replaceable>'nin çarpımıdır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade</replaceable>
      <option>/</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, iki <replaceable>ifade</replaceable>'nin bölümüdür. Sonucun bölüntüsü <command>scale</command> değişkeninin değeridir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade</replaceable>
      <option>%</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, "kalan"ı verir ve şu şekilde hesaplanır. <option>a%b</option>'yi hesaplarken, ilk önce a/b <command>scale</command> haneli olarak hesaplanır. <command>scale</command><option>+scale(b)</option> ve <option>scale(a)</option>'dan hangisi daha büyükse bu bölüntüye göre <option>a-(a/b)*b</option> ifadesi  sonucu hesaplamak için kullanılır. Eğer <command>scale</command> 0'a eşitlenirse ve her iki ifade de tamsayı ise, bu ifade tamsayı kalan işlevidir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade</replaceable>
      <option>^</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       İfadenin sonucu, birinci üssü ikincidir. İkinci ifade bir tamsayı olmalıdır. (Eğer ikinci ifade tamsayı değilse, önce ekrana bir uyarı gelir ve ifade tamsayı olacak şekilde kesilir, yani ikinci ifadenin tam kısmı alınır). Sonucun bölüntüsü ise, eğer üs negatif ise <command>scale</command>'dir. Üs pozitif ise sonuç, <command>scale</command> ile ilk ifadenin bölüntüsünden büyük olanı ile ilk ifadenin bölüntüsü çarpı üs değerinden küçük olanıdır, yani <option>scale(a^b) = min(max(</option><command>scale</command><option>, scale(a)), scale(a)*b)</option>'dir. Unutulmamalıdır ki <replaceable>ifade</replaceable><option>^0</option> ifadesinin sonucu her zaman "1" olur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <option>(</option>
      <replaceable>ifade</replaceable>
      <option>)</option>
     </term>
     <listitem>
      <para>
       Yaylı ayraçlar, ifadenin değeri bulunurken standart önceliği değiştirir; yaylı ayraçlar içine alınan ifade daha önce hesaplanır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>değişken</replaceable>
      <option>=</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       İfadenin sonucu değişkene atanır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>değişken</replaceable>
      <replaceable>&lt;şlç&gt;</replaceable><option>=</option>
      <replaceable>ifade</replaceable>
     </term>
     <listitem>
      <para>
       Bu, "<replaceable>değişken</replaceable> <option>=</option> <replaceable>değişken</replaceable> <replaceable>&lt;işlec&gt;</replaceable>  <replaceable>ifade</replaceable>" ile eşdeğerdir ancak bir farkla; <varname>değişken</varname>'in değeri sadece bir kere elde edilir. Eğer <varname>değişken</varname> bir dizi ise, işlemin bir kere yapılacağı gözden uzak tutulmamalıdır.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    İlişkisel ifadeler (karşılaştırma ifadeleri), sonuçları her zaman <option>0</option> veya <option>1</option> olan özel ifadelerdir. <option>0</option> yanlış (false) ve <option>1</option> doğru (true) olarak yorumlanır. Bunlar herhangi bir ifade içerisinde yer alabilir. (POSIX <command>bc</command>'de ise ilişkisel ifadeler sadece <command>if</command>, <command>while</command> ve <command>for</command> deyimlerinde kullanılabilir ve sadece bir tane ilişkisel sınama olabilir.) İlişkisel işleçler şunlardır:
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <replaceable>ifade1</replaceable>
      <option>&lt;</option>
      <replaceable>ifade2</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, eğer <replaceable>ifade1</replaceable>, <replaceable>ifade2</replaceable>'den küçükse <option>1</option> değilse <option>0</option> olur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade1</replaceable>
      <option>&lt;=</option>
      <replaceable>ifade2</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, eğer <replaceable>ifade1</replaceable>, <replaceable>ifade2</replaceable>'den küçük ya da eşitse <option>1</option> değilse <option>0</option> olur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade1</replaceable>
      <option>&gt;</option>
      <replaceable>ifade2</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, eğer <replaceable>ifade1</replaceable>, <replaceable>ifade2</replaceable>'den büyükse <option>1</option> değilse <option>0</option> olur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade1</replaceable>
      <option>&gt;=</option>
      <replaceable>ifade2</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, eğer <replaceable>ifade1</replaceable>, <replaceable>ifade2</replaceable>'den büyük ya da eşitse <option>1</option> değilse <option>0</option> olur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade1</replaceable>
      <option>==</option>
      <replaceable>ifade2</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, eğer <replaceable>ifade1</replaceable>, <replaceable>ifade2</replaceable>'ye eşitse <option>1</option> değilse <option>0</option> olur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <replaceable>ifade1</replaceable>
      <option>!=</option>
      <replaceable>ifade2</replaceable>
     </term>
     <listitem>
      <para>
       Sonuç, eğer <replaceable>ifade1</replaceable>, <replaceable>ifade2</replaceable>'den farklıysa <option>1</option> değilse <option>0</option> olur.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    <command>bc</command>'de  mantıksal (boolean) işlemler de geçerlidir. (POSIX <command>bc</command>'de mantıksal işlemler yoktur.) Mantıksal işlemlerin sonucu, ilişkisel işlemlerde olduğu gibi, 0 (false) yada 1 (true) olmaktadır. Mantıksal işleçler şunlardır:
    </para>
    <variablelist>
     <varlistentry>
      <term>
       <option>!</option><replaceable>ifade</replaceable>
      </term>
      <listitem>
       <para><replaceable>ifade</replaceable> 0 ise sonuç 1'dir. Aksi halde 0 olur.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <replaceable>ifade</replaceable>
       <option>&amp;&amp;</option>
       <replaceable>ifade</replaceable>
      </term>
      <listitem>
       <para><replaceable>ifade</replaceable>'lerin ikiside sıfırdan farklıysa sonuç 1'dir. Aksi halde 0 olur.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <replaceable>ifade</replaceable>
       <option>||</option>
       <replaceable>ifade</replaceable>
      </term>
      <listitem>
       <para><replaceable>ifade</replaceable>'lerden biri sıfırdan farklıysa sonuç 1'dir. Aksi halde 0 olur.
      </para>
      </listitem>
     </varlistentry>
    </variablelist>
   <para>
    İşleçlerin işlem öncelik sırası şöyledir (küçükten büyüğe):
   </para>
<literallayout class="monospaced">
<command>||</command> işleci, soldan ilişkilendirmeli
<command>&amp;&amp;</command> işleci, soldan ilişkilendirmeli
<command>!</command> işleci, ilişkilendirme yok
İlişkisel işleçler, soldan ilişkilendirmeli
Atama işleci, sağdan ilişkilendirmeli
<command>+</command> ve <command>-</command> işleci, soldan ilişkilendirmeli
<command>*</command>, <command>/</command> ve <command>%</command> işleci, soldan ilişkilendirmeli
<command>^</command> işleci, sağdan ilişkilendirmeli
tek terimli <command>-</command> işleci, ilişkilendirme yok
<command>++</command> ve <command>--</command> işleci, ilişkilendirme yok
</literallayout>
   <para>
    Bu önceliğin seçilmesinin nedeni, POSIX uyumlu <command>bc</command> yazılımlarının doğru çalışması içindir. Ancak, ilişkisel ve mantıksal işleçler, atama ifadelerinde kullanıldığında elverişsiz ve çok farklı bir durum ortaya çıkmaktadır. Aşağıdaki ifadeyi ele alalım:
   </para>
<literallayout class="monospaced">
a = 3 &lt; 5
</literallayout>
   <para>
    C programcıları bu ifadeyi ele alırken, önce <option>3&lt;5</option>  (sonuç 1'dir) ifadesini gerçekleştirir, ardından sonucu "<varname>a</varname>" değişkenine atarlar. <command>bc</command>'de ise önce "<varname>a</varname>"ya 3 atanır ve ardından 5 ile karşılaştırma yapılır. Buna dikkat etmek gerekir. En iyisi, ilişkisel ve mantıksal işleçler ile atama işleci aynı ifadede kullanıldığında karmaşayı önlemek için yaylı ayraçları kullanmaktır.
   </para>
   <para>
    <command>bc</command>'de desteklenen biraz daha özel ifadeler vardır. Bunlar, standart işlevler ve kullanıcı tanımlı işlevlerde, "<varname>isim</varname><command>(</command><varname>bağımsız değişkenler</varname><command>)</command>" şeklinde görülmektedirler. Ayrıntılı bilgi için <xref linkend="man1-bc-func"/> bölümündeki kullanıcı tanımlı işlevlere bakınız. Yerleşik işlevler şunlardır:
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <command>length</command>
      <command>(</command>
      <replaceable>ifade</replaceable>
      <command>)</command>
     </term>
     <listitem>
      <para>
       <command>length</command> işlevinin değeri, <replaceable>ifade</replaceable>'deki anlamlı hanelerin adedidir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>read</command>
      <command>( )</command>
     </term>
     <listitem>
      <para>
       <command>read</command> işlevi (bu bir genişletmedir), nerede kullanıldığına bakılmaksızın, standart girdiden bir sayı okumak için kullanılır. Ancak, standart girdiden veri ve yazılım birlikte okunurken sorunlara neden olabileceğinden dikkatli olmak gerekir. Bu işlevin en iyi kullanım şekli, asla kullanıcıdan kod girmeyi gerektiren yerlerde değil, evvelce geliştirilen bir yazılım için kullanıcıdan bir girdi bekleyen yerlerde kullanmaktır. <command>read</command> işlevinin değeri, standart girdiden okunan sayının <command>ibase</command> tabanındaki değeridir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>scale</command>
      <command>(</command>
      <replaceable>ifade</replaceable>
      <command>)</command>
     </term>
     <listitem>
      <para>
       <command>scale</command> işlevinin değeri, <replaceable>ifade</replaceable>'denin sonucu olan sayıdaki ondalık hanelerin sayısıdır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>sqrt</command>
      <command>(</command>
      <replaceable>ifade</replaceable>
      <command>)</command>
     </term>
     <listitem>
      <para>
       <command>sqrt</command> işlevinin değeri, <replaceable>ifade</replaceable>'nin kareköküdür. <replaceable>ifade</replaceable>'nin sonucu negatif bir sayı ise bir çalışma anı hatası üretilir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect2>
  <refsect2><title>DEYİMLER</title>
   <para>
    Deyimler, çoğu cebirsel dilde olduğu gibi, ifadelerin sırayla değerlendirilmelerini sağlarlar. <command>bc</command>'de deyimler "mümkün olduğunca" yürütülür. Yürütme, bir ya da daha fazla tam deyimden sonra bir satır sonu karakteri girildiğinde gerçekleşir. Yürütmenin anında gerçekleşmesi bakımdan <command>bc</command>'de satır sonu karakterleri çok önemlidir. Aslında, deyimleri ayırmak için bir noktalı virgül ve bir satır sonu karakteri gerekir. Yanlış yerde kullanılmış bir satır sonu karakteri bir sözdizimi hatasına sebep olur. Satır sonu karakteri deyimler için bir ayraç olduğundan, bir satırsonu karakterini gizlemek için ters eğik çizgi kullanılabilir. Ters eğik çizgiden sonra gelen bir satır sonu karakterinden oluşan karakter çiftini <command>bc</command> boşluk karakteri olarak değerlendirir. Bir deyim listesi, noktalı virgül ve satır sonu karakteri ile sonlandırımış deyimlerden oluşur. Aşağıdaki listede <command>bc</command>'deki deyimler ve bunların ne yaptıkları anlatılmaktadır (Köşeli ayraçlar  (<command>[ ]</command>) arasına alınanlar, deyimin isteğe bağlı kısımlarıdır.):
    </para>
    <variablelist>
     <varlistentry>
      <term><replaceable>ifade</replaceable></term>
      <listitem>
       <para>
        Bir ifade iki şeyden birini yapar. Eğer ifade "<option>&lt;değişken&gt; &lt;atama&gt; ...</option>" şeklinde başlıyorsa, bir atama deyimi olduğu kabul edilir. Eğer ifade bir atama deyimi değil ise, <replaceable>ifade</replaceable>'nin değeri bulunur ve çıktıya yazdırılır. Sayının ardından satır sonu karakteri yazdırılır. Örneğin, <option>a=1</option> ifadesi bariz bir atama deyimidir; ve <option>(a=1)</option> ise içinde bir atama deyimi olan bir ifadedir. Çıktılanan tüm sayılar <command>obase</command> değişkeni ile belirtilen tabanda yazdırılırlar. <command>obase</command> değişkeninin alabileceği değerler 2 ile <option>BC_BASE_MAX</option> arasındadır. (Ayrıntılı bilgi için <xref linkend="man1-bc-limits"/> bölümüne bakınız.)
       </para>
       <para>
        2 ile 16 arasındaki tabanlar için çıktı bildiğimiz yöntemle yazdırılır. 16'dan daha büyük tabanlar için ise, <command>bc</command> her bir haneyi yazdırmak için 10'luk tabanda birden çok karakter kullanır ve haneler arasında boşluk bırakır. Her hane, <command>obase-1</command> değerini 10'luk düzende yazmak için gereken sayıda rakamdan oluşur. Örneğin, <option>obase=20</option> için 65 sayısı ekrana "<option>03 05</option>" şeklinde yazdırılır.
       </para>
       <para>
        Sayılar keyfi duyarlılıkta ele alındıkları için, bazı sayılar ekrana yazdırılırken tek bir satıra sığmayabilirler. Bu durumda satırların sonuna "\" (ters eğik çizgi) karakteri gelir. Her satırda en fazla 70 karakter yazdırılabilir.
       </para>
       <para>
        <command>bc</command>'nin etkileşimli doğasından dolayı yazılan en son değer, özel <command>last</command> değişkeninde saklanır, böylece aynı sayıyı bir daha elde etmek için bir önceki <replaceable>ifade</replaceable>'yi tekrar yazmaya gerek kalmaz. <command>last</command> değişkenine atama yapılabilir ve atanan değer son yazılan değerin üzerine yazılır. Yeni atanan değer, yeni bir değer ekrana yazılana kadar ya da <command>last</command> değişkenine yeni bir atama yapılana kadar geçerli kalır. (Bazı kurulumlar <command>last</command> için bir kısaltma olarak bir sayının parçası olmayan tek bir nokta (.) kullanımını mümkün kılabilir.)
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><replaceable>dizge</replaceable></term>
      <listitem>
       <para>
        <replaceable>dizge</replaceable> çıktıya yazdırılır. Çift tırnak <option>"..."</option> arasına alınan her şey (satırsonu karakteri de dahil) dizge olarak kabul edilir ve ekrana aynen yazdırılır. <replaceable>dizge</replaceable> yazdırıldıktan sonra satırsonu karakteri yazdırılmaz (yani aşağı satıra geçilmez, bu nedenle satırsonu karakteri <replaceable>dizge</replaceable>'nin içine yerleştirilmelidir).
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <command>print </command>
       <replaceable>liste</replaceable>
      </term>
      <listitem>
       <para>
        <command>print</command> deyimi (bu bir genişletmedir) çıktıya birşeyler yazdırmak için kullanılan başka bir yöntemdir. <replaceable>liste</replaceable> bağımsız değişkeni zorunludur, aralarına virgül (,) konulmuş dizgelerden ve ifadelerden oluşur. <replaceable>liste</replaceable>'deki her dizge veya ifade, yazıldıkları sıraya göre ekrana yazdırılır. Eğer belirtilmediyse satır sonunda satırsonu karakteri yazdırılmaz. İfadelerin değerleri bulunduktan sonra sonuçları ekrana yazdırılır. Bu esnada ekrana en son yazdırılan sayının değeri <command>last</command> değişkenine atanır. <command>print</command> deyimi içindeki dizgeler çıktıya yazdırılır ve özel anlamı olan karakterleri de içerebilir. Özel karakterler ters eğik çizgi karakteri ile başlar. <command>bc</command> tarafından tanınan özel karakterler; "<option>a</option>" (uyarı; bip sesi), "<option>b</option>" (geri silme),  "<option>f</option>" (sayfa ileri), "<option>n</option>" (satır sonu), "<option>q</option>" (çift tırnak), "<option>t</option>" (sekme) ve "<option>\</option>" (ters eğik çizgi) karakterleridir. Bunların dışındaki karakterler yok sayılır.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <command>{</command>
       <replaceable>deyim_listesi</replaceable>
       <command>}</command>
      </term>
      <listitem>
       <para>
        Bu, bir birleşik deyimdir. Bu yapı, birden çok deyimi gruplandırarak birlikte çalıştırmak için kullanılır. Deyimler arasında yukarıda anlatılan ayraçlar yer alır.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <command>if (</command>
       <replaceable>ifade</replaceable>
       <command>)</command>
       <replaceable>deyim1</replaceable>
       <option>[</option>
       <command>else</command>
       <replaceable>deyim2</replaceable>
       <option>]</option>
      </term>
      <listitem>
       <para>
        <command>if </command>deyimi <replaceable>ifade</replaceable>'nin değerini bulur ve <replaceable>ifade</replaceable>'nin sonucuna göre <replaceable>deyim1</replaceable>'i veya <replaceable>deyim2</replaceable>'yi çalıştırır. <replaceable>ifade</replaceable>'nin sonucu sıfırdan farklı ise <replaceable>deyim1</replaceable> işletilir. Eğer <replaceable>deyim2</replaceable> belirtilmişse ve <replaceable>ifade</replaceable>'nin sonucu da sıfır ise, <replaceable>deyim2</replaceable> işletilir (<command>else</command> sözcüğü bir genişletmedir).
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <command>while (</command>
       <replaceable>ifade</replaceable>
       <command>)</command>
       <replaceable>deyim</replaceable>
      </term>
      <listitem>
       <para>
        <command>while</command>deyimi, <replaceable>ifade</replaceable>'nin değeri sıfırdan farklı olduğu müddetçe <replaceable>deyim</replaceable>'i tekrar tekrar işletir. Döngüde her yinelemede önce <replaceable>ifade</replaceable>'nin değeri bulunur, sonuç sıfırdan farklı ise <replaceable>deyim</replaceable> işletilir. <replaceable>ifade</replaceable>'nin sıfır olması durumunda veya çıkmak için <command>break</command> deyimi kullanıldığında döngü sonlanır.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <command>for (</command>
       <option>[</option>
       <replaceable>ifade1</replaceable>
       <option>]</option>
       <command>;</command>
       <option>[</option>
       <replaceable>ifade2</replaceable>
       <option>]</option>
       <command>;</command>
       <option>[</option>
       <replaceable>ifade3</replaceable>
       <option>]</option>
       <command>)</command>
       <replaceable>deyim</replaceable>
      </term>
      <listitem>
       <para>
        <command>for</command> deyimi, <replaceable>deyim</replaceable>'in tekrar tekrar çalıştırılmasını sağlar. İlk başta (yani döngü başlamadan önce) <replaceable>ifade1</replaceable> işletilir. Döngüde her yinelemede <replaceable>deyim</replaceable> işletilmeden önce <replaceable>ifade2</replaceable>'nin değeri bulunur. Eğer sonuç sıfırdan farklı ise <replaceable>deyim</replaceable> yerine getirilir, eğer sonuç sıfır ise döngü sonlandırılır. Döngüde <replaceable>deyim</replaceable> yerine getirildikten sonra <replaceable>ifade3</replaceable> işletilir ve ardından <replaceable>ifade2</replaceable>'nin değeri tekrar bulunur. Ta ki <replaceable>ifade2</replaceable>'nin değeri sıfır oluncaya kadar... Döngüyü daha erken sonlandırmak için <command>break </command>deyimi kullanılabilir. Eğer <replaceable>ifade1</replaceable> veya <replaceable>ifade3</replaceable> kullanılmamışsa, bu noktada değerlendirilecek hiçbir şey olmadığından bir şey yapılmaz. Eğer <replaceable>ifade2</replaceable> kullanılmamışsa, <replaceable>ifade2</replaceable>'nin değeri 1 olarak kabul edilir. (POSIX <command>bc</command>'de her üç ifadeyi de belirtmek mecburidir. Bunların seçimlik kullanılması, bir genişletmedir.) <command>for</command> deyiminine eşdeğer kod şöyledir:
      </para>
<literallayout class="monospaced">
<replaceable>ifade1</replaceable><command>;</command>
<command>while (</command> <replaceable>ifade2</replaceable> <command>) {</command>
  <replaceable>deyim</replaceable><command>;</command>
  <replaceable>ifade3</replaceable><command>;</command>
<command>}</command>
</literallayout>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>break</command></term>
      <listitem>
       <para>
        İçinde yer aldığı son <command>while</command> veya <command>for</command> döngüsünü sonlandırır.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>continue</command></term>
      <listitem>
       <para>
        <command>continue</command> deyimi, (bir genişletmedir) içinde yer aldığı son <command>for</command> döngüsünü kendinden sonra gelen deyimler işletilmeden sonraki yinelemeden başlatır.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>halt</command></term>
      <listitem>
       <para>
        <command>halt</command> deyimi, (bir genişletmedir) <command>bc</command>'yi sonladırır. <command>quit</command>'ten farkı, <command>halt</command> deyimi kesinkes değil, koşul sağlandığında çalışır. Örneğin, "<option>if (0 == 1) halt</option>" deyimi <command>bc</command>'yi hemen sonladırmaz; çünkü koşul sağlanmadığı için <command>halt</command> deyimi işletilmez.
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>return</command></term>
      <listitem>
       <para>
        Bir işlevden <option>0</option> döndürerek çıkar. (Ayrıntılı bilgi için <xref linkend="man1-bc-func"/> bölümüne bakınız.)
      </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <command>return</command>
       <replaceable>( ifade )</replaceable>
      </term>
      <listitem>
       <para>
        Bir işlevden <replaceable>ifade</replaceable>'nin değerini döndürerek çıkar. (Ayrıntılı bilgi için <xref linkend="man1-bc-func"/> bölümüne bakınız.) Bir genişletme olarak yaylı ayraçlar gerekli değildir.
      </para>
      </listitem>
     </varlistentry>
    </variablelist>
  </refsect2>
  <refsect2><title>YARDIMCI DEYİMLER</title>
   <para>
    Yardımcı deyimler, bildiğimiz klasik anlamda işletilebilir deyimler değildirler. Bunlar "derleme" sırasında ele alınırlar.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>limits</command></term>
     <listitem>
      <para>
       <command>bc</command>'nin yerel sürümü tarafından zorlanan yerel sınırları basar. Bu bir genişletmedir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>quit</command></term>
     <listitem>
      <para>
       Her nerede ve her ne şekilde kullanılırsa kullanılsın, <command>bc</command>'yi kesinkes sonlandırır. Örneğin, "<option>if (0 == 1) quit</option>" deyimi, şart sağlanmasa da <command>bc</command>'yi sonlandıracaktır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>warranty</command></term>
     <listitem>
      <para>
       Uzun bir garanti iletisi basar. Bu bir genişletmedir.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect2>
  <refsect2 xml:id="man1-bc-func"><title>İŞLEVLER</title>
   <para>
    İşlevler, daha sonra çalıştırılmak üzere hesaplamaların tanımlandığı bir yöntem sunar. <command>bc</command>'deki işlevler daima bir değer hesaplayıp bunu çağrıcıya döndürürler. İşlev tanımları girdide saptanana kadar bir işlev tanımsızdır. Bu tanımlama, aynı isimde yeni bir işlev tanımlanıncaya kadar geçerlidir. Yeni işlev tanımı eskisinin yerine geçer. Bir işlev aşağıdaki gibi tanımlanır.
   </para>
<literallayout class="monospaced">
<command>define</command> <replaceable>isim</replaceable> <command>(</command> <replaceable>bağımsız değişkenler</replaceable> <command>) {</command> <replaceable>satırsonu</replaceable>
    <replaceable>auto_listesi</replaceable>   <replaceable>deyim_listesi</replaceable> <command>}</command>
</literallayout>
   <para>
    Bir işlev çağrısı ise "<varname>isim</varname><command>(</command><replaceable>bağımsız değişkenler</replaceable><command>)</command>" biçiminde bir ifadedir.
   </para>
   <para>
    Bağımsız değişkenler sayılar ya da dizilerdir (dizi bağımsız değişkenler bir genişletmedir). İşlev tanımında sıfır ya da daha fazla sayıda bağımsız değişken verilebilir ve bunlar aralarına virgül konularak ayrılmış isimlerden oluşan bir liste olarak tanımlanır. Sayılar sadece değerleriyle çağrılan bağımsız değişkenlerdir. Diziler ise sadece değişkenleriyle çağrılırlar. Diziler, bağımsız değişken tanımında "<replaceable>isim</replaceable><option>[]</option>" şeklinde belirtilir. İşlev çağrısında asıl bağımsız değişkenler, sayı türünde ifadelerdir. Aynı yazım şekli, dizi bağımsız değişkenlerinin tanımı olarak dizilerin aktarılmasında da kullanılır. Bir isimli dizi bir işleve değişkeni ile aktarılır. İşlev tanımları dinamik olduklarından, bağımsız değişken sayısı ve türleri işlev çağrıldığında değerlendirilir. Bağımsız değişkenlerin sayısı ve türlerindeki herhangi bir uyumsuzluk bir çalışma anı hatasına sebep olur. Ayrıca, tanımsız bir işlevin çağrılması da bir çalışma anı hatasına sebep olacaktır.
   </para>
   <para>
    <replaceable>auto_listesi</replaceable>, "yerel" kullanım için isteğe bağlı bir değişken listesidir. <replaceable>auto_listesi</replaceable>'nin (eğer varsa) sözdizimi "<command>auto</command> <replaceable>isim,  ...  ;</replaceable>" şeklindedir (Sondaki noktalı virgül isteğe bağlıdır). Her <replaceable>isim</replaceable> <command>auto</command> değişkenin ismidir. Diziler, bağımsız değişkenlerde kullanılan sözdizimi ile belirtilebilir. Bu değişkenler sıfır ile ilklendirilerek, değerleri, işlevin başlangıcında yığıta basılır ve işlevin icrası boyunca kullanılır. İşlevden çıkışta bu değerler yığıttan çekilir, böylece değişkenler işlevin başlangıcındaki ilk değerlerine dönmüş olur. Bağımsız değişkenler gerçekte, işlev çağrısı sırasında ilklendirilen <command>auto</command> değişkenlerdir. <command>auto</command> değişkenler, geleneksel yerel değişkenlerden farklıdır. A işlevi, B işlevini çağırdığında, A işlevinin <command>auto</command> değişkenlerine, B işlevinde <command>auto</command> değişkenler olarak bildirilmedikçe, B işlevi aynı isimlerle erişebilir. <command>auto</command> değişkenler ve bağımsız değişkenler yığıta basıldıklarından dolayı <command>bc</command> kendini çağıran işlevleri destekler.
   </para>
   <para>
    İşlevin gövdesi bir <command>bc</command> deyimleri listesidir. Tekrar belitelim, deyimler noktalı virgül ve satır sonu karakterleri ile birbirlerinden ayrılır. <command>return</command> deyimi işlevin sonlandırılmasına sebep olur ve bir değer döndürür. <command>return</command> deyiminin iki sürümü vardır. ilk şeklinde "<command>return</command>" ifadesi işlevi çağıran ifadeye sıfır değerini döndürür. İkinci şeklinde, "<command>return</command> <replaceable>( ifade )</replaceable>", <replaceable>ifade</replaceable>'nin değeri hesaplanıp çağıran ifadeye sonucu döndürülür. Her işlevin sonunda kendiliğinden bir <command>return(0)</command> vardır. Böylece bir işlevin sonunda açıkça bir <command>return</command> deyimi kullanmaya gerek kalmaksızın işlev sıfır değeri döndürerek sonlanır.
   </para>
   <para>
    İşlevler ayrıca, <command>ibase</command> değişkeninin kullanımını da değiştirir. İşlev gövdesindeki tüm sabitler, işlev çağrısı sırasında <command>ibase</command> değişkeninin değeri kullanılarak dönüştürülür. Sayıların dönüşümü için daima  <command>ibase</command>'in o anki değerini kullanan yerleşik <command>read</command> işlevi dışında, işlev icrası sırasında <command>ibase</command> değişiklikleri gözardı edilir.
   </para>
   <para>
    Bir geliştirme olarak, tanım biçimi pek az esnektir. Standart, işlev gövdesini oluşturan ilk kuyruklu ayracın <command>define</command> ile aynı satırda olmasını ve kalan her şeyin alt satırlarda olmasını gerektirir. <command>bc</command>'nin bu sürümü, ilk kaşlı ayraçın öncesinde ya da sonrasında satır sonu karakteri kullanabilmeyi mümkün kılar. Örneğin aşağıdakiler geçerli tanımlardır:
   </para>
<screen>
define d (n) { return (2*n); }
define d (n)
  { return (2*n); }
</screen>
   <para>
     İşlevler <command>void</command> olarak tanımlanabilir. Void işlevler değer döndürmediğinden değer gerektiren yerlerde kullanılamaz. Void işlevler girdi satırında kendisi tarafından çağrıldığında herhangi bir çıktı üretmez. <command>void</command> sözcüğü <command>define</command> sözcüğü ile işlev ismi arasına yerleştirilir. Örneğin, aşağıdakileri ele alalım:
   </para>
<screen>
define py (y) { print "---&gt;", y, "&lt;---", "\n"; }
define void px (x) { print "---&gt;", x, "&lt;---", "\n"; }
py(1)
---&gt;1&lt;---
0
px(1)
---&gt;1&lt;---
</screen>
   <para>
    <command>py</command> void işlev olmadığından <command>py(1)</command> çağrısı isteneni bastıktan sonra işlevin dönüş değerini basar.  İşlev bir <command>return</command> deyimi içermediğinden öntanımlı olan <command>return(0)</command>'dan dolayı <option>0</option> değeri basılır. <command>px(1</command>) için void işlev olduğundan <option>0</option> basılmaz.
   </para>
   <para>
    Ayrıca, bağımsız değişken dizisi içeren çağrı da eklendi. Bağımsız değişken dizisi içeren çağrıyı bildirmek için işlev tanımındaki dizi bağımsız değişkeni "<option>*</option><replaceable>isim</replaceable><option>[]</option>" sözdizimi ile kullanılır. Dizideki bağımsız değişkenlerin değerleriyle çağrılması nedeniyle işlev çağrısı aynı kalır.
   </para>
  </refsect2>
  <refsect2><title>MATH KÜTÜPHANESİ</title>
   <para>
    <command>bc</command>, <command>-l</command> seçeneği ile çalıştırıldığında  math kütüphanesini yükler ve öntanımlı bölüntü 20 yapılır. math işlevleri, çağrıldıkları sırada geçerli olan bölüntüye göre sonuç döndürürler. Math kütüphanesi aşağıdaki işlevleri tanımlar:
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <command>s</command>
      <option>(</option><replaceable>x</replaceable><option>)</option>
     </term>
     <listitem>
      <para>
       Radyan cinsinden <replaceable>x</replaceable>'in sinüsü.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>c</command>
      <option>(</option><replaceable>x</replaceable><option>)</option>
     </term>
     <listitem>
      <para>
       Radyan cinsinden <replaceable>x</replaceable>'in kosinüsü.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>a</command>
      <option>(</option><replaceable>x</replaceable><option>)</option>
     </term>
     <listitem>
      <para>
       <replaceable>x</replaceable>'in arktanjantı; radyan cinsinden döner.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>l</command>
      <option>(</option><replaceable>x</replaceable><option>)</option>
     </term>
     <listitem>
      <para>
       <replaceable>x</replaceable>'in doğal logaritması.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>e</command>
      <option>(</option><replaceable>x</replaceable><option>)</option>
     </term>
     <listitem>
      <para>
       <option>e</option> üssü <replaceable>x</replaceable>.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>j</command>
      <option>(</option><replaceable>n</replaceable><option>,</option>
      <replaceable>x</replaceable><option>)</option>
     </term>
     <listitem>
      <para>
       <replaceable>x</replaceable> tamsayısına göre <replaceable>n</replaceable>'inci dereceden Bessel işlevi.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect2>
  <refsect2><title>ÖRNEKLER</title>
   <para>
    <filename>/bin/sh</filename>'da aşağıdaki atama, kabuk değişkeni <command>pi</command>'ye pi değerini atar.
   </para>
<screen>
pi=$(echo "scale=10; 4*a(1)" | bc -l)
</screen>
   <para>
    Aşağıdaki örnekte, math kütüphanesinde kullanılan üstel işlevin tanımı vardır. Bu işlev POSIX <command>bc</command>'de yazılmıştır.
   </para>
<screen>
scale = 20

/* e^x = (e^(x/2))^2 formülü kullanılıyor
  x yeterinde küçükse, bu seriyi kullanabiliriz:
    e^x = 1 + x + x^2/2! + x^3/3! + ...
*/

define e(x) {
  auto  a, d, e, f, i, m, v, z

  /* x pozitif olmalı. */
  if (x&lt;0) {
    m = 1
    x = -x
  }

  /* x için önkoşul. */
  z = scale;
  scale = 4 + z + .44*x;
  while (x &gt; 1) {
    f += 1;
    x /= 2;
  }

  /* Değişkenleri ilklendirelim. */
  v = 1+x
  a = x
  d = 1

  for (i=2; 1; i++) {
    e = (a *= x) / (d *= i)
    if (e == 0) {
      if (f&gt;0) while (f--)  v = v*v;
      scale = z
      if (m) return (1/v);
      return (v/1);
    }
    v += e
  }
}
</screen>
   <para>
    Aşağıdaki örnekte, çek defteri bakiyelerini hesaplayan basit bir yazılım verilmektedir. Yazılım bir kez yazılıp bir dosyaya kaydedebilir ve sonraları her seferinde yeniden yazmaksızın gerektiği zaman kullanılabilir.
   </para>
<screen>
scale=2
print "\nÇek defteri yazılımı!\n"
print "  Hatırlatma: Depozitolar negatif miktarlardır.\n"
print "  Çıkış için 0 yazın.\n\n"

print "Başlangıçtaki bakiye? "; bal = read()
bal /= 1
print "\n"
while (1) {
  "şu anki bakiye = "; bal
  "çekilecek miktar? "; trans = read()
  if (trans == 0) break;
  bal -= trans
  bal /= 1
}
quit
</screen>
   <para>
    Aşağıdaki örnekte ise, kendi kendini çağıran bir faktöriyel hesaplama işlevi tanımlanmaktadır.
   </para>
<screen>
define f (x) {
  if (x &lt;= 1) return (1);
  return (f(x-1) * x);
}
</screen>
  </refsect2>
  <refsect2><title>READLINE ve LIBEDIT SEÇENEKLERİ</title>
   <para>
    GNU <command>bc</command> (bir yapılandırma seçeneği ile), GNU <command>readline</command> girdi düzenleme kütüphanesini ya da BSD <command>libedit</command> kütüphanesini kullanacak şekilde derlenebilir. Bu ise kullanıcıya, <command>bc</command>'ye göndermeden önce birden çok satır üzerinde düzenleme yapma imkanı sunar. Ayrıca, daha önceden girilen satırlar için bir geçmiş de tutar. Bu seçenek seçilirse, <command>bc</command> bir özel değişkene daha sahip olur. Bu özel <command>history</command> değişkeni, bellekte tutulacak satır sayısını tutar. -1  değeri sınırsız (bellek yettiği müddetçe) sayıda eski komut tutulacağını belirtir ve öntanımlı değeri 100'dür. Eğer pozitif bir tamsayı belirtilirse, liste bu belirtilen sayı ile sınırlandırılmış olur. 0 değeri ise liste tutulmayacağını belirtir.
   </para>
   <para>
    Daha ayrıntılı bilgi için, GNU <command>readline</command>, <command>history</command> ve BSD <command>libedit</command> kütüphanesi hakkındaki belgeleri okuyunuz. <command>bc</command>,  <command>readline</command> ve <command>libedit</command> kütüphaneleri aynı anda etkin olacak şekilde derlenemez.
   </para>
  </refsect2>
  <refsect2><title>FARKLILIKLAR</title>
   <para>
    <command>bc</command>'nin bu sürümü, POSIX P1003.2/D11 taslağından uyarlanmıştır ve taslağa göre ve geleneksel <command>bc</command> uygulamalarına göre bir takım farklılıklar sözkonusudur. <uri xlink:href="man1-dc"/> kullanılan geleneksel yolla gerçekleştirilmemiştir. Bu sürüm, yazılımın kodlarını ayrıştırarak bayt koda çevirdikten sonra tek bir süreç  olarak çalıştırır. Komut satırından verilen ve belgelendirilmemiş <command>-c</command> seçeneği ile yazılım çalıştırılmaz, onun yerine bayt kodları ekrana listelenir. Bu, aslında etkileşimli olarak ayrıştırıcının hatalarını görmek/gidermek ve math kütüphanesini hazırlamak için kullanılır.
   </para>
   <para>
    POSIX <command>bc</command>'den asıl farklılıklar, bir özelliğin daha fazla işlevsellik eklemek için genişletildiği genişletmeler ve yeni özelliklerin eklendiği eklemelerdir. Aşağıda,eklemelerin ve genişletmelerin bir listesi yer almaktadır:
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <envar>LANG</envar>
     </term>
     <listitem>
      <para>
       Bu sürüm <option>LANG</option> ve <option>LC_</option> ile  başlayan ortam değişkenlerinin işlenmesinde POSIX standardına uyumlu değildir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>isimler</term>
     <listitem>
      <para>
       Geleneksel ve POSIX <command>bc</command> değişkenler, diziler ve işlevler için sadece tek harften oluşan isimleri mümkün kılar. GNU <command>bc</command>'de bu isimler için çok karakterli isimler kullanılabilir ve her isim bir harf ile başlar, harfler, rakamlar ile altçizgi karakterini içerebilir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dizgeler</term>
     <listitem>
      <para>
       Dizgelerde NUL karakter kullanılmasına izin verilmez, POSIX'e göre dizgelerde tüm karakterler kullanılabilmelidir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <command>last</command>
     </term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de bir <command>last</command> değişkeni yoktur. <command>bc</command>'nin bazı gerçeklemelerinde bunun yerine nokta (.) kullanılır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>karşılaştırmalar</term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de karşılaştırmalar sadece <command>if</command>, <command>while</command> deyimlerinde ve <command>for</command> deyiminin ikinci ifadesinde kullanılabilir. Ayrıca bu deyimlerde sadece bir ilişkisel işleme izin verilir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>if</command> deyimi ve <command>else</command> sözcüğü</term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de <command>else</command> sözcüğü yoktur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>for</command> deyimi</term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de tüm ifadelerin deyim içinde kullanılması gerekir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <option>&amp;&amp;, ||, !</option>
     </term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de mantıksal işleçler yoktur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>read</command> işlevi</term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de <command>read</command> işlevi yoktur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>print</command> deyimi</term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de <command>print</command> deyimi yoktur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>continue</command> deyimi</term>
     <listitem>
      <para>
       POSIX <command>bc</command>'de <command>continue</command> deyimi yoktur.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>return</command> deyimi</term>
     <listitem>
      <para>
       POSIX <command>bc</command>, <command>return</command> ifadesinin yaylı ayraç içine alınmasını gerektirir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dizi bağımsız değişkenleri</term>
     <listitem>
      <para>
       POSIX <command>bc</command>  (şimdilik) dizi bağımsız değişkenlerini tamamen desteklememektedir.  POSIX sözdiziminde, işlev tanımlarında dizilere izin veriliyor, ancak bir dizinin bir işleve bağımsız değişken olarak aktarılması desteklenmiyor. (Bu, aslında gözden kaçan bir dikkatsizliğin sonucudur.) Geleneksel <command>bc</command> gerçeklemeleri, dizileri sadece elemanlarının değerleri ile çağırabilmektedirler.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>işlev biçimi</term>
     <listitem>
      <para>
       POSIX <command>bc</command> ilk kaşlı ayracın <command>define</command> anahtar sözcüğünün bulunduğu satırda, <command>auto</command> anahtar sözcüğünün de alt satırında olmasını gerektirir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <option>=+, =-, =*, =/, =%, =^</option>
     </term>
     <listitem>
      <para>
       POSIX <command>bc</command> bu "eski tarz" atama işleçlerinin tanımlanmasını gerektirmez. Bu sürüm bu "eski tarz" atamalara izin verebilir. <command>limits</command> deyimini kullanarak kurulu sürümün bu atamaları destekleyip desteklemediğini öğrenebilirsiniz. Eğer destekliyorsa, "<option>a =- 1</option>" atamasında <option>a</option> değişkenine -1 atanmayacak, <option>a</option> değişkeninin değeri bir eksiltilecektir.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>sayılardaki boşluklar</term>
     <listitem>
      <para>
       <command>bc</command>'nin diğer gerçeklemeleri sayıların içinde boşluklara izin verir. "<option>x=1  3</option>" ataması, "<option>x=13</option>" olarak değerlendirilecektir. Aynı ifade bu sürümde bir sözdizimi hatasına sebep olacaktır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>çalıştırma ve hatalar</term>
     <listitem>
      <para>
       Bu <command>bc</command>, yazılım içerinde sözdizimi ve diğer hataların bulunması durumunda kodun işletilmesi konusunda diğer gerçeklemelere göre oldukça farklılıklar içermektedir. Eğer bir işlev tanımlanırken bir sözdizimi hatası yapılmışsa, hata düzeltme mekanizması deyimin başlangıcını bulmaya çalışır, ilk hatalı satırı bulur ve satır numarasını ekrana yazar; sonra yine de işlevin geri kalan kısımlarını ayrıştırmaya devam eder. İşlev içinde bir kez bile hata yapılmışsa, o işlev 'çağrılamaz' addedilir ve tanımsız olur.
      </para>
      <para>
       Etkileşimli ortamda çalışırken bir sözdizimi hatası yapılırsa, bir uyarı gelir ve çalıştırılacak olan o anki küme geçersiz sayılır. İşletim kümesi, yazılışı tamamlanmış basit veya birleşik bir deyimden sonra satırsonu karakteri bulunan yapıdır. Örneğin,
      </para>
<screen>
a = 1
b = 2
</screen>
      <para>iki ayrı işletim kümesidir. Ancak,</para>
<screen>
{ a = 1
 b = 2 }
</screen>
      <para>
       tek işletim kümesidir. Oluşan herhangi bir çalışma anı hatası (error), o anki işletim kümesini sonlandırır. Ancak, oluşan herhangi bir çalışma anı uyarısı (warning) işletim kümesini sonlandırmaz.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>kesmeler</term>
     <listitem>
      <para>
       Bir etkileşimli oturumda, <constant>SIGINT</constant> sinyali (genelde klavyeden Ctrl-C'ye basıldığında üretilir)  o anda işletilmekte olan kümenin yarıda kesilmesine neden olur. Hangi işlevin yarıda kesildiğini belirten bir çalışma anı hatası ekrana yazdırılır. Ardından, tüm çalışma anı yapılarının "temizlenme"sinden sonra, <command>bc</command>'nin yeni girdiler almak için hazır olduğunu yazan bir ileti belirir. Önceden tanımlanmış olan tüm işlevler ve <command>auto</command>-olmayan değişkenler bu noktadan önceki değerleriyle aynen kalırlar. Tüm <command>auto</command> değişkenler ve işlev bağımsız değişkenleri bu "temizleme" işlemi esnasında silinirler. Etkileşimli olmayan bir oturumda ise <constant>SIGINT</constant> sinyali, <command>bc</command>'nin çalışmasını sonlandırır.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect2>
  <refsect2 xml:id="man1-bc-limits">
   <title>SINIRLAR</title>
   <para>
    Aşağıda bu <command>bc</command>'nin işlem yapabileceği sınırlar verilmiştir. Bunlardan bazıları aslında her bir kurulum için farklı farklı olabilir. Bunların geçerli değerlerini öğrenmek için <command>limits</command> deyimini kullanın.
   </para>
   <variablelist>
    <varlistentry>
     <term>
      <constant>BC_BASE_MAX</constant>
     </term>
     <listitem>
      <para>
       Azami çıktı tabanı, 999'dur. Azami girdi tabanı ise 16'dır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>BC_DIM_MAX</constant>
     </term>
     <listitem>
      <para>
       Dizilerde indisleme sınırı, keyfi olarak 65535 olarak belirlenmiştir. Kurulumunuzda farklı olabilir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>BC_SCALE_MAX</constant>
     </term>
     <listitem>
      <para>
       Sayılarda ondalık noktadan sonraki hane sayısı <constant>INT_MAX</constant> ile sınırlanmıştır. Ayrıca ondalık noktadan önceki hane sayısı da <constant>INT_MAX</constant> ile sınırlanmıştır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <constant>BC_STRING_MAX</constant>
     </term>
     <listitem>
      <para>
       Dizgelerin içerebileceği karakter sayısı <constant>INT_MAX</constant> ile sınırlanmıştır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>üs</term>
     <listitem>
      <para>
       Üstel değerlerde üssün (^) sınırı <constant>LONG_MAX</constant>'tır.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>değişken isimleri</term>
     <listitem>
      <para>
       Basit değişken, dizi ve işlev isimlerinin her biri için eşsiz isim sayısı 32767 ile sınırlanmıştır.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect2>
 </refsect1>
 <refsect1><title>ORTAM DEĞİŞKENLERİ</title>
  <para>
   <command>bc</command> tarafından tanınan ortam değişkenleri şunlardır:
  </para>
  <variablelist>
   <varlistentry>
    <term><envar>POSIXLY_CORRECT</envar></term>
    <listitem>
     <para>
      <command>-s</command> seçeneği ile aynıdır.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><envar>BC_ENV_ARGS</envar></term>
    <listitem>
     <para>
      Bu, <command>bc</command>'nin bağımsız değişkenleri almak için kullandığı diğer bir mekanizmadır. Biçimi komut satırı bağımsız değişkenleri ile aynıdır. Bu ortam değişkenlerinde listelenmiş dosyalar, komut satırında belirtilen dosyalardan önce işlem görür. Bu, kullanıcıya "standart" seçenekleri ve dosyaları ayarlama imkanını sunar. Ortam değişkenlerinde belirtilen dosyalar genellikle içlerinde kullanıcının tanımladığı işlevler olan ve dosyalardır. Bu ayarlama ile artık, <command>bc</command> her çalıştırıldığında belirtilen dosyalar işleme sokulur.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><envar>BC_LINE_LENGTH</envar></term>
    <listitem>
     <para>
      Bu, sayılar ekrana yazdırılırken bir satırda kaç karakter olacağını belirten bir tamsayıdır. Uzun (yani, tek satıra sığmayan) sayılar için \ (ters eğik çizgi) ve satırsonu karakterleri bu miktara dahildir. Bu değişkene atanan 3'ten küçük değerler için satır uzunluğu 70 yapılır.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1><title>HATA AYIKLAMA</title>
  <para>
   Eğer komut satırında belirtilen dosyalardan biri açılamazsa <command>bc</command> bunu bildirir ve hemen sonlanır. Ayrıca, derleme ve çalışma-anı hatalarında bunlar ekrana hata numaraları ile birlikte yazdırılır ve bu esnada açıklayıcı bilgiler verilir.
  </para>
 </refsect1>
 <refsect1><title>YAZILIM HATALARI</title>
  <para>
   Hata bulma/düzeltme henüz çok iyi değil.
  </para>
  <para>
   Hataları bildirmek için konu alanına "bc" yazarak &lt;bug-bc (at) gnu.org&gt; adresine e-posta atınız.
  </para>
 </refsect1>
 <refsect1><title>YAZAN</title>
  <para>
   Philip A. Nelson tarafından yazılmıştır.
  </para>
 </refsect1>
 <refsect1><title>TELİF HAKKI</title>
  <para>
   Telif hakkı © 2017 Free Software Foundation, Inc. Lisans GPLv3+: GNU GPL sürüm 3 veya üstü &lt;<link xlink:href="http://gnu.org/licenses/gpl.html"/>&gt; Bu bir özgür yazılımdır: yazılımı değiştirmek ve dağıtmakta özgürsünüz. Yasaların izin verdiği ölçüde HİÇBİR GARANTİ YOKTUR.
  </para>
 </refsect1>
 <refsect1><title>TEŞEKKÜRLER</title>
  <para>
   Yazar kodun sınanmasındaki geniş yardımlarından dolayı Steve Sommars'a  teşekkürlerinin kabulünü rica ediyor. Bir çok öneride bulundu ve onun katılımıyla bu çok daha iyi bir ürün oldu.
  </para>
 </refsect1>
 <refsect1><title>ÇEVİREN</title>
  <simpara>© 1999 Adem Güneş</simpara>
  <simpara>© 2004, 2022 Nilgün Belma Bugüner</simpara>
  &manpages.notice;
 </refsect1>
</refentry>
