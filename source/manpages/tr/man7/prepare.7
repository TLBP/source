.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:37+02:00  
.TH "PREPARE" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
PREPARE \N'45' prepare a statement for execution   
.SH KULLANIM 
.nf
\fBPREPARE\fR \fItaslak_ismi\fR [ (\fIveri_türü\fR [, ...] ) ] \fBAS\fR \fIdeyim\fR
.fi
    
.SH AÇIKLAMALAR
\fBPREPARE\fR creates a prepared statement. A prepared    statement is a server\N'45'side object that can be used to optimize    performance. When the \fBPREPARE\fR statement is    executed, the specified statement is parsed, rewritten, and    planned. When an \fBEXECUTE\fR command is subsequently    issued, the prepared statement need only be executed. Thus, the    parsing, rewriting, and planning stages are only performed once,    instead of every time the statement is executed.   

Prepared statements can take parameters: values that are    substituted into the statement when it is executed. To include    parameters in a prepared statement, supply a list of data types in    the \fBPREPARE\fR statement, and, in the statement to    be prepared itself, refer to the parameters by position using    $1, $2, etc. When executing    the statement, specify the actual values for these parameters in    the \fBEXECUTE\fR statement.  Refer to \fBEXECUTE\fR [execute(7)] for more    information about that.   

Prepared statements only last for the duration of the current    database session. When the session ends, the prepared statement is    forgotten, so it must be recreated before being used again. This    also means that a single  prepared statement cannot be used by    multiple simultaneous database clients; however, each client can create    their own prepared statement to use.  The prepared statement can be    manually cleaned up using the \fBDEALLOCATE\fR command.   

Prepared statements have the largest performance advantage when a    single session is being used to execute a large number of similar    statements. The performance difference will be particularly    significant if the statements are complex to plan or rewrite, for    example, if the query involves a join of many tables or requires    the application of several rules. If the statement is relatively simple    to plan and rewrite but relatively expensive to execute, the    performance advantage of prepared statements will be less noticeable.   

.SH PARAMETRELER   
.br
.ns
.TP 
\fItaslak_ismi\fR
An arbitrary name given to this particular prepared       statement. It must be unique within a single session and is       subsequently used to execute or deallocate a previously prepared       statement.     

.TP 
\fIveri_türü\fR
The data type of a parameter to the prepared statement.  To       refer to the parameters in the prepared statement itself, use       $1, $2, etc.     

.TP 
\fIdeyim\fR
Any \fBSELECT\fR, \fBINSERT\fR, \fBUPDATE\fR,       or \fBDELETE\fR statement.     

.PP  
.SH EK BİLGİ
In some situations, the query plan produced for a prepared    statement will be inferior to the query plan that would have been    chosen if the statement had been submitted and executed    normally. This is because when the statement is planned and the    planner attempts to determine the optimal query plan, the actual    values of any parameters specified in the statement are    unavailable. PostgreSQL collects    statistics on the distribution of data in the table, and can use    constant values in a statement to make guesses about the likely    result of executing the statement. Since this data is unavailable    when planning prepared statements with parameters, the chosen plan    may be suboptimal. To examine the query plan    PostgreSQL has chosen for a prepared    statement, use \fBEXPLAIN\fR [explain(7)].   

For more information on query planning and the statistics collected    by PostgreSQL for that purpose, see    the \fBANALYZE\fR [analyze(7)]    documentation.   

.SH ÖRNEKLER
Create a prepared query for an \fBINSERT\fR statement,    and then execute it:  


.RS 4
.nf
PREPARE fooplan (int, text, bool, numeric) AS
\    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, \N'39'Hunter Valley\N'39', \N'39't\N'39', 200.00);
.fi
.RE   

Create a prepared query for a \fBSELECT\fR statement,    and then execute it:   


.RS 4
.nf
PREPARE usrrptplan (int, date) AS
\  SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
\  AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
.fi
.RE   

.SH UYUMLULUK
The SQL standard includes a \fBPREPARE\fR statement,    but it is only for use in embedded SQL. This version of the    \fBPREPARE\fR statement also uses a somewhat different    syntax.   

.SH SEE ALSO
\fBDEALLOCATE\fR [deallocate(7)], \fBEXECUTE\fR [execute(7)].   

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Nisan 2005 
 
   
