.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:37+02:00  
.TH "GRANT" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
GRANT \N'45' erişim izinlerini tanımlar   
.SH KULLANIM 
.nf
\fBGRANT\fR
\  {{ \fBSELECT\fR | \fBINSERT\fR | \fBUPDATE\fR | \fBDELETE\fR | \fBRULE\fR | \fBREFERENCES\fR | \fBTRIGGER\fR }
\    [,...] | \fBALL\fR [ \fBPRIVILEGES\fR ] }
\  \fBON\fR [ \fBTABLE\fR ] \fItablo_ismi\fR [, ...]
\  \fBTO\fR { \fIkullanıcı\fR | \fBGROUP\fR \fIgrup\fR | \fBPUBLIC\fR } [, ...] [ \fBWITH GRANT OPTION\fR ]

\fBGRANT\fR { { \fBCREATE\fR | \fBTEMPORARY\fR | \fBTEMP\fR } [,...] | \fBALL\fR [ \fBPRIVILEGES\fR ] }
\  \fBON DATABASE\fR \fIdbismi\fR [, ...]
\  \fBTO\fR { \fIkullanıcı\fR | \fBGROUP\fR \fIgrup\fR | \fBPUBLIC\fR } [, ...] [ \fBWITH GRANT OPTION\fR ]

\fBGRANT\fR { \fBEXECUTE\fR | \fBALL\fR [ \fBPRIVILEGES\fR ] }
\  \fBON FUNCTION\fR \fIişlev_ismi\fR ([\fItür\fR, ...]) [, ...]
\  \fBTO\fR { \fIkullanıcı\fR | \fBGROUP\fR \fIgrup\fR | \fBPUBLIC\fR } [, ...] [ \fBWITH GRANT OPTION\fR ]

\fBGRANT\fR { \fBUSAGE\fR | \fBALL\fR [ \fBPRIVILEGES\fR ] }
\  \fBON LANGUAGE\fR \fIdil_ismi\fR [, ...]
\  \fBTO\fR { \fIkullanıcı\fR | \fBGROUP\fR \fIgrup\fR | \fBPUBLIC\fR } [, ...] [ \fBWITH GRANT OPTION\fR ]

\fBGRANT\fR { { \fBCREATE\fR | \fBUSAGE\fR } [,...] | \fBALL\fR [ \fBPRIVILEGES\fR ] }
\  \fBON SCHEMA\fR \fIşema_ismi\fR [, ...]
\  \fBTO\fR { \fIkullanıcı\fR | \fBGROUP\fR \fIgrup\fR | \fBPUBLIC\fR } [, ...] [ \fBWITH GRANT OPTION\fR ]

\fBGRANT\fR { \fBCREATE\fR | \fBALL\fR [ \fBPRIVILEGES\fR ] }
\  \fBON TABLESPACE\fR \fItablo_alanı_ismi\fR [, ...]
\  \fBTO\fR { \fIkullanıcı\fR | \fBGROUP\fR \fIgrup\fR | \fBPUBLIC\fR } [, ...] [ \fBWITH GRANT OPTION\fR ]
.fi
    
.SH AÇIKLAMA
\fBGRANT\fR komutu, bir ya da daha fazla kullanıcı veya kullanıcı grubuna bir nesne ( tablo, sanal tablo, kayıt listesi, veritabanı, işlev, yordamsal dil, şema veya tablo alanı) üzerinde özel izinler zermek için kullanılır. Bu izinler, varsa evvelce verilmiş izinlere eklenir.   

\fBPUBLIC\fR sözcüğü, izinlerin bundan sonra oluşturulacakları da içererek tüm kullanıcılara verileceğini belirtir. \fBPUBLIC\fR daima tüm kulllanıcıları içeren örtük tanımlı bir grup olarak düşünülebilir. herhangi bir kullanıcı doğrudan kendine verilmiş izinlere sahip olabileceği gibi, üyesi olduğu grupların izinleri ile \fBPUBLIC\fR ile verilmiş izinlere de sahip olabilir.   

Eğer \fBWITH GRANT OPTION\fR belirtilmişse, izinlerin verildiği kullanıcı/grup, bu izinleri başkalarına verebilir. Bu belirtilmeksizin, bu kullanıcı/grup bu yetkiyi kullanamaz. Şimdilik, bu yetki gruplara ya da \fBPUBLIC\fR\N'39'e verilememekte, sadece kullanıcılara verilebilmektedir.   

Bir nesnenin sahibine (yani onu oluşturan kişiye), zaten nesne üzerinde tüm yetkiler öntanımlı olarak ona ait olduğundan, nesne ile ilgili izinleri vermeye gerek yoktur. (Yine de, nesne sahibinin güvenlik kaygılarıyla bazı yetkileri yürürlükten kaldırmış olması ihtimali vardır.)    There is no need to grant privileges to the owner of an object    (usually the user that created it),    as the owner has all privileges by default.  (The owner could,    however, choose to revoke some of his own privileges for safety.)    The right to drop an object, or to alter its definition in any way is    not described by a grantable privilege; it is inherent in the owner,    and cannot be granted or revoked.  The owner implicitly has all grant    options for the object, too.   

Depending on the type of object, the initial default privileges may    include granting some privileges to \fBPUBLIC\fR.    The default is no public access for tables, schemas, and tablespaces;    \fBTEMP\fR table creation privilege for databases;    \fBEXECUTE\fR privilege for functions; and    \fBUSAGE\fR privilege for languages.    The object owner may of course revoke these privileges.  (For maximum    security, issue the \fBREVOKE\fR in the same transaction that    creates the object; then there is no window in which another user    may use the object.)   

The possible privileges are:   


.br
.ns
.TP 
\fBSELECT\fR
Allows \fBSELECT\fR [select(7)] from any column of the specified table, view, or sequence.  Also allows the use of \fBCOPY TO\fR [copy(7)].  For sequences, this privilege also allows the use of the currval function.      

.TP 
\fBINSERT\fR
Allows \fBINSERT\fR [insert(7)] of a new row into the specified table.  Also allows \fBCOPY FROM\fR [copy(7)].      

.TP 
\fBUPDATE\fR
Allows \fBUPDATE\fR [update(7)] of any column of the        specified table.  \fBSELECT ... FOR UPDATE\fR        also requires this privilege (besides the        \fBSELECT\fR privilege).  For sequences, this        privilege allows the use of the nextval and        setval functions.      

.TP 
\fBDELETE\fR
Allows \fBDELETE\fR [delete(7)] of a row from the        specified table.      

.TP 
\fBRULE\fR
Allows the creation of a rule on the table/view.  (See the \fBCREATE RULE\fR [create_rule(7)] statement.)      

.TP 
\fBREFERENCES\fR
To create a foreign key constraint, it is        necessary to have this privilege on both the referencing and        referenced tables.      

.TP 
\fBTRIGGER\fR
Allows the creation of a trigger on the specified table.  (See the        \fBCREATE TRIGGER\fR [create_trigger(7)] statement.)      

.TP 
\fBCREATE\fR
For databases, allows new schemas to be created within the database.       

For schemas, allows new objects to be created within the schema.        To rename an existing object, you must own the object \fIand\fR        have this privilege for the containing schema.       

For tablespaces, allows tables and indexes to be created within the        tablespace, and allows databases to be created that have the tablespace        as their default tablespace.  (Note that revoking this privilege        will not alter the placement of existing objects.)      

.TP 
\fBTEMPORARY\fR, \fBTEMP\fR
Allows temporary tables to be created while using the database.      

.TP 
\fBEXECUTE\fR
Allows the use of the specified function and the use of any        operators that are implemented on top of the function.  This is        the only type of privilege that is applicable to functions.        (This syntax works for aggregate functions, as well.)      

.TP 
\fBUSAGE\fR
For procedural languages, allows the use of the specified language for        the creation of functions in that language.  This is the only type        of privilege that is applicable to procedural languages.       

For schemas, allows access to objects contained in the specified        schema (assuming that the objects\N'39' own privilege requirements are        also met).  Essentially this allows the grantee to "look up"        objects within the schema.      

.TP 
\fBALL PRIVILEGES\fR
Grant all of the available privileges at once.        The \fBPRIVILEGES\fR key word is optional in        PostgreSQL, though it is required by        strict SQL.      

.PP    

The privileges required by other commands are listed on the    reference page of the respective command.   

.SH EK BİLGİ
The \fBREVOKE\fR [revoke(7)] command is used     to revoke access privileges.    

When a non\N'45'owner of an object attempts to \fBGRANT\fR privileges     on the object, the command will fail outright if the user has no     privileges whatsoever on the object.  As long as some privilege is     available, the command will proceed, but it will grant only those     privileges for which the user has grant options.  The \fBGRANT ALL     PRIVILEGES\fR forms will issue a warning message if no grant options are     held, while the other forms will issue a warning if grant options for     any of the privileges specifically named in the command are not held.     (In principle these statements apply to the object owner as well, but     since the owner is always treated as holding all grant options, the     cases can never occur.)    

It should be noted that database superusers can access     all objects regardless of object privilege settings.  This     is comparable to the rights of root in a Unix system.     As with root, it\N'39's unwise to operate as a superuser     except when absolutely necessary.    

If a superuser chooses to issue a \fBGRANT\fR or \fBREVOKE\fR     command, the command is performed as though it were issued by the     owner of the affected object.  In particular, privileges granted via     such a command will appear to have been granted by the object owner.    

Currently, PostgreSQL does not support     granting or revoking privileges for individual columns of a table.     One possible workaround is to create a view having just the desired     columns and then grant privileges to that view.    

Use \fBpsql(1)\fR\N'39's \fB\\z\fR command     to obtain information about existing privileges, for example:    


.nf
=> \\z mytable

\                        Access privileges for database "lusitania"
\ Schema |  Name   | Type  |                     Access privileges
\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
\ public | mytable | table | {miriam=arwdRxt/miriam,=r/miriam,"group
\                             todos=arw/miriam"}
(1 row)
.fi    

The entries shown by \fB\\z\fR are interpreted thus:    


.RS 4
.nf
\          =xxxx \N'45'\N'45' privileges granted to PUBLIC
\      uname=xxxx \N'45'\N'45' privileges granted to a user
group gname=xxxx \N'45'\N'45' privileges granted to a group

\              r \N'45'\N'45' SELECT ("read")
\              w \N'45'\N'45' UPDATE ("write")
\              a \N'45'\N'45' INSERT ("append")
\              d \N'45'\N'45' DELETE
\              R \N'45'\N'45' RULE
\              x \N'45'\N'45' REFERENCES
\              t \N'45'\N'45' TRIGGER
\              X \N'45'\N'45' EXECUTE
\              U \N'45'\N'45' USAGE
\              C \N'45'\N'45' CREATE
\              T \N'45'\N'45' TEMPORARY
\        arwdRxt \N'45'\N'45' ALL PRIVILEGES (for tables)
\              * \N'45'\N'45' grant option for preceding privilege

\          /yyyy \N'45'\N'45' user who granted this privilege
.fi
.RE    

The above example display would be seen by user miriam after     creating table mytable and doing    


.RS 4
.nf
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO GROUP todos;
.fi
.RE    

If the "Access privileges" column is empty for a given object, it means the object has default privileges (that is, its privileges column is null).  Default privileges always include all privileges for the owner, and may include some privileges for \fBPUBLIC\fR depending on the object type, as explained above.  The first \fBGRANT\fR or \fBREVOKE\fR on an object will instantiate the default privileges (producing, for example, {miriam=arwdRxt/miriam}) and then modify them per the specified request.    

Notice that the owner\N'39's implicit grant options are not marked in the     access privileges display.  A * will appear only when     grant options have been explicitly granted to someone.   

.SH ÖRNEKLER
Grant insert privilege to all users on table films:    


.RS 4
.nf
GRANT INSERT ON films TO PUBLIC;
.fi
.RE   

Grant all available privileges to user manuel on view    kinds:    


.RS 4
.nf
GRANT ALL PRIVILEGES ON kinds TO manuel;
.fi
.RE    

Note that while the above will indeed grant all privileges if executed by a    superuser or the owner of kinds, when executed by someone    else it will only grant those permissions for which the someone else has    grant options.   

.SH UYUMLULUK
According to the SQL standard, the \fBPRIVILEGES\fR     key word in \fBALL PRIVILEGES\fR is required.  The     SQL standard does not support setting the privileges on more than     one object per command.    

PostgreSQL allows an object owner to revoke his     own ordinary privileges: for example, a table owner can make the table     read\N'45'only to himself by revoking his own \fBINSERT\fR, \fBUPDATE\fR, and \fBDELETE\fR     privileges.  This is not possible according to the SQL standard.  The     reason is that PostgreSQL treats the owner\N'39's     privileges as having been granted by the owner to himself; therefore he     can revoke them too.  In the SQL standard, the owner\N'39's privileges are     granted by an assumed entity "_SYSTEM".  Not being     "_SYSTEM", the owner cannot revoke these rights.    

The SQL standard allows setting privileges for individual columns     within a table:    


.nf
\fBGRANT\fR \fIizinler\fR
\    \fBON\fR \fItablo\fR [ ( \fIsütun\fR [, ...] ) ] [, ...]
\    \fBTO\fR { \fBPUBLIC\fR | \fIkullanıcı\fR [, ...] } [ \fBWITH GRANT OPTION\fR ]
.fi


The SQL standard provides for a \fBUSAGE\fR privilege     on other kinds of objects: character sets, collations,     translations, domains.    

The \fBRULE\fR privilege, and privileges on     databases, tablespaces, schemas, languages, and sequences are     PostgreSQL extensions.    

.SH İLGİLİ BELGELER
\fBREVOKE\fR [revoke(7)].   

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Nisan 2005 
 
    
