.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:37+02:00  
.TH "LOCK" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
LOCK \N'45' lock a table   
.SH KULLANIM 
.nf
\fBLOCK\fR [ \fBTABLE\fR ] \fIisim\fR [, ...] [ \fBIN\fR \fIkilitleme_kipi\fR \fBMODE\fR ] [ \fBNOWAIT\fR ]

where \fIkilitleme_kipi\fR is one of:

\    \fBACCESS SHARE\fR | \fBROW SHARE\fR | \fBROW EXCLUSIVE\fR | \fBSHARE UPDATE EXCLUSIVE\fR
\    | \fBSHARE\fR | \fBSHARE ROW EXCLUSIVE\fR | \fBEXCLUSIVE\fR | \fBACCESS EXCLUSIVE\fR
.fi
    
.SH AÇIKLAMA
\fBLOCK TABLE\fR obtains a table\N'45'level lock, waiting    if necessary for any conflicting locks to be released.  If    \fBNOWAIT\fR is specified, \fBLOCK TABLE\fR does not wait to acquire the desired lock: if it    cannot be acquired immediately, the command is aborted and an    error is emitted.  Once obtained, the lock is held for the    remainder of the current transaction.  (There is no \fBUNLOCK TABLE\fR command; locks are always released at transaction    end.)   

When acquiring locks automatically for commands that reference    tables, PostgreSQL always uses the least    restrictive lock mode possible. \fBLOCK TABLE\fR    provides for cases when you might need more restrictive locking.    For example, suppose an application runs a transaction at the    Read Committed isolation level and needs to ensure that data in a    table remains stable for the duration of the transaction. To    achieve this you could obtain \fBSHARE\fR lock mode over the    table before querying. This will prevent concurrent data changes    and ensure subsequent reads of the table see a stable view of    committed data, because \fBSHARE\fR lock mode conflicts with    the \fBROW EXCLUSIVE\fR lock acquired by writers, and your    \fBLOCK TABLE \fR\fIisim \fR\fBIN SHARE MODE\fR    statement will wait until any concurrent holders of \fBROW EXCLUSIVE\fR mode locks commit or roll back. Thus, once you    obtain the lock, there are no uncommitted writes outstanding;    furthermore none can begin until you release the lock.   

To achieve a similar effect when running a transaction at the Serializable    isolation level, you have to execute the \fBLOCK TABLE\fR statement    before executing any \fBSELECT\fR or data modification statement.    A serializable transaction\N'39's view of data will be frozen when its first    \fBSELECT\fR or data modification statement begins.  A \fBLOCK    TABLE\fR later in the transaction will still prevent concurrent writes    \N'45' but it won\N'39't ensure that what the transaction reads corresponds to    the latest committed values.   

If a transaction of this sort is going to change the data in the    table, then it should use \fBSHARE ROW EXCLUSIVE\fR lock mode    instead of \fBSHARE\fR mode.  This ensures that only one    transaction of this type runs at a time.  Without this, a deadlock    is possible: two transactions might both acquire \fBSHARE\fR    mode, and then be unable to also acquire \fBROW EXCLUSIVE\fR    mode to actually perform their updates.  (Note that a transaction\N'39's    own locks never conflict, so a transaction can acquire \fBROW EXCLUSIVE\fR mode when it holds \fBSHARE\fR mode \N'45' but not    if anyone else holds \fBSHARE\fR mode.)  To avoid deadlocks,    make sure all transactions acquire locks on the same objects in the    same order, and if multiple lock modes are involved for a single    object, then transactions should always acquire the most    restrictive mode first.   

More information about the lock modes and locking strategies can be    found in http://www.postgresql.org/docs/8.0/static/explicit\N'45'locking.html.   

.SH PARAMETRELER   
.br
.ns
.TP 
\fIisim\fR
The name (optionally schema\N'45'qualified) of an existing table to       lock.      

The command \fBLOCK TABLE a, b;\fR is equivalent to       \fBLOCK TABLE a; LOCK TABLE b;\fR. The tables are locked       one\N'45'by\N'45'one in the order specified in the \fBLOCK       TABLE\fR command.     

.TP 
\fIkilitleme_kipi\fR
The lock mode specifies which locks this lock conflicts with.       Lock modes are described in http://www.postgresql.org/docs/8.0/static/explicit\N'45'locking.html.      

If no lock mode is specified, then \fBACCESS       EXCLUSIVE\fR, the most restrictive mode, is used.     

.TP 
\fBNOWAIT\fR
Specifies that \fBLOCK TABLE\fR should not wait for       any conflicting locks to be released: if the specified lock(s)       cannot be acquired immediately without waiting, the transaction       is aborted.     

.PP  
.SH EK BİLGİ
\fBLOCK TABLE ... IN ACCESS SHARE MODE\fR requires \fBSELECT\fR     privileges on the target table.  All other forms of \fBLOCK\fR     require \fBUPDATE\fR and/or \fBDELETE\fR privileges.    

\fBLOCK TABLE\fR is useful only inside a transaction     block (\fBBEGIN\fR/\fBCOMMIT\fR pair), since the lock     is dropped as soon as the transaction ends.  A \fBLOCK TABLE\fR command appearing outside any transaction block forms a     self\N'45'contained transaction, so the lock will be dropped as soon as     it is obtained.    

\fBLOCK TABLE\fR only deals with table\N'45'level locks, and so    the mode names involving \fBROW\fR are all misnomers.  These    mode names should generally be read as indicating the intention of    the user to acquire row\N'45'level locks within the locked table.  Also,    \fBROW EXCLUSIVE\fR mode is a sharable table lock.  Keep in    mind that all the lock modes have identical semantics so far as    \fBLOCK TABLE\fR is concerned, differing only in the rules    about which modes conflict with which. For information on how to    acquire an actual row\N'45'level lock, see http://www.postgresql.org/docs/8.0/static/locking\N'45'rows.html    and the \fBFOR UPDATE\fR Clause in the \fBSELECT\fR [select(7)]    reference documentation.   

.SH ÖRNEKLER
Obtain a \fBSHARE\fR lock on a primary key table when going to perform    inserts into a foreign key table:   


.RS 4
.nf
BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
\    WHERE name = \N'39'Star Wars: Episode I \N'45' The Phantom Menace\N'39';
\N'45'\N'45' Do ROLLBACK if record was not returned
INSERT INTO films_user_comments VALUES
\    (_id_, \N'39'GREAT! I was waiting for it for so long!\N'39');
COMMIT WORK;
.fi
.RE   

Take a \fBSHARE ROW EXCLUSIVE\fR lock on a primary key table when going to perform a delete operation:   


.RS 4
.nf
BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments WHERE id IN
\    (SELECT id FROM films WHERE rating < 5);
DELETE FROM films WHERE rating < 5;
COMMIT WORK;
.fi
.RE   

.SH UYUMLULUK
There is no \fBLOCK TABLE\fR in the SQL standard,    which instead uses \fBSET TRANSACTION\fR to specify    concurrency levels on transactions.  PostgreSQL supports that too;    see \fBSET TRANSACTION\fR [set\N'45'transaction(7)] for details.   

Except for \fBACCESS SHARE\fR, \fBACCESS EXCLUSIVE\fR,    and \fBSHARE UPDATE EXCLUSIVE\fR lock modes, the    PostgreSQL lock modes and the    \fBLOCK TABLE\fR syntax are compatible with those    present in Oracle.   

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Nisan 2005 
 
   
