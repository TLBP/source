.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:34+02:00  
.TH "ALTER TABLE" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
ALTER TABLE \N'45' bir tablonun tanımını değiştirir   
.SH KULLANIM 
.nf
\fBALTER TABLE\fR [ ONLY ] \fIisim\fR [ * ]
\    \fIeylem\fR [, ... ]
\fBALTER TABLE\fR [ \fBONLY\fR ] \fIisim\fR [ * ]
\    \fBRENAME\fR [ \fBCOLUMN\fR ] \fIsütun\fR \fBTO\fR \fIyeni_sütun\fR
\fBALTER TABLE\fR \fIisim\fR
\    \fBRENAME TO\fR \fIyeni_isim\fR

\fIeylem\fR şunlardan biri olabilir:

\    \fBADD\fR [ \fBCOLUMN\fR ] \fIsütun\fR \fItür\fR [ \fIsütun_kısıtı\fR [ ... ] ]
\    \fBDROP\fR [ \fBCOLUMN\fR ] \fIsütun\fR [ \fBRESTRICT\fR | \fBCASCADE\fR ]
\    \fBALTER\fR [ \fBCOLUMN\fR ] \fIsütun\fR \fBTYPE\fR \fItür\fR [ \fBUSING\fR \fIifade\fR ]
\    \fBALTER\fR [ \fBCOLUMN\fR ] \fIsütun\fR \fBSET DEFAULT\fR \fIifade\fR
\    \fBALTER\fR [ \fBCOLUMN\fR ] \fIsütun\fR \fBDROP DEFAULT\fR
\    \fBALTER\fR [ \fBCOLUMN\fR ] \fIsütun\fR { \fBSET\fR | \fBDROP\fR } \fBNOT NULL\fR
\    \fBALTER\fR [ \fBCOLUMN\fR ] \fIsütun\fR \fBSET STATISTICS\fR \fItamsayı\fR
\    \fBALTER\fR [ \fBCOLUMN\fR ] \fIsütun\fR
\        \fBSET STORAGE\fR { \fBPLAIN\fR | \fBEXTERNAL\fR | \fBEXTENDED\fR | \fBMAIN\fR }
\    \fBADD\fR \fItablo_kısıtı\fR
\    \fBDROP CONSTRAINT\fR \fIkısıt_ismi\fR [ \fBRESTRICT\fR | \fBCASCADE\fR ]
\    \fBCLUSTER ON\fR \fIindeks_ismi\fR
\    \fBSET WITHOUT CLUSTER\fR
\    \fBSET WITHOUT OIDS\fR
\    \fBOWNER TO\fR \fIyeni_aidiyet\fR
\    \fBSET TABLESPACE\fR \fItabloalanı_ismi\fR
.fi
     
.SH AÇIKLAMA
\fBALTER TABLE\fR mevcut bir tablonun tanımını değiştirir. Çeşitli alt biçimleri vardır:   

.br
.ns
.TP 
\fBADD COLUMN\fR
\fBCREATE TABLE\fR [create_table(7)] ile aynı sözdizimini kullanarak tabloya yeni bir sütun eklemekte kullanılır.      

.TP 
\fBDROP COLUMN\fR
Bir tablodan bir sütunu kaldırmak için kullanılır. Sütunla ilgili indeksler ve tablo kısıtları özdevimli olarak kaldırılır. Anahtar başvuruları ve sanal tablolar gibi sütuna tablo dışında bağımlı herşeyin buna dahil olmasını istiyorsanız, \fBCASCADE\fR\N'39'a da ihtiyacınız var demektir.      

.TP 
\fBALTER COLUMN TYPE\fR
Bir tablo sütununun türünü değiştirmekte kullanılır. Sütunla ilgili indeksler ve tablo kısıtları yeni sütun türünü kullanacak şekilde, özgün olarak sağlanmış ifadelerle yeniden çözümlerek özdevimli olarak değiştirilir. İsteğe bağlı \fBUSING\fR deyimiyle yeni sütun değerlerinin eski değerlerden nasıl hesaplanacağı belirtilir; kullanılmadığı takdirde, öntanımlı dönüşüm, eski veri türünden yeni veri türüne atama dönüşümü şeklinde yapılır. Eski türden yeni türe dönüşüm için bir örtük dönüşüm ya da atama dönüşümü yoksa, bir \fBUSING\fR deyimi kullanılmak zorundadır.      

.TP 
\fBSET\fR/\fBDROP DEFAULT\fR
Bir sütunun öntanımlı değerini belirlemek ya da kaldırmak için kullanılır. Öntanımlı değerler, sadece sonraki \fBINSERT\fR cümlelerine uygulanır; tablodaki mevcut satırları etkilemez. Öntanımlılar, ayrıca sanal tablolar için de oluşturulmuş olabilir, bu durumda sadece, sanal tabloya \fBON INSERT\fR uygulanmadan önce \fBINSERT\fR deyimiyle yerleştirilir.      

.TP 
\fBSET\fR/\fBDROP NOT NULL\fR
Bir sütunun NULL değerlere izin verip vermeyeceğini belirlemek için kullanılır. Sadece, sütun bir NULL değer içermediği takdirde, \fBSET NOT NULL\fR kullanabilirsiniz.      

.TP 
\fBSET STATISTICS\fR
Sonraki \fBANALYZE\fR [analyze(7)] işlemleri için sütun başına istatistik toplama hedefini belirlemek için kullanılır. Hedef 0\N'45'1000 aralığında ya da sistem öntanımlı istatistik hedefininin (bir yapılandırma parametresi olan default_statistics_target\N'39'in değerinin) kullanılması için \N'45'1 olarak belirtilebilir. PostgreSQL sorgu planlamacısı tarafından istatistiklerin kullanımı hakkında daha fazla bilgi edinmek için
.br
http://www.postgresql.org/docs/8.0/static/planner\N'45'stats.html adresine bakınız.      

.TP 
\fBSET STORAGE\fR
Bir sütunun saklama kipini belirlemek için kullanılır. Bu, sütunun içerde mi yoksa ek bir tabloda mı tutulacağını ve verinin sıkıştılacağını mı yoksa sıkıştılmayacağını mı denetler. integer gibi sabit genişlikli değerlerin için içerde ve sıkıştırılmış olması için \fBPLAIN\fR kullanılmalıdır. İçerde ve sıkıştırılmış değerler için \fBMAIN\fR, harici ve sıkıştırılmamış değerler için  \fBEXTERNAL\fR, harici ve sıkıştırılmış değerler için \fBEXTENDED\fR kullanılır. \fBEXTENDED\fR, \fBPLAIN\fR kipini desteklemeyen çoğu veri türü için öntanımlıdır. \fBEXTERNAL\fR kullanımı text ve bytea türündeki sütunlar için saklama alanını büyütmesine karşın altdizge işlemlerinin, daha hızlı yapılmasını sağlar. \fBSET STORAGE\fR tablo üzerindeki hiçbir şeyi kendisi değiştirmez, sadece gelecekteki tablo güncellemeleri sırasında izlenecek stratejiyi belirler. Daha fazla bilgi için
.br
http://www.postgresql.org/docs/8.0/static/storage\N'45'toast.html adresine bakınız.      

.TP 
\fBADD \fItablo_kısıtı\fR\fR
\fBCREATE TABLE\fR [create_table(7)] ile aynı sözdizimini kullanarak tabloya yeni bir kısıt eklemekte kullanılır.      

.TP 
\fBDROP CONSTRAINT\fR
Bir tablodaki kısıtları kaldırmak için kullanılır. Şimdilik, tablolardaki kısıtların eşsiz isimlere sahip olması gerekmemektedir, dolayısıyla belirtilen isimle eşleşen birden fazla kısıt olabilir. Eşleşen tüm kısıtlar kaldırılacaktır.      

.TP 
\fBCLUSTER\fR
Sonraki \fBCLUSTER\fR [cluster(7)] işlemleri için öntanımlı indeksi seçmekte kullanılır. Gerçekte tabloyu yeniden kümelemez.      

.TP 
\fBSET WITHOUT CLUSTER\fR
Tabloda en son kullanılan \fBCLUSTER\fR [cluster(7)] indeks belirtimini kaldırmak için kullanılır. Bu, gelecekteki bir indeks belirtmeyen tüm kümeleme işlemlerini etkileyecektir.      

.TP 
\fBSET WITHOUT OIDS\fR
Tablodan oid sistem sütununu kaldırmak için kullanılır. Zaten bir oid sütununun bulunmadığından şikayet etmesi dışında, \fBDROP COLUMN oid RESTRICT\fR deyimine tamamen eşdeğerdir.      

Kaldırılmış bir oid sütununun tekrar yerine konulmasını sağlayacak bir \fBALTER TABLE\fR alt biçimi olmadığına dikkat edin.      

.TP 
\fBOWNER\fR
Tablonun, kayıt listesinin veya sanal tablonun sahibini belirtilen kullanıcı yapar.      

.TP 
\fBSET TABLESPACE\fR
Tablonun tablo alanını değiştirmek için kullanılır. Tablo ile ilişkili tüm veri dosyalarının yani tablo alanına taşınmasını sağlar. İndeksler eğer varsa yani alana taşınmaz; taşınması isteniyorsa, ayrı bir cümle olarak bir \fBSET TABLESPACE\fR cümlesi ile yapılabilir. Ayrıca \fBCREATE TABLESPACE\fR [create_tablespace(7)] kılavuz sayfasına de bakınız.      

.TP 
\fBRENAME\fR
Bir tablo (veya indeks, kayıt listesi ya da sanal tablo) ismini ya da bir tablonun tek bir sütununun ismini değiştirmekte kullanılır. Saklanmış veriler etkilenmez.      

.PP   

\fBRENAME\fR dışında tüm eylemler çeşitli değişikliklerin birlikte uygulanması için aynı cümlede kullanılabilir. Örneğin, bazı sütunların isimleri değiştirilirken, bazı sütunların eklenmesi mümkündür. Bu işlem genellikle, tüm değişikliklerin tek bir geçişte yapılması zorunlu dev tablolarda kullanışlıdır.   

Çalıştırılması için ayrıcalıklı kullanıcı olmanın gerekli olduğu \fBALTER TABLE OWNER\fR dışında, \fBALTER TABLE\fR kullanabilmek için tablonun sahibi olmalısınız.   

.SH PARAMETRELER     
.br
.ns
.TP 
\fIisim\fR
Değiştirilecek tablonun ismi (şema nitelemeli olabilir). Eğer \fBONLY\fR belirtilmişse sadece bu tablo değiştirilir, belirtilmemişse bu tablo ve onun çocukları olan tablolar (varsa) değiştirilir. Çocuk tablolarında değiştirileceğini belirtmek üzere tablo isminin sonuna bir \fB*\fR eklenebilirse de, bu artık öntanımlıdır. (7.1 sürümünden önce, \fBONLY\fR öntanımlı davranıştır. Öntanımlı davranış sql_inheritance yapılandırma parametresi ile değiştirilebilir.)      

.TP 
\fIsütun\fR
Yeni ya da mevcut bir sütunun ismi.      

.TP 
\fIyeni_sütun\fR
Yeni ya da mevcut bir sütunun yeni ismi.      

.TP 
\fIyeni_isim\fR
Tablonun yeni ismi.      

.TP 
\fItür\fR
Mevcut bir sütun için yeni veri türü ya da yeni bir sütunun veri türü.      

.TP 
\fItablo_kısıtı\fR
Tablo için yeni tablo kısıtı.      

.TP 
\fIkısıt_ismi\fR
Kaldırılacak mevcut bir kısıtın ismi.      

.TP 
\fBCASCADE\fR
Kaldırılan kısıt veya sütuna bağımlı nesnelerin (örneğin, bu sütuna başvuran sanal tabloların) özdevimli olarak kaldırılmasını sağlar.      

.TP 
\fBRESTRICT\fR
Bağımlı nesneleri olan kısıt veya sütunun kaldırılmasını engeller. Bu davranış öntanımlıdır.      

.TP 
\fIindeks_ismi\fR
Tablonun kümeleme için imleyeceği indeks ismi.      

.TP 
\fIyeni_aidiyet\fR
Tablonun yeni sahibinin kullanıcı ismi.      

.TP 
\fItabloalanı_ismi\fR
Tablonun taşınacağı yeni tablo alanı ismi.      

.PP  
.SH EK BİLGİ
\fBCOLUMN\fR anahtar sözcüğü kuru gürültüdür ve atlanabilir.    

Bir sütun \fBADD COLUMN\fR ile eklendiğinde, tablodaki mevcut satırların tümü  sütunun öntanımlı değeriyle ilklendirilir (bir \fBDEFAULT\fR deyimi belirtilmemişse NULL ile).    

Bir sütunun boş olmayan bir öntanımlı ile eklenmesi veya mevcut bir sütunun türünün değiştirilmesi tablonun tamamının yeniden yazılmasına sebep olur. Bu çok büyük tablolarda önemli sayılabilecek bir süre alır; ayrıca, geçici olarak büyüklüğünün iki katı kadar bir disk alanı gerektirecektir.    

Bir \fBCHECK\fR veya \fBNOT NULL\fR kısıtının eklenmesi mevcut satırların kısıtı yerine getirip getirmediğinin sınanması için tablonun taranmasını gerektirir.    

Tek bir \fBALTER TABLE\fR cümlesinde çok sayıda değişikliğin belirtilebilmesi seçeneğinin sağlanmasının ana sebebi çok sayıda tablonun taranmasını ya da tablonun yeniden yazılmasının gerektiği durumlarda tüm değişikliklerin tek bir geçişte yapılmasınını sağlamaktır.    

\fBDROP COLUMN\fR sütunu fiziksel olarak silmez, sadece SQL işlemleri için görünmez yapar. Tablo üzerindeki sonraki veri girme ve güncelleme işlemleri sütunda boş değer saklanmasına sebep olur. Bu, bir sütunun kaldırılmasını hızlandırsa da tablonun diskte kapladığı alan, kaldırılan sütunun kapladığı alan geri alınmadığından hemen düşmeyecektir. Mevcut satırlar güncellendikçe bu alan geri kazanılacaktır ama bu çok uzun zaman alabilir.    

Aslında \fBALTER TABLE\fR cümlesinin bir tablonun tümünün yeniden yazılmasını gerektirdiği durumda bir getirisi de vardır, yeniden yazma işlemi tablodaki ölü alanların elenmesini sağlar. Örneğin, kaldırılan bir sütun nedeniyle tabloda tutulan alanı hemen geri kazanmak için en hızlı yol,    


.RS 4
.nf
ALTER TABLE tablo ALTER COLUMN birsütun TYPE birtür;
.fi
.RE    

yazmaktır. Burada birsütun ile mevcut bir sütunu, birtür ile ise o sütunun kendi türünü belirtiyoruz. Aslında tabloda bir değişiklik yapılmıyor ama bu cümle tablonun yeniden yazılmasını sağlıyor, böylece faydasız veri temizlenmiş oluyor.    

\fBALTER TYPE\fR alt cümlesinin \fBUSING\fR seçeneği aslında satırın eski değerleriyle ilişkili bir ifadeyi belirtebilir; yani, bit yandan diğer sütunlara başvururken birini dönüştürüyor olabilir. Bu, \fBALTER TYPE\fR sözdizimi ile çok genel dönüşümler yapılmasını mümkün kılar. Bu esneklikten dolayı, \fBUSING\fR ifadesi sütunun öntanımlı değerine (varsa) uygulanmaz; sonuç bir öntanımlı için gerekli olan bir sabit ifade olmayabilir. Bu, eski türden yeni türe örtük ya da atamalı tür dönüşümünün bulunmadığında, \fBUSING\fR seçeneği kullanıldığında bile \fBALTER TYPE\fR alt cümlesinin dönüşümde başarısız olacağı anlamına gelir. Böyle durumlarda, öntanımlı \fBDROP DEFAULT\fR ile kaldırılarak \fBALTER TYPE\fR uygulanır ve bunun ardından \fBSET DEFAULT\fR kullanılarak uygun yeni öntanımlı değer eklenir. Sütünla ilgili indekslere ve kısıtlara da benzer şeyler uygulanır.    

Eğer bir tablonun bir çocuk tablosu varsa, çocuk tablolarda aynı değişklikler yapılmaksızın bu tablonun bir sütununun türünün ya da isminin değiştirilmesine ve bir sütun eklenmesine izin verilmez. Yani, \fBALTER TABLE ONLY\fR reddedilir. Bu, bir tablonun çocuklarının daima ana tablonun sütunlarını içermesini sağlamak içindir.    

Hem ana tabloya hem de çocuk tablolara uygulanan bir \fBDROP COLUMN\fR işlemi ile sadece, çocuk tablonun ilgili sütunu aynı zamanda başka bir tablodan miras alınmamışsa ve sütun bağımsız olarak tanımlanmamışsa kaldırılacaktır. Sadece ana tabloya uygulanan \fBDROP COLUMN\fR işlemi (\fBALTER TABLE ONLY ... DROP COLUMN\fR gibi), çocuk tablolardan bu sütunları asla kaldırmayacak, onları miras alınmış değil, bağımsız sütunlar olarak imleyecektir.    

Sistem katalog tablosunda herhangi bir değişikliğe izin verilmez.    

Geçerli parametrelerin açıklamaları için \fBCREATE TABLE\fR [create_table(7)] kılavuz sayfasına bakınız. Kalıtım ile ilgili bilgileri ise
.br
http://www.postgresql.org/docs/8.0/static/ddl.html bölümünde bulabilirsiniz.    

.SH ÖRNEKLER
Bir tabloya varchar türünde bir sütun eklemek için:    


.RS 4
.nf
ALTER TABLE distributors ADD COLUMN address varchar(30);
.fi
.RE    

Bir tablodan bir sütunu kaldırmak için:    


.RS 4
.nf
ALTER TABLE distributors DROP COLUMN address RESTRICT;
.fi
.RE    

Mevcut iki sütunun türünü tek bir işlemle değiştirmek için:    


.RS 4
.nf
ALTER TABLE distributors
\    ALTER COLUMN address TYPE varchar(80),
\    ALTER COLUMN name TYPE varchar(100);
.fi
.RE    

UNIX zaman değerini içeren bir sütunun türünü \fBUSING\fR seçeneğini kullanarak timestamp with time zone (zaman dilimli zaman gösterimi) türüne dönüştürmek için:    


.RS 4
.nf
ALTER TABLE foo
\    ALTER COLUMN foo_timestamp TYPE timestamp with time zone
\    USING timestamp with time zone
\        \N'39'epoch\N'39' + foo_timestamp * interval \N'39'1 second\N'39';
.fi
.RE    

Mevcut bir sütunun ismini değiştirmek için:    


.RS 4
.nf
ALTER TABLE distributors RENAME COLUMN address TO city;
.fi
.RE    

Mevcut bir tablonun ismini değiştirmek için:    


.RS 4
.nf
ALTER TABLE distributors RENAME TO suppliers;
.fi
.RE    

Bir sütuna boş değer içermeme kısıtı eklemek için:    


.RS 4
.nf
ALTER TABLE distributors ALTER COLUMN street SET NOT NULL;
.fi
.RE    

Bir sütundan boş değer içermeme kısıtını kaldırmak için:    


.RS 4
.nf
ALTER TABLE distributors ALTER COLUMN street DROP NOT NULL;
.fi
.RE    

Bir tabloya bir sınama kısıtı eklemek için:    


.RS 4
.nf
ALTER TABLE distributors
\    ADD CONSTRAINT zipchk CHECK (char_length(zipcode) = 5);
.fi
.RE    

Bir tablodan ve çocuklarından bir sınama kısıtını kaldırmak için:    


.RS 4
.nf
ALTER TABLE distributors DROP CONSTRAINT zipchk;
.fi
.RE    

Bir tabloya bir anahtar kısıtı eklemek için:    


.RS 4
.nf
ALTER TABLE distributors
\    ADD CONSTRAINT distfk FOREIGN KEY (address)
\    REFERENCES addresses (address) MATCH FULL;
.fi
.RE    

Bir tabloya (çoksütunlu) bir eşsizlik kısıtı eklemek için:    


.RS 4
.nf
ALTER TABLE distributors
\    ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode);
.fi
.RE    

Bir tabloya bir birincil anahtarı olmasa bile, özdevimli isimlenen bir birincil anahtar kısıtı eklemek için:    


.RS 4
.nf
ALTER TABLE distributors ADD PRIMARY KEY (dist_id);
.fi
.RE    

Bir tabloyu başka bir tablo alanına taşımak için:    


.RS 4
.nf
ALTER TABLE distributors SET TABLESPACE fasttablespace;
.fi
.RE   

.SH UYUMLULUK
\fBADD\fR, \fBDROP\fR ve \fBSET DEFAULT\fR alt biçimleri SQL standardıyla uyumludur. Diğer alt biçimler birer PostgreSQL oluşumudur. Ayrıca, tek bir \fBALTER TABLE\fR cümlesinde birden fazla değişikliğin belirtilebilmesi özelliği de bir PostgreSQL oluşumudur.    

\fBALTER TABLE DROP COLUMN\fR ile geriye bir sıfır sütunlu tablo kalmak üzere bir tablonun tek sütunu kaldırılabilir.  SQL standardı sıfır sütunluk tablolara izin vermediğinden bu da bir PostgreSQL oluşumudur.   

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Mart 2005 
 
    
