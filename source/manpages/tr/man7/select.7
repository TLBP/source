.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:37+02:00  
.TH "SELECT" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
SELECT \N'45' retrieve rows from a table or view   
.SH KULLANIM 
.nf
\fBSELECT\fR [ \fBALL\fR | \fBDISTINCT\fR [ \fBON\fR ( \fIifade\fR [, ...] ) ] ]
\    * | \fIifade\fR [ \fBAS\fR \fIçıktı_ismi\fR ] [, ...]
\    [ \fBFROM\fR \fIfrom_öğesi\fR [, ...] ]
\    [ \fBWHERE\fR \fIkoşul\fR ]
\    [ \fBGROUP BY\fR \fIifade\fR [, ...] ]
\    [ \fBHAVING\fR \fIkoşul\fR [, ...] ]
\    [ { \fBUNION\fR | \fBINTERSECT\fR | \fBEXCEPT\fR } [ \fBALL\fR ] \fIselect\fR ]
\    [ \fBORDER BY\fR \fIifade\fR [ \fBASC\fR | \fBDESC\fR | \fBUSING\fR \fIişleç\fR ] [, ...] ]
\    [ \fBLIMIT\fR { \fImiktar\fR | \fBALL\fR } ]
\    [ \fBOFFSET\fR \fIbaşlangıç\fR ]
\    [ \fBFOR UPDATE\fR [ \fBOF\fR \fItablo_ismi\fR [, ...] ] ]

where \fIfrom_öğesi\fR can be one of:

\    [ \fBONLY\fR ] \fItablo_ismi\fR [ * ] [
\          [ \fBAS\fR ] \fItakma_ad\fR [ ( \fIsütun_takma_adı\fR [, ...] ) ] ]

\    ( \fIselect\fR ) [ \fBAS\fR ] \fItakma_ad\fR [ ( \fIsütun_takma_adı\fR [, ...] ) ]

\    \fIişlev_ismi\fR ( [ \fIargüman\fR [, ...] ] ) [ \fBAS\fR ] \fItakma_ad\fR
\          [ ( \fIsütun_takma_adı\fR [, ...] | \fIsütun_tanımı\fR [, ...] ) ]

\    \fIişlev_ismi\fR ( [ \fIargüman\fR [, ...] ] ) \fBAS\fR ( \fIsütun_tanımı\fR [, ...] )

\    \fIfrom_öğesi\fR [ \fBNATURAL\fR ] \fIkatılım_türü\fR \fIfrom_öğesi\fR
\          [ \fBON\fR \fIkatılım_koşulu\fR | \fBUSING\fR ( \fIkatılım_sütunu\fR [, ...] ) ]
.fi
    
.SH AÇIKLAMA
\fBSELECT\fR retrieves rows from one or more tables.    The general processing of \fBSELECT\fR is as follows:   

.IP 1. 3
All elements in the \fBFROM\fR list are computed.       (Each element in the \fBFROM\fR list is a real or       virtual table.)  If more than one element is specified in the       \fBFROM\fR list, they are cross\N'45'joined together.       (See \fBFROM Clause\fR below.)    

.IP 2. 3
If the \fBWHERE\fR clause is specified, all rows       that do not satisfy the condition are eliminated from the       output.  (See \fBWHERE Clause\fR below.)     

.IP 3. 3
If the \fBGROUP BY\fR clause is specified, the       output is divided into groups of rows that match on one or more       values.  If the \fBHAVING\fR clause is present, it       eliminates groups that do not satisfy the given condition.  (See       \fBGROUP BY Clause\fR and       \fBHAVING Clause\fR below.)    

.IP 4. 3
The actual output rows are computed using the       \fBSELECT\fR output expressions for each selected       row.  (See \fB\fR below.)    

.IP 5. 3
Using the operators \fBUNION\fR,       \fBINTERSECT\fR, and \fBEXCEPT\fR, the       output of more than one \fBSELECT\fR statement can       be combined to form a single result set.  The       \fBUNION\fR operator returns all rows that are in       one or both of the result sets.  The       \fBINTERSECT\fR operator returns all rows that are       strictly in both result sets.  The \fBEXCEPT\fR       operator returns the rows that are in the first result set but       not in the second.  In all three cases, duplicate rows are       eliminated unless \fBALL\fR is specified. (See       \fBUNION Clause\fR, \fBINTERSECT Clause\fR, and       \fBEXCEPT Clause\fR below.)    

.IP 6. 3
If the \fBORDER BY\fR clause is specified, the       returned rows are sorted in the specified order.  If       \fBORDER BY\fR is not given, the rows are returned       in whatever order the system finds fastest to produce.  (See       \fBORDER BY Clause\fR below.)    

.IP 7. 3
\fBDISTINCT\fR eliminates duplicate rows from the       result.  \fBDISTINCT ON\fR eliminates rows that       match on all the specified expressions.  \fBALL\fR       (the default) will return all candidate rows, including       duplicates.  (See \fBDISTINCT Clause\fR below.)    

.IP 8. 3
If the \fBLIMIT\fR or \fBOFFSET\fR       clause is specified, the \fBSELECT\fR statement       only returns a subset of the result rows. (See \fBLIMIT Clause\fR below.)    

.IP 9. 3
The \fBFOR UPDATE\fR clause causes the       \fBSELECT\fR statement to lock the selected rows       against concurrent updates.  (See \fBFOR UPDATE Clause\fR below.)     

.PP   

You must have \fBSELECT\fR privilege on a table to    read its values.  The use of \fBFOR UPDATE\fR requires    \fBUPDATE\fR privilege as well.   

.SH PARAMETRELER   
.SS FROM Clause    
The \fBFROM\fR clause specifies one or more source     tables for the \fBSELECT\fR.  If multiple sources are     specified, the result is the Cartesian product (cross join) of all     the sources.  But usually qualification conditions     are added to restrict the returned rows to a small subset of the     Cartesian product.    

The \fBFROM\fR clause can contain the following     elements:    


.br
.ns
.TP 
\fItablo_ismi\fR
The name (optionally schema\N'45'qualified) of an existing table or         view.  If \fBONLY\fR is specified, only that table is         scanned.  If \fBONLY\fR is not specified, the table and         all its descendant tables (if any) are scanned.  *         can be appended to the table name to indicate that descendant         tables are to be scanned, but in the current version, this is         the default behavior.  (In releases before 7.1,         \fBONLY\fR was the default behavior.)  The default         behavior can be modified by changing the sql_inheritance         (runtime\N'45'config.html#GUC\N'45'SQL\N'45'INHERITANCE) configuration option.       

.TP 
\fItakma_ad\fR
A substitute name for the \fBFROM\fR item containing the         alias.  An alias is used for brevity or to eliminate ambiguity         for self\N'45'joins (where the same table is scanned multiple         times).  When an alias is provided, it completely hides the         actual name of the table or function; for example given         FROM foo AS f, the remainder of the         \fBSELECT\fR must refer to this \fBFROM\fR         item as f not foo.  If an alias is         written, a column alias list can also be written to provide         substitute names for one or more columns of the table.       

.TP 
\fIselect\fR
A sub\N'45'\fBSELECT\fR can appear in the         \fBFROM\fR clause.  This acts as though its         output were created as a temporary table for the duration of         this single \fBSELECT\fR command.  Note that the         sub\N'45'\fBSELECT\fR must be surrounded by         parentheses, and an alias \fImust\fR be         provided for it.       

.TP 
\fIişlev_ismi\fR
Function calls can appear in the \fBFROM\fR         clause.  (This is especially useful for functions that return         result sets, but any function can be used.)  This acts as         though its output were created as a temporary table for the         duration of this single \fBSELECT\fR command. An         alias may also be used. If an alias is written, a column alias         list can also be written to provide substitute names for one         or more attributes of the function\N'39's composite return type. If         the function has been defined as returning the record         data type, then an alias or the key word \fBAS\fR must         be present, followed by a column definition list in the form         ( \fIsütun_ismi veri_türü\fR [, ...] ).  The column definition list must match the actual         number and types of columns returned by the function.       

.TP 
\fIkatılım_türü\fR
One of         


.nf
· [ \fBINNER\fR ] \fBJOIN\fR
· \fBLEFT\fR [ \fBOUTER\fR ] \fBJOIN\fR
· \fBRIGHT\fR [ \fBOUTER\fR ] \fBJOIN\fR
· \fBFULL\fR [ \fBOUTER\fR ] \fBJOIN\fR
· \fBCROSS JOIN\fR
.fi


For the \fBINNER\fR and \fBOUTER\fR join types, a         join condition must be specified, namely exactly one of         \fBNATURAL\fR, \fBON \fR\fIkatılım_koşulu\fR, or         \fBUSING\fR (\fIkatılım_sütunu\fR [, ...]).         See below for the meaning.  For \fBCROSS JOIN\fR,         none of these clauses may appear.        

A \fBJOIN\fR clause combines two         \fBFROM\fR items.  Use parentheses if necessary to         determine the order of nesting.  In the absence of parentheses,         \fBJOIN\fRs nest left\N'45'to\N'45'right.  In any case         \fBJOIN\fR binds more tightly than the commas         separating \fBFROM\fR items.        

\fBCROSS JOIN\fR and \fBINNER JOIN\fR         produce a simple Cartesian product, the same result as you get from         listing the two items at the top level of \fBFROM\fR,         but restricted by the join condition (if any).         \fBCROSS JOIN\fR is equivalent to \fBINNER JOIN ON         (TRUE)\fR, that is, no rows are removed by qualification.         These join types are just a notational convenience, since they         do nothing you couldn\N'39't do with plain \fBFROM\fR and         \fBWHERE\fR.        

\fBLEFT OUTER JOIN\fR returns all rows in the qualified         Cartesian product (i.e., all combined rows that pass its join         condition), plus one copy of each row in the left\N'45'hand table         for which there was no right\N'45'hand row that passed the join         condition.  This left\N'45'hand row is extended to the full width         of the joined table by inserting null values for the         right\N'45'hand columns.  Note that only the \fBJOIN\fR         clause\N'39's own condition is considered while deciding which rows         have matches.  Outer conditions are applied afterwards.        

Conversely, \fBRIGHT OUTER JOIN\fR returns all the         joined rows, plus one row for each unmatched right\N'45'hand row         (extended with nulls on the left).  This is just a notational         convenience, since you could convert it to a \fBLEFT         OUTER JOIN\fR by switching the left and right inputs.        

\fBFULL OUTER JOIN\fR returns all the joined rows, plus         one row for each unmatched left\N'45'hand row (extended with nulls         on the right), plus one row for each unmatched right\N'45'hand row         (extended with nulls on the left).       

.TP 
\fBON\fR \fIkatılım_koşulu\fR
\fIkatılım_koşulu\fR is         an expression resulting in a value of type         boolean (similar to a \fBWHERE\fR         clause) that specifies which rows in a join are considered to         match.       

.TP 
\fBUSING\fR (\fIkatılım_sütunu\fR [, ...])
A clause of the form USING ( a, b, ... ) is         shorthand for ON left_table.a = right_table.a AND         left_table.b = right_table.b ....  Also,         \fBUSING\fR implies that only one of each pair of         equivalent columns will be included in the join output, not         both.       

.TP 
\fBNATURAL\fR
\fBNATURAL\fR is shorthand for a         \fBUSING\fR list that mentions all columns in the two         tables that have the same names.       

.PP    

.SS WHERE Clause    
The optional \fBWHERE\fR clause has the general form     


.nf
\fBWHERE\fR \fIkoşul\fR.fi


where \fIkoşul\fR is     any expression that evaluates to a result of type     boolean.  Any row that does not satisfy this     condition will be eliminated from the output.  A row satisfies the     condition if it returns true when the actual row values are     substituted for any variable references.    

.SS GROUP BY Clause    
The optional \fBGROUP BY\fR clause has the general form     


.nf
\fBGROUP BY\fR \fIifade\fR [, ...].fi


\fBGROUP BY\fR will condense into a single row all     selected rows that share the same values for the grouped     expressions.  \fIifade\fR can be an input column     name, or the name or ordinal number of an output column     (\fBSELECT\fR list item), or an arbitrary     expression formed from input\N'45'column values.  In case of ambiguity,     a \fBGROUP BY\fR name will be interpreted as an     input\N'45'column name rather than an output column name.    

Aggregate functions, if any are used, are computed across all rows     making up each group, producing a separate value for each group     (whereas without \fBGROUP BY\fR, an aggregate     produces a single value computed across all the selected rows).     When \fBGROUP BY\fR is present, it is not valid for     the \fBSELECT\fR list expressions to refer to     ungrouped columns except within aggregate functions, since there     would be more than one possible value to return for an ungrouped     column.    

.SS HAVING Clause    
The optional \fBHAVING\fR clause has the general form     


.nf
\fBHAVING\fR \fIkoşul\fR.fi


where \fIkoşul\fR is     the same as specified for the \fBWHERE\fR clause.    

\fBHAVING\fR eliminates group rows that do not     satisfy the condition.  \fBHAVING\fR is different     from \fBWHERE\fR: \fBWHERE\fR filters     individual rows before the application of \fBGROUP BY\fR, while \fBHAVING\fR filters group rows     created by \fBGROUP BY\fR.  Each column referenced in     \fIkoşul\fR must     unambiguously reference a grouping column, unless the reference     appears within an aggregate function.    

.SS SELECT List    
The \fBSELECT\fR list (between the key words     \fBSELECT\fR and \fBFROM\fR) specifies expressions     that form the output rows of the \fBSELECT\fR     statement.  The expressions can (and usually do) refer to columns     computed in the \fBFROM\fR clause.  Using the clause     AS \fIçıktı_ismi\fR, another     name can be specified for an output column.  This name is     primarily used to label the column for display.  It can also be     used to refer to the column\N'39's value in \fBORDER BY\fR and     \fBGROUP BY\fR clauses, but not in the \fBWHERE\fR or     \fBHAVING\fR clauses; there you must write out the     expression instead.    

Instead of an expression, * can be written in     the output list as a shorthand for all the columns of the selected     rows.  Also, one can write \fItablo_ismi\fR.* as a     shorthand for the columns coming from just that table.    

.SS UNION Clause    
The \fBUNION\fR clause has this general form:     


.nf
\fIselect_statement\fR \fBUNION\fR [ \fBALL\fR ] \fIselect_statement\fR
.fi


\fIselect_statement\fR is     any \fBSELECT\fR statement without an \fBORDER     BY\fR, \fBLIMIT\fR, or \fBFOR UPDATE\fR clause.     (\fBORDER BY\fR and \fBLIMIT\fR can be attached to a     subexpression if it is enclosed in parentheses.  Without     parentheses, these clauses will be taken to apply to the result of     the \fBUNION\fR, not to its right\N'45'hand input     expression.)    

The \fBUNION\fR operator computes the set union of     the rows returned by the involved \fBSELECT\fR     statements.  A row is in the set union of two result sets if it     appears in at least one of the result sets.  The two     \fBSELECT\fR statements that represent the direct     operands of the \fBUNION\fR must produce the same     number of columns, and corresponding columns must be of compatible     data types.    

The result of \fBUNION\fR does not contain any duplicate     rows unless the \fBALL\fR option is specified.     \fBALL\fR prevents elimination of duplicates.  (Therefore,     \fBUNION ALL\fR is usually significantly quicker than     \fBUNION\fR; use \fBALL\fR when you can.)    

Multiple \fBUNION\fR operators in the same     \fBSELECT\fR statement are evaluated left to right,     unless otherwise indicated by parentheses.    

Currently, \fBFOR UPDATE\fR may not be specified either for     a \fBUNION\fR result or for any input of a \fBUNION\fR.    

.SS INTERSECT Clause    
The \fBINTERSECT\fR clause has this general form:     


.nf
\fIselect_statement\fR \fBINTERSECT\fR [ \fBALL\fR ] \fIselect_statement\fR
.fi


\fIselect_statement\fR is     any \fBSELECT\fR statement without an \fBORDER     BY\fR, \fBLIMIT\fR, or \fBFOR UPDATE\fR clause.    

The \fBINTERSECT\fR operator computes the set     intersection of the rows returned by the involved     \fBSELECT\fR statements.  A row is in the     intersection of two result sets if it appears in both result sets.    

The result of \fBINTERSECT\fR does not contain any     duplicate rows unless the \fBALL\fR option is specified.     With \fBALL\fR, a row that has \fIm\fR duplicates in the     left table and \fIn\fR duplicates in the right table will appear     min(\fIm\fR,\fIn\fR) times in the result set.    

Multiple \fBINTERSECT\fR operators in the same     \fBSELECT\fR statement are evaluated left to right,     unless parentheses dictate otherwise.     \fBINTERSECT\fR binds more tightly than     \fBUNION\fR.  That is, \fBA UNION B INTERSECT     C\fR will be read as \fBA UNION (B INTERSECT     C)\fR.    

Currently, \fBFOR UPDATE\fR may not be specified either for     an \fBINTERSECT\fR result or for any input of an \fBINTERSECT\fR.    

.SS EXCEPT Clause    
The \fBEXCEPT\fR clause has this general form:     


.nf
\fIselect_statement\fR \fBEXCEPT\fR [ \fBALL\fR ] \fIselect_statement\fR
.fi


\fIselect_statement\fR is     any \fBSELECT\fR statement without an \fBORDER     BY\fR, \fBLIMIT\fR, or \fBFOR UPDATE\fR clause.    

The \fBEXCEPT\fR operator computes the set of rows     that are in the result of the left \fBSELECT\fR     statement but not in the result of the right one.    

The result of \fBEXCEPT\fR does not contain any     duplicate rows unless the \fBALL\fR option is specified.     With \fBALL\fR, a row that has \fIm\fR duplicates in the     left table and \fIn\fR duplicates in the right table will appear     max(\fIm\fR\N'45'\fIn\fR,0) times in the result set.    

Multiple \fBEXCEPT\fR operators in the same     \fBSELECT\fR statement are evaluated left to right,     unless parentheses dictate otherwise.  \fBEXCEPT\fR binds at     the same level as \fBUNION\fR.    

Currently, \fBFOR UPDATE\fR may not be specified either for     an \fBEXCEPT\fR result or for any input of an \fBEXCEPT\fR.    

.SS ORDER BY Clause    
The optional \fBORDER BY\fR clause has this general form:     


.nf
\fBORDER BY\fR \fIifade\fR [ \fBASC\fR | \fBDESC\fR | \fBUSING\fR \fIişleç\fR ] [, ...]
.fi


\fIifade\fR can be the     name or ordinal number of an output column     (\fBSELECT\fR list item), or it can be an arbitrary     expression formed from input\N'45'column values.    

The \fBORDER BY\fR clause causes the result rows to     be sorted according to the specified expressions.  If two rows are     equal according to the leftmost expression, the are compared     according to the next expression and so on.  If they are equal     according to all specified expressions, they are returned in     an implementation\N'45'dependent order.    

The ordinal number refers to the ordinal (left\N'45'to\N'45'right) position     of the result column. This feature makes it possible to define an     ordering on the basis of a column that does not have a unique     name.  This is never absolutely necessary because it is always     possible to assign a name to a result column using the     \fBAS\fR clause.    

It is also possible to use arbitrary expressions in the     \fBORDER BY\fR clause, including columns that do not     appear in the \fBSELECT\fR result list.  Thus the     following statement is valid:     


.RS 4
.nf
SELECT name FROM distributors ORDER BY code;
.fi
.RE     

A limitation of this feature is that an \fBORDER BY\fR     clause applying to the result of a \fBUNION\fR,     \fBINTERSECT\fR, or \fBEXCEPT\fR clause may only     specify an output column name or number, not an expression.    

If an \fBORDER BY\fR expression is a simple name that     matches both a result column name and an input column name,     \fBORDER BY\fR will interpret it as the result column name.     This is the opposite of the choice that \fBGROUP BY\fR will     make in the same situation.  This inconsistency is made to be     compatible with the SQL standard.    

Optionally one may add the key word \fBASC\fR (ascending) or     \fBDESC\fR (descending) after any expression in the     \fBORDER BY\fR clause.  If not specified, \fBASC\fR is     assumed by default.  Alternatively, a specific ordering operator     name may be specified in the \fBUSING\fR clause.     \fBASC\fR is usually equivalent to \fBUSING <\fR and     \fBDESC\fR is usually equivalent to \fBUSING >\fR.     (But the creator of a user\N'45'defined data type can define exactly what the     default sort ordering is, and it might correspond to operators with other     names.)    

The null value sorts higher than any other value. In other words,     with ascending sort order, null values sort at the end, and with     descending sort order, null values sort at the beginning.    

Character\N'45'string data is sorted according to the locale\N'45'specific     collation order that was established when the database cluster     was initialized.    

.SS DISTINCT Clause    
If \fBDISTINCT\fR is specified, all duplicate rows are     removed from the result set (one row is kept from each group of     duplicates).  \fBALL\fR specifies the opposite: all rows are     kept; that is the default.    

\fBDISTINCT ON\fR ( \fIifade\fR [, ...] )     keeps only the first row of each set of rows where the given     expressions evaluate to equal.  The \fBDISTINCT ON\fR     expressions are interpreted using the same rules as for     \fBORDER BY\fR (see above).  Note that the "first     row" of each set is unpredictable unless \fBORDER BY\fR is used to ensure that the desired row appears first.  For     example,     


.RS 4
.nf
SELECT DISTINCT ON (location) location, time, report
\    FROM weather_reports
\    ORDER BY location, time DESC;
.fi
.RE     

retrieves the most recent weather report for each location.  But     if we had not used \fBORDER BY\fR to force descending order     of time values for each location, we\N'39'd have gotten a report from     an unpredictable time for each location.    

The \fBDISTINCT ON\fR expression(s) must match the leftmost     \fBORDER BY\fR expression(s).  The \fBORDER BY\fR clause     will normally contain additional expression(s) that determine the     desired precedence of rows within each \fBDISTINCT ON\fR group.    

.SS LIMIT Clause    
The \fBLIMIT\fR clause consists of two independent     sub\N'45'clauses:     


.nf
\fBLIMIT\fR { \fImiktar\fR | \fBALL\fR }
\fBOFFSET\fR \fIbaşlangıç\fR
.fi


\fImiktar\fR specifies the     maximum number of rows to return, while \fIbaşlangıç\fR specifies the number of rows     to skip before starting to return rows.  When both are specified,     \fIbaşlangıç\fR rows are skipped     before starting to count the \fImiktar\fR rows to be returned.    

When using \fBLIMIT\fR, it is a good idea to use an     \fBORDER BY\fR clause that constrains the result rows into a     unique order.  Otherwise you will get an unpredictable subset of     the query\N'39's rows \N'45' you may be asking for the tenth through     twentieth rows, but tenth through twentieth in what ordering?  You     don\N'39't know what ordering unless you specify \fBORDER BY\fR.    

The query planner takes \fBLIMIT\fR into account when     generating a query plan, so you are very likely to get different     plans (yielding different row orders) depending on what you use     for \fBLIMIT\fR and \fBOFFSET\fR.  Thus, using     different \fBLIMIT\fR/\fBOFFSET\fR values to select     different subsets of a query result \fIwill give     inconsistent results\fR unless you enforce a predictable     result ordering with \fBORDER BY\fR.  This is not a bug; it     is an inherent consequence of the fact that SQL does not promise     to deliver the results of a query in any particular order unless     \fBORDER BY\fR is used to constrain the order.    

.SS FOR UPDATE Clause    
The \fBFOR UPDATE\fR clause has this form:     


.nf
\fBFOR UPDATE\fR [ \fBOF\fR \fItablo_ismi\fR [, ...] ]
.fi


\fBFOR UPDATE\fR causes the rows retrieved by the     \fBSELECT\fR statement to be locked as though for     update.  This prevents them from being modified or deleted by     other transactions until the current transaction ends.  That is,     other transactions that attempt \fBUPDATE\fR,     \fBDELETE\fR, or \fBSELECT FOR UPDATE\fR     of these rows will be blocked until the current transaction ends.     Also, if an \fBUPDATE\fR, \fBDELETE\fR,     or \fBSELECT FOR UPDATE\fR from another transaction     has already locked a selected row or rows, \fBSELECT FOR     UPDATE\fR will wait for the other transaction to complete,     and will then lock and return the updated row (or no row, if the     row was deleted).  For further discussion see \fB\fR.    

If specific tables are named in \fBFOR UPDATE\fR,     then only rows coming from those tables are locked; any other     tables used in the \fBSELECT\fR are simply read as     usual.    

\fBFOR UPDATE\fR cannot be used in contexts where     returned rows can\N'39't be clearly identified with individual table     rows; for example it can\N'39't be used with aggregation.    

\fBFOR UPDATE\fR may appear before     \fBLIMIT\fR for compatibility with     PostgreSQL versions before 7.3.  It     effectively executes after \fBLIMIT\fR, however, and     so that is the recommended place to write it.    

.SH ÖRNEKLER
To join the table \fBfilms\fR with the table    distributors:    


.RS 4
.nf
SELECT f.title, f.did, d.name, f.date_prod, f.kind
\    FROM distributors d, films f
\    WHERE f.did = d.did

\      title       | did |     name     | date_prod  |   kind
\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
The Third Man     | 101 | British Lion | 1949\N'45'12\N'45'23 | Drama
The African Queen | 101 | British Lion | 1951\N'45'08\N'45'11 | Romantic
...
.fi
.RE   

To sum the column len of all films and group    the results by kind:    


.RS 4
.nf
SELECT kind, sum(len) AS total FROM films GROUP BY kind;

\  kind   | total
\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
Action   | 07:34
Comedy   | 02:58
Drama    | 14:28
Musical  | 06:42
Romantic | 04:38
.fi
.RE   

To sum the column len of all films, group    the results by kind and show those group totals    that are less than 5 hours:    


.RS 4
.nf
SELECT kind, sum(len) AS total
\    FROM films
\    GROUP BY kind
\    HAVING sum(len) < interval \N'39'5 hours\N'39';

\  kind   | total
\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
Comedy   | 02:58
Romantic | 04:38
.fi
.RE   

The following two examples are identical ways of sorting the individual    results according to the contents of the second column    (name):    


.RS 4
.nf
SELECT * FROM distributors ORDER BY name;
SELECT * FROM distributors ORDER BY 2;

did |       name
\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
109 | 20th Century Fox
110 | Bavaria Atelier
101 | British Lion
107 | Columbia
102 | Jean Luc Godard
113 | Luso films
104 | Mosfilm
103 | Paramount
106 | Toho
105 | United Artists
111 | Walt Disney
112 | Warner Bros.
108 | Westward
.fi
.RE   

The next example shows how to obtain the union of the tables    distributors and    actors, restricting the results to those that begin    with the letter W in each table.  Only distinct rows are wanted, so the    key word \fBALL\fR is omitted.    


.RS 4
.nf
distributors:               actors:
did |     name              id |     name
\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'        \N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
108 | Westward               1 | Woody Allen
111 | Walt Disney            2 | Warren Beatty
112 | Warner Bros.           3 | Walter Matthau
...                         ...

SELECT distributors.name
\    FROM distributors
\    WHERE distributors.name LIKE \N'39'W%\N'39'
UNION
SELECT actors.name
\    FROM actors
\    WHERE actors.name LIKE \N'39'W%\N'39';

\      name
\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
Walt Disney
Walter Matthau
Warner Bros.
Warren Beatty
Westward
Woody Allen
.fi
.RE   

This example shows how to use a function in the \fBFROM\fR    clause, both with and without a column definition list:    


.RS 4
.nf
CREATE FUNCTION distributors(int) RETURNS SETOF distributors AS $$
\    SELECT * FROM distributors WHERE did = $1;
$$ LANGUAGE SQL;

SELECT * FROM distributors(111);
did |    name
\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
111 | Walt Disney

CREATE FUNCTION distributors_2(int) RETURNS SETOF record AS $$
\    SELECT * FROM distributors WHERE did = $1;
$$ LANGUAGE SQL;

SELECT * FROM distributors_2(111) AS (f1 int, f2 text);
f1  |     f2
\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
111 | Walt Disney
.fi
.RE   

.SH UYUMLULUK
Of course, the \fBSELECT\fR statement is compatible    with the SQL standard.  But there are some extensions and some    missing features.   

.SS Omitted FROM Clauses
PostgreSQL allows one to omit the     \fBFROM\fR clause.  It has a straightforward use to     compute the results of simple expressions:    


.RS 4
.nf
SELECT 2+2;

?column?
\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
\        4
.fi
.RE    

Some other SQL databases cannot do this except     by introducing a dummy one\N'45'row table from which to do the     \fBSELECT\fR.    

A less obvious use is to abbreviate a normal     \fBSELECT\fR from tables:    


.RS 4
.nf
SELECT distributors.* WHERE distributors.name = \N'39'Westward\N'39';

did |   name
\N'45'\N'45'\N'45'\N'45'\N'45'+\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'\N'45'
108 | Westward
.fi
.RE    

This works because an implicit \fBFROM\fR item is     added for each table that is referenced in other parts of the     \fBSELECT\fR statement but not mentioned in     \fBFROM\fR.    

While this is a convenient shorthand, it\N'39's easy to misuse.  For     example, the command    


.RS 4
.nf
SELECT distributors.* FROM distributors d;
.fi
.RE    

is probably a mistake; most likely the user meant    


.RS 4
.nf
SELECT d.* FROM distributors d;
.fi
.RE    

rather than the unconstrained join    


.RS 2
.nf
SELECT distributors.* FROM distributors d, distributors distributors;
.fi
.RE    

that he will actually get.  To help detect this sort of mistake,     PostgreSQL will warn if the     implicit\N'45'\fBFROM\fR feature is used in a     \fBSELECT\fR statement that also contains an explicit     \fBFROM\fR clause.  Also, it is possible to disable     the implicit\N'45'\fBFROM\fR feature by setting the     \fBadd_missing_from\fR (runtime\N'45'config.html#GUC\N'45'ADD\N'45'MISSING\N'45'FROM) parameter to false.    

.SS The AS Key Word
In the SQL standard, the optional key word \fBAS\fR is just     noise and can be omitted without affecting the meaning.  The     PostgreSQL parser requires this key     word when renaming output columns because the type extensibility     features lead to parsing ambiguities without it.     \fBAS\fR is optional in \fBFROM\fR     items, however.    

.SS Namespace Available to GROUP BY and ORDER BY    
In the SQL\N'45'92 standard, an \fBORDER BY\fR clause may     only use result column names or numbers, while a \fBGROUP     BY\fR clause may only use expressions based on input column     names.  PostgreSQL extends each of     these clauses to allow the other choice as well (but it uses the     standard\N'39's interpretation if there is ambiguity).     PostgreSQL also allows both clauses to     specify arbitrary expressions.  Note that names appearing in an     expression will always be taken as input\N'45'column names, not as     result\N'45'column names.    

SQL:1999 uses a slightly different definition which is not entirely upward     compatible     with SQL\N'45'92.  In most cases, however, PostgreSQL     will interpret an \fBORDER BY\fR or \fBGROUP     BY\fR expression the same way SQL:1999 does.    

.SS Nonstandard Clauses
The clauses \fBDISTINCT ON\fR,     \fBLIMIT\fR, and \fBOFFSET\fR are not     defined in the SQL standard.    

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Nisan 2005 
 
   
