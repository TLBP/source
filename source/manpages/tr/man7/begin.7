.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:34+02:00  
.TH "BEGIN" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
BEGIN \N'45' bir hareket kümesi başlatır   
.SH KULLANIM 
.nf
\fBBEGIN\fR [ \fBWORK\fR | \fBTRANSACTION\fR ] [ \fIkip\fR [, ...] ]

burada \fIkip\fR şunlardan biri olabilir:

\   \fBISOLATION LEVEL\fR
\      { \fBSERIALIZABLE\fR | \fBREPEATABLE READ\fR
\      | \fBREAD COMMITTED\fR | \fBREAD UNCOMMITTED\fR }
\   \fBREAD WRITE\fR | \fBREAD ONLY\fR
.fi
    
.SH AÇIKLAMA
\fBBEGIN\fR bir hareket kümesi başlatır; yani, \fBBEGIN\fR\N'39'den sonraki tüm cümleler bir \fBCOMMIT\fR [commit(7)] veya \fBROLLBACK\fR [rollback(7)]\N'39'e rastlanıncaya kadar tek bir hareket olarak çalıştırılır. Öntanımlı olarak (\fBBEGIN\fR olmaksızın), PostgreSQL hareketleri "autocommit" kipinde çalıştırır; yani, her cümle kendi hareketi olarak çalıştırılır ve eğer işlem başarılı olmuşsa cümlenin sonunda bir \fBCOMMIT\fR [commit(7)], aksi takdirde hareketi geri almak için bir \fBROLLBACK\fR [rollback(7)] çalıştırılır.   

Cümleler, bir hareket kümesinden daha hızlı çalıştırılır, çünkü hareketin başlatılması ve bitirilmesi önemli bir işlemci ve disk etkinliği gerektirir. Çok sayıda cümlenin tek bir hareket olarak çalıştırılması, birbiriyle ilintili çok sayıda değişiklik yaparken tutarlılığı sağlamak için yararlıdır: birbiriyle ilintili değişikliklerin hepsi yapılmadan diğer oturumlar ara durumları göremeyeceklerdir.   

Eğer bir yalıtım seviyesi (\fBISOLATION LEVEL\fR) veya oku/yaz (\fBREAD WRITE\fR | \fBREAD ONLY\fR) kipi belirtilmişse, yeni hareket \fBSET TRANSACTION\fR [set_transaction(7)] çalıştırılmış gibi bu niteliklere sahip olur.   

.SH PARAMETRELER   
.br
.ns
.TP 
\fBWORK\fR, \fBTRANSACTION\fR
İsteğe bağlıdırlar ve bir etkileri yoktur.      

.PP    
\fBBEGIN\fR cümlesindeki diğer parametrelerin anlamları için \fBSET TRANSACTION\fR [set_transaction(7)] kılavuz sayfasına bakınız.   

.SH EK BİLGİ
\fBSTART TRANSACTION\fR [start_transaction(7)], \fBBEGIN\fR ile aynı işlevselliğe sahiptir.   

Bir hareket kümesini sonlandırmak için \fBCOMMIT\fR [commit(7)] ya da \fBROLLBACK\fR [rollback(7)] kullanın.   

Bir hareket bloğunun içinde bulunacak bir \fBBEGIN\fR bir uyarı iletisine sebep olacak, ama hareketin durumunda bir değişikliğe yol açmayacaktır. Bir hareket kümesinin içine başka bir hareket gömmek için kayıt noktalarını kullanın (bkz. \fBSAVEPOINT\fR [savepoint(7)]).   

Geriye doğru uyumluluk sebebiyle, \fIkip\fR\N'39'ler arasına virgül konmayabilir.   

.SH ÖNEKLER
Bir hareket kümesini başlatmak için:   


.RS 4
.nf
BEGIN;
.fi
.RE   

.SH UYUMLULUK
\fBBEGIN\fR bir PostgreSQL oluşumudur. \fBSTART TRANSACTION\fR [start_transaction(7)] kılavuz sayfasında daha fazla uyumluluk bilgisi bulabilirsiniz.   

Yeri gelmişken, BEGIN anahtar sözcüğü gömülü SQL\N'39'de başka bir amaçla kullanılmaktadır. Veritabanı uygulamalarınızı farklı platformlara uyarlarken hareket sözdizimi hakkında dikkatli olmanızı öneririz.   

.SH İLGİLİ BELGELER
\fBCOMMIT\fR [commit(7)], \fBROLLBACK\fR [rollback(7)], \fBSET TRANSACTION\fR [set_transaction(7)], \fBSTART TRANSACTION\fR [start_transaction(7)], \fBSAVEPOINT\fR [savepoint(7)].  

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Nisan 2005 
 
    
