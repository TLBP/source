.\" http://belgeler.org \N'45' 2006\N'45'11\N'45'26T10:18:37+02:00  
.TH "REINDEX" 7 "" "PostgreSQL" "SQL \N'45' Dil Deyimleri"
.nh   
.SH İSİM
REINDEX \N'45' rebuild indexes   
.SH KULLANIM 
.nf
\fBREINDEX\fR { \fBDATABASE\fR | \fBTABLE\fR | \fBINDEX\fR } \fIname\fR [ \fBFORCE\fR ]
.fi
    
.SH AÇIKLAMA
\fBREINDEX\fR rebuilds an index based on the data    stored in the index\N'39's table, replacing the old copy of the index. There are    two main reasons to use \fBREINDEX\fR:   

.IP \fB·\fR 3
An index has become corrupted, and no longer contains valid       data. Although in theory this should never happen, in       practice indexes may become corrupted due to software bugs or       hardware failures.  \fBREINDEX\fR provides a       recovery method.     

.IP \fB·\fR 3
The index in question contains a lot of dead index pages that       are not being reclaimed. This can occur with B\N'45'tree indexes in       PostgreSQL under certain access       patterns. \fBREINDEX\fR provides a way to reduce       the space consumption of the index by writing a new version of       the index without the dead pages. See "Routine Reindexing"       (routine\N'45'reindex.html) for more information.      

.PP
  
.SH PARAMETRELER   
.br
.ns
.TP 
\fBDATABASE\fR
Recreate all system indexes of a specified database. Indexes on       user tables are not processed.  Also, indexes on shared system       catalogs are skipped except in stand\N'45'alone mode (see below).     

.TP 
\fBTABLE\fR
Recreate all indexes of a specified table.  If the table has a       secondary "TOAST" table, that is reindexed as well.     

.TP 
\fBINDEX\fR
Recreate a specified index.     

.TP 
\fIname\fR
The name of the specific database, table, or index to be       reindexed.  Table and index names may be schema\N'45'qualified.       Presently, \fBREINDEX DATABASE\fR can only reindex the current       database, so its parameter must match the current database\N'39's name.     

.TP 
\fBFORCE\fR
This is an obsolete option; it is ignored if specified.     

.PP  
.SH EK BİLGİ
If you suspect corruption of an index on a user table, you can    simply rebuild that index, or all indexes on the table, using    \fBREINDEX INDEX\fR or \fBREINDEX TABLE\fR.   

Things are more difficult if you need to recover from corruption of    an index on a system table.  In this case it\N'39's important for the    system to not have used any of the suspect indexes itself.    (Indeed, in this sort of scenario you may find that server    processes are crashing immediately at start\N'45'up, due to reliance on    the corrupted indexes.)  To recover safely, the server must be started    with the \fB\N'45'P\fR option, which prevents it from using    indexes for system catalog lookups.   

One way to do this is to shut down the postmaster and start a stand\N'45'alone    PostgreSQL server    with the \fB\N'45'P\fR option included on its command line.    Then, \fBREINDEX DATABASE\fR,    \fBREINDEX TABLE\fR, or \fBREINDEX INDEX\fR can be    issued, depending on how much you want to reconstruct.  If in    doubt, use \fBREINDEX DATABASE\fR to select    reconstruction of all system indexes in the database.  Then quit    the standalone server session and restart the regular server.    See the \fBpostgres(1)\fR reference page for more    information about how to interact with the stand\N'45'alone server    interface.   

Alternatively, a regular server session can be started with    \fB\N'45'P\fR included in its command line options.    The method for doing this varies across clients, but in all    \fBlibpq\fR\N'45'based clients, it is possible to set    the  environment variable to \N'45'P    before starting the client.  Note that while this method does not    require locking out other clients, it may still be wise to prevent    other users from connecting to the damaged database until repairs    have been completed.   

If corruption is suspected in the indexes of any of the shared    system catalogs (pg_database,    pg_group,    pg_shadow, or    pg_tablespace), then a standalone server    must be used to repair it.  \fBREINDEX\fR will not process    shared catalogs in multiuser mode.   

For all indexes except the shared system catalogs, \fBREINDEX\fR    is crash\N'45'safe and transaction\N'45'safe.  \fBREINDEX\fR is not    crash\N'45'safe for shared indexes, which is why this case is disallowed    during normal operation.  If a failure occurs while reindexing one    of these catalogs in standalone mode, it will not be possible to    restart the regular server until the problem is rectified.  (The    typical symptom of a partially rebuilt shared index is "index is not    a btree" errors.)   

\fBREINDEX\fR is similar to a drop and recreate of the index    in that the index contents are rebuilt from scratch.  However, the locking    considerations are rather different.  \fBREINDEX\fR locks out writes    but not reads of the index\N'39's parent table.  It also takes an exclusive lock    on the specific index being processed, which will block reads that attempt    to use that index.  In contrast, \fBDROP INDEX\fR momentarily takes    exclusive lock on the parent table, blocking both writes and reads.  The    subsequent \fBCREATE INDEX\fR locks out writes but not reads; since    the index is not there, no read will attempt to use it, meaning that there    will be no blocking but reads may be forced into expensive sequential    scans.  Another important point is that the drop/create approach    invalidates any cached query plans that use the index, while    \fBREINDEX\fR does not.   

Prior to PostgreSQL 7.4, \fBREINDEX    TABLE\fR did not automatically process TOAST tables, and so those had    to be reindexed by separate commands.  This is still possible, but    redundant.   

.SH ÖRNEKLER
Recreate the indexes on the table my_table:   


.RS 4
.nf
REINDEX TABLE my_table;
.fi
.RE   

Rebuild a single index:   


.RS 4
.nf
REINDEX INDEX my_index;
.fi
.RE   

Rebuild all system indexes in a particular database, without trusting them    to be valid already:   


.RS 4
.nf
$ \fBexport PGOPTIONS="\N'45'P"\fR
$ \fBpsql broken_db\fR
...
broken_db=> REINDEX DATABASE broken_db;
broken_db=> \\q
.fi
.RE   

.SH UYUMLULUK
SQL standardında \fBREINDEX\fR diye bir komut yoktur.   

.SH ÇEVİREN
Nilgün Belma Bugüner <nilgun (at) belgeler·gen·tr>, Nisan 2005 
 
    
