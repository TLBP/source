<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
   man3/crypt.3.xml, crypt_blowfish 1.3, permissive, NBB - Eylül 2022
******************************************************************** -->
<refentry xml:id="man3-crypt" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
 <info xmlns:t="http://tlbp.gen.tr/ns/tlbp">
  <t:pageinfo>
   <t:name>crypt</t:name>
   <t:volnum>3</t:volnum>
   <t:section>Kütüphane İşlevleri</t:section>
   <t:source>crypt_blowfish 1.3</t:source>
   <t:date>7 Temmuz 2014</t:date>
<t:remark>.ig
Written and revised by Solar Designer &lt;solar at openwall.com> in 2000-2011.
No copyright is claimed, and this man page is hereby placed in the public
domain.  In case this attempt to disclaim copyright and place the man page
in the public domain is deemed null and void, then the man page is
Copyright (c) 2000-2011 Solar Designer and it is hereby released to the
general public under the following terms:
|
Redistribution and use in source and binary forms, with or without
modification, are permitted.
|
There's ABSOLUTELY NO WARRANTY, express or implied.
|
This manual page in its current form is intended for use on systems
based on the GNU C Library with crypt_blowfish patched into libcrypt.
..</t:remark>
  </t:pageinfo>
 </info>
 <refnamediv>
  <refname>crypt, crypt_r, crypt_rn, crypt_ra, crypt_gensalt, crypt_gensal_rn, crypt_gensalt_ra</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 <!--
 <refnamediv>
  <refname>crypt_r</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>crypt_rn</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>crypt_ra</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>crypt_gensalt</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>crypt_gensalt_rn</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>crypt_gensalt_ra</refname>
  <refpurpose>parola ve veri şifrelemesi</refpurpose>
 </refnamediv>
 -->
 <refsynopsisdiv><title>BİLDİRİM</title>
  <funcsynopsis>
   <funcsynopsisinfo>
    <option>#include _XOPEN_SOURCE</option>
    <option>#include &lt;unistd.h></option>
   </funcsynopsisinfo>
   <funcprototype>
    <funcdef>char *<function>crypt</function></funcdef>
    <paramdef>const char *<parameter>key</parameter></paramdef>
    <paramdef>const char *<parameter>setting</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <funcsynopsis>
   <funcsynopsisinfo>
    <option>#include _GNU_SOURCE</option>
    <option>#include &lt;crypt.h></option>
   </funcsynopsisinfo>
   <funcprototype>
    <funcdef>char *<function>crypt_r</function></funcdef>
    <paramdef>const char *<parameter>key</parameter></paramdef>
    <paramdef>const char *<parameter>setting</parameter></paramdef>
    <paramdef>struct crypt_data *<parameter>data</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
  <funcsynopsis>
   <funcsynopsisinfo>
    <option>#include _QW_SOURCE</option>
    <option>#include &lt;crypt.h></option>
   </funcsynopsisinfo>
   <funcprototype>
    <funcdef>char *<function>crypt_rn</function></funcdef>
    <paramdef>const char *<parameter>key</parameter></paramdef>
    <paramdef>const char *<parameter>setting</parameter></paramdef>
    <paramdef>void *<parameter>data</parameter></paramdef>
    <paramdef>int <parameter>size</parameter></paramdef>
   </funcprototype>
   <funcprototype>
    <funcdef>char *<function>crypt_ra</function></funcdef>
    <paramdef>const char *<parameter>key</parameter></paramdef>
    <paramdef>const char *<parameter>setting</parameter></paramdef>
    <paramdef>void **<parameter>data</parameter></paramdef>
    <paramdef>int *<parameter>size</parameter></paramdef>
   </funcprototype>
   <funcprototype>
    <funcdef>char *<function>crypt_gensalt</function></funcdef>
    <paramdef>const char *<parameter>prefix</parameter></paramdef>
    <paramdef>unsigned long <parameter>count</parameter></paramdef>
    <paramdef>const char *<parameter>input</parameter></paramdef>
    <paramdef>int <parameter>size</parameter></paramdef>
   </funcprototype>
   <funcprototype>
    <funcdef>char *<function>crypt_gensalt_rn</function></funcdef>
    <paramdef>const char *<parameter>prefix</parameter></paramdef>
    <paramdef>unsigned long <parameter>count</parameter></paramdef>
    <paramdef>const char *<parameter>input</parameter></paramdef>
    <paramdef>int <parameter>size</parameter></paramdef>
    <paramdef>char <parameter>output</parameter></paramdef>
    <paramdef>int <parameter>output_size</parameter></paramdef>
   </funcprototype>
   <funcprototype>
    <funcdef>char *<function>crypt_gensalt_ra</function></funcdef>
    <paramdef>const char *<parameter>prefix</parameter></paramdef>
    <paramdef>unsigned long <parameter>count</parameter></paramdef>
    <paramdef>const char *<parameter>input</parameter></paramdef>
    <paramdef>int <parameter>size</parameter></paramdef>
   </funcprototype>
  </funcsynopsis>
 </refsynopsisdiv>
 <refsect1><title>AÇIKLAMA</title>
  <para>
   <function>crypt</function>, <function>crypt_r</function>, <function>crypt_rn</function> ve <function>crypt_ra</function> işlevleri,  bir tuz ve muhtemelen diğer değiştirgeleri de aktarmak için kullanılan bir dizi desteklenen yöntemden biriyle istendiği şekilde anahtarın kriptografik aş işlevini hesaplar.
  </para>
  <para>
   <function>crypt_r</function>, <function>crypt_rn</function> ve <function>crypt_ra</function> işlevleri <function>crypt</function>'ten farklı olarak yeniden girişlidir. Bu işlevler sonuçlarını ve muhtemelen özel verilerini, bir uygulama tarafından kendilerine belirtilen <replaceable>size</replaceable> boyutundaki bir veri alanına ve/veya dinamik olarak ayırdıkları belleğe yerleştirirler. Bazı aşlama algoritmaları veri alanını, çağrılar arasında hesaplanmış ara değerleri önbelleğe almak için kullanabilir. Bu sebeple, uygulamaların ilk kullanımdan önce veri alanını doğru bir şekilde başlatmalıdır. <function>crypt_r</function> yalnızca <replaceable>data->initialized</replaceable>'in sıfırlanmasını gerektirir; <function>crypt_rn</function> ve <function>crypt_ra</function> tüm veri alanının sıfırlanmasını veya <function>crypt_ra</function> olduğunda *<replaceable>data</replaceable>'nın NULL olmasını gerektirir. Eğer <function>crypt_r</function>, talep edilen aşlama algoritmasını NULL *<replaceable>data</replaceable> veya yeterli olmayan *<replaceable>size</replaceable> ile çağrırırsa gerekli bellek dinamik olarak <uri xlink:href="man3-realloc"/> ile ayrılır. Bu sebeple <function>crypt_ra</function>, *<replaceable>data</replaceable> NULL olmadığında bir önceki <function>crypt_ra</function> çağrısıyla veya <uri xlink:href="man3-malloc"/> aile çağrısıyla ayrılan bir alana işaret etmelidir. <function>crypt_ra</function> ile ayrılan bellek <uri xlink:href="man3-free"/> ile serbest bırakılmalıdır.
  </para>
  <para>
   The crypt_gensalt, crypt_gensalt_rn, and crypt_gensalt_ra functions compile a string for use as setting - with the given prefix (used to choose a hashing method), the iteration count (if supported by the  chosen  method) and up to size cryptographically random input bytes for use as the actual salt. Eğer <replaceable>count</replaceable> 0 ise, düşük bir varsayılan seçilir. Rastgele baytlar /dev/urandom'dan elde edilebilir. <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function> işlevleri <function>crypt_gensalt</function>'ten farklı olarak yeniden girişlidir. <function>crypt_gensalt_rn</function>, sonuçları <replaceable>output_size</replaceable> baytlarının çıktı tamponuna yerleştirir. <function>crypt_gensalt_ra</function>, sonuçları için bellekte dinamik olarak yer ayırır. Bu bellek <uri xlink:href="man3-free"/> ile serbest bırakılmalıdır.
  </para>
 </refsect1>
 <refsect1><title>DÖNÜŞ DEĞERİ</title>
  <para>
   Başarılı bir şekilde tamamlandığında <function>crypt</function>, <function>crypt_r</function>, <function>crypt_rn</function> ve <function>crypt_ra</function> işlevleri, gerçekte kullanılan <replaceable>setting</replaceable>'i ve aşlama işlevinin yazdırılabilir kodlama değerini içeren bir dizgeye işaretçi döndürür. Dizgenin tamamı, <function>crypt</function>, <function>crypt_r</function>, <function>crypt_rn</function> ve <function>crypt_ra</function>'ya yapılan çağrılarla <replaceable>setting</replaceable> olarak, <function>crypt_gensalt</function>, <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function>'ya yapılan çağrılarla <replaceable>prefix</replaceable> olarak doğrudan kullanılabilir.
  </para>
  <para>
   <function>crypt</function>'in hata durumundaki davranışları tam olarak standartlaştırılmamıştır. Bazı gerçeklemeler başarısız olamaz (süreç ölmediği sürece, bu durumda döndüremezler), diğerleri NULL veya sabit dizge döndürür. Çoğu gerçeklemeler <replaceable>errno</replaceable> değişkenini ayarlamaz, bazıları ayarlar. SUSv2, NULL döndürülmesini ve <replaceable>errno</replaceable> değişkeninin geçerli bir davranışa ayarlamasını belirtir, ne yazık ki sadece bir tane olası hatayı tanımlar (<constant>ENOSYS</constant>, "işlevsellik bu gerçeklenimde desteklenmiyor"), mevcut çoğu uygulama <function>crypt</function>'in NULL döndürmesini işlemeye hazır değildir. Aşağıdaki açıklama sadece <function>crypt</function> ve <function>crypt_r</function>'in bu gerçeklemesine ve <function>crypt_rn</function> ile <function>crypt_ra</function> işlevlerine karşılık gelir. Bu davranış, standartlara, mevcut uygulamalara veya gerçeklemelere uymak için değişebilir.
  </para>
  <para>
   <function>crypt</function> ve <function>crypt_r</function> yalnızca geçersiz veya desteklenmeyen <replaceable>setting</replaceable> değiştirgesi geçildiğinde başarısız olabilir (ve döndürebilir), bu durumda uzunluğu 13 karakterden kısa olan ve <replaceable>setting</replaceable>'den farklı olması garanti edilen sihirli dizgeye bir işaretçi döndürür. Bu davranış hem yeni parolalar ayarlarken hem de mevcut parola aşlamalarına karşı kimlik doğrulaması yaparken <function>crypt</function>'in başarısız olmayacağını kabul eden eski uygulamalar için güvenlidir. <function>crypt_rn</function> ve <function>crypt_ra</function>  işlevleri hatayı belirtmek için NULL döndürür. Dört işlevin tümü, hata olduğunda <replaceable>errno</replaceable>'yu ayarlar.
  </para>
  <para>
   <function>crypt_gensalt</function>, <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function> işlevleri, <replaceable>setting</replaceable> için derlenen dizgeye bir işaretçi döndürür veya hata durumunda <replaceable>errno</replaceable> değişkeni ayarlanır ve NULL döndürür.
  </para>
 </refsect1>
 <refsect1><title>HATALAR</title>
  <glosslist>
   <glossentry>
   <glossterm><constant>EINVAL</constant></glossterm>
    <glossdef>
     <para>
      <function>crypt</function>, <function>crypt_r</function>, <function>crypt_rn</function>, <function>crypt_ra</function>: <replaceable>setting</replaceable> geçersiz veya bu gerçekleme tarafından desteklenmiyor;
     </para>
     <para>
      <function>crypt_gensalt</function>, <function>crypt_gensalt_rn</function>, <function>crypt_gensalt_ra</function>: <replaceable>prefix</replaceable> geçersiz veya bu gerçekleme tarafından desteklenmiyor; <replaceable>count</replaceable>, talep edilen önek için geçersiz; girdi boyutu, talep edilen önek ile en küçük geçerli tuz için yeterli değil; girdi boş.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
   <glossterm><constant>ERANGE</constant></glossterm>
    <glossdef>
     <para>
      <function>crypt_ra</function>: sağlanan veri alanı boyutu, talep edilen aşlama algoritması için yeterli değil.
     </para>
     <para>
      <function>crypt_gensalt_rn</function>: <replaceable>output_size</replaceable>, derlenen <replaceable>setting</replaceable> dizgesini tutmak için çok küçük.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
   <glossterm><constant>ENOMEM</constant></glossterm>
    <glossdef>
     <para>
      <function>crypt</function> (sadece asıl glibc): (sonraki çağrıların tekrar kullanacağı) çıktı tamponu için bellek ayrılamadı;
     </para>
     <para>
      <function>crypt_ra</function>: *<replaceable>data</replaceable> NULL ise veya *<replaceable>size</replaceable> talep edilen aşlama algoritması için yeterli değil ve <uri xlink:href="man3-realloc"/> başarılı olmadı;
     </para>
     <para>
      <function>crypt_gensalt_ra</function>: derlenen <replaceable>setting</replaceable> dizgesi için bellek ayrılamadı.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
   <glossterm><constant>ENOSYS</constant></glossterm>
    <glossdef>
     <para>
      <function>crypt</function> (SUSv2): işlevsellik bu gerçeklenimde desteklenmiyor;
     </para>
     <para>
      <function>crypt</function>, <function>crypt_r</function> (sadece glibc 2.0'dan 2.0.1'e kadar): <function>crypt</function> eklentisi derlenmedi ve <replaceable>setting</replaceable> MD5 temelli algoritmadan başka bir şey istiyor.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
   <glossterm><constant>EOPNOTSUPP</constant></glossterm>
    <glossdef>
     <para>
      <function>crypt</function>, <function>crypt_r</function> (sadece glibc 2.0.2'den 2.1.3'e kadar): <function>crypt</function> eklentisi derlenmedi ve <replaceable>setting</replaceable> MD5 temelli algoritmadan başka bir şey istiyor.
     </para>
    </glossdef>
   </glossentry>
  </glosslist>
 </refsect1>
 <refsect1><title>AŞLAMA YÖNTEMLERİ</title>
  <para>
   Gerçeklenen aşlama yöntemleri, özellikle depolama ve kimlik doğrulama için kullanıcı parolasını işlemeye yöneliktir. Diğer birçok amaç için en iyi ihtimalle verimsizdirler.
  </para>
  <para>
   Parola aşlamanın, güçlü parolaların yerine geçmediğini anlamak önemlidir. Parola aşlamalarına erişebilen bir saldırganın, aşlamaya karşı aday parolaları denemesi her zaman mümkündür. Ancak, parola aşlama yöntemlerinin sahip olabileceği bazı özellikler bu anahtar arama saldırılarını biraz daha zorlaştırır.
  </para>
  <para>
   Tuz kullanan tüm aşlama yöntemleri aynı anahtar ile birçok aşlama oluşturabilir. Tuzların düzgün kullanımı bazı saldırıları yenebilir, örneğin :
  </para>
  <orderedlist>
   <listitem>
    <para>
     Aday parolaların birçok aşlama yerine tek bir aşlama ile denenebilmesi.
    </para>
   </listitem>
   <listitem>
    <para>
     Aday parolaların aşlama listelerinin kullanılması.
    </para>
   </listitem>
   <listitem>
    <para>
     Parolalardan birini gerçekten tahmin etmeden iki kullanıcının (veya tek kullanıcıya ait iki hesabın), aynı mı yoksa farklı parolalara mı sahip olduğunu belirleyebilmek.
    </para>
   </listitem>
  </orderedlist>
  <para>
   Anahtar arama saldırıları, çok sayıda aday parolanın aşlama hesaplamalarına bağlıdır. Bu nedenle, iyi bir parola aşlama yönteminin hesaplama maliyeti fazla olmalıdır - fakat tabii ki kullanışsız olmayacak kadar uzun değil.
  </para>
  <para>
   <function>crypt</function>, <function>crypt_r</function>, <function>crypt_rn</function> ve <function>crypt_ra</function> arayüzlerinde gerçeklenen tüm aş yöntemleri özellikle aday parolanın maliyetini artırmak için temel kriptografik ilkelinin birden çok yinelemesini kullanır. Ne yazık ki, donanım iyileştirmelerinden ötürü, sabit maliyete sahip aşlama yöntemleri zamanla daha az güvenli hale geldi.
  </para>
  <para>
   Tuzlara ek olarak, yeni parola aşlama yöntemleri değişken yineleme sayısını kabul ediyor. Bu, uyumluluğu korurken maliyetleri donanım iyileştirmelerine uyarlamayı mümkün kılar.
  </para>
  <para>
   Aşağıdaki aşlama yöntemleri açıklanan arayüzlerle gerçeklenebilir.
  </para>
  <refsect2><title>Geleneksel DES temelli</title>
  <para>
   Bu yöntem, <function>crypt</function> işlevinin neredeyse tüm gerçeklemelirini destekler. Ne yazık ki, birçok sınırlaması nedeniyle artık yeterli güvenliği sunmuyor. Bu nedenle, parola aşlamalarını başka sistemlere taşımanız gerekmedikçe, yeni parolalar için kullanılmamalıdır.
  </para>
  <screen><!-- glosslist-->
önek "" (boş dizge);
       ^[./0-9A-Za-z]{2} ile eşleşen digze (<uri xlink:href="man7-regex"/> sayfasına bakın)

Kodlama sözdizimi
       [./0-9A-Za-z]{13}

Azami parola uzunluğu
       8 (7-bit karakter kullanır)

Etkili anahtar uzunluğu
       56 bite kadar

Aşlama boyutu
       64 bit

Tuz boyutu
       12 bit

Yineleme sayısı
       25
</screen>
  </refsect2>
  <refsect2><title>Genişletilmiş BSDI biçimi DES temelli</title>
  <para>
   Bu yöntem BSDI üzerinde kullanılır ve David Burren'in FreeSec kütüphanesinin kullanılması nedeniyle en azından NetBSD, OpenBSD ve FreeBSD üzerinde de mevcuttur.
  </para>
  <screen><!-- glosslist-->
önek "_"

Kodlama sözdizimi
       _[./0-9A-Za-z]{19}

Azami parola uzunluğu
       sınırsız (7-bit karakter kullanır)

Etkili anahtar uzunluğu
       56 bite kadar

Aşlama boyutu
       64 bit

Tuz boyutu
       24 bit

Yineleme sayısı
       1 ila 2**24-1 (tek olmalıdır) 
</screen>
  </refsect2>
  <refsect2><title>FreeBSD biçimi MD5 temelli</title>
  <para>
   Aslen FreeBSD için geliştirilen Poul-Henning Kamp'ın MD5 temelli parola aşlama yöntemidir. Unix benzeri çoğu sistemde, Solaris 10 ve üstlerinde desteklenir, resmi glibc'nin bir parçasıdır. Ana dezavantajı sabit yineleme sayısıdır, bu da mevcut donanım için oldukça düşüktür.
  </para>
  <screen><!-- glosslist-->
önek "$1$"

Kodlama sözdizimi
       \$1\$[^$]{1,8}\$[./0-9A-Za-z]{22}

Azami parola uzunluğu
       sınırsız (8-bit karakter kullanır)

Etkili anahtar uzunluğu
       sadece aşlama boyutuyla sınırlıdır

Aşlama boyutu
       128 bit

Tuz boyutu
       6 ila 48 bit

Yineleme sayısı
       1000
</screen>
  </refsect2>
  <refsect2><title>OpenBSD biçimi Blowfish temelli (bcrypt)</title>
  <para>
   bcrypt, aslen Niels Provos ve David Mazieres tarafından OpenBSD için geliştirilmiştir ve FreeBSD ile NetBSD'nin yeni sürümlerini, Solaris 10 ve üstlerini, birçok GNU/*/Linux dağıtımını desteklemektedir. Fakat resmi glibc'nin bir parçası değildir.
  </para>
  <para>
   Hem bcrypt hem de BSDI biçimi DES temelli aşlama yönteminde değişken yineleme sayısı sunulsada, bcrypt daha da hızlı donanıma ölçeklenebilir, yalnızca parola kırmaya özgü bazı belirli iyileştirmelere izin vermez, etkin anahtar boyutu sınırlamasına sahip değildir ve parolalar için 8 bitlik karakter kullanır.
  </para>
  <screen><!-- glosslist-->
önek "$2b$"

Kodlama sözdizimi
       \$2[abxy]\$[0-9]{2}\$[./A-Za-z0-9]{53}

Parola uzunluğu
       72 (8-bit karakter kullanır)

Etkili anahtar boyutu
       sadece aşlama boyutuyla sınırlıdır

Aşlama boyutu
       184 bit

Tuz boyutu
       128 bit

Yineleme sayısı
       2**4 ila 2**99 (2**31 yineleme)
</screen>
  <para>
   bcrypt ile, <function>crypt_gensalt</function>, <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function> işlevlerine geçilen <replaceable>count</replaceable> değiştirgesi, asıl yineleme sayısının logaritma 2 tabanıdır.
  </para>
  <para>
   bcrypt aşlamaları, "$2a$" önekini 1997'den beri kullanıyordu. Ancak, 2011 senesinde <function>crypt_blowfish</function>'te (1.0.4' kadar olan sürümler dahil) 8.bit ayarlı parola karakterlerinin işlenmesini etkileyen bir gerçekleme hatası bulundu. Hatayı düzeltmenin yanı sıra, mevcut sistemleri yükseltme yöntemleri sağlamak için iki yeni önek tanıtıldı: hatayı tamamen yeniden tanıtan "$2x$", 7 ve 8 bitlik karakterlerin doğru işlenmesini güvenceleyen "$2y$". OpenBSD 5.5, crypt_blowfish'in "$2y$" önekiyle aynı etkiyi gösteren "$2b$" önekini tanıtmıştır ve mevcut crypt_blowfish'te bunu desteklemektedir. Ne yazık ki, "$2a$" önekinin 8.bit ayarlı parola karakterleri üzerindeki etkisi sisteme özgü olarak kabul edilmelidir. Yeni parola aşlamaları üretilirken, "$2b$" ve "$2y$" önekleri kullanılmalıdır. (Bu tür aşlamaların, bu yeni önekleri desteklemeyen bir sisteme aktarılması gerekirse önceden oluşturulmuş aşlamaların aktarılan kopyalarındaki önek "$2a$" olarak değiştirilebilir.)
  </para>
  <para>
   <function>crypt_gensalt</function>, <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function> işlevleri, "$2x$" hariç (modern aşlamalarda kullanılmamalıdır) "$2b$", "$2y$", ve "$2a$" öneklerini destekler. <function>crypt</function>, <function>crypt_r</function>, <function>crypt_rn</function>, <function>crypt_ra</function> işlevleri, bu dört öneki de destekler.
  </para>
  </refsect2>
 </refsect1>
 <refsect1><title>TAŞINABİLİRLİK</title>
  <para>
   Bir glibc 2.x sisteminde bu işlevlerden herhangi birini kullanan yazılımların, <systemitem class="library">libcrypt</systemitem> ile ilintilenmesi gerekir. Bununla birlikte, birçok Unix benzeri işletim sistemi ve GNU C Kitaplığının eski sürümleri, libc'de <function>crypt</function> işlevini içermektedir. <function>crypt</function> ve <function>crypt_r</function> glibc-2.28'de kaldırılmıştır.
  </para>
  <para>
   <function>crypt_r</function>, <function>crypt_rn</function>, <function>crypt_ra</function>, <function>crypt_gensalt</function>, <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function> işlevleri çok taşınabilir değildir.
  </para>
  <para>
   Desteklenen aşlama yöntemleri gerçeklenime bağımlıdır.
  </para>
 </refsect1>
 <refsect1><title>ÖZNİTELİKLER</title>
  <para>
   Bu bölümde kullanılan terimlerin açıklamaları <uri xlink:href="man7-attributes"/> sayfasında bulunabilir.
  </para>
  <informaltable>
   <tgroup cols="3" colsep='1' rowsep='1'>
    <colspec colwidth="*"/>
    <colspec colwidth="*"/>
    <colspec colwidth="*"/>
    <thead align="left">
     <row>
      <entry>İşlev</entry>
      <entry>Öznitelik</entry>
      <entry>Değer</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><function>crypt</function>, <function>crypt_gensalt</function></entry>
      <entry>Evre Güvenliği</entry>
      <entry>ÇEG-hayır yarış:crypt</entry>
     </row>
     <row>
      <entry><function>crypt_r</function>, <function>crypt_rn</function>, <function>crypt_ra</function>, <function>crypt_gensalt_rn</function>, <function>crypt_gensalt_ra</function></entry>
      <entry>Evre Güvenliği</entry>
      <entry>ÇEG-evet</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1><title>TARİHÇE</title>
  <para>
   Rotor temelli <function>crypt</function> işlevi Sürüm 6 AT&amp;T UNIX'te göründü. "Geleneksel" DES temelli <function>crypt</function> ilk kez Sürüm 7 AT&amp;T UNIX'te göründü.
  </para>
  <para>
   <function>crypt</function> işlevi SVID, X/OPEN uyumludur ve BSD 4.3 üzerinde kullanılmaktadır. <function>crypt</function> tarafından döndürülen dizgelerin uyumlu sistemler arasında taşınabilir olması gerekmez.
  </para>
  <para>
   <function>crypt_r</function> GNU C Kütüphanesinden kaynaklanır.  HP-UX ve MKS Toolkit üzerinde de bir <function>crypt_r</function> içerir fakat tanım ve anlamsallığı farklıdır.
  </para>
  <para>
   <function>crypt_gensalt</function> Openwall eklentisidir. Solaris 10 ve üstü de bir <function>crypt_gensalt</function> içerir fakat tanım ve anlamsallığı farklıdır.
  </para>
  <para>
   <function>crypt_rn</function>, <function>crypt_ra</function>, <function>crypt_gensalt_rn</function> ve <function>crypt_gensalt_ra</function> işlevleri de Openwall eklentisidir.
  </para>
 </refsect1>
 <refsect1><title>HATA AYIKLAMA</title>
  <para>
   <function>crypt</function> ve <function>crypt_gensalt</function> işlevlerinin dönüş değerleri sonraki çağrılar tarafından üzerine yazılan sabit tamponları gösterir. (Solaris'in son sürümlerinde <function>crypt</function> evreye özgü verileri kullanır ve aslında evre güvenliklidir.)
  </para>
  <para>
   Hata durumunda <function>crypt</function> işlevinin diğer gerçeklemelerinden döndürülen dizgeler, salt okunur konumlarda tutulur veya yalnızca bir kez yüklenir, bu da normalde <function>crypt</function> dönüş değeri tarafından işaret edilen tamponu her zaman sıfırlamayı denemeyi emniyetsiz yapar, aksi takdirde tercih edilebilir. Bu sorun, uygulamanın çıktı tamponlarında tam denetime (ve çoğu zaman özel verilerin bir kısmı üzerinde de) sahip olduğu, <function>crypt_r</function>, <function>crypt_rn</function> veya <function>crypt_ra</function> işlevlerinin kullanılmasıyla kaçınılabilir. Ne yazık ki bu işlevler, <function>crypt</function> işlevinin istenmeyen bu özelliğe sahip olduğu alanlarda mevcut değildir.
  </para>
  <para>
   Evre güvenlikli <function>crypt_r</function> kullanan uygulamalar, struct crypt_data yapısı için büyük alan (128 KB'den fazla) ayırmaya ihtiyaç duyar. Her evre, bu yapının ayrı bir örneğine ihtiyaç duyar. <function>crypt_r</function> arayüzü, ikili uyumluğu bozmadan, daha fazla özel verinin tutulması için bir aşlama algoritmasının kullanılmasını imkansız kılar. <function>crypt_ra</function>, kullanılan aşlama algoritması için gereken ayırma boyutunun dinamik olarak arttırılmasına izin verir. Ne yazık ki <function>crypt_ra</function> işlevi, <function>crypt_r</function> işlevine göre daha az taşınabilir.
  </para>
  <para>
   Çok evreli uygulamalar veya evre güvenlikli olması gereken kütüphane işlevleri <function>crypt_gensalt</function> yerine <function>crypt_gensalt_rn</function> veya <function>crypt_gensalt_ra</function> kullanmalıdır.
  </para>
 </refsect1>
 <refsect1><title>İLGİLİ BELGELER</title>
  <para>
   <uri xlink:href="man1-login"/>, <uri xlink:href="man1-passwd"/>, <uri xlink:href="man3-crypto"/>,  <uri xlink:href="man3-encrypt"/>, <uri xlink:href="man3-free"/>,<uri xlink:href="man3-getpass"/>, <uri xlink:href="man3-getpwent"/>, <uri xlink:href="man3-malloc"/>, <uri xlink:href="man3-realloc"/>, <uri xlink:href="man3-shadow"/>, <uri xlink:href="man5-passwd"/>, <uri xlink:href="man5-shadow"/>, <uri xlink:href="man7-regex"/>, <uri xlink:href="man8-pam"/>
  </para>
 </refsect1>
 <refsect1><title>ÇEVİREN</title>
  <simpara>Emin İslam Tatlı - Nisan 2004</simpara>
  <simpara>Nilgün Belma Bugüner - Eylül 2022</simpara>
  <simpara>Fatih Koçer - Eylül 2022</simpara>
  <simpara>
   Lütfen, çeviri ile ilgili bildirimler için &lt;belgeler-genel (at) lists.sourceforge.net&gt; adresini kullanın.
  </simpara>
 </refsect1>
</refentry>
