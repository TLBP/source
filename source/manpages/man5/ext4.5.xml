<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
       man5/ext4.5.xml, E2fsprogs 1.46.5, GPLv2, NBB - Eylül 2022
     ******************************************************************** -->
<refentry xml:id="man5-ext4" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
 <info xmlns:t="http://tlbp.gen.tr/ns/tlbp">
  <t:pageinfo>
   <t:name>ext4</t:name>
   <t:volnum>5</t:volnum>
   <t:section>Dosya Biçimleri ve Dosya Dönüşümleri</t:section>
   <t:source>E2fsprogs 1.46.5</t:source>
   <t:date>Aralık 2021</t:date>
  </t:pageinfo>
 </info>
 <refnamediv>
  <refname>ext2</refname>
  <refpurpose>ikinci genişletilmiş dosya sistemi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>ext3</refname>
  <refpurpose>üçüncü genişletilmiş dosya sistemi</refpurpose>
 </refnamediv>
 <refnamediv>
  <refname>ext4</refname>
  <refpurpose>dördüncü genişletilmiş dosya sistemi</refpurpose>
 </refnamediv>
 <refsect1><title>AÇIKLAMA</title>
  <para>
   İkinci, üçüncü ve dördüncü genişletilmiş dosya sistemleri veya yaygın olarak bilindikleri gibi ext2, ext3 ve ext4, geçmişte birçok Linux dağıtımı için öntanımlı dosya sistemi olan Linux dosya sistemleridir. Genişletilebilirlik ve geriye dönük uyumluluk için tasarlanmış genel amaçlı dosya sistemleridir. Özellikle, daha önce ext2 ve ext3 dosya sistemleriyle kullanılması amaçlanan dosya sistemleri, ext4 dosya sistemi sürücüsü kullanılarak bağlanabilir ve aslında birçok modern Linux dağıtımında, ext4 dosya sistemi sürücüsü, ext2 ve ext3 dosya sistemlerini bağlama isteklerini yerine getirmek üzere yapılandırılmıştır.
  </para>
 </refsect1>
 <refsect1><title>DOSYA SİSTEMİNİN ÖZELLİKLERİ</title>
  <para>
   Ext2, ext3 veya ext4 için biçimlendirilmiş bir dosya sistemi, aşağıdaki dosya sistemi özellik bayraklarından uygun olanlarını etkinleştirilerek özel bir birleşim oluşturabilir. Bu özelliklerden bazıları, kullanılan Linux çekirdek sürümüne bağlı olarak ext2, ext3 ve ext4 dosya sistemi sürücülerinin tüm gerçeklenimlerinde desteklenmez. GNU/HURD veya FreeBSD gibi başka işletim sistemlerinin ext2 gerçeklenimlerinde ise yalnızca çok kısıtlayıcı bir dizi dosya sistemi özelliği desteklenmiş olabilir.
  </para>
  <glosslist>
   <glossentry>
    <glossterm>
     <option>64bit</option>
    </glossterm>
    <glossdef>
     <para>
      Dosya sisteminin 2^32 bloktan daha büyük olmasını sağlar. Bu özellik gerektiğinde otomatik olarak ayarlanır, ancak dosya sisteminin ilk oluşturulduğunda bu eşikten daha küçük olsa bile, 2^32 bloktan daha büyük olarak yeniden boyutlandırılması gerekiyorsa bu özelliğin açıkça belirtilmesi yararlı olabilir. Bazı eski çekirdeklerin ve e2fsprogs'un eski sürümlerinin, bu ext4 özelliği etkinleştirilmiş dosya sistemlerini desteklemeyeceği unutulmamalıdır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>bigalloc</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, kümelenmiş blok tahsisini mümkün kılar, böyle bir tahsis birimindeki blok sayısı ikinin üstellerinden biri (8, 16, vb.)  olmalıdır. Böylece, geleneksel olarak blok ayırma bit eşlemi olarak bilinen eşlemdeki her bit, öntanımlı olarak 16 bloktan oluşan bir kümenin kullanımda olup olmadığını gösterir. Bu özellik, blok ayırma için harcanan zamanı azaltabilir ve özellikle büyük dosyalar için daha az saçılım sağlar. Küme boyutu, <uri xlink:href="man8-mke2fs"/> komutunun <option linkend="man8-mke2fs-opt-C">-C</option> seçeneği kullanılarak belirtilebilir.
     </para>
     <warning>
      <simpara>
       <option>bigalloc</option> özelliği hala geliştirme aşamasındadır ve çekirdeğiniz tarafından tam olarak desteklenmeyebilir veya çeşitli hataları olabilir. Ayrıntılar için: <link xlink:href="http://ext4.wiki.kernel.org/index.php/Bigalloc"/>.
       </simpara>
       <simpara>
        Gecikmeli tahsis ile çakışabilir (bkz: <option linkend="man5-ext4-nodelalloc">nodelalloc</option> bağlama seçeneği).
      </simpara>
     </warning>
     <para>
      Bu özellik <option linkend="man5-ext4-extent">extent</option> özelliğinin etkin olmasını gerektirir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>casefold</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, harf büyüklüğüne duyarlılık (<option linkend="man1-chattr">+F</option>) bayrağının etkin olduğu dizinler için dosya sistemi düzeyinde karakter kodlama desteği sağlar. Bu özellik diskte ad koruyucudur, ancak uygulamaların dosya adına eşdeğer sürümde bir kodlama kullanarak dosya sisteminde bir dosya aramasına olanak tanır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry xml:id="man5-ext4-dir_index">
    <glossterm>
     <option>dir_index</option>
    </glossterm>
    <glossdef>
     <para>
      Büyük dizinlerde ad aramalarını hızlandırmak için aşlı b-ağaçları (b-tree) kullanılır. Bu özellik, ext3 ve ext4 dosya sistemleri tarafından desteklenir, ext2 dosya sistemleri tarafından yok sayılır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>dir_nlink</option>
    </glossterm>
    <glossdef>
     <para>
      Normalde, ext4, bir dosya düğümünün en fazla 65.000 sabit bağa sahip olmasına izin verir. Bu, dizinlerin yanı sıra normal dosyalar için de geçerlidir; bu, bir dizinde 64.998'den fazla alt dizin bulunamayacağı anlamına gelir (çünkü '.' ve '..' girişlerinin her biri ve dizinin üst dizindeki kendi dizin girdisi sabit bağ sayılır). Bu özellik, bir dizine giden sabit bağ sayısının azami sınır aşıldığında bilinmediğini belirtmek için ext4'ün bağ sayısı olarak 1'i kullanmasına neden olarak bu sınırı yükseltir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>ea_inode</option>
    </glossterm>
    <glossdef>
     <para>
      Normalde, bir dosyanın genişletilmiş öznitelikleri ve ilişkili meta verileri, düğüme veya düğümün ilişkili genişletilmiş öznitelik bloğuna sığmalıdır. Bu özellik, her bir genişletilmiş öznitelik değerinin, gerekirse başka bir düğümün veri bloklarına yerleştirilmesine olanak vererek, dosya başına genişletilmiş özniteliklerin boyutu ve sayısı üzerindeki sınırı yükseltir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>encrypt</option>
    </glossterm>
    <glossdef>
     <para>
      Veri bloklarının ve dosya adlarının dosya sistemi düzeyinde şifrelenmesi için destek sağlar. Dosya düğümü meta verileri (zaman damgaları, dosya boyutu, kullanıcı/grup sahipliği vb.) şifrelenmez.
     </para>
     <para>
      Bu özellik en çok, birden fazla kullanıcıya sahip dosya sistemlerinde veya tüm dosyaların şifrelenmemesinin gerektiği durumlarda kullanışlıdır. Çoğu kullanımda, özellikle tek kullanıcılı sistemlerde, <literal>dm-crypt</literal> kullanarak blok aygıtı katmanında şifreleme çok daha iyi güvenlik sağlayabilir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>ext_attr</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özellik, genişletilmiş özniteliklerin kullanılmasını sağlar. Bu özellik ext2, ext3 ve ext4 tarafından desteklenir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry xml:id="man5-ext4-extent">
    <glossterm>
     <option>extent</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, ext2 ve ext3 dosya sistemleri tarafından kullanılan geleneksel dolaylı blok şemasından daha verimli bir veri yapısı olan genişletilmiş (extent) ağacı kullanarak, belirli bir düğüm için mantıksal blok numaralarının depolanacağı depolama aygıtındaki fiziksel bloklara eşlenmesine olanak sağlar. Genişletilmiş ağacın kullanılması, meta veri bloğunun ek yükünü azaltır, dosya sistemi başarımını iyileştirir ve dosya sisteminde <uri xlink:href="man8-e2fsck"/> çalıştırma gereksinimini azaltır.
     </para>
     <note>
      <para>
       Geriye uyumluluk adına <option>extent</option> ve <option>extents</option> her ikisi de bu özellik için geçerli ad olarak kabul edilmektedir.
      </para>
     </note>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>extra_isize</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, nanosaniye zaman damgaları ve dosya oluşturma süresi gibi genişletilmiş meta veriler için, mevcut çekirdeğin bu kadar fazla alan ayırması gerekmese de, her dosya düğümünde belirli bir miktarda alan ayırır. Bu özellik olmadan, çekirdek, o an ihtiyaç duyulan özellikler için alan ayırır ve geri kalanı genişletilmiş öznitelikler tarafından tüketilebilir.
     </para>
     <para>
      Bu özelliğin kullanışlı olabilmesi için dosya düğümü boyutunun en azından 256 bayt veya üstü olması gerekir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>filetype</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özellik dosya türü bilgilerinin dizin girdilerinde saklanmasını sağlar. Bu özellik ext2, ext3 ve ext4 tarafından desteklenir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>flex_bg</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, her bloğun grup meta verilerinin (tahsis bit eşlemleri ve dosya düğümü tabloları) depolama ortamında herhangi bir yere yerleştirilmesine olanak sağlar. Ek olarak, <uri xlink:href="man8-mke2fs"/>, her <option>flex_bg</option> grubunun ilk blok grubundan başlayarak her bloğun grup meta verilerini bir arada yerleştirecektir. <option>flex_bg</option> grubunun boyutu  <uri xlink:href="man8-mke2fs"/> komutunun <option linkend="man8-mke2fs-opt-G">-G</option> seçeneği kullanılarak belirlenebilir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>has_journal</option>
    </glossterm>
    <glossdef>
     <para>
      Temiz olmayan sistem kapanmalarında bile dosya sistemi tutarlılığını sağlamak için bir günlük oluşturur. Bu özelliği etkinleştirmek, <uri xlink:href="man8-mke2fs"/> veya <uri xlink:href="man8-tune2fs"/> ile <option linkend="man8-mke2fs-opt-j">-j</option> seçeneğini kullanmaya eşdeğerdir. Bu özellik ext3 ve ext4 tarafından desteklenir, ext2 dosya sistemi sürücüsü tarafından yok sayılır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>huge_file</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, dosya boyutunun 2 terabayttan büyük olmasına izin verir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>inline_data</option>
    </glossterm>
    <glossdef>
     <para>
      Verilerin dosya düğümünde ve genişletilmiş öznitelik alanında depolanmasına izin verir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>journal_dev</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özellik, harici günlük aygıtında bulunan süper blokta etkinleştirilir. Harici günlüğün blok boyutu, onu kullanan dosya sistemi ile aynı olmalıdır.
     </para>
     <para>
      Harici günlük aygıtı, <uri xlink:href="man8-mke2fs"/> veya <uri xlink:href="man8-tune2fs"/> komutuna <option linkend="man8-mke2fs-opt-j">-j device=</option><replaceable>harici-aygıt</replaceable> seçeneği belirtilerek dosya sistemi tarafından kullanılabilir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>large_dir</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özellik, dizinlerin azami boyutunu yükselterek dizin başına dosya sayısı sınırını ve aşlı b-ağacı dizinleri için (bkz: <option linkend="man5-ext4-dir_index">dir_index</option>), dizin girdilerini saklamakta kullanılan aşlı b-ağacının azami boyutunu artırır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>large_file</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özelliğin bayrağı, 2 gigabayttan daha büyük bir dosya oluşturulduğunda günümüz çekirdekleri tarafından otomatik olarak tanımlanır. Çok eski çekirdekler büyük dosyaları işleyemezdi, bu nedenle bu özelliğin bayrağı, bu çekirdeklerin anlayamadıkları dosya sistemlerini bağlamalarını engellemek için kullanılmaktadır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>metadata_csum</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, meta veri sağlama toplamını etkinleştirir. Bu özellik, tüm dosya sistemi meta verilerinin (süper blok, grup tanımlayıcı bloklar, dosya düğüm ve blok bit eşlemleri, dizinler ve genişletilmiş ağaç blokları) sağlama toplamlarını saklar. Meta veri blokları için kullanılan sağlama toplamı algoritması, <option linkend="man5-ext4-uninit_bg">uninit_bg</option> özellikli grup tanımlayıcıları için kullanılandan farklıdır. Bu iki özellik uyumsuzdur ve <option>uninit_bg</option> yerine tercihli olarak <option>metadata_csum</option> kullanılır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>metadata_csum_seed</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özellik, dosya sisteminin meta veri sağlama toplamı tohumunu süper blokta saklamasına izin verir; bu, yöneticinin, dosya sistemi bağlıyken <option>metadata_csum</option> özelliğini kullanarak bir dosya sisteminin UUID'sini değiştirmesine olanak tanır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>meta_bg</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, blok grubu tanıtıcılarının boyutundaki büyüme için açıkça yer ayırmaya gerek kalmadan dosya sistemlerinin çevrimiçi olarak yeniden boyutlandırılmasına olanak tanır. Bu şema ayrıca 2^32 bloktan daha büyük dosya sistemlerini yeniden boyutlandırmak için de kullanılır. Yeni bir dosya sistemi oluşturulurken bu özelliğin atanması önerilmez, çünkü blok grubu tanıtıcılarının bu yöntemle depolanması, dosya sistemini bağlamak için gereken süreyi yavaşlatacaktır. Daha yeni çekirdekler, çevrimiçi yeniden boyutlandırma yaparken yeniden boyutlandırma düğümünde ayrılmış daha fazla alan yoksa gereken boyutu ayarlamak için bu özelliği otomatik olarak etkinleştirebilir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>mmp</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği, çoklu bağlama koruması sağlar. <option>mmp</option>, dosya sisteminin birden fazla bağlanmadan korunmasına yardımcı olur. Paylaşılan depolama ortamlarında kullanışlıdır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>project</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 özelliği proje kota desteği sağlar. Bu özellik ile dosya sistemi bağlandığında dosya düğümünün proje kimliği yönetilir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>quota</option>
    </glossterm>
    <glossdef>
     <para>
      Kota düğümleri oluşturur (3. dosya düğümü: kullanıcı kotası, 4. dosya düğümü: grup kotası) ve süperblokta bunları tanımlar. Bu özellik ile dosya sistemi bağlandığında kotalar otomatik olarak etkinleştirilir.
     </para>
     <para>
      Kota dosyalarının (yani, eski kota tasarımında bulunan user.quota ve group.quota dosyalarının) dosya düğümlerinin gizlenmesine neden olur.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>resize_inode</option>
    </glossterm>
    <glossdef>
     <para>
      Bu dosya sistemi özelliği, bağlı bir dosya sistemini yeniden boyutlandırılırken blok grubu tanım tablosunun genişletilebilmesi için gerekecek yedek alanın ayrıldığını gösterir. Çevrimiçi yeniden boyutlandırma işlemi, <uri xlink:href="man8-resize2fs"/> tarafından tetiklenir ve çekirdek tarafından gerçekleştirilir. Öntanımlı olarak <uri xlink:href="man8-mke2fs"/>, dosya sisteminin başlangıç boyutunun 1024 katına kadar büyüyebileceği alanı ayırmaya çalışır. Bu, genişletilmiş yeniden boyutlandırma seçeneği kullanılarak değiştirilebilir.
     </para>
     <para>
      Bu özellik, aşağıdaki <option>sparse_super</option> veya <option>sparse_super2</option> özelliğinin etkin olmasını gerektirir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry xml:id="man5-ext4-sparse_super">
    <glossterm>
     <option>sparse_super</option>
    </glossterm>
    <glossdef>
     <para>
      Bu dosya sistemi özelliği, günümüzde ext2, ext3 ve ext4 dosya sistemlerinin tamamında etkindir. Süperblok ve blok grubu tanıtıcılarının yedek kopyalarının bütün blok gruplarında değil, yalnızca birkaçında mevcut olduğunu gösterir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>sparse_super2</option>
    </glossterm>
    <glossdef>
     <para>
      Bu özellik, süperblok ve blok grubu tanıtıcılarının en fazla iki yedeği olacağını gösterir. Yedek süperblok(lar)ı ve blok grubu tanıtıcı(lar)ını depolamak için kullanılan blok grupları süperblokta saklanır, ancak genelde bir süperblok dosya sisteminin 1. blok grubunun başlangıcında saklanırken diğeri ise dosya sisteminin son blok grubunda yer alır. Bu özellik aslında <option>sparse_super</option>'in daha uç bir çeşidi olup veri dosyaları için kullanılan bitişik blokların diskin daha büyük bir yüzdesini kaplamasına izin verecek şekilde tasarlanmıştır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>stable_inodes</option>
    </glossterm>
    <glossdef>
     <para>
      Dosya sisteminin dosya düğümü numaralarını ve UUID'yi kararlı olarak imler. Bu özellikli bir dosya sisteminin daraltılmasına <uri xlink:href="man8-resize2fs"/> ve  UUID'sinin değiştirilmesine de <uri xlink:href="man8-tune2fs"/> izin vermez. Bu özellik, dosya düğüm numaralarını ve UUID'yi kullanan özel şifreleme özelliklerinin kullanılmasına izin verir. Şifreleme özelliğinin yine de ayrıca etkinleştirilmesi gerektiği unutulmamalıdır. <option>stable_inodes</option> eski çekirdeklerde kullanılabilen geriye uyumlu bir özelliktir.
     </para>
    </glossdef>
   </glossentry>
   <glossentry xml:id="man5-ext4-uninit_bg">
    <glossterm>
     <option>uninit_bg</option>
    </glossterm>
    <glossdef>
     <para>
      Bu ext4 dosya sistemi özelliği, blok grubu tanıtıcılarının sağlama toplamları kullanılarak korunacağını ve böylece <uri xlink:href="man8-mke2fs"/>'nin tüm blok gruplarını ilklendirmeden bir dosya sisteminin oluşturmasını güvenli hale getireceğini belirtir. Çekirdek, kullanılmayan düğümleri için bu sağlama toplamlarını tutacak ve düğüm tablolarını ve bloklarını yavaş yavaş ilkendirecektir. Bu özellik, <uri xlink:href="man8-e2fsck"/> kullanılarak dosya sisteminin denetlenme süresini hızlandırır ve ayrıca dosya sistemini oluştururken <uri xlink:href="man8-mke2fs"/> için gereken süreyi de kısaltır.
     </para>
    </glossdef>
   </glossentry>
   <glossentry>
    <glossterm>
     <option>verity</option>
    </glossterm>
    <glossdef>
     <para>
      Doğruluk korumalı dosyalar için desteği etkinleştirir. Doğruluk korumalı dosyalar salt okunurdur ve verileri, dosyanın sonunda gizlenmiş bir Merkle ağacı kullanılarak şeffaf bir şekilde doğrulanır. Merkle ağacının kök aşı kullanılarak, bir doğruluk korumalı dosyanın kimliği, dosyanın boyutundan bağımsız olarak verimli bir şekilde doğrulanabilir.
     </para>
     <para>
      Bu özellik, oku-yaz dosya sistemlerinde önemli salt okunur dosyaların kimliğini doğrulamak için çok kullanışlıdır. Dosya sisteminin kendisi salt okunursa, tüm blok aygıtının kimliğini doğrulamak için <option>dm-verity</option> kullanmak çok daha iyi güvenlik sağlayabilir.
     </para>
    </glossdef>
   </glossentry>
  </glosslist>
 </refsect1>
 <refsect1><title>BAĞLAMA SEÇENEKLERİ</title>
  <para>
   Bu bölümde, ext2, ext3 ve ext4'e özgü bağlama seçenekleri açıklanmıştır. Diğer genel bağlama seçenekleri de kullanılabilir; ayrıntılar için bkz: <uri xlink:href="man8-mount"/>
  </para>
  <refsect2><title>Ext2 için bağlama seçenekleri</title>
   <para>
    `ext2' dosya sistemi standart Linux dosya sistemidir. Linux çekirdeğinin 2.5.46 sürümünden beri, çoğu bağlama seçeneği için öntanımlılar dosya sisteminin süper bloğu tarafından belirlenir. Bunlar <uri xlink:href="man8-tune2fs"/> ile tanımlanabilir.
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <option>acl</option>|<option>noacl</option>
     </glossterm>
     <glossdef>
      <para>
       POSIX Erişim Denetim Listeleri desteklenir|desteklenmez. Bkz: <uri xlink:href="man5-acl"/> kılavuz sayfası.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>bsddf</option>|<option>minixdf</option>
     </glossterm>
     <glossdef>
      <para>
       <uri xlink:href="man2-statfs"/> sistem çağrısının davranışını belirler. <option>minixdf</option> davranışı, dosya sisteminin toplam blok sayısının <structname>statfs</structname> yapısının <structfield>f_blocks</structfield> alanında döndürülmesi, <option>bsddf</option> davranışı ise (öntanımlıdır), ext2 dosya sistemi tarafından dosya depolama için kullanılamayan ek blokların döndürülen toplam blok sayısından çıkarılmasıdır. Örnek:
      </para>
      <screen>% <command>mount /k -o minixdf; df /k; umount /k</command>

Dosyasistemi   1K-blok     Dolu       Boş   Kull%    Bağlanılan yer
/dev/sda6      2630655    86954   2412169      3%     /k

% <command>mount /k -o bsddf; df /k; umount /k</command>

Dosyasistemi   1K-blok     Dolu       Boş   Kull%    Bağlanılan yer
/dev/sda6      2543714       13   2412169      0%     /k
</screen>
      <para>
       (Bu örneğin, <filename>/etc/fstab</filename> içinde verilen seçeneklere komut satırı seçeneklerinin eklenebileceğini gösterdiğine dikkat edilmelidir)
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>check=none</option>|<option>nocheck</option>
     </glossterm>
     <glossdef>
      <para>
       Bağlama sırasında denetim yapılmaz. Bu öntanımlı ve hızlıdır. Örneğin sistem önyüklemesi sırasında veya ertesinde bir <uri xlink:href="man8-e2fsck"/> çağrısı akıllıca olur. Öntanımlı olmayan davranış desteklenmemektedir (<option>check=normal</option> ve <option>check=strict</option> seçenekleri kaldırıldı). Ext2 ve ext3 dosya sistemleri için ext4 çekirdek sürücüsü kullanılıyorsa, bu bağlama seçeneklerinin desteklenmesi gerekmediği unutulmamaldır.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>debug</option>
     </glossterm>
     <glossdef>
      <para>
       Her bağlama veya yeniden bağlama sırasında hata ayıklama bilgileri basılır.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>errors</option>={<optional>continue</optional>|<optional>remount-ro</optional>|<optional>panic</optional>}
     </glossterm>
     <glossdef>
      <simpara>
       Bir hata saptandığında davranışı belirler.
      </simpara>
      <simpara>
       <optional>continue</optional>: Hatalar yok sayılır ve dosya sistemi hatalı olarak imlenir.
      </simpara>
      <simpara>
       <optional>remount-ro</optional>: Dosya sistemi yeniden salt okunur olarak bağlanır.
      </simpara>
      <simpara>
       <optional>panic</optional>: Panikleyip sistem kapatılır.
      </simpara>
      <para>
       Öntanımlı davranış dosya sisteminin süper bloğuna yazılır ve <uri xlink:href="man8-tune2fs"/> kullanılarak değiştirilebilir.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>grpid</option>|<option>bsdgroups</option> ve
      <option>nogrpid</option>|<option>sysvgroups</option>
     </glossterm>
     <glossdef>
      <para>
       Bu seçenekler, yeni oluşturulan bir dosyanın hangi grup kimliğini alacağını tanımlar. <option>grpid</option> seçeneğiyle oluşturulduğu üst dizinin grup kimliğini alır; aksi halde (öntanımlı) <option>bsdgroups</option> ile üst dizin setgid bitlerine sahip olmadığı sürece mevcut sürecin dosya sistemi grup kimliğini alır, üst dizin setgid bitlerine sahipse üst dizinin grup kimliğini alır ve ayrıca kendisi dizin ise üst dizinin setgid bitlerini de alır.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>grpquota</option>|<option>noquota</option>|<option>quota</option>|<option>usrquota</option>
     </glossterm>
     <glossdef>
      <para>
       <option>usrquota</option> (<option>quota</option> ile aynıdır) bağlama seçeneği dosya sisteminde kullanıcı kotası desteğini etkin kılar. <option>grpquota</option> bağlama seçeneği ise grup kotası desteğini etkin kılar. Kota sistemini gerçekten etkin kılmak ve yönetmek için kota araçları gerekir.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>nouid32</option>
     </glossterm>
     <glossdef>
      <para>
       32 bitlik kullanıcı ve grup kimliklerini devre dışı bırakır. Bu, yalnızca 16 bitlik değerleri saklayan ve bekleyen eski çekirdeklerle birlikte çalışabilirlik içindir.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>oldalloc</option> veya <option>orlov</option>
     </glossterm>
     <glossdef>
      <para>
       Yeni dosya düğümleri için eski yer ayırıcı veya Orlov yer ayırıcı kullanılır. Orlov öntanımıdır.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>resgid</option>=<replaceable>N</replaceable>|<option>resuid</option>=<replaceable>N</replaceable>
     </glossterm>
     <glossdef>
      <para>
       Ext2 dosya sistemi boş alanın belli bir miktarını yedek olarak ayırır (öntanımlı olarak %5, bkz: <uri xlink:href="man8-mke2fs"/>  ve  <uri xlink:href="man8-tune2fs"/>). Bu seçenekler yedek blokları kimin kullanacağını belirler. (Kabaca: Belirtilen kullanıcı kimlik kime aitse o veya belirtilen grup kimlik kimlere aitse onlar.)
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>sb</option>=<replaceable>N</replaceable>
     </glossterm>
     <glossdef>
      <para>
       Normal süper blok yerine numarası <replaceable>N</replaceable> olan süper blok kullanılır. Bu seçenek normalde birincil süper blok bozulduğunda kullanılır. Yedek süper blokların yerleri dosya sisteminin blok boyuna, her gruptaki blok sayısına ve  <option linkend="man5-ext4-sparse_super">sparse_super</option> gibi özelliklere bağlıdır.
     </para>
     <para>
      <uri xlink:href="man8-mke2fs"/>'in dosya sistemini tutarlı değerlerle (örneğin, blok boyutu, gruptaki blok sayısı, <option linkend="man5-ext4-sparse_super">sparse_super</option>, vb.) yapılandırıldığı varsayımıyla, süper blokların yerleri <uri xlink:href="man8-mke2fs"/> komutunun <option linkend="man8-mke2fs-opt-n">-n</option> seçeneği ile çıktılanarak ek yedek süper blokların yerleri saptanabilir.
     </para>
     <para>
      Buradaki bloklar 1 kilobaytlık birimlerden oluşur. Yani, 4 kilobaytlık bloklardan 32768 mantıksal blok ile oluşturulmuş bir dosya sisteminde "<option>sb=131072</option>" olur (yedek süper bloğun dosya sisteminin son bloğuna yerleştirilmesi nedeniyle).
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>user_xattr</option>|<option>nouser_xattr</option>
     </glossterm>
     <glossdef>
      <para>
       "user." ile başlayan gelişmiş öznitelikler desteklenir|desteklenmez.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </refsect2>
  <refsect2><title>Ext3 için bağlama seçenekleri</title>
   <para>
    Ext3 dosya sistemi, günlük kayıtlı ext2 dosya sistemidir. Ext2 ile aynı seçenekleri ve ek olarak aşağıdakileri destekler:
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <option>journal_dev</option>=<replaceable>aygıtno</replaceable>|<option>journal_path</option>=<replaceable>yol</replaceable>
     </glossterm>
     <glossdef>
      <para>
       Harici günlükleme aygıtının üst/ast numaraları değiştiğinde, bu seçenekler kullanıcının yeni günlük konumunu belirlemesine olanak tanır. Günlük aygıtı, <replaceable>aygıtno</replaceable> ile kodlanmış yeni üst/ast aygıt numaraları aracılığıyla veya aygıta giden bir <replaceable>yol</replaceable> aracılığıyla tanımlanır.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>norecovery</option>|<option>noload</option>
     </glossterm>
     <glossdef>
      <para>
       Don't load the journal on mounting.  Note that if the file system was not unmounted  cleanly, skipping  the journal replay will lead to the file system containing inconsistencies that can lead to any number of problems.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>data</option>={<optional>journal</optional>|<optional>ordered</optional>|<optional>writeback</optional>}
     </glossterm>
     <glossdef>
      <para>
       Specifies the journaling mode for file data.  Metadata is always  journaled.   To  use  modes other  than  ordered  on the root file system, pass the mode to the kernel as boot parameter, e.g. rootflags=data=journal.
      </para>
      <glosslist>
       <glossentry>
        <glossterm>
         <option>journal</option>
        </glossterm>
        <glossdef>
         <para>
          All data is committed into the journal prior to being written into the main file  system.
         </para>
        </glossdef>
       </glossentry>
       <glossentry>
        <glossterm>
         <option>ordered</option>
        </glossterm>
        <glossdef>
         <para>
          This  is  the  default  mode.  All data is forced directly out to the main file system prior to its metadata being committed to the journal.
         </para>
        </glossdef>
       </glossentry>
       <glossentry>
        <glossterm>
         <option>writeback</option>
        </glossterm>
        <glossdef>
         <para>
          Data ordering is not preserved – data may be written into the main file  system  after its  metadata  has been committed to the journal.  This is rumoured to be the highest-throughput option. It guarantees internal file system integrity, however it can allow old data to appear in files after a crash and journal recovery.
         </para>
        </glossdef>
       </glossentry>
      </glosslist>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>data_err=ignore</option>
     </glossterm>
     <glossdef>
      <para>
       Just print an error message if an error occurs in a file data buffer in ordered mode.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>data_err=abort</option>
     </glossterm>
     <glossdef>
      <para>
       Abort the journal if an error occurs in a file data buffer in ordered mode.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>barrier=0</option>|<option>barrier=1</option>
     </glossterm>
     <glossdef>
      <para>
       This  disables / enables the use of write barriers in the jbd code.  barrier=0 disables, barrier=1 enables (default). This also requires an IO stack which can support barriers,  and  if jbd  gets  an error on a barrier write, it will disable barriers again with a warning.  Write barriers enforce proper on-disk ordering of  journal  commits,  making  volatile  disk  write caches safe to use, at some performance penalty.  If your disks are battery-backed in one way or another, disabling barriers may safely improve performance.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>commit</option>=<replaceable>SÜRE</replaceable>
     </glossterm>
     <glossdef>
      <para>
       Start a journal commit every <replaceable>SÜRE</replaceable> seconds.  The default value is 5 seconds.  Zero means  default.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>user_xattr</option>
     </glossterm>
     <glossdef>
      <para>
       Enable Extended User Attributes. See the attr(5) manual page.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>jqfmt</option>={<optional>vfsold</optional>|<optional>vfsv0</optional>|<optional>vfsv1</optional>}
     </glossterm>
     <glossdef>
      <para>
       Apart from the old quota system (as in ext2, jqfmt=vfsold aka version 1 quota) ext3 also supports journaled quotas (version 2 quota). jqfmt=vfsv0 or jqfmt=vfsv1 enables  journaled  quotas.  Journaled quotas have the advantage that even after a crash no quota check is required. When the quota file system feature is enabled, journaled quotas are used  automatically,  and this mount option is ignored.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>usrjquota=aquota.user</option>|<option>grpjquota=aquota.group</option>
     </glossterm>
     <glossdef>
      <para>
       For  journaled  quotas  (jqfmt=vfsv0 or jqfmt=vfsv1), the mount options usrjquota=aquota.user and grpjquota=aquota.group are required to tell the quota system which quota  database  files to  use.  When  the quota file system feature is enabled, journaled quotas are used automatically, and this mount option is ignored.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </refsect2>
  <refsect2><title>Ext4 için bağlama seçenekleri</title>
   <para>
    The ext4 file system is an advanced level of the ext3 file system which incorporates scalability and reliability enhancements for supporting large file system.
   </para>
   <para>
    <option>journal_dev,  journal_path,  norecovery,  noload,  data,  commit,  orlov,  oldalloc, [no]user_xattr, [no]acl, bsddf, minixdf, debug, errors, data_err, grpid, bsdgroups,  nogrpid,  sysvgroups,  resgid,  resuid, sb, quota, noquota, nouid32, grpquota, usrquota, usrjquota, grpjquota</option> ve <option>jqfmt</option> seçenekleri ext3 veya ext2 ile geriye yönelik uyumludur.
   </para>
   <glosslist>
    <glossentry>
     <glossterm>
      <option>journal_checksum</option>|<option>nojournal_checksum</option>
     </glossterm>
     <glossdef>
      <para>
       The journal_checksum option enables checksumming of the journal transactions.  This will  allow  the  recovery  code in e2fsck and the kernel to detect corruption in the kernel. It is a compatible change and will be ignored by older kernels.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>journal_async_commit</option>
     </glossterm>
     <glossdef>
      <para>
       Commit block can be written to disk without waiting for descriptor blocks. If  enabled  older kernels cannot mount the device.  This will enable 'journal_checksum' internally.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>barrier=0</option>|<option>barrier=1</option>|<option>barrier</option>|<option>nobarrier</option>
     </glossterm>
     <glossdef>
      <para>
       These mount options have the same effect as in ext3.  The mount options "barrier" and "nobarrier" are added for consistency with other ext4 mount options.
     </para>
     <para>
      The ext4 file system enables write barriers by default.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>inode_readahead_blks</option>=<replaceable>N</replaceable>
     </glossterm>
     <glossdef>
      <para>
       This tuning parameter controls the maximum number of inode table blocks that ext4's inode table readahead algorithm will pre-read into the buffer cache.  The value must be a power of 2. The default value is 32 blocks.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>stripe</option>=<replaceable>N</replaceable>
     </glossterm>
     <glossdef>
      <para>
       Number of file system blocks that mballoc will try to use for allocation size and  alignment. For  RAID5/6 systems this should be the number of data disks * RAID chunk size in file system blocks.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>delalloc</option>
     </glossterm>
     <glossdef>
      <para>
       Deferring block allocation until write-out time.
      </para>
     </glossdef>
    </glossentry>
    <glossentry xml:id="man5-ext4-nodelalloc">
     <glossterm>
      <option>nodelalloc</option>
     </glossterm>
     <glossdef>
      <para>
       Disable delayed allocation. Blocks are allocated when data is copied from user to page cache.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>max_batch_time</option>=<replaceable>µSANİYE</replaceable>
     </glossterm>
     <glossdef>
      <para>
       Maximum amount of time ext4 should wait for additional file system operations to be batch together  with  a  synchronous write operation. Since a synchronous write operation is going to force a commit and then a wait for the I/O complete, it doesn't cost much, and can be a  huge throughput  win, we wait for a small amount of time to see if any other transactions can piggyback on the synchronous write. The algorithm used is designed to automatically tune for the speed  of the disk, by measuring the amount of time (on average) that it takes to finish committing a transaction. Call this time the "commit time".  If the time  that  the  transaction has  been running is less than the commit time, ext4 will try sleeping for the commit time to see if other operations will  join  the  transaction.  The  commit  time  is  capped  by  the max_batch_time,  which  defaults to 15000 µs (15 ms). This optimization can be turned off entirely by setting max_batch_time to 0.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>min_batch_time</option>=<replaceable>µSANİYE</replaceable>
     </glossterm>
     <glossdef>
      <para>
       This parameter sets the commit time (as described above) to be at  least  min_batch_time.  It defaults to zero microseconds. Increasing this parameter may improve the throughput of multi-threaded, synchronous workloads on very fast disks, at the cost of increasing latency.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>journal_ioprio</option>=<replaceable>ÖNCELİK</replaceable>
     </glossterm>
     <glossdef>
      <para>
       The I/O priority (from 0 to 7, where 0 is the highest <replaceable>ÖNCELİK</replaceable>) which should be used for  I/O operations submitted by kjournald2 during a commit operation.  This defaults to 3, which is a slightly higher priority than the default I/O priority.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>abort</option>
     </glossterm>
     <glossdef>
      <para>
       Simulate the effects of calling ext4_abort() for debugging purposes.  This is  normally  used while remounting a file system which is already mounted.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>auto_da_alloc</option>|<option>noauto_da_alloc</option>
     </glossterm>
     <glossdef>
      <para>
       Many broken applications don't use fsync() when replacing existing files via patterns such as
     </para>
     <screen>fd = open("foo.new")/write(fd,...)/close(fd)/ rename("foo.new", "foo")
</screen>
     <para>or worse yet
     </para>
     <screen>fd = open("foo", O_TRUNC)/write(fd,...)/close(fd).
</screen>
     <para>
      If auto_da_alloc is enabled, ext4 will detect the replace-via-rename and replace-via-truncate patterns and force that any delayed allocation blocks are allocated such  that  at  the  next journal  commit, in the default data=ordered mode, the data blocks of the new file are forced to disk before the rename() operation is committed.  This provides roughly the same level  of guarantees  as  ext3,  and  avoids  the  "zero-length"  problem that can happen when a system crashes before the delayed allocation blocks are forced to disk.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>noinit_itable</option>
     </glossterm>
     <glossdef>
      <para>
       Do not initialize any uninitialized inode table blocks in the background. This feature may be used  by  installation  CD's so that the install process can complete as quickly as possible; the inode table initialization process would then be deferred until the next  time  the  file system is mounted.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>init_itable</option>=n
     </glossterm>
     <glossdef>
      <para>
       The  lazy  itable  init code will wait n times the number of milliseconds it took to zero out the previous block group's inode table. This minimizes the impact on system performance while the file system's inode table is being initialized.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>discard</option>|<option>nodiscard</option>
     </glossterm>
     <glossdef>
      <para>
       Controls  whether ext4 should issue discard/TRIM commands to the underlying block device when blocks are freed.  This is useful for SSD devices and sparse/thinly-provisioned LUNs, but  it is off by default until sufficient testing has been done.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>block_validity</option>|<option>noblock_validity</option>
     </glossterm>
     <glossdef>
      <para>
       This  option enables/disables the in-kernel facility for tracking file system metadata blocks within internal data structures. This allows multi-block  allocator  and  other  routines  to quickly  locate  extents which might overlap with file system metadata blocks. This option is intended for debugging purposes and since it negatively affects the performance, it is off by default.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>dioread_lock</option>|<option>dioread_nolock</option>
     </glossterm>
     <glossdef>
      <para>
       Controls whether or not ext4 should use the DIO read locking. If the dioread_nolock option is specified ext4 will allocate uninitialized extent before buffer write and convert the  extent to  initialized  after IO completes.  This approach allows ext4 code to avoid using inode mutex, which improves scalability on high speed storages. However this does not work with  data journaling  and  dioread_nolock  option  will  be  ignored  with  kernel  warning.  Note that dioread_nolock code path is only used for extent-based files.  Because  of  the  restrictions this options comprises it is off by default (e.g. dioread_lock).
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>max_dir_size_kb</option>=n
     </glossterm>
     <glossdef>
      <para>
       This  limits the size of the directories so that any attempt to expand them beyond the specified limit in kilobytes will cause an ENOSPC error. This is useful in memory-constrained  environments,  where  a very large directory can cause severe performance problems or even provoke the Out Of Memory killer. (For example, if there is  only  512 MB  memory  available,  a 176 MB directory may seriously cramp the system's style.)
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>i_version</option>
     </glossterm>
     <glossdef>
      <para>
       Enable 64-bit inode version support. This option is off by default.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>nombcache</option>
     </glossterm>
     <glossdef>
      <para>
       This  option  disables  use of mbcache for extended attribute deduplication. On systems where extended attributes are rarely or never shared between files, use of mbcache  for  deduplication adds unnecessary computational overhead.
      </para>
     </glossdef>
    </glossentry>
    <glossentry>
     <glossterm>
      <option>prjquota</option>
     </glossterm>
     <glossdef>
      <para>
       The  prjquota  mount  option  enables project quota support on the file system.  You need the quota utilities to actually enable and manage the quota system.  This mount  option  requires the project file system feature.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </refsect2>
 </refsect1>
 <refsect1><title>DOSYA ÖZNİTELİKLERİ</title>
  <para>
   The ext2, ext3, and ext4 file systems support setting the following file attributes on Linux systems using the chattr(1) utility:
  </para>
  <literallayout><option>a</option> - yalnızca sona ekle
<option>A</option> - no atime updates
<option>d</option> - no dump
<option>D</option> - synchronous directory updates
<option>i</option> - immutable
<option>S</option> - synchronous updates
<option>u</option> - undeletable
</literallayout>
  <para>In addition, the ext3 and ext4 file systems support the following flag:
  </para>
  <literallayout><option>j</option> - data journaling
</literallayout>
  <para>Finally, the ext4 file system also supports the following flag:
  </para>
  <literallayout><option>e</option> - extents format
</literallayout>
  <para>
   For descriptions of these attribute flags, please refer to the chattr(1) man page.
  </para>
 </refsect1>
 <refsect1><title>ÇEKİRDEK DESTEĞİ</title>
  <para>
   This section lists the file system driver (e.g., ext2, ext3, ext4) and upstream kernel version where a  particular file system feature was supported.  Note that in some cases the feature was present in earlier kernel versions, but there were known, serious bugs.  In other cases the feature  may  still be  considered  in an experimental state.  Finally, note that some distributions may have backported features into older kernels; in particular the kernel versions in certain "enterprise distributions" can be extremely misleading.
  </para>
  <informaltable>
   <tgroup cols="3" colsep='0' rowsep='0'>
    <colspec colwidth="*"/>
    <colspec colwidth="*"/>
    <colspec colwidth="*"/>
    <thead align="left">
     <row>
      <entry>Özellik</entry>
      <entry>Dosya Sistemi</entry>
      <entry>Çekirdek Sürümü</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><option>filetype</option></entry>
      <entry>ext2</entry>
      <entry>2.2.0</entry>
     </row>
     <row>
      <entry><option>sparse_super</option></entry>
      <entry>ext2</entry>
      <entry>2.2.0</entry>
     </row>
     <row>
      <entry><option>large_file</option></entry>
      <entry>ext2</entry>
      <entry>2.2.0</entry>
     </row>
     <row>
      <entry><option>has_journal</option></entry>
      <entry>ext3</entry>
      <entry>2.4.15</entry>
     </row>
     <row>
      <entry><option>ext_attr</option></entry>
      <entry>ext2/ext3</entry>
      <entry>2.6.0</entry>
     </row>
     <row>
      <entry><option>dir_index</option></entry>
      <entry>ext3</entry>
      <entry>2.6.0</entry>
     </row>
     <row>
      <entry><option>resize_inode</option></entry>
      <entry>ext3</entry>
      <entry>2.6.10 (online resizing)</entry>
     </row>
     <row>
      <entry><option>64bit</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>dir_nlink</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>extent</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>extra_isize</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>flex_bg</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>huge_file</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>meta_bg</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
     <row>
      <entry><option>uninit_bg</option></entry>
      <entry>ext4</entry>
      <entry>2.6.28</entry>
     </row>
      <row>
      <entry><option>mmp</option></entry>
      <entry>ext4</entry>
      <entry>3.0</entry>
     </row>
     <row>
      <entry><option>bigalloc</option></entry>
      <entry>ext4</entry>
      <entry>3.2</entry>
     </row>
     <row>
      <entry><option>quota</option></entry>
      <entry>ext4</entry>
      <entry>3.6</entry>
     </row>
     <row>
      <entry><option>inline_data</option></entry>
      <entry>ext4</entry>
      <entry>3.8</entry>
     </row>
     <row>
      <entry><option>sparse_super2</option></entry>
      <entry>ext4</entry>
      <entry>3.16</entry>
     </row>
     <row>
      <entry><option>metadata_csum</option></entry>
      <entry>ext4</entry>
      <entry>3.18</entry>
     </row>
     <row>
      <entry><option>encrypt</option></entry>
      <entry>ext4</entry>
      <entry>4.1</entry>
     </row>
     <row>
      <entry><option>metadata_csum_seed</option></entry>
      <entry>ext4</entry>
      <entry>4.4</entry>
     </row>
     <row>
      <entry><option>project</option></entry>
      <entry>ext4</entry>
      <entry>4.5</entry>
     </row>
     <row>
      <entry><option>ea_inode</option></entry>
      <entry>ext4</entry>
      <entry>4.13</entry>
     </row>
     <row>
      <entry><option>large_dir</option></entry>
      <entry>ext4</entry>
      <entry>4.13</entry>
     </row>
     <row>
      <entry><option>casefold</option></entry>
      <entry>ext4</entry>
      <entry>5.2</entry>
     </row>
     <row>
      <entry><option>verity</option></entry>
      <entry>ext4</entry>
      <entry>5.4</entry>
     </row>
     <row>
      <entry><option>stable_inodes</option></entry>
      <entry>ext4</entry>
      <entry>5.5</entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1><title>İLGİLİ BELGELER</title>
  <para>
   <uri xlink:href="man8-mke2fs"/>, <uri xlink:href="man5-mke2fs.conf"/>, <uri xlink:href="man8-e2fsck"/>, <uri xlink:href="man8-dumpe2fs"/>, <uri xlink:href="man8-tune2fs"/> <uri xlink:href="man8-debugfs"/>, <uri xlink:href="man8-mount"/>, <uri xlink:href="man1-chattr"/>.
  </para>
 </refsect1>
 <refsect1>
  <title>ÇEVİREN</title>
  <simpara>Nilgün Belma Bugüner - Eylül 2022</simpara>
  <simpara>
   Lütfen, çeviri ile ilgili bildirimler için &lt;belgeler-genel (at) lists.sourceforge.net&gt; adresini kullanın.
  </simpara>
 </refsect1>
</refentry>
