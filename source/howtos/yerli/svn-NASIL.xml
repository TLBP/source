<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE article SYSTEM "../../docbook/dtd/docbookx.dtd"-->
<!-- ********************************************************************
     $Id: svn-NASIL.xml,v 1.4 2002/09/30 18:21:13 nilgun Exp $
     ******************************************************************** -->
<article xml:id="svn-nasil" lang="tr">
  <info>
    <title>Subversion Kurulum ve Kullanımı</title>
    <author>
      <personname><firstname>Koray</firstname>
       <surname>BOSTANCI</surname></personname>
     </author>
     <pubdate>Temmuz 2005</pubdate>
     <pubdate> </pubdate>
     <revhistory>
       <revision>
          <revnumber>1.0</revnumber>
          <date>Temmuz 2005</date>
          <authorinitials>KB</authorinitials>
          <revremark>Belgenin özgün sürümü <link xlink:href="http://www.koray.org/"/> adresinde bulunabilir.</revremark>
       </revision>
    </revhistory>
    <abstract>
      <para>
Bu belgenin hazırlanma aşamasında "Subversion Manuel"i esas alınmıştır.
<link xlink:href="http://svnbook.red-bean.com/"/> adresinden ingilizce olan orjinal ve daha kapsamlı belgeye erişilebilir. Subversion'un anasayfası <link xlink:href="http://subversion.tigris.org"/>'dur. Bu belgede sadece Subversion Sürüm Denetim Sisteminin kurulumu ve kullanımı, şimdilik başlangıç seviyesinde ele alınmıştır. Zamanla yeni eklentiler ve düzenlemeler yapılacaktır.
      </para>
    </abstract>
    <legalnotice><title>Yasal Açıklamalar</title>
      <para>
Bu belgenin, <emphasis>Subversion Kurulum ve Kullanımı</emphasis> 1.0 sürümünün <emphasis role="bold"> telif hakkı © 2003 <emphasis>Koray BOSTANCI</emphasis></emphasis>'ya aittir.
    &notice.gfdl.orig;</para>
      &notice.disc;
    </legalnotice>
  </info>

  <sect1 xml:id="svn-nasil-onbilgi"><title>Genel Bilgi</title>
    <sect2><title>Subversion nedir?</title>
    <para>
Subversion özgür/açık kaynak kodlu bir sürüm takip sistemidir. Dosyaları merkezi bir
depo<footnote><para>Burada 'depo' (repostry) kelimesi düzenli bir dosya sunucusunu ifade etmektedir.</para></footnote>da tutar ve dizinler/dosyalar üzerinde sürüm denetimi sağlar.
  </para></sect2>
  <sect2><title>Hangi amaçla kullanılır?</title>
  <para>
Subversion'un en temel kullanım amacı sürüm takiptir. Dosya ve dizinler üzerinde
yapılan her değişikliği hatırlaması en büyük avantajıdır. Böylece geliştirmekte olduğunuz
bir yazılım ya da belgenin eski sürümlerine rahatlıkla ulaşabilir, aradaki farkları
bulabilirsiniz. Bu ise yapılan işlerin takip edilebilmesi, geliştirilen yazılımın hangi
aşamadan hangi aşamaya geldiğinin gözlemlenebilmesi ve zaman yönetimi açısından
büyük avantajlar sağlamaktadır. Bu özelliklerinden dolayı bir çeşit 'zaman makinası'
olarak da görülmektedir.
  </para><para>
Daha çok yazılım geliştiriciler tarafından kaynak kod paylaşımı/takibi amacı ile kullanılır.
Ancak dosya türü konusunda herhangi bir kısıtlama yoktur. Her türlü dosyanın
idaresi/takibi amacıyla kullanılabilir. Aynı anda birden çok proje açılmasına olanak verir.
  </para></sect2>
  <sect2><title>CVS ile arasındaki farklar nelerdir?</title>
  <variablelist><varlistentry>
    <term>Dizin Sürümleri</term>
    <listitem><para>
CVS sadece dosyaların geçmişini izleyebilir, SVN ise depo içerisinde yer alan tüm dizin
ağacını izler. Tüm dosya ve dizinlerin sürüm takibi yapılabilir.
  </para></listitem></varlistentry><varlistentry>
    <term>Dizin Geçmişi</term>
    <listitem><para>
CVS sadece dosya sürümleri ile sınırlandığı gibi dosyalar üzerinde yapılan yeniden
adlandırma ya da dosya kopyalama gibi süreçleri de takip edemez. SVN'de ise dosya ve
dizinler üzerinde yapılan her türlü kopyalama, silme, yeniden adlandırma işlemlerine
sürüm numaraları verilir. Yeni oluşturulan tüm dosyalar için sıfırdan bir sürüm geçmişi oluşturulur.
  </para></listitem></varlistentry></variablelist>
  </sect2></sect1>
  <sect1 xml:id="svn-nasil-kurulum"><title>Kurulum</title>
    <sect2><title>Subversion'ı edinmek</title>
    <para>
Subversion'ı edinmenin en kolay yöntemi <link xlink:href="http://subversion.tigris.org"/> adresinden işletim sisteminize uyan paketi indirmek olacaktır. MS işletim sistemleri için grafik arayüzlü kurulum paketleri mevcuttur. *NIX kullanıcıları için ise ikil paketler (rpm, deb, vs.) mevcuttur. Bu belgede Debian GNU/Linux işletim sistemi için kurulum yönergeleri
izlenecektir. Diğer *NIX sistemlerde de benzer komutlarla işlemler gerçekleştirilebilir.
Alternatif olarak kaynak koddan kurulum da tercih edilebilir.
  </para>
<screen><prompt>$ </prompt><userinput>svn co http://svn.collab.net/repos/svn/trunk svn</userinput>
</screen>
  <para>
Bu komut tüm subversion dosya ve belgelerini bulunduğunuz dizin içerisinde
oluşturacağı <filename>svn</filename> dizinine kopyalayacaktır.
  </para></sect2>
  <sect2><title>Debian Türü Kurulum</title>
  <para>
Subversion, Debian paket listesinde yer almaktadır. Dolayısıyla gayet kolay bir kurulumu
vardır.
  </para>
<screen><prompt># </prompt><userinput>apt-get install subversion</userinput>
</screen>
  <para>
komut satırı subversion'ı sisteminize alacaktır. Bundan sonraki işlemler bir depo oluşturmak ve sürüm takibi yapılacak olan projeyi depo içerisine atmak olacaktır.
  </para></sect2></sect1>
  <sect1 xml:id="svn-nasil-kullanim"><title>Kullanım</title>
    <sect2><title>Üst Geliştirici Komutları</title>
    <variablelist><varlistentry>
      <term>Kurulumun doğruluğunun sınanması</term>
      <listitem><para>
Öncelikle, <userinput>svn --version</userinput> komutu ile aşağıdaki 3 dosyanın sistemimiz içerisine gerçekten yüklenip yüklenmediğine bakmalıyız.
      </para>
<screen><prompt>$ </prompt><userinput>$ svn --version</userinput>
svn, version 1.1.4 (r13838)
   compiled May 13 2005, 06:29:47

Copyright (C) 2000-2004 CollabNet.
Subversion is open source software, see http://subversion.tigris.org/
This product includes software developed by CollabNet (http://www.Collab.Net/).

The following repository access (RA) modules are available:

* ra_dav : Module for accessing a repository via WebDAV (DeltaV) protocol.
  - handles 'http' schema
  - handles 'https' schema
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' schema
* ra_svn : Module for accessing a repository using the svn network protocol.
  - handles 'svn' schema
</screen>
      <para>
Burada <filename>libsvn_ra_local</filename> dosyasının eksik olması BerkeleyDB'nin sisteminizde kurulu olmadığını gösterir.
      </para></listitem></varlistentry><varlistentry>
      <term>Yeni bir deponun oluşturulması</term>
      <listitem><para>
Subversion'a yeni bir depo eklemek için kullanılacak olan komut <userinput>svnadmin create</userinput> olmalıdır. Komutun kullanım biçimi:
      </para>
<literallayout><command>svnadmin create </command><emphasis>depo_adresiniz</emphasis>
</literallayout>
      <para>Örnek:</para><para>
<screen><prompt>$ </prompt><userinput>svnadmin create /home/euler/svnrepo</userinput>
</screen>
      </para><para>
Bu komut ile birlikte <filename>/home/euler/</filename> dizini içerisine <filename>svnrepo</filename> isimli bir dizin açmış olduk.
Bu dizin bizim subversion depomuz olacak. Burada dikkat edilmesi gereken nokta
oluşturulacak depo dizini üzerinde okuma/yazma yetkisine sahip olmanız gerekliliğidir.
      </para><para>
Projenin tutarlılığı ve subversion'ın ileriki sürümlerinde sorun yaşamamak açısından
tavsiye edilen dizin yapısıyla devam etmek uygun olacaktır. Projenizin bulunduğu dizin içerisine aşağıdaki dizinleri oluşturun.
      </para><para>
Halihazırda yerel sistemimizde geliştirmekte olduğumuz projemizin <filename>/tmp/projem</filename> dizinin altında olduğunu varsayarsak;
      </para>
<screen><prompt>$ </prompt><userinput>cd /tmp/projem</userinput>
<prompt>$ </prompt><userinput>mkdir trunk branches tags</userinput>
</screen>
      <para>
Daha sonra tüm proje dosyaları <filename>trunk</filename> dizini altına taşınmalı.
      </para></listitem></varlistentry><varlistentry>
      <term>Depoya yeni projenin eklenmesi</term>
      <listitem><para>
Oluşturduğunuz depoya yeni bir proje eklemek için <userinput>svn import</userinput> komutunu kullanmalısınız. Komutun kullanım biçimi:
      </para>
<literallayout><command>svnadmin import </command><emphasis>/proje_adresiniz file:///depo_adresiniz </emphasis><command>-m </command><emphasis>"bilgilendirme iletisi"</emphasis>
</literallayout>
      <para>Örnek:</para>
<screen><prompt>$ </prompt><userinput>svn import /tmp/projem file:///home/euler/svnrepo -m "ilk projem"</userinput>
</screen>
      <para>
Eğer aşağıdakine benzer bir çıktı alırsanız herşey yolunda demektir, proje dosyalarınız
subversion deponuza eklenmiştir.
      </para>
<screen>Adding     /tmp/projem/branches
Adding     /tmp/projem/tags
Adding     /tmp/projem/trunk
Adding     /tmp/projem/trunk/koray.py
Adding     /tmp/projem/trunk/deneme.txt

Committed revision 1.
</screen>
      <para>
Bu işlem <filename>/tmp/projem</filename> dizinini çalışma dizini haline getirmez; çalışma dizinini sonraki bölümde açıklandığı gibi ayrıca oluşturmalısınız.
      </para></listitem></varlistentry></variablelist>
    </sect2>
    <sect2><title>Geliştirici Komutları</title>
      <variablelist><varlistentry>
      <term>Çalışma dizininin oluşturulması</term>
      <listitem><para>
Çalışma dizininin oluşturulması ile kastedilen depoda bulunan bir projeyi üzerinde çalışmak için yerele almaktır. Subversion deposu içerisinden üzerinde çalışılacak olan projenin bir kopyasını almak için <userinput>svn checkout</userinput> komutu kullanılmalıdır.
      </para>
<screen><prompt>$ </prompt><userinput>svn checkout file:///home/euler/svnrepo/trunk projem</userinput>
</screen>
      <para>
Artık subversion içerisindeki projenizin bir kopyası bilgisayarınızda. Çalışmalar bu dosyalar
üzerinden yapılıp işlemler tamamlandıktan sonra tekrar subversion deposuna
gönderilmeli.
      </para><note><para>
Bu komut sonrası o an içerisinde bulunduğunuz dizinde <filename>projem</filename> isimli bir dizin oluşacak ve tüm proje içeriği içerisine gelecektir, çalışmalar bu dosyalar üzerinden
gerçekleştirilecektir.</para></note>
    </listitem></varlistentry><varlistentry>
      <term>Çalışma dizininin güncellenmesi</term>
      <listitem><para>
Üzerinde çalışmak için aldığınız çalışma kopyanızın güncellenmesi için <userinput>svn update</userinput> komutu kullanılır. Siz proje üzerinde çalışırken bir başkası proje dosyalarından bir kaçı üzerinde değişiklik yapmış olabilir, bu komut ile güncel dosyalar sisteminize alınır<footnote><para>Eğer özellikle size ayrılmış bir branşta çalışmıyorsanız, bir dosya üzerinde çalışmaya başlamadan önce çalışma dizininizde bir <userinput>svn update</userinput> yapmayı alışkanlık haline getirmelisiniz. (Branşlardan belgenin daha ileri sürümlerinde bahsedilecektir.)</para></footnote>:
      </para>
<screen><prompt>$ </prompt><userinput>svn update</userinput>
</screen>
      </listitem></varlistentry><varlistentry>
      <term>Dosya ekleme, silme, kopyalama ve taşıma</term>
      <listitem><para>
Depoya yeni bir dosya eklemek için:
      </para>
<screen><prompt>$ </prompt><userinput>svn add dosya</userinput>
</screen>
      <para>
Depodan bir dosyayı silmek için:
      </para>
<screen><prompt>$ </prompt><userinput>svn delete </userinput><emphasis>dosya</emphasis>
</screen>
      <para>
Depo içerisinde bir dosyayı kopyalamak için:
      </para>
<screen><prompt>$ </prompt><userinput>svn copy </userinput><emphasis>dosya1 dosya2</emphasis>
</screen>
      <para>
Depo içerisinde bir dosyayı taşımak ya da yeniden adlandırmak için:
      </para>
<screen><prompt>$ </prompt><userinput>svn move </userinput><emphasis>dosya1 dosya2</emphasis>
</screen>
      </listitem></varlistentry><varlistentry>
      <term>Geliştirilen dosyanın depoya teslim edilmesi</term>
      <listitem><para>
<userinput>svn commit</userinput> ile çalışma dizinine alınıp üzerinde değişiklik yapılan dosyalar <userinput>svn commit</userinput> ile tekrar subvision proje deposuna gönderilir, böylece proje dosyalarının sürüm takibi ve diğer ekip elemanlarının da güncel dosyalar üzerinde çalışması sağlanır. Biçimi:
      </para>
<literallayout><command>svn commit --message </command><emphasis>"bilgilendirme iletisi"</emphasis>
</literallayout>
      <para>örnek:</para>
<screen><prompt>$ </prompt><userinput>svn commit --message "değişken tiplerindeki hatalar düzeltildi"</userinput>
</screen>
      <para>
Bu komut ile beraber üzerinde değişiklik yaptığınız tüm dosyalar subversion proje
deponuza gönderilecektir. <option>--message</option> seçeneği ile dosyada yapılan işlemleri kısaca belirten hatırlatıcı bir bilgilendirme iletisi verilmelidir. Aşağıdaki gibi bir çıktı almanız gerekli.
      </para>
<screen>
Sending        koray2.txt
Transmtting file data.
Committed revision 4.
</screen>
      </listitem></varlistentry></variablelist>
    </sect2>
    <sect2><title>Diğer yararlı komutlar</title>
      <para>
En başta da belirtildiği gibi SVN bir nevi <emphasis>zaman makinası</emphasis>dır. Depoya gönderilen her tür dosya için kayıt tutar ve üzerinde çalıştığınız dosyanın önceki sürümlerine erişmenize de olanak sağlar.
      </para><para>
Proje üzerinde yapılan değikliklerin listesini almak için:
      </para>
<screen><prompt>$ </prompt><userinput>svn log</userinput>
</screen>
      <para>
Bir dosya (örn, <filename>koray.py</filename>) üzerinde yapılan değikliklerin listesini almak için:
      </para>
<screen><prompt>$ </prompt><userinput>svn log koray.py</userinput>
</screen>
      <para>
Dosyaları indirmeden, subversion proje deposu içerisinde hangi dizinde hangi dosyaların yer aldığını görmek için:
      </para>
<screen><prompt>$ </prompt><userinput>svn list http://koray.org/repos/svn</userinput>
</screen>
      <para>
Böylece projenin tümünün değil de sadece kullanılacak olan dosyaların çalışma dizinine alınması (<userinput>svn checkout</userinput>, <userinput>svn update</userinput>) olanaklı olur.
      </para>
<screen><prompt>$ </prompt><userinput>svn cleanup</userinput>
</screen>
      <para>
Subversion <userinput>commit</userinput> işlemini güvenli hale getirebilmek için işlemleri bir günlük dosyasına atar öncelikle (mimari olarak günlüklü dosya sistemindekine benzer şekilde). Daha sonra ise bu günlük dosyasından işlemleri okuyarak gerçekleştirir. Son olarak da günlük dosyasını sistemden siler. Günlük dosyasından okuma sırasında oluşabilecek bir sorun (makinanın çökmesi, elektirik sorunları vs..) <userinput>commit</userinput> işleminin tamamlanamamasına yol açar ve günlük dosyası sistemde kalır. Günlük dosyası tekrar çalıştırılarak işlemin tamamlanması sağlanabilir. <userinput>svn cleanup</userinput> komutu bu işlemi gerçekleştirmeye yarar.
      </para><para>
Eğer süreçlerden biri kilitli kalmış ise (<userinput>svn status</userinput> çıktısında <literal>L</literal> olarak işaretli olan dosyalar kilitli kalmıştır, dolayısıyla sorun vardır.) <userinput>svn cleanup</userinput> komutu çalıştırılır ve sorun çözülür.
    </para></sect2>
  </sect1>
</article>


