<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         gpg-kullanimi.xml, v 0.1, GFDLv1.1, Ağustos 2001
     ******************************************************************** -->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="gpg-kullanimi" xml:lang="tr">
 <info>
  <title>Linux'ta GPG Kullanımı</title>
  <authorgroup>
   <author>
    <personname>
     <firstname>Faruk Eskicioğlu</firstname>
    </personname>
    <affiliation>
     <address>
      <email>farukesk@comu.edu.tr</email>
     </address>
    </affiliation>
   </author>
   <author>
    <personname>
     <firstname>A. Murat Eren</firstname>
    </personname>
    <affiliation>
     <address>
      <email>meren@comu.edu.tr</email>
     </address>
    </affiliation>
   </author>
  </authorgroup>
  <pubdate>Nisan 2004</pubdate>
  <revhistory>
   <revision>
    <revnumber>0.1</revnumber>
    <date>Ağustos 2001</date>
    <authorinitials>FE ve AME</authorinitials>
    <revremark>İlk sürüm.</revremark>
   </revision>
  </revhistory>
 </info>
 <para role="only.html">Ek - <link xlink:href="fdl.html">GNU Free Documentation License</link></para>
 <section xml:id="gpg-kullanimi_giris">
  <info>
   <title>Giriş</title>
  </info>
  <para>
İzleyen bölümlerde PGP sisteminin kullamına yönelik bir kaç komut sunulacak. Bunun için PGP`nin açık kodlu eşdeğeri olan GnuPG (GNU Privacy Guard) kullanılacaktır. Bu yazılımın Linux versiyonu <uri xlink:href="http://www.gnupg.org/download.html">http://www.gnupg.org/download.html</uri> adresinden temin edilebilir.
</para>
  <para>
GnuPG, kullanıcılarının güvenli olarak haberleşebilmeleri için genel anahtar kriptografisini kullanmaktadır. Bir genel anahtarlı sistemde, bir kullanıcı, bir <wordasword>gizli anahtar</wordasword> ve bir <wordasword>genel anahtar</wordasword>'dan oluşan bir anahtar çiftine sahiptir. Kullanıcının gizli anahtarı adından da anlaşılacağı üzere gizli tutulur; asla meydana çıkarılmaz. Genel anahtarı ise, kendisiyle güvenli haberleşmek isteyen herkese verilebilir. GnuPG biraz daha olgun bir şema sunar; kullanıcılar asıl anahtar çiftlerinin dışında isterlerse, ek olarak yardımcı anahtar çiftleri de kullanabilir. Asıl ve yardımcı anahtar çiftleri,anahtar yönetimini kolaylaştırmak için bir bohça olarak birarada sarmalanmıştır, yani basitçe bohça tek bir anahtar çiftidir.
</para>
  <para>
GPG'nin komut satırından kullanımındaki genel sözdizimi şöyledir:
</para>
  <para>
   <synopsis><command>gpg</command> [ <emphasis>seçenekler</emphasis> ] [ <emphasis>komut</emphasis> [ <emphasis>seçenekler</emphasis> ] ...]
</synopsis>
  </para>
 </section>
 <section xml:id="gpg-kullanimi_anh-ynt">
  <info>
   <title>Anahtar Kullanımı</title>
  </info>
  <section>
   <info>
    <title>Yeni Bir Anahtar Çiftinin Üretilmesi</title>
   </info>
   <warning>
    <para>Anahtar üretimi belleğin kilitlenmesini gerektirdiğinden (bellek kilitlemesi, işlem sırasına takas alanının kullanılmasını engeller) üretim işleminin <literal>root</literal> kullanıcısı tarafından yapılması gerekir. Böyle yapmazsanız GNUPG anahtar üretiminin güvenli olmayacağı konusunda sizi uyarır. Anahtar üretiminden sonra anahtarları normal kullanıcının ev dizinine kopyalayıp, dosyaların sahipliğini değiştirdikten sonra normal kullanıcı kimliğinizle kullanabilirsiniz.</para>
   </warning>
   <para>
Bir yeni asıl anahtar çiftini oluşturmak için <option>--gen-key</option> komut satırı seçeneği kullanılır.
</para>
   <para>
    <screen><prompt>#</prompt><userinput>gpg --gen-key</userinput>
gpg (GnuPG) 0.9.4; Copyright (C) 1999 Free Software Foundation, Inc.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. See the file COPYING for details.

Lütfen istediğiniz anahtarı seçiniz:
   (1) DSA ve ElGamal (öntanımlı)
   (2) DSA (yalnız imzalamak için)
   (4) ElGamal (imzalamak ve şifrelemek için)
Seçiminiz?
</screen>
   </para>
   <para>
Bu komut ilk olarak hangi şifreleme algoritmasını kullanmak istediğinizi sorar. 3 seçenek vardır. Öntanımlı değer 1. seçenekle iki anahtar çifti oluşturulur ve kullanılması tavsiye edilen seçenek de budur. Sadece imzaları üretmekte kullanılan bir DSA asıl anahtar çifti ve şifreleme için kullanılan ElGamal (ElCemal) yardımcı anahtar çifti. 2. seçenek, birinciye benzer ancak sadece bir  DSA anahtar çifti oluşturur. 4. seçenek<footnote><para>3. seçenek imzalamak için kullanılamayan bir tür ElGamal anahtar çifti üretir.</para></footnote> hem imzalama hem de şifreleme için kullanılabilen bir ElGamal anahtar çifti üretir. Bütün seçenekler için imzalama ve şifreleme amacıyla ek anahtar çiftlerini daha sonra da üretmek mümkündür.
  </para>
   <para>
Daha sonra anahtar boyutunu sorar, öntanımlı ve tavsiye edilen değer 1024`tür.
</para>
   <para>
    <screen>
Yeni bir ELG-E anahtar çifti üretmek üzeresiniz.
                   en küçük anahtar uzunluğu:  768 bit
                  öntanımlı anahtar uzunluğu: 1024 bit
    önerilebilecek en büyük anahtar uzunluğu: 2048 bit
İstediğiniz anahtar uzunluğu nedir? (1024)
</screen>
   </para>
   <para>
DSA anahtarının uzunluğu 512 ile 1024 bit arasında, ElGamal anahtarınınki ise herhangi bir uzunlukta olabilirse de GnuPG için anahtar uzunluğunun 768 bitten daha küçük olmaması gereklidir. Diğer yandan 1. seçenek için 1024 bitten daha büyük bir uzunluk belirtirseniz ki, ElGamal için sorun değildir, DSA anahtarı 1024 bitten daha uzun olmayacaktır. 1024 bitlik anahtar son kullanıcı için yeterli güvenliği sağlayacak kadar geniş bir uzay sunar.
    </para>
   <para>
Daha uzun anahtar, deneme-yanılmalı saldırılara (brute-force attack) karşı daha güvenlidir, ancak şifrenin kırılmasını engelleyecek yeterliliğe sahip olması gerektiğinden hemen hemen tüm amaçlar için öntanımlı anahtar uzunluğu yeterlidir. Ayrıca, anahtar uzunluğu arttığında şifreleme ve şifre çözme daha yavaş olacak ve büyük anahtar uzunluğundan imzanın uzunluğu da etkilenebilecektir. Bir kere seçildikten sonra anahtar uzunluğu asla değiştirilemez.
    </para>
   <para>
Daha sonra anahtarın geçerlilik süresini sorar.
    </para>
   <para>
    <screen>
Lütfen anahtarın ne kadar süreyle geçerli olacağını belirtin.
         0 = anahtar süresiz geçerli
      &lt;n&gt;  = anahtar n gün geçerli
      &lt;n&gt;w = anahtar n hafta geçerli
      &lt;n&gt;m = anahtar n ay geçerli
      &lt;n&gt;y = anahtar n yıl geçerli
Anahtar ne kadar geçerli olacak? (0)
</screen>
   </para>
   <para>
"0" girilirse anahtarın geçerlilik süresi sonsuzdur (eğer bu değer girilirse emin olup olmadığınız sorulur). Çoğu kullanıcı için zamanaşımına uğramayan bir anahtar yeterlidir. Anahtar oluşturulduktan sonra geçerlilik tarihinin değiştirilmesi mümkün olsa da genel anahtarınızı önceden almış olanların elindeki anahtarlara bu değişiklik uygulanamayacağından geçerlilik süresi baştan dikkatli seçilmelidir.
  </para>
   <para>
Daha sonra anahtar sahibinin gerçek adı, e-posta adresi ve ek açıklama sorulur (ek açıklama kısmına unvan, kurum gibi bilgiler girilebilir).
    </para>
   <para>
    <screen>
Anahtarınızın size ait olduğunu belirten bir Kullanıcı-Kimliği olmalı;
Kullanıcı-Kimliği, Gerçek İsminiz, Bir Önbilgi ve e-Posta Adresiniz
alanlarının bir birleşiminden oluşur. Örneğin:
        "Fatih Sultan Mehmed (Istanbul Fatihi) &lt;padisah@osmanli.gov.tr&gt;"

Adınız ve Soyadınız:
</screen>
   </para>
   <para>
Ardından girilen tüm bilgiler sunulur ve değişiklik yapmak isteyip istemediğinizi sorulur (girilen bilgiler daha sonra "Anahtar Yönetimi" ile değiştirilebilir. Bu konuya ilerde değinilecektir). Son olarak bir parola girilir ve doğrulaması yapılır.
    </para>
   <para>
    <screen>
Gizli anahtarınızı korumak için bir Anahtar Parolanız olmalı.

Anahtar parolasını girin:
</screen>
   </para>
   <para>
Bir anahtar parolasının uzunluğu için bir sınır yoktur ve çok dikkatli seçilmelidir. Bu parola özel anahtarınızla bir şifreleme ya da deşifreleme yapacağınız zaman sizden istenecektir, özel anahtarınızı sizden başka birisinin kullanması ihtimalini ortadan kaldırmak için bir önlemdir. İdeal olarak bir anahtar parolasında sözlüklerde bulunabilecek sözcükler bulunmamalı ve büyüklü küçüklü alfabetik karakterlerle rakamların ve sembollerin bir karışımından oluşmalıdır. İyi bir anahtar parolası GnuPG'nin güvenli kullanımı için kritik önemdedir.
  </para>
   <para>
Parola girildikten sonra anahtar çiftlerinin üretilmesi süreci başlar. Bu sürede farenin hareket ettirilmesi, ölü klavye tuşlarına basılması rastgele sayı üretiminde uygulamaya kaynak sağlar, sistemin etkin çalışmasında faydalıdır.
  </para>
  </section>
  <section>
   <info>
    <title>Yürürlükten Kaldırma Sertifikasının Üretimi</title>
   </info>
   <para>
Bir anahtar çiftini ürettikten hemen sonra <option>--gen-revoke</option> komut satırı seçeneğini kullanarak asıl genel anahtarınız için bir yürürlükten kaldırma sertifikası üretmelisiniz. Anahtar parolanızı unutursanız veya gizli anahtarınız bir şekilde bozulur ya da kaybolursa genel anahtarınızın artık kullanılmaması gerektiğini bildirmek için bu yürürlükten kaldırma sertifikasını yayınlayabilirsiniz. Yürürlükten kaldırılmış bir genel anahtar hala geçmişte kullandığınız imzaları doğrulamakta kullanılabilirse de gelecekte size gönderilecek belgelerin şifrelenmesinde kullanılamaz. Ayrıca, hala gizli anahtarınıza erişiminiz varsa, size geçmişte gönderilmiş şifreli belgelerin şifrelerini çözme gücünüzü etkilemez.
    </para>
   <para>
    <screen><prompt>#</prompt><userinput>gpg --output revoke.asc --gen-revoke anahtarım</userinput>
[...]
</screen>
   </para>
   <para><varname>anahtarım</varname> argümanı anahtar çiftinizin kullanıcı kimliğinin bir parçası olabileceği gibi asıl anahtar çiftinizin anahtar kimliği de olabilir. Üretilen sertifika <filename>revoke.asc</filename> dosyasında olacaktır. <option>--output</option> seçeneği verilmezse sertifika standart çıktıya yazılır. Sertifika kısa olacağından isterseniz, bir yazıcı çıktısı olarak alıp bir kasada da muhafaza edebilirsiniz. Sertifika başkalarının kolayca erişebileceği yerlerde saklanmamalıdır. Aksi takdirde, yürürlükten kaldırma sertifikanız bilginiz dışında yayınlandığında geçerli olan genel anahtarınızın geçersiz hale gelebilir.
    </para>
  </section>
  <section>
   <info>
    <title>Anahtar Değişimi</title>
   </info>
   <para>
Başkaları ile haberleşmek için genel anahtarlarınızı değiş tokuş etmeniz gerekir. Genel anahtarlığınızdaki anahtarların listesini almak için <option>--list-keys</option> seçeneğini kullanabilirsiniz.
    </para>
   <para>
    <screen><prompt>$</prompt><userinput>gpg --list-keys</userinput>
/home/nilgun/.gnupg/pubring.gpg
-------------------------------
pub  1024D/86ED4767 2003-06-02 Nilgün Belma Bugüner (http://www.belgeler.org) ¬
 &lt;nilgun@superonline.com&gt;
sub  2048g/44C1CE63 2003-06-02
</screen>
   </para>
   <section>
    <info>
     <title>Bir genel anahtarın ihracı</title>
    </info>
    <para>
Bir genel anahtarı ilgili kişiye gönderebilmek için onu önce ihraç etmelisiniz. Bu işlem için <option>--export</option> komut satırı seçeneği, ihraç edilecek anahtarı belirleyen bir argümanla birlikte kullanılır. Bu argüman, <option>--gen-revoke</option> seçeneğindeki gibi, ihraç edilecek anahtar çiftinizin kullanıcı kimliğinin bir parçası olabileceği gibi anahtar çiftinizin anahtar kimliği de olabilir.
      </para>
    <para>
     <screen>
      <prompt>$</prompt>
      <userinput>gpg --output nilgun.gpg --export nilgun@superonline.com</userinput>
     </screen>
    </para>
    <para>
Bu da genel anahtarınızı insanlara dağıtabilmeniz için genel anahtarınızı bir dosyaya yazma noktasında kullanacağınız bir şeydir. Bu komut seçeneksiz olarak çalıştırıldığında öntanımlı olarak çıktısını standart çıktıya verir. Bu çıktı daha sonra herhangi bir şekilde (keyserver kullanarak, kişisel web sitesine konularak vs.) insanlarla paylaşılır ve insanlar paylaştığınız açık anahtarınızı kullanarak, sizden gelen imzalı bilgileri doğrulayıp okuyabilirler, verileri yalnızca sizin deşifre edebileceğiniz şekilde şifreleyip size gönderebilirler.
  </para>
    <para>
Anahtar ikili biçimde ihraç edilir ancak anahtar eposta ile gönderilirken ya da web sayfasında yayınlanacaksa bu elverişli olmaz. Bunun için  <option>--armor</option> komut satırı seçeneği vardır. Bu seçenekle  <userinput>uuencode</userinput>'lu belgelere benzeyen ASCII zırhlı  (ASCII-armored) çıktı üretilebilir. Genelde GnuPG'den çıktılanacak herşey;  örneğin, anahtarlar, şifreli belgeler ve imzalar; komut satırına  <option>--armor</option> seçeneği eklenerek ASCII zırhlı olarak üretilebilir.
      </para>
    <para>
     <screen><prompt>$</prompt><userinput>gpg --armor --export nilgun@superonline.com</userinput>
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.2.1 (GNU/Linux)

mQGiBD7bos8RBADp2Zqs/P5J187sSMCLaDfMAdcD/Z078OCvAPdPC1oHp5u5xYPq
9NElcYLXkQyfEDc1wMUNAIAbd9MwOKsLAEsxpsS+JyzUOeK7QOrV9nqj3R7IYV/3
8Ow3ENzljR0SouMKjeGOCjSLdwP0qCG6BpU+1ZjOr1e5O2Sakws0czECewCgtSv8
cKXg4FMSalVVeHrQo01YfCED/jUFDa4t5eQyPpy2DHB210XI8cdmoJq+xGCb0I5Q
pR/r5R701AYwLxmY6q0I0vFovpvZBTlL+3PEoHHQwmKi6wzB/170ZDlfSvomOkQl
ylpZpBRraC2JocA5LxjoPFx8VVo2ZX26uBGPj1dZRXcR+IsvuNvX8PcZ+IZIq6Zs
yUJxA/9f9UIix0n6wKUkQVlM0orpZemZGvlosACPjUMsG6fNHmgvNxr2vs6cKMhd
DO5//W6RzqfpuB9j7GlmYfogPpHigcKxfJWqe4f7jDLrlVeRCXcxtXBpmuyMcupX
6qu9BxubQlvreSvN7b+ehivBTPiL9XvVtY6BScrYJePn4nXc0bRJTmlsZ8O8biBC
ZWxtYSBCdWfDvG5lciAoaHR0cDovL3d3dy5iZWxnZWxlci5vcmcpIDxuaWxndW5A
c3VwZXJvbmxpbmUuY29tPohZBBMRAgAZBQI+26LPBAsHAwIDFQIDAxYCAQIeAQIX
gAAKCRB2bxy7hu1HZ5qyAKCl1Lvb40QfSOpDrUjKjuf89+oqegCgkSPhdfyDBmo7
ewcZ0MTy+uJbEKW5Ag0EPtui7hAIAKDjlz7MgzJpEid0EALJ8vwFRZrXXlxM1b+1
mnuLI3tZg5yzNqY1eQTQdixQbK510DePbZFWDhsr4E6gg+991zJ0LyExaNCkpJps
irLYokrls2p3QADiGq9g4GkYEcgjOX4/KMGgHOhnEup70LuXhvjFq5pwn2E4bNhX
tcVi+bTo1lDyMZlMXUfWylkS4+ckCikvNgWeyiHTqPVVqLCWSfrXh57tlWuYjwV9
/Ts83YKOesqXW7XCPwKiZVGl4UFKLsQadF2fZ6pT4vTL0ztkcbt20p7Y2pzBDAgj
yz5ruYuDqnxzwquR2uqBs6WTUiogYG4ZFvCdYtQSTWOqRJwO8RcAAwUH/jTqHUol
9alCgt+WjoEzY6RW8fyx7gZlxcFVdQgcnTK+QmwjX6RTqU+lpfzfxYrkv0vcfuSW
zK6LzM1/f/YqWO0ofuJJuOXyYJR1BUplB2xRLRDuWhttlQksmgoDiJczK20yTlbK
HBJ0G5BZsCq/3pz2KraII2wByNMmsB6DIs+4DMJH0foBBnx+/8GUobzMscUltIaa
itWoogQKytt3bgsUbwGe0WXlzQwbqCzF86BFRznrEaP68nRqI4x6ZCNOW1zcZxsT
07DqivmVXCU0aTLsqxPYrpiRkQTDrqrKl8MwUgyV9R8MOSlSCm0sLtsjyviYkxup
OIGXvr+YumNPgCSIRgQYEQIABgUCPtui7gAKCRB2bxy7hu1HZ54fAJ4k4OkBsBgk
s4XcwiWZzlpebjSRlACeIPple7xUNKbaDse2ii1NsTIOoq8=
=4wmv
-----END PGP PUBLIC KEY BLOCK-----
</screen>
    </para>
    <para>
     <screen>
      <prompt>$</prompt>
      <userinput>gpg --output nilgun.sec.asc --export-secret-key 86ED4767</userinput>
     </screen>
    </para>
    <para>
Bu komut özel anahtarı ikili olarak <filename>nilgun.sec.asc</filename> isimli dosyaya yazar. Özel anahtarın gizliliğinin sağlanması gereklidir.
  </para>
    <para>
     <screen>
      <prompt>$</prompt>
      <userinput>gpg --keyserver www.keyserver.net --send-keys 86ED4767</userinput>
     </screen>
    </para>
    <para>
Ayrıca GPG, anahtarlarınızı paylaşmanız için yukarıdaki gibi bir yol sunar. Internet'e bağlıyken bu komut <varname>nilgun</varname> kullanıcısının genel anahtarını, <literal>www.keyserver.net</literal> adresindeki anahtar sunucusuna gönderir. (Bütün anahtar sunucuları anahtar havuzunu ortak kullanır, herhangi birine gönderilen bir anahtarı bir diğerinden sorgulayabilirsiniz.)
  </para>
   </section>
   <section>
    <info>
     <title>Bir genel anahtarın ithali</title>
    </info>
    <para>
Bir genel anahtarı genel anahtarlığınıza <option>--import</option> komut satırı seçeneğini kullanarak ekleyebilirsiniz.
      </para>
    <para>
     <screen><prompt>$</prompt><userinput>gpg --import <replaceable>isim</replaceable>.gpg</userinput>
gpg: anahtar 9E98BC16: genel anahtar alındı.
gpg: İşlenmiş toplam miktar: 1
gpg:                 alınan: 1
</screen>
    </para>
    <para>
Genel anahtarını insanlarla paylaşmak istemiş (genel anahtarını ihracetmiş ve bir anahtar sunucusuna veya sayfasına koymuş ya da bir şekilde size göndermiş) bir kişinin genel anahtarını genel anahtarlığınıza dahil etmenizi sağlar. Örneğin <literal>certserver.pgp.com</literal> sunucusundan, genel anahtarına sahip olmak istediğiniz kişinin adını ya da e-posta adresini aratabilir, bulunan anahtarı bir dosyaya kopyalayabilir ve bu içeriği bu kişinin genel anahtarı olan dosyayı, yukarıdaki komutla genel anahtarlığınıza dahil edebilirsiniz. Bu işlem sonucunda siz, söz konusu kişiden gelen imzalanmış verileri doğrulayıp okuyabilir ve yalnızca onun deşifre edebileceği şekilde veri şifreleyip kendisine gönderebilirsiniz.
  </para>
    <para>
Bir anahtar ithal edilir edilmez doğrulanmalıdır. GnuPG ithal ettiğiniz her anahtarı kişisel olarak doğrulamanızı gerektirmeyen güçlü ve esnek bir güvence modeli kullanır. Ancak bazı anahtarlar yine de kişisel olarak doğrulanmayı gerektirebilir. Bir anahtar onun parmakizinden doğrulandıktan sonra anahtar imzalanarak geçerli bir anahtar haline gelebilir. Bir anahtarın parmakizi <option>--fingerprint</option> komut satırı seçeneği ile çabucak görüntülenebilir. Ancak anahtarı geçerli hale getirmek için onu düzenlemelisiniz.
   </para>
    <para>
     <screen>
      <prompt>$</prompt>
      <userinput>gpg --fingerprint</userinput>
     </screen>
    </para>
    <para>
Bir anahtarın parmakizi anahtarın sahibi ile doğrulanır. Bunu anahtar sahibi ile ya telefonla görüşerek veya sizin için güvenli olan herhangi bir yöntemle haberleşerek yapabilirsiniz. Eğer sizdeki parmakizi sahibinden aldığınız parmakizi ile aynıysa sizdeki anahtarın doğru kopya olduğundan emin olabilirsiniz.
  </para>
    <para>
Parmakizi denetimi bittikten sonra anahtarı imzalayarak onu geçerli hale getirebilirsiniz. Anahtar doğrulaması genel anahtar kriptografisinin zayıf karnı olduğundan, bir anahtarı imzalamadan önce anahtarın parmak izini <emphasis>daima</emphasis> anahtarın sahibi ile haberleşerek doğrulatmalı ve bu konuda çok çok dikkatli olmalısınız.
   </para>
    <para>
     <screen>
      <prompt>$</prompt>
      <userinput>gpg --sign-key farukesk@comu.edu.tr</userinput>
     </screen>
    </para>
   </section>
  </section>
  <section>
   <info>
    <title>Bir anahtarın silinmesi</title>
   </info>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --delete-key <replaceable>anh-kiml</replaceable></userinput>
    </screen>
   </para>
   <para>
Sisteme dahil edilmiş <replaceable>anh-kiml</replaceable> anahtar akimlikli kullanıcının genel anahtarını siler. Bu kullanıcının özel anahtarı da sistemde mevcutsa ilk önce bunun silinmesi gerekir.
  </para>
  </section>
 </section>
 <section xml:id="gpg-kullanimi_sifreleme">
  <info>
   <title>Belgelerin Şifrelenmesi ve Şifresinin Çözülmesi</title>
  </info>
  <para>
Genel ve gizli anahtarların her biri belgelerin şifrelenmesi ve şifrelerinin  çözülmesinde kendilerine özel rollere sahiptir.  Bir genel anahtar açık güvence olmak niyetinde olabilir. İlgili kişi bir belgeyi bir genel anahtar kullanarak şifrelediğinde belge kasaya konmuş, kasa kapatılmış ve anahtar defalarca döndürülerek kilitlenmiştir. Karşılığı olan gizli anahtarın rolü ise kasayı yeniden açmak ve belgeyi almaktır. Başka bir deyişle, bir genel anahtarla şifrelenmiş bir belge, sadece bu genel anahtarın karşılığı olan gizli anahtarı bulunduran kişi tarafından okunabilir.
    </para>
  <para>
Belgelerin şifrelenmesi ve şifrelerinin çözülmesi süreci bu düşünce modeli ile basitleşmiştir. Murat'a göndereceğiniz bir mesajı şifrelemek isterseniz, onu Murat'ın genel anahtarını kullanarak şifrelersiniz ve Murat'da onu kendi özel anahtarını kullanarak çözüp okur. Eğer, Murat size bir şifreli mesaj göndermek isterse, mesajı sizin genel anahtarınızı kullanarak şifreler ve siz bu mesajı kendi özel anahtarınızla çözüp okursunuz.
    </para>
  <para>
Bu iki işlem için önemli bir ortak nokta vardır. Eğer sistemde birden fazla özel anahtar yüklüyse işlemin hangi kullanıcı olarak yapıldığını belirtmek gerekir. Belirtilmezse, işlemi yapan kullanıcı öntanımlı kullanıcıdır. Belirtme işlemi bir seçenektir <command>-u kullanici_adi</command> şeklinde yapılır.
  </para>
  <section>
   <info>
    <title>Şifreleme</title>
   </info>
   <para>
Bir belgeyi şifrelemek için <option>--encrypt</option> komut satırı seçeneği kullanılır. Elinizde şifreli belge göndermek istediğiniz alıcıların genel anahtarları olmalıdır. Yazılım, şifrelenecek belgenin girdi olarak verilmesini bekler; eğer verilmezse standart girdiyi okur. Şifrelenmiş belge ya standart çıktıya konur ya da <option>--output</option> seçeneği verilmişse onun argümanı olarak belirtilen dosyaya konur. Belge şifrelemeye ek olarak güvenliği arttırmak için sıkıştırılır.
    </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --output <replaceable>belge.gpg</replaceable> --encrypt --recipient <replaceable>anh-kiml belge</replaceable></userinput>
    </screen>
   </para>
   <para><option>--recipient</option> komut satırı seçeneği her alıcı için bir kere kullanılır ve argüman olarak belgeyi şifrelemekte kullanılacak genel anahtarı alır. Şifreli belge sadece alıcıların genel anahtarlarının karşılığı olan özel anahtarlarla çözülebilir. Özellikle, kendiniz şifrelediğiniz bir belgenin şifresini çözebilmeyi istiyorsanız, kendi genel anahtarınızı da alıcılar listesine eklemelisiniz (ya da belgeyi imzalamalısınız, imzalama genel anahtarınızı devreye sokar).
  </para>
   <para>
Bu komut ile <replaceable>anh-kiml</replaceable> anahtar kimlikli alıcının genel anahtarı bu komutun girildiği sistemde mevcutken, <replaceable>anh-kiml</replaceable> anahtar kimlikli alıcının özel anahtarını kullanarak açabileceği şifrelenmiş ve sıkıştırılmış veriyi <command>gpg</command> uzantılı bir dosyaya yazar. Ayrıca, herhangi birisinin şifrelediğiniz bu verinin kendisi tarafından gönderildiğini iddia etme riskini ortadan kaldırmak için bu veriyi kendi özel anahtarınızla imzalamalısınız. Bu işin tamamını aşağıdaki komut ile yapabilirsiniz, bu komut çıktısını <filename>asc</filename> uzantılı bir dosyaya yazar:
  </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg -u <replaceable>gönderen</replaceable> -r <replaceable>alıcı</replaceable> --armor --sign --encrypt <replaceable>belge</replaceable></userinput>
    </screen>
   </para>
   <note>
    <para><option>-u</option> seçeneğini kullanmazsanız, veri sistemdeki öntanımlı özel anahtar ile imzalanır. Eğer sistemde birden fazla özel anahtar varsa, <replaceable>gönderen</replaceable> yerine bu anahtarlardan kullanmak istediğinizin anahtar kimliğini yazarak, imzalama işlemini gerçekleştirebilirsiniz. Hatırlayacağınız gibi, anahtar kimliklerini görmek için <emphasis>gpg --list-keys</emphasis> çıktısından faydalanabilirsiniz.</para>
   </note>
   <example>
    <title/>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --output cikti_dosyasi --export farukesk</userinput>
    </screen>
    <para>
Bu komut <varname>farukesk</varname> isimli kullanıcının ortak anahtarını ikili biçimde <filename>cikti_dosyasi</filename> isimli dosyaya yazar.
  </para>
   </example>
   <example>
    <title/>
    <screen><prompt>$</prompt><userinput>echo "Merhaba, bu mesajı zyariz gonderdi :)" | gpg -u farukesk -r meren -ea | </userinput>¬
<userinput>mail meren@comu.edu.tr</userinput>
</screen>
    <para>
Bu komut "<emphasis>Merhaba, bu mesajı zyariz gonderdi</emphasis><literal>:)</literal>" mesajını <varname>farukesk</varname> kullanıcısı olarak ascii kipte <varname>meren</varname> kullanıcısı için şifreler, çıktısını da <email>meren@comu.edu.tr</email> adresine postalar.
  </para>
   </example>
  </section>
  <section>
   <info>
    <title>Şifre Çözme</title>
   </info>
   <para>
Bir mesajın şifresini çözmek için <option>--decrypt</option> komut satırı seçeneği kullanılır. Bunun için mesajın şifrelendiği genel anahtarın karşılığı olan gizli anahtara ihtiyacınız vardır. Şifreleme işlemine benzer olarak şifresi çözülecek belge girdi olarak alınır ve çözülmüş belge çıktılanır.
    </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --output belge --decrypt belge.gpg</userinput>
    </screen>
   </para>
   <para>
Genel anahtarınıza sahip birisinin, onu kullanarak yalnızca sizin açmanız için şifrelediği veriyi deşifre etmenizi sağlar. Seçeneksiz kullanımda çıktısını standart çıktıya yazar. <userinput>--output belge</userinput> seçeneği eklenirse çıktı <filename>belge</filename> dosyasına yazılır. Bu komut <filename>belge.gpg</filename> isimli dosya içerisindeki şifreli veriyi özel anahtarınızın parolasını istedikten sonra deşifreler ve çıktıyı <filename>belge</filename> dosyasına yazar.
  </para>
  </section>
  <section>
   <info>
    <title>Simetrik Şifre ile Şifreleme</title>
   </info>
   <para>
Belgeler genel anahtar kriptografisi kullanılmadan da şifrelenebilir. Bunun yerine belgeyi şifrelemekte simetrik şifre de kullanabilirsiniz. Simetrik şifreyi sürmede kullanılan anahtar, belge şifrelenirken belirtilen paroladan üretilir ve iyi bir güvenlik için bu parola gizli anahtarınızı korumakta kullandığınız anahtar parolası olmamalıdır. Simetrik şifreleme başkaları ile haberleşirken parolaya ihtiyaç duyulmadığında belge güvenliğini sağlamak için elverişlidir. Bir belgeyi simetrik şifre ile şifrelemek için <option>--symmetric</option> komut satırı seçeneği kullanılır.
    </para>
   <para>
    <screen><prompt>$</prompt><userinput>gpg --output belge.gpg --symmetric belge</userinput>
Anahtar parolasını girin:
</screen>
   </para>
  </section>
 </section>
 <section xml:id="gpg-kullanimi_imzalama">
  <info>
   <title>İmzalama ve Doğrulama</title>
  </info>
  <para>
Bir sayısal imza bir belgeyi onaylamak ve tarih damgası vurmak için kullanılır. Bir belge herhangi bir şekilde imzalamanın ardından değiştirilirse, imzanın doğrulanması başarısız olur. Bir sayısal imza, bir elyazısı imzanın kullanım amacına ek olarak değişikliğe dirençlilik gibi bir yararı da beraberinde sunar. Örneğin, GnuPG kaynak paketi imzalı dağıtılır; paketlendikten sonra kaynak kodu değişikliğe uğramışsa, imza doğrulaması başarısız olacaktır.
    </para>
  <para>
İmzaların oluşturulması ve doğrulanmasında genel/gizli anahtar çifti ile şifreleme ve şifre çözmeden farklı bir işlem uygulanır. Bir imza, imzalayanın gizli anahtarı kullanılarak oluşturulur. İmzanın doğrulaması ise karşılığı olan genel anahtar kullanılarak yapılır. Örneğin,  Murat yazdığı son makaleyi gönderirken kendi gizli anahtarı ile ürettiği imza ile imzalamalıdır. Dergi editörü makalenin üzerindeki imzanın Murat'a ait olup olmadığını ve Murat'ın makalesinde değişiklik olup olmadığını Murat'ın genel anahtarını kullanarak anlayabilir. Sayısal imzaların kullanımının bir önemi de uzlaşma için gizli anahtarın açıklanması gerektiğinden yapılan sayısal imzanın yalanlanmasındaki zorluktur.
    </para>
  <section>
   <info>
    <title>İmzalama</title>
   </info>
   <para><option>--sign</option> komut satırı seçeneği sayısal imzaları üretmekte kullanılır. İmzalanacak belge girdi olarak alınır ve imzalı belge çıktılanır.
    </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --output makale.sig --sign makale</userinput>
    </screen>
   </para>
   <para>
Bu komut veriyi imzalar ve sıkıştırır. Çıktı <filename>sig</filename> uzantılı okunamaz bir dosyadır. Komuta eklenecek <userinput>--clearsign</userinput> parametresi, çıktının okunabilir bir <filename>asc</filename> uzantılı dosyaya saklanmasını sağlar.
   </para>
   <example>
    <title/>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg -u <replaceable>gönderen</replaceable> -r <replaceable>alıcı</replaceable> --armor --sign --encrypt <replaceable>veri</replaceable></userinput>
    </screen>
    <para>
Bu komut <replaceable>veri</replaceable> dosyasındaki veriyi şifreler, imzalar ve çıktısını <replaceable>veri.asc</replaceable> dosyasına ASCII biçimde yazar.
    </para>
   </example>
  </section>
  <section>
   <info>
    <title>Doğrulama</title>
   </info>
   <para>
Bir imzalı belge aldığınızda hem imzayı denetleyebilir hem de imzayı denetleyip özgün belgeyi açabilirsiniz. İmza denetimi için <option>--verify</option> komut satırı seçeneği kullanılır. İmzayı doğrulayıp belgeyi açmak için ise <option>--decrypt</option> seeneği kullanılır. Doğrulanacak ve açılacak imzalı belge girdi olarak alınır ve açılan belge çıktılanır.
    </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --output belge --decrypt belge.sig</userinput>
    </screen>
   </para>
  </section>
  <section>
   <info>
    <title>Açık imzalı belgeler</title>
   </info>
   <para>
Sayısal imzaların genellikle kullanıldığı yerlerden bazıları da eposta iletileri ve haber gruplarına gönderilen postalardır. Bu tür metinler imzalanırken sıkıştırılmaları istenmez. <option>--clearsign</option> komut satırı seçeneği kullanılarak metin ASCII zırhlı bir imza ile sarmalanır, ancak bu takdirde metnin değiştirilememesi sağlanır.
      </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --clearsign belge</userinput>
    </screen>
   </para>
  </section>
  <section>
   <info>
    <title>Ayrık imzalar</title>
   </info>
   <para>
Bir imzalı belgenin kullanışlılığı sınırlıdır.  İmzalı belgeden orjinal belgeyi elde etmek isteyen kullanıcılar, belge açık imzalı olsa bile, imzalı belgeyi düzenlemek zorundadır. Bu nedenle, bir belgeyi imzalamak için üçüncü bir yol bulunmuştur. Bu imzalama türünde ayrı bir dosya olarak bir ayrık imza oluşturulur. Bir ayrık imza <option>--detach-sig</option>  komut satırı seçeneği kullanılarak oluşturulur.
      </para>
   <para>
    <screen>
     <prompt>$</prompt>
     <userinput>gpg --output belge.sig --detach-sig belge</userinput>
    </screen>
   </para>
   <para>
İmzayı doğrulamak için belge ve ayrık imza birlikte kullanılır. İmzayı denetlemekte <option>--verify</option> seçeneği kullanılır.
      </para>
   <para>
    <screen>
     <prompt>4</prompt>
     <userinput>gpg --verify belge.sig belge</userinput>
    </screen>
   </para>
  </section>
 </section>
 <section xml:id="gpg-kullanimi_kavramlar">
  <info>
   <title>Kavramlar</title>
  </info>
  <para/>
  <para>
GnuPG <wordasword>simetrik şifreler</wordasword>, <wordasword>genel anahtarlı şifreler</wordasword> ve <wordasword>tek yönlü haşlama :-)</wordasword> gibi çeşitli kriptografik kavramlar kullanır. Bu kavramları çok iyi bilmeden de GnuPG kullanabilirsiniz ancak, onları biraz bile anlamak GnuPG'yi akıllıca kullanmak için gereklidir.
  </para>
  <para>
Bu kısımda GnuPG'de kullanılmış olan kriptografik kavramlar ele alınmıştır. Başka kitaplarda bu konular daha ayrıntılıdır. Bu öğretiyi izleyebileceğiniz iyi bir kitap <link xlink:href="http://www.counterpane.com/schneier.html">Bruce Schneier</link>'in <link xlink:href="http://www.counterpane.com/applied.html">"Applied Cryptography"</link> kitabıdır.
  </para>
  <section>
   <info>
    <title>Simetrik Şifreler</title>
   </info>
   <para>
Simetrik şifre, hem şifreleme hem de şifre çözme için aynı anahtarın kullanıldığı bir şifredir. Haberleşirken bir simetrik şifreyi kullanan iki taraf, anahtarın diğer tarafta mevcut olduğunu varsayar. Bu varsayımdan hareketle gönderici bir mesajı anahtarı kullanarak şifreler ve onu alıcıya gönderir. Alıcı da bu gönderinin şifresini anahtarı kullanarak çözer. Bir örnek olarak, German Enigma bir simetrik şifredir ve günlük kullanılan anahtarlar kod kitabında dağıtılmıştır. Her gün gönderen ya da alan radyo operatörü günün anahtarını bulmak için kod kitabının kendindeki kopyasından yararlanır. Gün içindeki radyo trafiği günün anahtarı kullanılarak şifrelenir ve şifresi çözülür. Simetrik şifrenin günümüzdeki örnekleri arasında 3DES, Blowfish ve IDEA sayılabilir.
    </para>
   <para>
İyi bir şifre güvenliğin tamamını anahtara yükler, algoritmaya değil. Başka bir deyişle, hangi şifrenin kullanıldığını bilse bile bu şifrenin saldırgana hiçbir yardımı olmamalıdır. Sadece algoritmanın ne olduğu bilgisine gereksinimi olan anahtarı ele geçirir. GnuPG içinde kullanılan şifreler bu özelliğe sahiptir.
    </para>
   <para>
Güvenliğin tamamının anahtarda olmasından dolayı, anahtarın tahmin edilmesinin güçlüğü önemli bir faktördür. Başka bir deyişle, olası anahtarların kümesinin, vs. <emphasis>anahtar uzayı</emphasis>nın çok geniş olması gerekir. Los Alamos'dayken, Richard Feynman kasa açma yeteneği ile ümlüydü. İşin esrarını arttırmak için yanında içinde eski bir steteskop da bulunan bir alet çantası taşırdı.  Gerçekte, doğru birleşimlerin sayısını zekice yöntemlerle düşürerek doğru birleşimi bulmak için bunları denemek yolunu kullanırdı. Başka bir deyişle, anahtar uzayını küçültürdü.
    </para>
   <para>
İngiltere II. Dünya Savaşı sırasında anahtarları keşfetmek için makina kullandı. Alman radyosu German Enigma çok geniş bir anahtar uzayı kullanıyordu, ama İngiltere de Bombes adını verdikleri bir makina ile deneyerek günün anahtarını bazan buluyordu.<footnote><para>II. Dünya Savaşı sırasında İngiltere kıyılarında karaya oturan bir Alman denizaltısında daktilo makinasına benzer bir makina buldular. Bu makinanın günün anahtarını üreten makina olduğunu keşfettiler ve bu makinaya Bombes adını verdiler.</para></footnote> Bazan günün anahtarı birkaç saat içinde bulunabilirken bazan bu hiç mümkün olmuyordu. Bombes genel amaçlı bir hesap makinası değildi, ama günümüz hesap makinalarının öncülerinden biriydi.
    </para>
   <para>
Bugün, bilgisayarlar anahtarları çok çabuk tahmin edebilmesi anahtar uzunluğunun günümüz kriptosistemleri için önemini arttırmaktadır. DES şifresi 56 bitlik bir anahtar kullanır. Bu da <literal>2</literal><superscript>56</superscript> yani 72,057,594,037,927,936 tane olası anahtar demektir. Bu büyük bir miktarmış gibi görünse de günümüzdeki sıradan bir bilgisayar günlerle ifade edilen bir sürede tüm anahtar uzayını tarayabilmektedir. Bu işe hasredilmiş bir bilgisayarla ise birkaç saat sürmektedir. Diğer yandan daha yakın zamanlarda 3DES, Blowfish, IDEA gibi 128 bitlik anahtarlar kullanan şifreler tasarlanmıştır. Bunlarla çok daha fazla sayıda, <literal>2</literal><superscript>128</superscript> tane anahtar üretilebilir. Bu öyle büyük bir sayıdır ki, dünyadaki tüm bilgisayarlar birarada çalışıp tüm anahtar uzayını taramaları evrenin yaratılmasından zamanımıza kadar geçen süreden fazlasına ihtiyaç duyacaktır.
    </para>
  </section>
  <section>
   <info>
    <title>Genel Anahtarlı Şifreler</title>
   </info>
   <para>
Simetrik şifrelerle igili asıl sorun onların güvenlikleri ile değil, anahtar değişimi ile ilgilidir. Güvenli haberleşme için gönderici ve alıcı anahtarlarını değiş-tokuş ederler de, bu değiş-tokuşun yapıldığı haberleşme kanalı ne kadar güvenlidir? İşte bu noktada saldırganın işi kolaydır, anahtarın yolunu kesmeye çalışacak sonra da anahtar uzayındaki tüm anahtarları deneyecektir. Bir diğer sorun da gerekli anahtarların sayısı ile ilgilidir. Haberleşmek isteyen <literal>n</literal> kişi varsa haberleşme gizliliğine ihtiyaç duyan kişilerin her çifti için <literal>n(n-1)/2</literal> anahtar gerekecektir. Bu küçük bir grup için sorun değildir ama bu grup çok kısa sürede çok büyük bir grup haline gelir.
    </para>
   <para>
Genel anahtarlı şifreleme ile anahtar değişimi sorunu tamamen ortadan kalkmaktadır. Bir genel anahtarlı şifre mesajların gönderilmesi sirasında bir anahtar çifti kullanır. Başka iki anahtarı da mesajı alan taraf kullanır. Anahtarlardan biri <emphasis>genel anahtar</emphasis>dır ve herkese verilebilir, diğeri ise <emphasis>gizli anahtar</emphasis>dır ve anahtarın sahibi tarafından herkesten gizlenir. Bir gönderici göndereceği mesajı alıcının genel anahtarı ile şifreler ve alıcı da bu mesajı kendi gizli anahtarı ile çözer.
    </para>
   <para>
Bu protokol simetrik şifrelerin doğasında olan anahtar değişimi sorununun çözümüdür. Gönderici ve alıcının diğerinden bir anahtar kabul etmeye ihtiyacı yoktur. Gizli haberleşmenin yapılmasından çok önce gönderici alıcının genel anahtarının bir kopyasını zaten almış olur. Diğer yandan aynı genel anahtarın kopyalarını alıcı ile gizlilik gerektiren iletişim gerçekleştirmek isteyen herkes tarafından kullanılabilir. Bu durumda <literal>n</literal> kişi için sadece <literal>n</literal> anahtar çifti gerekir.
    </para>
   <para>
Genel anahtarlı şifreleme tuzak kapılı tek yönlü işlev (one-way trapdoor  function) üzerine inşa edilmiştir. Bir tek yönlü işlevin hesaplanması kolay olduğu halde tersinin hesaplanması çok zordur.  Örneğin asal sayıların çarpımlarından oluşan bir sayıyı elde etmek kolaydır ancak böyle bir sayıyı asal çarpanlarına ayırmak daha zordur. İşte tuzak kapılı tek yönlü işlevde böyle birşeydir ancak onun bir tuzak kapısı vardır yani bilginin bazı parçaları bilinir, böylece tersini hesaplamak kolaylaşır. Örneğin iki asal sayının çarpımından oluşan bir sayıyı asal çarpanlarına ayırmak, çarpanlarından biri bilindiğinde çok kolay olur. Bir genel anahtarlı şifre asal sayıların çarpımları üzerine kurulur. Bir genel anahtar iki çok büyük asal sayının çarpımıdır ve şifreleme algoritması mesajı şifrelerken bu birleşimi kullanır. Şifreyi çözen algoritmanın asal çarpanları bilmesi gerekir. Gizli anahtar bu çarpanlardan birini içeriyorsa şifrenin çözülmesi kolay olur ancak çarpanlardan biri bile bilinmiyorsa çözüm çok çok zor olur.
    </para>
   <para>
İyi bir simetrik şifredeki gibi iyi bir genel anahtarlı şifre de güvenlik ihtiyaçlarının tamamını anahtara yükler. Burada da anahtarın uzunluğu sistemin güvenilirliğinin ölçüsüdür. Ancak bir simetrik şifreleme anahtarının uzunluğu ile bir genel anahtarlı şifreleme anahtarının uzunluğu arasındaki göreli bir ilişkiyle güvenilirlik derecesini ilişkilendirmek bir ölçü değildir. Bir deneme yanılmalı saldırıda 80 bitlik anahtarlı bir simetrik şifreyi oluşturan anahtarı bulmak için saldırgan <literal>2</literal><superscript>80</superscript> anahtarı tek tek deneyecektir. Bir genel anahtarlı şifre üzerine böyle bir saldırı yapıldığında saldırgan, 512 bitle kodlanmış (155 haneli bir sayı) birleşiminin çarpanlarını bulmaya çalışacaktır. Saldırganın iş yükü temel olarak saldırdığı şifreye bağlıdır. Simetrik şifreler için günümüzde 128 bit yeterli olurken, günümüzdeki çarpanlara ayırma teknolojisi gözönüne alındığında, genel anahtarlarda 1024 bitin yeterli olacağı anlaşılmaktadır.
    </para>
  </section>
  <section>
   <info>
    <title>Melez Şifreler</title>
   </info>
   <para>
Genel anahtarlı şifreler her derdin devası değildir. Birçok simetrik şifre güvenlik noktasından bakıldığında daha sağlamdır, genel anahtarlı şifreleme ve şifre çözme işlemi ise simetrik sistemlerdeki aynı tür işlemlerle karşılaştırıldığında daha masraflıdır. Buna rağmen genel anahtarlı şifreleme simetrik şifreleme anahtarlarının dağıtımı için faydalı bir araçtır ve bu, melez şifreleme sistemlerinin nasıl çalıştığı hakkında bir fikir verir.
    </para>
   <para>
Bir melez şifre hem simetrik şifreyi hem de genel anahtarlı şifreyi kullanır. Bu mekanizma, bir simetrik şifreyi paylaştırmakta bir genel anahtarlı şifreyi kullanır. Simetrik şifreyi taşıyan mesaj genel anahtarla şifrelendikten sonra alıcısına gönderilir. Simetrik anahtar paylaşımının güvenliği için gönderilen her mesaj için farklı simetrik anahtar kullanılır. Bu nedenle, bazan ona oturum anahtarı dendiği de olur.
    </para>
   <para>
Hem PGP hem de GnuPG melez şifreleri kullanmaktadır. Oturum anahtarı, genel anahtarlı şifre kullanılarak şifrelenir ve gönderilecek mesaj da simetrik şifre ile şifrelenerek her ikisi otomatik olarak bir paket içinde birleştirilir. Alıcı gizli anahtarını kullanarak oturum anahtarının şifresini çözer ve elde ettiği oturum anahtarı ile mesajın şifresini çözer.
    </para>
   <para>
Bir melez şifre, kullandığı genel anahtarlı veya simetrik şifreden daha sağlam değildir. Bunlardan zayıf olanı kadar zayıftır. PGP ve GnuPG için genel anahtarlı şifre çiftin daha zayıf olanıdır. Bereket versin ki, yine de, eğer bir saldırgan oturum anahtarını ele geçirirse sadece bu oturum anahtarı ile şifrelenmiş mesajı okuyabilecektir. Başka bir mesajı okumak için benzer işlemleri yeniden yapmak zorundadır, çünkü oturum anahtarı her mesaja özeldir.
    </para>
  </section>
  <section>
   <info>
    <title>Sayısal İmzalar</title>
   </info>
   <para>
Bir aşlama işlevi, girdisini bir sonlu sayılar kümesi içindeki bir değerle eşleştiren bir işlevdir. Genel olarak bu küme doğal sayılar aralığıdır. Basit bir aşlama işlevi <literal>x</literal>'lerin tamsayılardan oluştuğu <literal><replaceable>f</replaceable>(<replaceable>x</replaceable>) = 0</literal> eşitliği ile ifade edilir. Daha ilginç bir aşlama işlevi ise <literal><replaceable>f</replaceable>(<replaceable>x</replaceable>) =  <replaceable>x</replaceable> mod 37</literal> dir. İşlevdeki <literal>x</literal>'in değeri, <literal>x</literal>'in 37 ile bölünmesinden kalandır.
    </para>
   <para>
Bir belgenin sayısal imzası belgeye bir aşlama işlevinin uygulanmasının sonucudur. Kullanım amacına uygun olarak, bir aşlama işlevi iki önemli özelliğinin sağlanmasını gerektirir. İlki, aynı değere haşlanan iki belgenin bulunması zor olmalıdır. İkincisi ise, verilen bir aş değerini sağlayan bir belgenin bulunması zor olmalıdır.
    </para>
   <para>
Bazı genel anahtarlı şifreler<footnote><para>Şifre, gerek genel anahtarın gerekse gizli anahtarın şifreleme algoritması tarafından genel anahtar olarak kullanılabilmesi özelliğine sahip olmalıdır. RSA bu algoritmaya uygunken ElGamal uygun değildir.</para></footnote> belgeleri imzalamakta kullanılabilir. İmzacı belgeyi kendi gizli anahtarı ile şifreler. İmzayı kontrol etmek ve belgeyi görmek isteyen biri basitçe imzacının genel anahtarını kullanarak belgenin şifresini çözer. Bu algoritma, iyi bir aşlama işlevinin gerektirdiği iki özelliği sağlar, fakat pratikte, bu algoritma kullanışlılık bakımından çok yavaştır.
    </para>
   <para>
Bir alternatif de, bu iki önemli özelliği sağlamak üzere tasarlanmış aşlama işlevleri kullanmaktır. SHA ve MD5 bu algoritma için örnek olarak verilebilir. Bu algoritma kullanıldığında, bir belge onunla aşlanarak imzalanmıştır ve aş değeri de imzadır. Bir başka kişi imzayı, belgenin ondaki kopyasını ayrıca aşlayarak ve bu aş değerini orjinal belgenin aş değeri ile karşılaştırarak kontrol eder. Bu iki değer aynıysa belgeler de birbirinin aynıdır.
    </para>
   <para>
Şüphesiz, şimdiki sorun imza denetimi ile etkileşecek bir saldırgana izin vermeksizin sayısal imzalarda aşlama işlevinin kullanılmasıdır. Belge ve imza şifrelenmeksizin gönderilirse, bir saldırgan belgeyi değiştirebilir ve alıcının bilgisi dışında değişmiş belgeye uygun bir imza üretebilir. Eğer sadece belge şifrelenmişse, saldırgan imzayı tahrif ederek imza denetiminin başarısız olmasına sebep olabilir. Bir üçüncü seçenek de belgenin ve imzanın bir melez genel anahtarlı şifreleme kullanarak şifrelenmesidir. İmzalayan, kendi gizli anahtarını kullanır, diğer herkes belgeyi ve imzayı kontrol etmek için onun genel anahtarını kullanır. Buradan sesler iyi geliyor da, etkisi yok. Eğer bu algoritma gerçekten belgeyi güvenilir kılıyorsa, belgenin tahrif edilmesine karşı da güvenilir olacaktır ve imzaya gerek kalmayacaktır. Yine de bir takım sorunlar hala  vardır; imza ve belgenin ikisini birden tahrif edilmekten koruyamaz. Bu algoritmada, simetrik şifrenin oturum anahtarı imzalayanın gizli anahtarı kullanılarak şifrelenir. Başkaları oturum anahtarını elde etmek için genel anahtarı kullanabilir. Bu sebeple, saldırgan için oturum anahtarını elde etmek kolaydır ve onu kullanarak yerine koyduğu belgeleri ve imzaları şifreleyip göndericinin ismiyle başkalarına gönderebilir.
    </para>
   <para>
Çalışan bir algoritma sadece imzayı şifrelemek için bir genel anahtar algoritmasının kullanıldığı algoritmadır. Hash değeri imzalayanın gizli anahtarı kullanılarak şifrelendiğinden herhangi biri genel anahtarı kullanarak imzayı kontrol edebilir. İmzalı belge herhangi bir algoritma kullanılarak gönderilebilir, belge genel amaçlı ise hiçbir şifreleme de yapılmayabilir. Belge değişikliğe uğrarsa, imza denetimi başarısız olacaktır, ancak bu, imza denetiminin tam olarak neyi yakalayacağının varsayıldığı ile ilgilidir. Sayısal İmza Standardı (DSA - Digital Signature Standard) tam da yukarıda anlatıldığı gibi çalışan bir genel anahtarlı imza algortimasıdır. DSA, GnuPG tarafından kullanılan birincil imzalama algoritmasıdır.
    </para>
   <para>
Belge ile ilgili görüş ve önerilerinizi lütfen iletmekten çekinmeyiniz. GNUPG, açık anahtarlı kriptografi teknikleri üzerine temellenmiş bir uygulamadır. Açık anahtarlı kriptografi hakkında daha geniş bilgiyi
<xref xlink:href="http://zion.comu.edu.tr/~evreniz/belgeler/pkc/pkc.html"/> adresinden temin edebilirsiniz.
   </para>
  </section>
 </section>
 <section xml:id="gpg-kullanimi_yasal">
  <info>
   <title>Yasal Açıklamalar</title>
  </info>
  <!-- Legal Sections -->
  <section>
   <info>
    <title>Telif Hakkı ve Lisans</title>
   </info>
   <!-- The LDP recommends, but doesn't require, the GFDL -->
   <para>
       Bu belgenin, <emphasis>Linux'ta GPG Kullanımı</emphasis>,
       0.1 sürümünün
       <emphasis role="bold">
         telif hakkı © 2001 <emphasis>Faruk Eskicioğlu</emphasis> ve <emphasis>A. Murat Eren</emphasis></emphasis>'e
       aittir. Bu belgeyi, Free Software Foundation tarafından yayınlanmış
       bulunan GNU Özgür Belgeleme Lisansının 1.1 ya da daha sonraki sürümünün
       koşullarına bağlı kalarak kopyalayabilir, dağıtabilir ve/veya
       değiştirebilirsiniz. Bu Lisansın bir kopyasını <link xlink:href="fdl.html">GNU Free Documentation License</link> başlıklı bölümde bulabilirsiniz.
      </para>
   <para>
       Linux, Linus Torvalds adına kayıtlı bir ticarî isimdir.
      </para>
  </section>
  <section>
   <info>
    <title>Feragatname</title>
   </info>
   <para>
        Bu belgedeki bilgilerin kullanımından doğacak sorumluluklar,
        ve olası zararlardan belge yazarı sorumlu tutulamaz.
        Bu belgedeki bilgileri uygulama sorumluluğu uygulayana aittir.
      </para>
   <para>
        Tüm telif hakları aksi özellikle belirtilmediği sürece sahibine
        aittir. Belge içinde geçen herhangi bir terim, bir ticarî isim
        ya da kuruma itibar kazandırma olarak algılanmamalıdır. Bir ürün
        ya da markanın kullanılmış olması ona onay verildiği anlamında
        görülmemelidir.
      </para>
  </section>
 </section>
</article>
