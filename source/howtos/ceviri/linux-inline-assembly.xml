<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE article SYSTEM "../../docbook/dtd/docbookx.dtd"-->
<!-- ********************************************************************
     $Id: linux-inline-assembly.xml,v 1.1 2002/09/30 18:24:41 nilgun Exp $
     ******************************************************************** -->

<article xml:id="linux-inline-assembly" lang="tr">
  <info>
    <!-- Use "HOWTO", "mini HOWTO", "FAQ" in title, if appropriate -->
    <title>Linux için Satıriçi Sembolik Makina Dili (Inline Assembly)</title>
    <subtitle>Parçaları bir araya getirelim</subtitle>
    <authorgroup>
      <author>
       <personname><firstname>Bharata B. Rao</firstname>
      </author><author role="translator">
       <personname><firstname>Ramazan Yağmur</firstname>
      </author>
    </authorgroup>
    <releaseinfo>IBM Linux Teknoloji Merkezi , IBM Yazılım Lab. Hindistan</releaseinfo>

     <pubdate>Mart 2001</pubdate>
     <revhistory>
       <revision>
          <revnumber>1.0</revnumber>
          <date>Mart2001</date>
          <authorinitials>
            Çeviri: Ramazan Yağmur,  Özgün Belge: Bharata B. Rao
          </authorinitials>
          <revremark>İlk sürüm</revremark>
       </revision>
     </revhistory>
     <abstract>
        <para>
Bharata B. Rao Linux platformunda x86 için Sembolik Makina Dilinin (Assembly)
genel kullanımı ve yapısı hakkındaki bu rehberinde Satıriçi Sembolik Makina
Dilinin (Inline Assembly) temelini ve çeşitli kulanımlarını kapsıyor, bazı
temel Satıriçi Sembolik Makina Dili  kod örnekleri veriyor ve Linux
çekirdeğindeki bazı Satıriçi Sembolik Makina Dili kodları açıklıyor.
        </para>
     </abstract>
    <legalnotice><title>Yasal Açıklamalar</title><para>
Bu çevirinin, <emphasis>Linux için Satıriçi Sembolik Makina Dili (Inline Assembly)</emphasis>, 1.0 sürümünün <emphasis role="bold"> telif hakkı © 2002 <emphasis>Ramazan Yağmur</emphasis></emphasis>'a ve özgün belgenin <emphasis role="bold"> telif hakkı © 2002 <emphasis>Bharata B. Rao</emphasis></emphasis>'ya aittir. Bu çeviriyi, Free Software Foundation tarafından yayınlanmış bulunan <link linkend="gpl">GNU Genel Kamu Lisansı</link>nın 2. ya da daha sonraki sürümünün koşullarına bağlı kalarak kopyalayabilir, dağıtabilir ve/veya değiştirebilirsiniz. Bu Lisansın özgün kopyasını <link xlink:href="http://www.gnu.org/copyleft/gpl.html"/> adresinde bulabilirsiniz.
      </para>&notice.disc;
    </legalnotice>
  </info>
<!-- Content follows...include introduction, license information, feedback -->
  <sect1 xml:id="linux-inline-assembly_intro">
    <title>Giriş</title>
    <para>
      Eğer Linux çekirdek geliştiricisi iseniz, muhtemelen yüksek mimariye bağlı kodlar
      yazıyor veya bu kodları düzenliyorsunuzdur. Büyük olasılıkla bunu da Sembolik Makina
      Dili (Assembly) kodlarını, C kodlarının arasına yerleştirerek (Inline Assembly
      diye bilenen yöntemle) yapıyorsunuzdur. Şimdi Satıriçi sembolik makina dilinin
      Linux'daki özel kullanımına bakalım. (Çalışmalarımızı IA32 Assembly ile
      sınırlandıracağız.)
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_syntax">
    <title>Kısaca GNU Assembler sözdizimi</title>
    <para>
      Önce Linux GCC'de temel sembolik makina dili sözdizimine bir bakalım. Linux
      için GNU C Derleyicisi AT&amp;T sembolik makina dili sözdizimini kullanıyor.
      Sözdiziminin temel kuralları aşağıda listelenmiştir. (Listenin tamamını
      içermiyor sadece Satıriçi Sembolik Makina Diline bağlı olanları içeriyor.)
    </para>
    <variablelist>
      <varlistentry>
        <term>Yazmaç adlandırma</term>
        <listitem>
          <para>
            Yazmaç (register) isimleri <literal>%</literal> öneki ile kullanılır.
            Şöyleki <literal>eax</literal> kullanılacaksa <literal>%eax</literal>
            olarak kullanılmalı.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Kaynak ve hedef sıralaması</term>
        <listitem>
          <para>
            Her komutta kaynak önce gelir ve hedef onu takip eder. Bu Intel söz
            diziminde olan önce hedef sonra kaynak sıralaması ile arasında olan
            farktır.
          </para><para>
<screen><command>mov %eax, %ebx</command> -- eax'teki değeri ebx'e taşır.</screen>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Terim büyüklüğü</term>
        <listitem>
          <para>
            Komutlar terimin (operand) <literal>byte</literal>, <literal>word</literal>
            veya <literal>long</literal> olmasına bağlı olarak <literal>b</literal>,
            <literal>w</literal> veya <literal>l</literal> sonekleri ile kullanılır.
            Bu mecburi değildir. GCC terimin değerini okuyarak uygun soneki ekler. Ama
            soneki kendiniz yazmanız kodun okunurluğunu arttırır ve olası yanlış
            tahminleri engeller.
          </para><para>
<screen>
<command>movb %al,  %bl  </command> -- Byte taşıma
<command>movw %ax,  %bx  </command> -- Word taşıma
<command>movl %eax, %ebx </command> -- Longword taşıma
</screen>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Sabit terimler</term>
        <listitem>
          <para>
            Sabit terimler <literal>$</literal> işareti ile belirlenir.
          </para><para>
<screen>
<command>movl $0xffff, %eax</command> -- 0xffff 'ın değerini eax yazmacına taşır.
</screen>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Dolaylı bellek yönlendirmeleri</term>
        <listitem>
          <para>
            Belleğe dolaylı yönlendirmeler <literal>()</literal> kullanılarak yapılır.
          </para><para>
<screen>
<command>movb (%esi), %al</command> -- esi tarafından belirtilen baytı bellekten
                                       al yazmacına taşır.
</screen>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_iasm">
    <title>Satıriçi Sembolik Makina Dili</title>
    <para>
      GCC Satıriçi Sembolik Makina Dili için aşağıda gösterilen özel "asm" yapısını
      kullanır:
    </para><para>
      <command>GCC'nin "asm" yapısı</command>
    </para>
<screen>
    asm (
        assembler şablonu
        : çıktı terimleri                         (isteğe bağlı)
        : girdi terimleri                         (isteğe bağlı)
        : geri dönen yazmaçlar                    (isteğe bağlı)
        );
</screen><para>
      Bu örnekte sembolik makina dili şablonu sembolik makina dili komutlarından
      ibarettir. Girdi terimleri, girdi terimleri gibi çalışan C deyimleridir.
      Çıktı terimleri sembolik makina dili komutlarının çıktılarının uygulanacağı
      C deyimleridir.
    </para><para>
      Satıriçi Sembolik Makina Dili yönetim yeteneği ve çıktılarını C değişkenleri
      ile görülebilir kılması ile birinci dereceden önem kazanır. Yeteneği sayesinde
      "asm" sembolik makina dili komutları ile onları içeren C yazılımı arasında
      bir arayüz niteliğindedir.
    </para><para>
      Aralarındaki temel ve önemli fark Temel Satıriçi Sembolik Makina Dili komutlardan,
      İleri Sembolik Makina Dili terimlerden ibarettir. Örneklendirme için aşağıdaki
      örneğe bakın:
    </para><example><title>Satıriçi Sembolik Makina Dili temel yapısı</title>
<screen>
{
        int a=10, b;
        asm ("movl %1, %%eax;
              movl %%eax, %0;"
                :"=r"(b)        /* çıktı */
                :"r"(a)         /* girdi */
                :"%eax");       /* geri dönen yazmaç */
}
</screen>
    <para>
      Örneğimizde Sembolik Makina Dili komutları ile <literal>b</literal>'nin değerini
      <literal>a</literal>'ya eşitledik. Aşağıdaki noktaları not edin.
      </para><itemizedlist>
        <listitem>
          <para>
            <literal>b</literal> çıktı terimidir, <literal>%0</literal> ile
            gösterilmiştir ve <literal>a</literal> girdi terimidir,
            <literal>%1</literal> işe gösterilmiştir.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>r</literal>, <literal>a</literal> ve <literal>b</literal>'nin
            yazmaçlarda kalmasını sağlayan belirteçtir. Şu unutulmamalıdır ki çıktı
            teriminin belirtecinin her zaman <literal>=</literal> ile çıktı terimi
            olduğu belirtilmelidir.
          </para>
        </listitem>
        <listitem>
          <para>
            "asm" yapısı içinde <literal>%eax</literal> yazmacını kullanmak için bir
            tane daha <literal>%</literal> kullanılmalıdır, diğer bir deyişle
            <literal>%%eax</literal>, "asm" <literal>%0 %1</literal> vb. değişkenleri
            tanımlamak için kullanır. Tek <literal>%</literal>'li herşey girdi/çıktı
            terimi olarak muamele görür.
          </para>
        </listitem>
        <listitem>
          <para>
            Geri dönen yazmaç, <literal>%eax</literal>, üçüncü iki noktanın sonunda
            GCC'ye <literal>%eax</literal>'in "asm" içinde değiştirildiğini söyler,
            bundan dolayı GCC diğer değerleri tutmak için <literal>%eax</literal>'i
            kullanmayacaktır.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>movl %1, %%eax</literal>, <literal>a</literal>'nın değerini
            <literal>%eax</literal>'e taşır ve <literal>movl %%eax,%0</literal>,
            <literal>%eax</literal>'in değerini <literal>b</literal>'ye taşır.
          </para>
        </listitem>
        <listitem>
          <para>
            "asm" yapısının çalıştırılması bitince <literal>b</literal> çıktı terimi,
            güncellenmiş değeri yansıtacaktır. Yani <literal>b</literal>'nin "asm"
            içindeki değişikliklerinin "asm" dışına da yansıması beklenir.
          </para>
        </listitem>
      </itemizedlist></example>
    <para>
      Şimdi bu maddeleri biraz daha ayrıntılı olarak inceleyelim.
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_template">
    <title>Sembolik Makina Dili Şablonu</title>
    <para>
      Sembolik Makina Dili şablonu C yazılımı içine yerleştirilmiş bir takım
      Sembolik Makina Dili komutlarıdır. (Tek bir komut ya da bir grup komut).
      Ya her komut çift tırnak içine yazılmalı ya da grubun tamamı çift tırnak
      içinde olmalıdır. Her komut bir sonlandırıcı ile sonlandırılmalıdır.
      Geçerli sonlandırıcılar satırsonu (<literal>\n</literal>) ve noktalı virgüldür
      (<literal>;</literal>). GCC'nin oluşturacağı Sembolik Makina Dili
      dosyasının okunurluğunu arttırmak için satırsonundan (<literal>\n</literal>)
      sonra düzenleyici olarak sekme (<literal>\t</literal>) kullanılmalıdır.
      Komutlar, terim olarak gösterilmiş C deyimlerini numaralarla gösterirler.
      <literal>%0 %1</literal> gibi.
    </para><para>
      Eğer derleyicinin "asm" içindeki kodları düzenlemediğinden eminseniz,
      "asm"den sonra "volatile" kullanabilirsiniz. Eğer yazılımınız ANSI C uyumlu
      olmalıysa <literal>volatile</literal> yerine <literal>__asm__and__volatile__</literal>
      kullanmalısınız.
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_operands">
    <title>Terimler</title>
    <para>
      C deyimleri "asm" içindeki Sembolik Makina Dili komutları için terim gibi
      çalışırlar. Terimler Satıriçi Sembolik Makina Dilinin temel öğeleridir.
      Çünkü, C yazılımının deyimleriyle iyi işler başarır.
    </para><para>
      Her terim, terim belirteci ile gösterilir ve parantez içinde gösterilen C deyimi
      onu takip eder.
    </para><para>
      Örneğin: "belirteç" (C deyimi). Terim belirtecinin en önemli
      görevi terimin kipini bulmaktır.
    </para><para>
      Hem girdi hem de çıktı bölümünde birden fazla terim kullanabilirsiniz. Her terim
      virgülle ayrılarak yazılır.
    </para><para>
      Terimler Sembolik Makina Dili şablonunda numaralarla gösterilirler. Eğer toplam
      <literal>n</literal> adet terim varsa (hem girdi hem de çıktı bölümleri dahil),
      ilk terim <literal>0</literal> olarak numaralandırılır ve bu düzgün artarak
      devam eder ve son girdi terim <literal>n-1</literal> olarak numaralandırılır.
      Terimlerin toplam sayısı 10 veya makine tanımındaki komut düzenindeki maksimum
      terime sahip olan kadardır.
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_returns">
    <title>Geri Dönen Yazmaç Listesi </title>
    <para>
      Eğer "asm" yapısındaki komutlar donanım yazmaçlarını kullanıyorsa , GCC'ye
      yazmaçları kendimiz kullanıp kendimiz değiştireceğimizi söyleyebiliriz. GCC
      sonuç olarak bu yazmaçlara atanan değerlerin kesin olarak geçerli olacağını
      düşünmez. Geri dönen yazmaçları girdi veya çıktıya yazmak gerekli değildir,
      çünkü GCC "asm"nin onları kullandığını bilir. (Çünkü açık belirteç olarak
      tanımlanmışlardır). Eğer komutlar başka yazmaçları da açık veya gizli olarak
      kullanıyorsa (ve bu yazmaçlar girdi ve çıktı bölümlerinin birinde verilmemiş
      ise) geri dönen yazmaçlar listesinde bulunmak zorundadır. Geri dönen yazmaçlar
      üçüncü iki noktadan sonra bir dizi olarak belirtilir.
    </para><para>
      Eğer komutlar belleği daha önceden belirtilmemiş bir biçimde veya kapalı olarak
      değiştiriyorsa geri dönen yazmaçlar bölümüne "memory" ayrılmış kelimesi
      yazılmalıdır. Bu GCC'ye komutlar sırasında önbelleklenmiş yazmaçları hafızada
      tutmamasını söyler.
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_declarators">
    <title>Terim Belirteçleri</title>
    <para>
      Daha önce anlatıldığı gibi, "asm" yapısındaki her terim parantez içindeki bir
      C deyimi tarafından takip edilen bir terim belirteci tarafından dizi olarak
      açıklanmalıdır. Terim belirteçleri gerektiği gibi terimin komuttaki adresleme
      yöntemini tespit ederler. Bunun dışında belirteçler:
      </para><itemizedlist>
        <listitem>
          Terimin bir yazmaçda tutulabilirliğini ve tutulabileceği yazmaç türünü
        </listitem><listitem>
          Terimin bellek göstericisi mi olduğunu ve bu durumda tutabileceği adres
          türlerini
        </listitem><listitem>
          Terimin direk bir sabit mi olduğunu da belirtir.
        </listitem>
      </itemizedlist>
    <para>
      Belirteçler karşılaştırma için iki terim gerektirebilirler.
      Geçerli bir kaç belirteç çeşitli sıklıklarda kullanılır, bunlar aşağıda
      kısaca açıklanmıştır. Terim belirteçlerinin tam listesi için GCC ve GAS
      kılavuzlarına başvurabilirsiniz.
    </para><para>
      Sık kullanılan belirteçler:
      </para><variablelist>
        <varlistentry>
          <term>Yazmaç terimi belirteçleri (r)</term>
          <listitem>
            <para>
            Terimler, bu belirteç kullanılarak belirtilirse Genel Amaçlı Yazmaçlarda
            (GPR) tutulur. Aşağıdaki örneğe bakın:
            </para><para>
<screen>asm ("movl %%cr3, %0\n" :"=r"(cr3val));</screen>
            </para><para>
            Burada <literal>cr3val</literal> değişkeni yazmaçta tutulur,
            <literal>%cr3</literal>'ün değeri bu yazmaca kopyalanır ve
            <literal>cr3val</literal>'ın değeri bellekte bu yazmaç tarafından
            güncelleştirilir. <literal>r</literal> belirteci belirtildiğinde
            GCC <literal>cr3val</literal>'ın değerini uygun herhangi bir
            Genel Amaçlı Yazmaçta (GPR) tutar. Yazmacı belirtmek için, yazmaç
            isimlerini doğrudan özel yazmaç belirteçleri ile belirtmelisiniz.
            </para><para>
<screen>
  a     %eax
  b     %ebx
  c     %ecx
  d     %edx
  S     %esi
  D     %edi
</screen>   </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Bellek terimi belirteçleri (m)</term>
          <listitem>
            <para>
            Terimler bellekteyken, onlar üzerinde yapılacak her hangi bir işlem doğrudan
            bellek bölümüne de uygulanır, yazmaç belirteçleri ise değeri önce bir
            yazmaçta tutarlar sonra bellek bölümüne yazarlar. Yazmaç belirteçleri
            genelde kesin olarak gerektiklerinde veya önemli bir performans artışı
            sağladıklarında kullanılırlar. C değişkenlerinin "asm" içinde güncellenmesi
            gerektiğinde veya değerini bir yazmaçta tutmak istemediğiniz durumlarda
            bellek belirteçleri çok daha verimli olurlar.
            Örneğin <literal>sdtr</literal>'nin değeri <literal>loc</literal> bellek
            bölümünde tutuluyor:
            </para><para>
<screen>("sidt %0\n" : :"m"(loc));</screen>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Karşılaştırma (rakam) belirteçleri</term>
          <listitem>
            <para>
            Bazı durumlarda tek bir değişken hem girdi hem de çıktı terimi olabilir.
            Bu durum "asm"de karşılaştırma belirteçleri ile belirtilir.
            </para><para>
<screen>asm ("incl %0" :"=a"(var):"0"(var));</screen>
            </para><para>
            Örneğimizde belirteçleri karşılaştırmak için <literal>%eax</literal>
            yazmacı hem girdi hem de çıktı yazmacı olarak kullanılmıştır.
            <literal>var</literal> girdisi <literal>%eax</literal> yazmacına atanıyor,
            ve <literal>%eax</literal> arttırdıktan sonra <literal>var</literal>'da
            saklanıyor. " 0 " burada 0'ıncı çıktı belirteci gibi tanımlanmıştır. Bu,
            <literal>var</literal>'ın değerinin sadece <literal>%eax</literal>'te
            saklanabileceğini belirtir.
            Bu belirteç:
            </para><itemizedlist>
              <listitem>
                Girdinin bir değişkenden okunduğu ve sonucun yine bu değişkene
                yazıldığı gibi durumlarda
              </listitem>
              <listitem>
                Girdi ve çıktıların ayrılmasının gerekmediği gibi durumlarda
                kullanılabilir. Karşılaştırma belirteçlerinin önemi geçerli
                yazmaçları verimli kullanmamızı sağlamalarındandır.
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_examples">
    <title>Genel Satıriçi Sembolik Makina Dili Kullanım Örnekleri</title>
    <para>
      Aşağıdaki örnekler değişik terim belirteçlerinin kullanımını göstermektedir.
      Örnek verilebilecek çok fazla belirteç vardır fakat burada daha sık kullanılan
      belirteç türlerine yer verilmiştir.
      </para><variablelist>
        <varlistentry>
          <term>"asm" ve register belirteci "r"</term>
          <listitem>
            <para>
            İlk önce 'r' belirtecinin "asm" de kullanılışına bir bakalım.
            Örneğimiz GCC'nin nasıl yazmaç ayırdığını ve değerleri nasıl
            güncelleştirdiğini göstermektedir.
            </para><para>
<screen>
int main(void)
{
        int x = 10, y;

        asm ("movl %1, %%eax;
             "movl %%eax, %0;"
                :"=r"(y)        /* y çıktı terimidir */
                :"r"(x)         /* x girdi terimidir */
                :"%eax");       /* %eax geri dönen yazmaç */
}
</screen>   </para><para>
            Bu örnekte x'in değeri "asm" içinde y'ye kopyalandı. x ve y "asm"den
            yazmaçların içinde geçtiler. Bunun için üretilecek Sembolik Makina Dili
            kodu şuna benzer:
            </para><para>
<screen>
    main:
        pushl %ebp
        movl %esp,%ebp
        subl $8,%esp
        movl $10,-4(%ebp)
        movl -4(%ebp),%edx      /* x=10 %edx te tutulur */
#APP    /* asm burada başlıyor */
        movl %edx, %eax         /* x %eax e taşınır*/
        movl %eax, %edx         /* y edx e taşınır ve güncelleştirilir */

#NO_APP /* asm burada bitiyor */
        movl %edx,-8(%ebp)      /* y nin yığıttaki değeri %edx in değeri ile
                                   güncelleştirilir.*/
</screen>  </para><para>
           'r' belirteci kullanıldığında GCC herhangi bir yazmacı ayırmakta serbesttir.
            Örneğimizde <literal>x</literal>'i tutmak için <literal>%edx</literal>'i
            seçmiştir. <literal>x</literal>'in değerini <literal>%edx</literal>'ten
            okuduktan sonra <literal>y</literal> için yine <literal>%edx</literal>'i
            seçmiştir.
            </para><para>
              <literal>y</literal>'nin değeri çıktı terimi bölümünde oldukça
              <literal>%edx</literal>'in güncelleştirilen değeri
              <literal>;y</literal>'nin yığıttaki yeri, <literal>-8(%ebp)</literal>'de
              belirtilir. Eğer <literal>y</literal> girdi bölümünde tanımlanmış olsa
              idi, geçici <literal>y</literal> yazmacı (%edx) güncelleştirilmesine
              rağmen <literal>y</literal>'nin yığıttaki yeri güncelleştirilmezdi.
            </para><para>
              <literal>%eax</literal> geri dönen yazmaçlar listesinde oldukça GCC onu
              bilgi tutmak dışında kullanmayacaktır.
            </para><para>
              Çıktılar oluşmadan önce girdilerin yok olduğu farz edilerek, hem
              <literal>x</literal> girdisi hem <literal>y</literal> çıktısı aynı
              <literal>%edx</literal> yazmacında tutuldular. Ama şunu unutmayın eğer
              bir kaç komut işletecekseniz bunu yapamazsınız. Girdi ve çıktıların
              farklı yazmaçlarda tutulduğundan emin olmak için, &amp; belirteç
              değiştiricisini kullanabiliriz.
            </para><para>
              Bununla ilgili bir örnek :
            </para><para>
<screen>
        int main(void)
{
        int x = 10, y;

        asm ("movl %1, %%eax;
             "movl %%eax, %0;"
                :"=&amp;r"(y)       /* y çıktı terimidir ve
                                   &amp; belirteç değiştiricisidir. */
                :"r"(x)         /* x girdi terimidir */
                :"%eax");       /* %eax geri dönen yazmaçtır*/
}
</screen>
            </para><para>
              Ve burada bu örnek için üretilmiş Sembolik Makina Dili kodunu
              bulabilirsiniz, <literal>x</literal> ve <literal>y</literal>'nin
              "asm" de farklı yazmaçta tutulduğu görülmektedir.
            </para><para>
<screen>
    main:
        pushl %ebp
        movl %esp,%ebp
        subl $8,%esp
        movl $10,-4(%ebp)
        movl -4(%ebp),%ecx      /* x, girdi %ecx tedir */
#APP
        movl %ecx, %eax
        movl %eax, %edx         /* y, çıktı %edx tedir */

#NO_APP
        movl %edx,-8(%ebp)
</screen>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Özel yazmaç belirteçlerinin kullanımı</term>
          <listitem>
            <para>
            Şimdi kişisel yazmaçları terimler için belirteç olarak kullanmaya bir
            bakalım. Aşağıdaki örneğimizde <literal>cpuid</literal> komutu girdiyi
            <literal>%eax</literal> yazmacından alıyor ve çıktıyı dört yazmaca
            veriyor: <literal>%eax</literal>, <literal>%ebx</literal>,
            <literal>%ecx</literal>, <literal>%edx</literal>. <literal>cpuid</literal>
            girdisi, <literal>op</literal> değişkeni, "asm"ye
            <literal>%eax cpuid</literal>'nin de beklediği gibi yazmacından giriyor.
            <literal>a</literal>, <literal>b</literal>, <literal>c</literal> ve
            <literal>d</literal> belirteçleri çıktıda dört yazmaçtaki değerleri
            kendilerinde toplamak için kullanılmıştır.
            </para><para>
<screen>
    asm ("cpuid"
                : "=a" (_eax),
                  "=b" (_ebx),
                  "=c" (_ecx),
                  "=d" (_edx)
                : "a" (op));
</screen>
            </para><para>
              Aşağıda bunun için üretilmiş Sembolik Makina Dili kodunu görebilirsiniz
              (_eax ,_ebx vb ... değişkenlerin yığıtta bulunduğu varsayılmıştır):
            </para><para>
<screen>
        movl -20(%ebp),%eax     /* 'op' yi %eax te tut -- girdi */
#APP
        cpuid
#NO_APP
        movl %eax,-4(%ebp)      /* %eax i _eax te tutar -- çıktı */
        movl %ebx,-8(%ebp)      /* diğer yazmaçları kendi çıktı
        movl %ecx,-12(%ebp)        değişkenlerinde tutar */
        movl %edx,-16(%ebp)
</screen>
            </para><para>
              Aşağıdaki yolda <literal>strcpy</literal> fonksiyonu <literal>"S"</literal>
              ve <literal>"D"</literal> belirteçleri kullanılarak uygulanabilir:
            </para><para>
<screen>
    asm ("cld\n
              rep\n
              movsb"
              : /* girdi yok */
              :"S"(src), "D"(dst), "c"(count));
</screen>
            </para><para>
              Kaynak gösterge <literal>src</literal> <literal>%esi</literal>'ye
              <literal>"S"</literal> belirteci ve hedef gösterge
              <literal>dst</literal>'ye <literal>"D"</literal> belirteci kullanılarak
              yerleştirilmiştir. Sayaç değeri <literal>rep</literal> önekinin
              gerektirdiği gibi <literal>%ecx</literal>'e yerleştirilmiştir.
            </para><para>
              Ve burada da 32-bit kodları birleştirip 64-bit kod elde etmek için,
              <literal>%eax</literal> ve <literal>%edx</literal> olmak üzere iki
              yazmaç kullanan bir belirteç göreceksiniz:
            </para><para>
<screen>
#define rdtscll(val) \
     __asm__ __volatile__ ("rdtsc" : "=A" (val))
</screen>
            </para><para>
              Üretilen Sembolik Makina Dili kodu şuna benzer
              (<literal>val</literal> 64 bit bellek alanına sahipse):
            </para>
<screen>
#APP
        rdtsc
#NO_APP
        movl %eax,-8(%ebp)      /* A belirtecinin sonucu olarak
        movl %edx,-4(%ebp)         %eax ve %edx çıktı gibi çalışır */
</screen>
            <para><literal>%edx:%eax</literal>'in içindeki değerler 64 bit çıktı gibi çalışır.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Karşılaştırma belirteçlerinin kullanımı</term>
          <listitem>
            <para>
              Burada da dört değiştirgeli sistem çağrıları için kodları göreceğiz:
            </para><para>
<screen>
#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
type name (type1 arg1, type2 arg2, type3 arg3, type4 arg4) \
{ \
long __res; \
__asm__ volatile ("int $0x80" \
        : "=a" (__res) \
        : "0" (__NR_##name),"b" ((long)(arg1)),"c" ((long)(arg2)), \
          "d" ((long)(arg3)),"S" ((long)(arg4))); \
__syscall_return(type,__res); \
}
</screen>
            </para><para>
              Üstteki örnekte sistem çağrısına dört değiştirge <literal>%ebx, %ecx, %edx</literal>
              ve <literal>%esi</literal>'ye <literal>b, c, d</literal> ve <literal>S</literal>
              belirteçleri kullanılarak bırakılmıştır. <literal>"=a"</literal> belirteci çıktıda
              kullanılmıştır. Bundan dolayı sistem çağrısının dönen değeri <literal>%eax</literal>,
              <literal>__res</literal> değişkenine aktarılır. Karşılaştırma belirteçlerinden
              <literal>"0"</literal>'ı girdi bölümünün ilk teriminin belirteci olarak kullanarak,
              sistem çağrısı numarası <literal>__NR_##name %eax</literal>'e atanır ve sistem
              çağrısın girdisi olarak işlem görür. Böylece <literal>%eax</literal> burada hem
              girdi hem de çıktı yazmacı olarak çalışır. Bunun için iki farklı yazmaç kullanılmadı.
              Ama şu unutulmamalıdır ki girdi (sistem çağrı numarası) çıkış üretilmeden önce
              kullanılmalıdır.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Bellek terimi belirtecinin kullanımı</term>
          <listitem>
            <para>
              Aşağıdaki küçük azaltma işlemini inceleyin:
            </para><para>
<screen>
    __asm__ __volatile__(
                "lock; decl %0"
                :"=m" (counter)
                :"m" (counter));
</screen>
            </para><para>
              Bunun için üretilen Sembolik Makina Dili kodu şöyle olur:
            </para><para>
<screen>
    #APP
        lock
        decl -24(%ebp) /* sayaç bu bellek bölümünde değiştirilir. */
#NO_APP.
</screen>   </para><para>
              Burada sayaç için yazmaç belirteci kullanmadan önce bir düşünmelisiniz.
              Eğer kullanırsanız, önce sayacın içeriğini bir yazmaca atamalısınız.
              Azaltma işlemini yaptıktan sonra sonucu belleğine atamalısınız. Ama o
              zaman da <literal>lock</literal> kullanma ve kodu küçük tutma
              çabamızı boşa çıkarmış oluruz. Bu bellek belirtecinin gereğini kesin
              olarak göstermektedir.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Geri Dönen yazmaçların Kullanımı</term>
          <listitem>
            <para>
              Temel Bellek Kopyasının işlemesini inceleyin.
            </para><para>
<screen>
        asm ("movl $count, %%ecx;
              up: lodsl;
              stosl;
              loop up;"
                :                       /* çıktı yok */
                :"S"(src), "D"(dst)     /* girdi */
                :"%ecx", "%eax" );      /* geri dönen yazmaçlar */
</screen>
            </para><para>
              <literal>lodsl %eax</literal>'i değiştirirken, <literal>lodsl</literal> ve
              <literal>stosl</literal> komutları onu dolaylı olarak kullanır.
              <literal>%ecx</literal> yazmacı doğrudan <literal>count</literal>'u çağırır.
              Biz <literal>%eax</literal> ve <literal>%ecx</literal>'i geri dönen
              yazmaçlar listesinde belirtmediğimiz sürece GCC bunun farkında olmayacaktır.
              Bunu yapmadığımız sürecce GCC <literal>%eax</literal> ve <literal>%ecx</literal>'in
              serbest olduğunu varsayar ve onları başka bilgiler tutmak için kullanabilir.
              Şunu bilmelisiniz ki <literal>%esi</literal> ve <literal>%edi</literal> "asm"
              tarafından kullanılıyor ve geri dönen yazmaçlar arasında belirtilmemişlerdir.
              Çünkü onlar zaten girdi terimlerinin listesinde bulunmaktadırlar. Ve son olarak,
              eğer dolaylı veya doğrudan kullanılmış bir yazmaç girdi veya çıktı listesinde
              bulunmuyorsa, onu geri dönen yazmaçlar listesine yazmalısınız.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_eod">
    <title>Sonuç</title>
    <para>
      Şu sonuca varabiliriz ki Satıriçi Sembolik Makina Dili çok geniştir ve burada
      değinemediğimiz bir çok olanak da sağlar. Ama bu yazıdan temeli kavramanız
      halinde kendi başınıza Satıriçi Sembolik Makina Dili ile kod yazmaya
      başlayabilirsiniz.
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_biblio">
    <title>Yararlanılan Kaynaklar</title>
    <para>
      <link xlink:href="http://gcc.gnu.org/onlinedocs/gcc_toc.html"
      >Using and Porting the GNU Compiler Collection (GCC) manual</link>.
    </para><para>
      <link xlink:href="http://www.gnu.org/manual/gas-2.9.1/as.html"
      >GNU Assembler (GAS) manual</link>.
    </para><para>
      <link xlink:href="http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline_djgpp.html"
      >Brennan's Guide to Inline Assembly</link>.
    </para>
  </sect1>
  <sect1 xml:id="linux-inline-assembly_author">
    <title>Yazar Hakkında</title>
    <para>
      Bharata B. Rao Hindistan Mysore Üniversitesi Elektronik ve Haberleşme Mühendisliği
      bölümünü okudu. Hindistan'da 1999'dan beri IBM Global Services için çalışıyor.
      IBM Linux Teknoloji Merkezi üyesidir. İlk olarak Linux RAS (Reliability, Availability,
      and Serviceability) Projesinde bulunmuştur. Diğer hobileri İşletim Sistemleri ve
      İşlemci mimarisidir.
    </para>
  </sect1>
</article>
