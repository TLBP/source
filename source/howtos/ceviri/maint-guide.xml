<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: maint-guide.xml,v 1.20 2003/07/19 09:25:04 nilgun Exp $
     ******************************************************************** -->
<article xml:id="maint-guide-tr" lang="tr">
  <info>
    <title>Debian Paket Bakımcılarının Kılavuzu</title>
    <author>
      <personname><firstname>Josip Rodin</firstname>
     </author><author role="translator">
     <personname><firstname>Oğuz Yarımtepe</firstname>
    </author>
     <pubdate>Eylül 2005</pubdate>
    <revhistory><title>Bu çevirinin sürüm bilgileri:</title>
      <revision>
        <revnumber>1.0</revnumber>
        <date>Eylül 2005</date>
        <authorinitials>OY</authorinitials>
        <revremark>İlk çeviri</revremark>
      </revision>
    </revhistory>
    <revhistory><title>Özgün belgenin sürüm bilgileri:</title>
      <revision><revnumber>1.2.3</revnumber>
        <date>18 Ocak 2005</date>
        <authorinitials>JR</authorinitials>
      </revision>
    </revhistory>

    <abstract><para>
Bu belgede ortalama Debian kullanıcıları ve ayrıntılı tarif isteyen geliştiriciler için bir Debian paketinin nasıl hazırlanacağı açıklanmaya çalışılmıştır.
    </para><para>
Bu belge şu iki belge örnek alınarak oluşturulmuştur:
    </para><para><itemizedlist><listitem>
Bir Debian Paketinin  Yapımı (Making a Debian Package) telif hakkı © 1997 Jaldhar Vyas Debmake Kılavuzu (Debmake Manual) olarak da bilinir.
    </listitem><listitem>
Yeni Paketleyici için Debian Paketlerinin Oluşturması Nasıl (The New-Maintainer's Debian Packaging Howto), telif hakkı © 1997 Will Lowe.
    </listitem></itemizedlist>
    </para></abstract>
<copyright><year>1998-2002</year><holder>Josip Rodin - Özgün belge</holder></copyright> 
<copyright><year>2005</year><holder>Oğuz Yarımtepe - Türkçe çeviri</holder></copyright>
    <legalnotice><title>Yasal Açıklamalar</title>
      <para>
Bu belgenin, <emphasis>Debian Paketleyicileri için Kılavuz</emphasis> çevirisinin 1.0 sürümünün <emphasis role="bold">telif hakkı © 2005 <emphasis>Oğuz Yarımtepe</emphasis>'ye</emphasis>, özgün İngilizce sürümünün  <emphasis role="bold">telif hakkı © 1998-2002 <emphasis>Josip Rodin</emphasis>'e</emphasis> aittir. Bu belgeyi, Free Software Foundation tarafından yayınlanmış bulunan <link linkend="gpl">GNU Genel Kamu Lisansı</link>nın 2. ya da daha sonraki sürümünün koşullarına bağlı kalarak kopyalayabilir, dağıtabilir ve/veya değiştirebilirsiniz. Bu Lisansın özgün kopyasını <link xlink:href="http://www.gnu.org/copyleft/gpl.html"/> adresinde bulabilirsiniz.
  </para>&notice.disc;
    </legalnotice>
</info>

  <sect1 xml:id="maint-guide-tr-s1">
    <title>Doğru şekilde başlamak</title><para>
Bu belgede ortalama Debian kullanıcıları ve ayrıntılı tarif isteyen geliştiriciler için bir Debian paketinin nasıl hazırlanacağı açıklanmaya çalışılmıştır. Oldukça genel bir dil kullanılmış ve de çalışma örnekleriyle kapsanmıştır. Romalılara ait eski bir deyiş vardır, <emphasis>Longum iter est per preaecepta, breve et efficax per exempla!</emphasis> (Bu, kurallarla uzun, fakat örneklerle kısa ve verimli bir yoldur!).
    </para><para>
Debian'ı lider Linux dağıtımlarından birisi yapan paket sistemidir. Hali hazırda çok geniş bir yazılım Debian biçiminde bulunmasına rağmen, olmayan bir yazılımı yükleme ihtiyacı hissedebilirsiniz. Kendi paketlerinizi nasıl yapabileceğinizi düşünüyor olabilirsiniz ve belki de bunun çok güç bir iş olduğunu düşünüyorsunuz. Eğer Linux üzerinde gerçek bir acemiyseniz, o zaman zordur, eğer bir çaylaksanız, şu an bu belgeyi okumuyor olmalıydınız. <literal>:-)</literal> Unix'de yazılım geliştirme hakkında az bir şeyler bilmeye ihtiyacınız vardır, elbette bir sihirbaz olmanıza gerek yok.
    </para><para>
Herşeye rağmen kesin olan bir nokta vardır: düzgün bir şekilde bir Debian paketi oluşturmak ve sürdürmek için saatlerce emek harcamanız gerekmektedir. Hata yapmayın, sistemimizin çalışması için paket bakımcılarının teknik olarak yeterli ve gayretli olması gerekmektedir.
    </para><para>
Bu belge en küçük (başlangıçta belki de ilgisiz) adımı bile açıklayacak, ilk paketi yapmanıza yardımcı olacak ve daha sonra da bu paketin yeni sürümleri veya başka paketler için tecrübe kazanmanızı sağlayacaktır.
    </para><para>
Bu belgenin yeni sürümlerinin her zaman <link xlink:href="http://www.debian.org/doc/maint-guide/"/> adresinde ve <literal>maint-guide</literal> paketinden erişilebilir olması gerekir.
    </para>
    <sect2 xml:id="maint-guide-tr-s1.1" userlevel="chunkthis">
      <title>Geliştirme için gereken araçlar</title><para>
Herhangi bir şeye başlamadan önce, geliştirmek için kullanacağınız bazı ek paketlerin düzgün biçimde yüklendiğinden emin olmalısınız. Listenin `temel' veya `gerekli' gibi herhangi bir paketi içermediğini dikkate alınız; onların zaten kurulu olduğunu varsayıyoruz.
      </para><para>
Bu belgenin bu sürümü Debian 2.2 (`potato') ve 3.0 (`woody') dağıtımlarındaki paketlere göre güncellenmiştir.
      </para><para>
Aşağıdaki paketler standart Debian kurulumunda gelmektedir, dolayısiyle muhtemelen sisteminizde bulunmaktadır (bağımlı oldukları diğer ek paketlerle beraber). Gene de <userinput>dpkg -s </userinput><emphasis>paketadı</emphasis> ile kontrol etmelisiniz.
      </para><para><variablelist><varlistentry>
      <term><literal>dpkg-dev</literal></term><listitem><para>
Bu paket Debian kaynak paketlerini açmak (unpack), derlemek (build), karşıya yüklemek (upload) için gerekli araçları içerir. (<link linkend="tr-man1-dpkg-source"><userinput>dpkg-source(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>file</literal></term><listitem><para>
Bu kullanışlı araçla bir dosyanın türünü belirleyebilir. (<link linkend="tr-man1-file"><userinput>file(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>gcc</literal></term><listitem><para>
GNU C derleyicisi, eğer pek çok diğer yazılım gibi sizinki de C dilinde yazıldıysa gerelidir. (<link linkend="tr-man1-gcc"><userinput>gcc(1)</userinput></link> kılavuz sayfasına bakınız.) Bu paket ayrıca C önişlemcisi <command>cpp</command> (<link linkend="tr-man1-cpp"><userinput>cpp(1)</userinput></link> kılavuz sayfasına bakınız.) ve nesne dosyalarını çevirmek ve ilintilemek için kullanılan araçları içeren <literal>binutils</literal> (binutils-doc paketi içerisindeki <userinput>info binutils</userinput>'e bakınız) gibi çeşitli paketlere de nüfuz eder.
      </para></listitem></varlistentry><varlistentry>
      <term><literal>g++</literal></term><listitem><para>
GNU C++ derleyicisi, eğer yazılımınız C++ ile yazılmışsa gereklidir. (<link linkend="tr-man1-g++"><userinput>g++(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>libc6-dev</literal></term><listitem><para>
gcc'nin nesne dosyalarını oluştururuken ilintilemesi gereken C kütüphaneleri ve başlık dosyaları. (<xref linkend="glibc"/>'na bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>make</literal></term><listitem><para>
Genellikle bir yazılımın oluşturulması birkaç adım alır, aynı komutları tekrar tekrar yazmak yerine, bu yazılımı kullanarak `Makefile' dosyaları oluşturup işlemi otomatikleştirebilirsiniz. (<userinput>info make</userinput>'e bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>patch</literal></term><listitem><para>
Bu pek faydalı araç, farklılıklar listesi içeren bir dosyayı alır (<command>diff</command> uygulaması tarafından oluşturulmuş) ve onu orjinal dosyaya uygular, sonucunda da yamalı sürüm üretilir. (<link linkend="tr-man1-patch"><userinput>patch(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>perl</literal></term><listitem><para>
Perl, genellikle "Unix'in İsviçre Çakısı" olarak ifade edilen, günümüz Unix-benzeri sistemlerde en çok kullanılan betik dillerinden biridir. (<link linkend="tr-man1-perl"><userinput>perl(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry></variablelist></para><para>
 Muhtemelen aşağıdaki paketkeri de yüklemek isteyeceksiniz:
      </para><para><variablelist><varlistentry>
      <term><literal>autoconf</literal> ve <literal>automake</literal></term><listitem><para>
Pek çok yeni yazılım bu tür araçların yardımıyla önişleme tabi tutulan <filename>configure</filename> betikleri ve <filename>Makefile</filename> dosyaları  kullanmaktadır. (<xref linkend="autobook"/> ekitabına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>dh-make</literal> ve <literal>debhelper</literal></term><listitem><para>
<command>dh-make</command> örnek paketimizin iskeletini oluşturmak için gereklidir ve paketi oluşturuken de <command>debhelper</command> araçlarından bazılarını kullanacaktır. Bunlar paket oluşturmak için gerekli değildir, fakat ilk defa paket hazırlayan bakımcılar için şiddetle tavsiye edilmektedir. Başlangıçta ve sonrasında kontrol ederken bütün işlemi çok basit bir hale getirmektedir. (<link linkend="tr-man1-dh_make"><userinput>dh_make(1)</userinput></link>, <link linkend="tr-man1-debhelper"><userinput>debhelper(1)</userinput></link> kılavuz sayfalarına ve <filename>/usr/share/doc/debhelper/README</filename> dosyasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>devscripts</literal></term><listitem><para>
Bu paket, paket bakımcılarına yardımı olabilecek bazı hoş ve faydalı betikler içermektedir, fakat bunlar paket oluşturmak için gerekli değildir. (<filename>/usr/share/doc/devscripts/README.gz</filename> dosyasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>fakeroot</literal></term><listitem><para>
Bu araç yapım derleme aşamasının bazı yerlerinde root gibi davranmanıza izin vermektedir. (<link linkend="tr-man1-fakeroot"><userinput>fakeroot(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>gnupg</literal></term><listitem><para>
Paketleri sayısal olarak imzalamayı sağlayan bir araçtır. Bu eğer özellikle paketinizi başkalarına dağıtmak isterseniz önemlidir ve elbette çalışmanız Debian projesine dahil olunca da bunu yapıyor olacaksınız. (<link linkend="tr-man1-gpg"><userinput>gpg(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>g77</literal></term><listitem><para>
GNU Fortran 77 derleyicisi, eğer yazılımınız Fortran dilinde yazıldıysa gereklidir. (<link linkend="tr-man1-g77"><userinput>g77(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>gpc</literal></term><listitem><para>
GNU Pascal derleyicisi, eğer yazılımınız Pascal dilinde yazıldıysa gereklidir. Bu işte iyi olan ve işaret etmeye değer bir tanesi de <command>fp-compiler</command>, Özgür Pascal Derleyicisidir (Free Pascal Compiler). (<link linkend="tr-man1-gpc"><userinput>gpc(1)</userinput></link> ve <link linkend="tr-man1-ppc386"><userinput>ppc386(1)</userinput></link> kılavuz sayfalarına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>xutils</literal></term><listitem><para>
Genelde X11 uygulamalarını yapmak için yapılmış bazı yazılımlar, ayrıca bu yazılımlar bazı makro işlev kümelerinden Makefile dosyalarını üretmek için de kullanılır. (<link linkend="tr-man1-imake"><userinput>imake(1)</userinput></link> ve <link linkend="tr-man1-xmkmf"><userinput>xmkmf(1)</userinput></link> kılavuz sayfalarına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>lintian</literal></term><listitem><para>
Bu, siz Debian paketi yaptıktan sonra genel hataları bilmenizi sağlayan ve bulduğu hataları açıklayan Debian paket denetimcisidir. (<link linkend="tr-man1-lintian"><userinput>lintian(1)</userinput></link> kılavuz sayfasına ve <filename>/usr/share/doc/lintian/lintian.html/index.html</filename> dosyasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>linda</literal></term><listitem><para>
Bu da başka bir Debian paket denetimcisidir. (<link linkend="tr-man1-linda"><userinput>linda(1)</userinput></link> kılavuz sayfasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>pbuilder</literal></term><listitem><para>
Bu paket <literal>chroot</literal> ortamını oluşturmak ve bakımını yapmak için gerekli paketleri içerir. Debian paket derleyici, bu chroot ortamında, gerekli derleme bağımlılıklarının doğrulanmasını ve FTBFS hatalarından kaçınabilmeyi sağlar. (<link linkend="tr-man1-pbuilder"><userinput>pbuilder(1)</userinput></link> ve <link linkend="tr-man1-pdebuild"><userinput>pdebuild(1)</userinput></link> kılavuz sayfalarına bakınız.)
      </para></listitem></varlistentry></variablelist>
      </para><para>
Aşağıdakiler bu belge ile beraber okumanız gereken <emphasis>çok önemli</emphasis> belgelerdir:
      </para><para><variablelist><varlistentry>
      <term><literal>debian-policy</literal></term><listitem><para>
Politika, Debian arşivinin yapısı ve içeriğiyle, bazı işletim sistemi meseleleriyle, Dosya Hiyerarşı Standardı (Filesystem Hierarchy Standard) (hangi dosya ve dizin nerede olmalı) ile ilgili açıklamalar içerir. Sizin için en önemlisi, dağıtımda yer alması için bir pakette olması gerekenleri açıklamasıdır. (<link xlink:href="http://www.debian.org/doc/debian-policy/"/>  veya <filename>/usr/share/doc/debian-policy/policy.html/index.html</filename> dosyasına bakınız.)
      </para></listitem></varlistentry><varlistentry>
      <term><literal>developers-reference</literal></term><listitem><para>
Paketlemenin teknik ayrıntıları dışındaki herşey; arşivin yapısı, nasıl yeniden adlandırılacağı, öksüz (orphan), toplama paketler, NMU'ların nasıl yapıldığı, hatalarla nasıl ilgilenilir, en iyi paketleme pratikleri, ne zaman ve nereye karşıya yükleme yapılmalı, v.b. gibi. (<link xlink:href="http://www.debian.org/doc/manuals/developers-reference/index.en.html"/> veya <filename>/usr/share/doc/developers-reference/index.en-us.iso-8859-1.html</filename> dosyasına bakınız.)
      </para></listitem></varlistentry></variablelist>
      </para><para>
Yukarıda verilen kısa açıklamalar sadece her paketin ne amaçla kullanıldığını belirtmek için vermiştir. Devam etmeden önce lütfen her yazılımın belgelendirmesini etraflıca, en azından standart kullanımını, okuyunuz. Şu an çok zor gözükebilir, ama ilerde okuduğunuza memnun olacaksınız.
      </para><para><note><para>
<literal>debmake</literal>, <literal>dh-make</literal> benzeri işlevler yapan araçları içeren bir pakettir, fakat ona özel kullanım bu belge içinde anlatılmayacaktır, çünkü artık önerilmemektedir. Lütfen daha ayrıntılı bilgi edinmek için Debmake Kılavuzuna (<link xlink:href="http://people.debian.org/~jaldhar/make_package1.html"/>) bakınız.)
      </para></note></para>
    </sect2><sect2  xml:id="maint-guide-tr-s1.2" userlevel="chunkthis">
      <title>Diğer bilgiler</title><para>
Yapabileceğiniz iki tür paket vardır, ikilik ve kaynak. Kaynak paket, içerisinde derlenince yazılıma dönüşen kodları barındırır. İkilik paketse sadece bitmiş yazılımı. Programın kaynağı ile yazılımın kaynak paketi gibi kavramları karıştırmayın! Lütfen terminoloji hakkında daha ayrıntılı bilgi almak için diğer el kitaplarını okuyunuz
      </para><para>
Debian'da, `bakımcı' (`maintainer') terimi paketi yapan için kullanılır, `üst düzey geliştirici' (`upstream author') yazılımı yazan için, `üst düzey bakımcı' (`upstream maintainer') hali hazırda Debian dışında paket hazırlayan için kullanılır. Genellikle üst düzey geliştirici ve de üst düzey bakımcı aynı kişidir - ve bazen de paket bakımcısı bile aynı kişidir. Eğer bir yazılım yaptıysanız ve de Debian içerisine girmek istiyorsanız, bir paket bakımcısı olmak için uygulamanızı gönderme konusunda kendinizi özgür hissedin.
      </para><para>
Paketinizi kurguladıktan sonra (veya kurgularken), eğer yazılımınızın bir sonraki dağıtımda yer almasını istiyorsanız resmi Debian paket bakımcısı olmak zorundasınız (eğer yazılım faydalıysa neden olmasın?). Bu süreç Geliştirici Başvuru Kılavuzunda (Developer's Reference) anlatılmıştır. Lütfen okuyun.
      </para>
    </sect2>
  </sect1>

  <sect1  xml:id="maint-guide-tr-s2">
    <title>İlk adımlar</title>
    <sect2 xml:id="maint-guide-tr-s2.1" userlevel="chunkthis">
      <title>Oluşturacağınız paketi seçin</title><para>
Muhtemelen oluşturmak istediğiniz paketi seçmişsinizdir. Yapmanız gereken ilk şey paketin hali hazırdaki dağıtımda olup olmadığına bakmaktır. Eğer `kararlı' (stable) dağıtımı kullanıyorsanız, belki de en iyisi paket arama sayfasına (<link xlink:href="http://www.debian.org/distrib/packages"/>) gitmenizdir. Eğer şu anki `kararsız' (unstable) dağıtımı kullanıyorsanız, şu komutları kullanın:
      </para><para>
<screen>dpkg -s yazılım
dpkg -l '*yazılım*'
</screen>
      </para><para>
Eğer paket halihazırda mevcutsa, o zaman onu yükleyin! <literal>:-)</literal> Eğer öksüz durumuna (orphaned) düştüyse - eğer paket bakımcısı "Debian QA Group"'a geçmişse - onu oradan almalısınız. <link xlink:href="http://www.debian.org/devel/wnpp/orphaned">Öksüz paketler listesine</link> ve <link xlink:href="http://www.debian.org/devel/wnpp/rfa_bypackage">sahiplenilmeyi (evlat edinilme) bekleyen paketler listesine</link> paketin gerçekten de sahiplenilmek için boşta olup olmadığına bakın.
      </para><para>
Eğer bir paketi sahiplenebilecekseniz, kaynak kodlarını edinin (<userinput>apt-get source </userinput><varname>paketadı</varname> gibi bir şeyle) ve inceleyin. Bu belge ne yazık ki paketlerin sahiplenilmesiyle ilgili ayrıntılı bilgi içermemektedir. Ne mutlu ki, paketin nasıl çalıştığı ile ilgili zor zamanlar geçirmenize gerek kalmayacaktır, çünkü birileri başlangıç ayarlarını sizin için yapmıştır. Okumaya devam edin, yine de, aşağıdaki pek çok tavsiye sizin durumunuz için uygulanabilir olacaktır.
      </para><para>
Eğer paket yeniyse ve siz de onu Debian içerisinde görmeye karar verdiyseniz, aşağıdaki şekilde ilerleyin:
      </para><para><itemizedlist>
        <listitem><para>
<link xlink:href="http://www.de.debian.org/devel/wnpp/being_packaged">Üzerinde çalışılan paketler listesini</link> paket üzerinde herhangi biri çalışıyor mu diye kontrol edin. Eğer halihazırda birileri çalışıyorsa, ihtiyaç duyarsanız onlarla iletişime geçin. Ya da henüz bir paket bakımcısı atanmamış başka bir paket bulun.
        </para></listitem><listitem><para>
Programların bir lisansı olmalıdır ve mümkünse lisans <link xlink:href="http://www.debian.org/social_contract#guidelines">Debian Özgür Yazılım Anahatları</link>nda belirtildiği gibi özgür (free) olsun. Eğer bu kurallardan herhangi birini sağlamazsa, fakat herhangi bir şekilde dağıtılabiliyorsa, `contrib' veya `non-free' bölümlerine dahil edilebilir. Eğer nereye ait olduğundan emin değilseniz, lisans metnini <email>debian-legal@lists.debian.org</email> adresine postalayarak yardım isteyiniz.
        </para></listitem><listitem><para>
Programlar kesinlikle setuid root çalışmamalıdır, hatta daha iyisi setuid veya setgid'e herhangi bir şey için ihtiyaç duymamalıdır.
        </para></listitem><listitem><para>
Program bir artalan süreci (deamon) veya <filename>*/sbin</filename> dizinleri altına giden bir yazılım ya da root olarak bir port açan bir yazılım olmamalıdır.
        </para></listitem><listitem><para>
Program ikilik çalışabilir halde olmalıdır, kütüphaneler idare etmek için daha zordur.
        </para></listitem><listitem><para>
İyi şekilde belgelendirilmiş ve/veya kodu anlaşılabilir olmalıdır. (örn. kafa karıştırıcı olmamalı)
        </para></listitem><listitem><para>
Programın yazar/yazarlarıyle iletişim kurarak paketlenmesi konusunda bir anlaşma sağlamalısınız. Herhangi bir, yazılıma özgü hata durumunda, yazar/yazarlar ile görüş alışverişinde bulunmak önemlidir, dolayısıyla geliştirilmesi durmuş yazılım parçalarını paketlemeye çalışmayın.
        </para></listitem><listitem><para>
Ve en sonuncu fakat en önemsiz olmayanı, uygulamanın çalıştığını bilmeli, bir kaç kere denemelisiniz.
        </para></listitem></itemizedlist>
      </para><para>
Elbette ki, bunlar sadece güvenlik ölçekleridir ve sizleri setuid hayalet yazılımında bir hata yapmanız durumunda öfkeli kullanıcılardan korumayı amaçlamaktadır... Paketleme konusunda biraz daha tecrübe kazandıktan sonra, bu tür paketler yapabileceksiniz, fakat tecrübeli geliştiriciler bile şüpheye düştükleri zaman debian akıl hocaları listesine (debian-mentors mailing list) başvurmaktadır. Oradaki insanlar da memnuniyetle yardım edeceklerdir.
      </para><para>
Bunlar hakkına daha ayrıntılı bilgi için, Geliştiricilerin Başvuru Kılavuzuna (Developer's Reference) bakınız.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s2.2" userlevel="chunkthis">
      <title>Programı edinin ve deneyin</title><para>
Yapılacak ilk iş, paketi bulup indirmektir. Yazarının sayfasından kaynak dosyasını aldığınızı varsayıyorum. Özgür Unix yazılımları için kaynaklar genellikle .tar.gz uzantısı ile tar/gzip formatında gelir ve içerisinde yazılım-sürüm isimli kaynak kodları barındıran bir altdizin içerir. Eğer yazılımınızın kaynağı buna benzer biçimlerden biriyle geldiyse (örn. dosya adı ".Z" veya ".zip" ile bitiyorsa), uygun araçlarla onu açın veya emin değilseniz nasıl açacağınızı debian akıl hocaları (debian-mentors) listesine sorun (ipucu: `file arşiv.uzantı`).
      </para><para>
Örnek olarak, bir X GTK+ dosya yöneticisi olan `gentoo' isimli bir yazılım kullanacağım. Bu paketin zaten paketlenmiş olduğunu ve bu yazı yazılırken oldukça değişikliğe uğradığını dikkate alınız.
      </para><para>
Ev dizininiz altında 'debian' veya 'deb' veya uygun bulduğunu herhangi bir isimde (örn. sadece <filename>~/gentoo/</filename> bu durum için yeterli olacaktır) bir dizin oluşturunuz. İndirmiş olduğunuz arşivi oraya yerleştirip açınız (`<literal>tar xzf gentoo-0.9.12.tar.gz</literal>` ile). Hiç hata olmadığından emin olun, hatta "ilgisiz" olan hatalar bile, çünkü başkalarının sistemlerinde bu tür açma araçlarının bu hataları gözardı etmesi ya da etmemesinden dolayı kullanımlarında sorunlar olabilmektedir.
      </para><para>
Artık 'gentoo-0.9.12' isimli yeni bir dizininiz var. Bu dizine geçip, ayrıntılı bir şekilde belgelendirmesini okuyunuz. Genellikle <filename>README*, INSTALL*, *.lsm, *.html</filename> isimli dosyalar mevcuttur. Düzgün bir şekilde yazılımı derleyip yüklemek için gerekli talimatları bulmalısınız (büyük ihtimalle <filename>/usr/local/bin</filename> dizinine yükleyeceğinizi varsayacaklardır; bunu yapmayacak, ileride göreceğimiz gibi <xref linkend="maint-guide-tr-s3.1"/> işlemini gerçekleştireceksiniz).
      </para><para>
Süreç yazılımdan yazılıma değişir, fakat modern yazılımların çoğu kaynak paketini sisteminize göre yapılandırıp, sisteminizde derlemeye uygun hale getiren bir `yapılandırma' (<filename>configure</filename>) betiği ile gelir. <filename>./configure</filename> ile yapılandırıldıktan sonra genelde paket içeriği <userinput>make</userinput> ile derlenir. Bazıları dahili kontrol yapılmasını sağlayan <userinput>make check</userinput>'i destekler. Hedef dizine yükleme genelde <userinput>make install</userinput> ile olur.
      </para><para>
Şimdi yazılımınızı derleyip çalıştırmaya çalışın. Düzgün çalıştığıntan ve derleme veya çalışma esnasında hatalar oluşmadığından emin olun.
      </para><para>
Ayrıca, derleme yaptığınız dizini temizlemek için genellikle <userinput>make clean</userinput> (daha iyisi <userinput>make distclean</userinput>) kullanabilir, hatta bundan önce, bazan <userinput>make uninstall</userinput> ile sistemden kurulu olan dosyaları kaldırabilirsiniz.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s2.3" userlevel="chunkthis">
      <title>Paket adı ve sürümü</title><para>
Paketlemeye tamamiyle temizlenmiş (ilk hali bozulmamış) ya da arşiv dosyasından yeni çıkarılmış bir kaynak diziniyle başlamalısınız.
      </para><para>
Paketin düzgün şekilde derlenebilmesi için orjinal adını küçük harflere çevirmelisiniz (eğer halihazırda değilse) ve de kaynak dizininin ismini <varname>paketadı-sürüm</varname> şeklinde değiştirmelisiniz.
      </para><para>
Eğer yazılım ismi birden fazla sözcük içeriyorsa, onları tek kelime haline gelecek şekilde küçültün veya bir kısaltma haline getirin. Örneğin, "John'un X için küçük metin düzenleyicisi" gibi bir isim, johnedx veya jke4x şeklinde ya da, belli bir karakter sayısını, mesela 20, aşmayacak şekilde (takdirinize kalmış) isimlendirilebilir.
      </para><para>
Ayrıca yazılımın asıl sürümüne bakın (paket ismine konulacak olan sürüm bilgisi). Eğer bu yazılım parçası X.Y.Z gibi sürüm numaralarıyla numalarandırılmak yerine bir tarih bilgisi yazılmışsa, bu tarih bilgisinin önüne "0.0." (üst geliştiricilerin bir gün 1.0 ve tarih içeren bir günlük sürüm çıkarabileceklerini göz önüne alarak "0.0.") koyarak sürüm numarası olarak kullanmaktan çekinmeyin. Dolayısiyle, yayınlanma tarihi 19 Aralık 1998 ise, 0.0.19981219 dizgesini sürüm numarası olarak kullanabilirsiniz.
      </para><para>
Bazı yazılımlar hiç numaralandırılmazlar, böyle durumlarda üst düzey geliştiricilerle iletişime geçip nasıl bir sürüm izleme yöntemi kullandıklarını öğrenmeniz gerekir.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s2.4" userlevel="chunkthis">
      <title>İlk "debianlaştırma"</title><para>
Programın kaynak dizininde olduğundan emin olun ve şunu komutu girin:
      </para><para>
<screen>dh_make -e <emphasis>kullanıcı@adres</emphasis> -f ../gentoo-0.9.12.tar.gz
</screen>
      </para><para>
Elbette ki, <varname>kullanıcı@adres</varname> kısmını <filename>ChangeLog</filename> ve diğer dosyalarda yer alması için kendi e-posta adresinizle, dosya adını da kendi orjinal kaynak arşivinizle değiştireceksiniz. (Ayrıntılar için <link linkend="tr-man1-dh_make">dh_make(1)</link> kılavuz sayfasına bakınız.)
      </para><para>
Bazı bilgiler su yüzüne çıkacaktır. Size ne tür bir paket oluşturmak istediğinizi soracaktır. Gentoo tek bir ikilik pakettir - sadece bir ikilik, yani bir <filename>.deb</filename> dosyası oluşacaktır - dolayısiyle ilk seçeneği `s' anahtarı ile seçeceğiz, ekrandaki bilginin doğruluğunu kontrol edip &lt;enter>'a basınız.
      </para><para>
<command>dh_make</command>'in bu çalışmasından sonra, aslen Debian olmayan kaynak paketin oluşturulmasına yardımcı olacak <filename>diff.gz</filename>'li bir dosya ile üst düzey geliştiricinin sıkıştırılmış arşiv dosyasının (tarball) bir kopyası  <filename>gentoo_0.9.12.orig.tar.gz</filename> adıyla ana dizinde oluşturulur. Lütfen dosya adındaki 2 önemli noktaya dikkat ediniz:
      </para><para><itemizedlist>
        <listitem>
Paket adı, sürüm numarasından "_" ile ayrılmıştır.
        </listitem><listitem>
<filename>tar.gz</filename>'den önce bir <filename>orig.</filename> vardır.
        </listitem></itemizedlist>
      </para><para>
Bir kez daha hatırlatalım, yeni bir paket bakımcısı olarak karmaşık paketlerin yapımından vazgeçmeniz istenir, örn.,
      </para><para><itemizedlist>
        <listitem>çoklu ikilik paketler</listitem>
        <listitem>kütüphane paketleri</listitem>
        <listitem>biçimi ne <filename>tar.gz</filename> ne de <filename>tar.bz2</filename> olan kaynak dosyalar</listitem>
        <listitem>dağıtılamayan içeriğe sahip sıkıştırılmış kaynak dosyalar</listitem>
      </itemizedlist></para><para>
Bunlar da çok zor değildir, fakat biraz daha bilgiye ihtiyaç gösterirler ve biz de burada herşeyi anlatmak istemiyoruz.
      </para><para><warning><para>
<command>dh_make</command>'i sadece bir kere çalıştırmanız gerektiğine dikkat edin, çünkü halihazırda "debianlaşmış" dizinde tekrar çalışınca düzgün davranmayacaktır. Bu da aynı zamanda yazılımınızın yeni düzeltim veya sürümlerini hazırlarken farklı bir yöntem kullanmanız gerektiğinin de işaretçisidir. Bu konu ileride <xref linkend="maint-guide-tr-s9"/> bölümünde anlatılacaktır.
      </para></warning></para>
    </sect2>
  </sect1><sect1 xml:id="maint-guide-tr-s3">
    <title>Kaynak paketinde değişiklik</title><para>
Normal olarak yazılımlar kendilerini <filename>/usr/local</filename> dizini altındaki dizinlere yükler. Fakat, bu kısım sistem yöneticilerinin (veya kullanıcıların) özel kullanımlarına ayrıldığı için, Debian paketleri bu dizini kullanmamalıdır. Bu da paketin derlenme sistemine, genel olarak da Makefile ile başlayarak bakmak demektir. Makefile, yazılımın derlenmesini ve kurulmasını otomatikleştirecek bir <link linkend="tr-man1-make"><command>make(1)</command></link> betiğidir. Makefile ile ilgili daha ayrıntılı bilgi için <xref linkend="maint-guide-tr-s4.4"/> bölümüne bakınız.
    </para><para>
Eğer yazılımınız GNU <link linkend="tr-man1-automake"><command>automake(1)</command></link> ve/veya <link linkend="tr-man1-autoconf"><command>autoconf(1)</command></link> kullanıyorsa, ki bu da kaynak paketinin <filename>Makefile.am</filename> ve/veya <filename>Makefile.in</filename> dosyalarını içermesi demektir, sırasıyla, bu dosyaları değiştirmeniz gerekir. Bunun sebebi, her bir <command>automake</command> çağrımının  <filename>Makefile.am</filename> dosyasında üretilen bilgilerin <filename>Makefile.in</filename> dosyasına tekrar yazılmasını, her bir <command>./configure</command> çağrımının da <filename>Makefile.in</filename> dosyalarında üretilen bilgi ile benzer işlemi <filename>Makefile</filename> dosyasıda gerçekleştirecek olmasıdır. <filename>Makefile.am</filename> dosyasını düzenlemek biraz yöntemleri vardır; çalıştırılabilirler $PATH'e eklenir, ayrıca belgeleri ve kılavuz sayfalarını da yaygın kullanılan yerlerde bulursunuz. Yine de, bu şekilde yaptığınız zaman, yazılımınız sisteminizde var olan herşeyin arasına yüklenecektir. Bu da paketleme araçlarını zora sokacak ve hangi dosyalar pakete ait hangileri değil tespiti zorlaşacaktır.
    </para><para>
Bunun için farklı bir şeyler yapmalısınız: yazılımı, paketleme araçlarının çalışan bir <filename>.deb</filename> paketi yapabileceği bir geçici alt dizine kurun. Bir kullanıcının bu paketi kurmak istemesi durumunda, bu dizinin içerdiği herşey  sistemine kurulacaktır, tek farkla ki, <command>dpkg</command> dosyaları geçici alt dizine değil kök dizin altına kuruyor olacaktır.
    </para><para>
Bu geçici dizin kaynak dizin hiyerarşisi içinde, <filename>debian/</filename> dizini olarak oluşturulur. Genelde <filename>debian/tmp</filename> veya <filename>debian/paketadı</filename> olarak isimlendirilir.
    </para><para>
Program kurulumunu <filename>debian/paketadı</filename> içine yüklenmiş şekilde yapmanız gerekse de, kök dizin altına yerleştirilince de düzgün çalışması gerekmektedir, örn. bir <filename>.deb</filename> paketinden kurulum yaparken. Bu bakımdan paket dosyalarına derleme sisteminin <filename>/home/me/deb/gentoo-0.9.12/usr/share/gentoo</filename> gibi dizgeyi uygulamasına izin vermemelisiniz.
    </para><para>
GNU autoconf'u kullanan yazılımlarla bu biraz daha kolay olacaktır. Böyle yazılımların çoğu, Örneğin <filename>/usr</filename> gibi belli bir öneki uhdesinde tutarken, kurulumun rasgele bir alt dizine yapılabilmesine imkan veren öntanımlı bir yapılandırma sistemine sahip Makefile dosyaları içeririrler.  <command>dh_make</command>, yazılımınızın autoconf kullandığını saptarsa, komutları bunu otomatik olarak yapması için ayarlayacaktır. Böylece, bu bölümün devamını okumadan geçebileceksiniz. Fakat diğer yazılım türleri için Makefile dosyalarını incelemeniz ve gereken düzenlemeleri kendiniz yapmanız gerekecektir.
    </para><para>
İşte gentoo'nun Makefile dosyasının ilgili kısmı:
    </para><para>
<screen>
# Where to put binary on 'make install'?
# <emphasis>'make install' çalıştırılabilirleri nereye koyacak?</emphasis>
BIN     = /usr/local/bin

# Where to put icons on 'make install'?
# <emphasis>'make install' simgeleri nereye koyacak?</emphasis>
ICONS   = /usr/local/share/gentoo
</screen>
    </para><para>
Dosyaların <filename>/usr/local</filename> altına yükleneceğini görüyoruz. Bu yolları şu şekilde değiştirin:
    </para><para>
<screen>
# Where to put binary on 'make install'?
BIN     = $(DESTDIR)/usr/bin

# Where to put icons on 'make install'?
ICONS   = $(DESTDIR)/usr/share/gentoo
</screen>
    </para><para>
Fakat neden bu dizin de bir başkası değil? Çünkü Debian paketleri dosyalarını asla <filename>/usr/local</filename> altına yüklemez - bu hiyerarşi sistem yöneticileri için ayrılmıştır. Bunun yerine, bu tür dosyalar Debian sistemlerinde <filename>/usr</filename> altına gider.
    </para><para>
İkilikler, simgeler, belgelendirme, v.b. ile ilgili daha kesin yerleştirme bilgisi Dosyasistemi Hiyerarşisi Standardında (Filesystem Hierarchy Standard) belirtilmiştir. Size <filename>/usr/share/doc/debian-policy/fhs/</filename> dizinindekileri okumanızı ve paketinizle ilgili kısımları incelemenizi tavsiye ederim.
    </para><para>
O halde, ikilik dosyayı <filename>/usr/local/bin</filename> yerine <filename>/usr/bin</filename>'e, kılavuz sayfalarını <filename>/usr/local/man/man1</filename> yerine <filename>/usr/share/man/man1</filename>'e, v.s. yüklemeliyiz. gentoo'nun makefile'ında bir kılavuz sayfası belirtilmediğini hatırlayın, fakat <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link> her yazılımın bir kılavuz sayfası olmasını gerektirdiğinden, ilerde bir tane yapıp <filename>/usr/share/man/man1</filename> altına koyacağız.
    </para><para>
Bazı yazılımlar bu tür yolları belirtmek için makefile değişkenlerini kullanmaz. Bu da doğru yerleşimleri kullanmaları için asıl C kodunu düzenlemek zorunda kalacağınız anlamına gelir. Fakat nereyi araştıracaksınız, tam olarak ne için? Bunu aşağıdakini uygulayarak öğrenebilirsiniz:
    </para><para>
<screen>grep -rn usr/local/lib *.[ch]</screen>
    </para><para>
Grep kaynak ağacında özyinelemeli olarak çalışacak ve arananla ilgili bir oluşum olduğunda size dosya adını ve satırı söyleyecektir.
    </para><para>
Şu dosyaları düzenleyiniz ve <filename>/usr/local/*</filename> satırlarını <filename>usr/*</filename> ile değiştirin. Kodun geri kalan kısmına zarar vermediğinizden emin olun. <literal>:-)</literal>
    </para><para>
Bundan sonra hedef yükleme yerini bulmalısınız (<literal>install:</literal> ile başlayan satırı araştırın, genelde işe yarar) ve tüm başvuruları yukarında Makefile dosyasında olduğu gibi yeniden adlandırın. Önceden, gentoo'nun kurulum hedefi şu şekilde idi:
    </para><para>
<screen>
install: gentoo
        install ./gentoo $(BIN)
        install icons/* $(ICONS)
        install gentoorc-example $(HOME)/.gentoorc
</screen>
    </para><para>
Değiştirdikten sonra şu şekilde olur:
    </para><para>
<screen>
install: gentoo-target
        install -d $(BIN) $(ICONS) $(DESTDIR)/etc
        install ./gentoo $(BIN)
        install -m644 icons/* $(ICONS)
        install -m644 gentoorc-example $(DESTDIR)/etc/gentoorc
</screen>
    </para><para>
Elbetteki farketmişsinizdir, artık kural setindeki diğerlerinden önce bir <command>install -d</command> komutu bulunmaktadır. Orjinal makefile bunu içermemektedir, çünkü genelde <command>make install</command>'ın çalıştırdığı bir sistemde <filename>/usr/local/bin</filename> ve diğer dizinler bulunmaktadır. Yine de, kendi boş (varolmayan) dizinimize kurduğumuz için, bu dizinlerin herbirini oluşturmamız gerekecektir.
    </para><para>
Kural kümesinin sonuna bazı başka şeyler de ekleyebiliriz, üst düzey geliştiricinin bazen atlatığı ek belgelendirmenin kurulumu gibi.
    </para><para>
<screen>
        install -d $(DESTDIR)/usr/share/doc/gentoo/html
        cp -a docs/* $(DESTDIR)/usr/share/doc/gentoo/html
</screen>
    </para><para>
Dikkatli bir okuyucu <command>install:</command> satırındaki <literal>gentoo</literal>'yu <literal>gentoo-target</literal>'e çevirdiğimi farketmiştir. Buna ilişkisiz hata onarımı (unrelated bug fix) denir <literal>:-)</literal>.
    </para><para>
Her ne zaman Debian paketiyle ilgili bir değişiklik yaparsanız, üst düzey geliştiriciye de de bunu yollamayı unutmayın ki böylece yazılımın yeni sürümünde yer alarak herkese faydalı olabilsin. Ayrıca, göndermeden önce yapacağınız düzeltmeleri sadece Debian ya da Linux'a (ve hatta Unix'e!) özgün olmaması gerektiğini unutmayın - onları taşınabilir yapın. Bu da düzeltmelerinizin uygulanması kolaylaştırır.
    </para><para>
<filename>debian/*</filename> dosyalarını göndermeniz gerekmemektedir.
    </para>
    <sect2 xml:id="maint-guide-tr-s3.1" userlevel="chunkthis">
      <title>Kütüphaneleri değiştirmek</title><para>
Bir genel sorun daha vardır: kütüphaneler genelde platformdan platforma değişmektedir. Örneğin, bir Makefile Debian sisteminde olmayan bir kütüphaneye başvuruyor olabilir. Bu durumda, onun Debian sisteminde var olan bir kütüphaneye, aynı işi yapacak şekilde başvurmasını sağlamalıyız.
    </para><para>
Dolayısiyle, Makefile (veya Makefile.in) dosyasınızda şöyle bir satır varsa (ve yazılımınız derlenmiyorsa):
    </para><para>
<screen>        LIBS = -lcurses -lbirsey -lbaskabirsey
</screen>
    </para><para>
Şu şekilde değiştirin ve muhtemelen çalışacaktır:
    </para><para>
<screen>        LIBS = -lncurses -lbirsey -lbaskabirsey
</screen>
    </para><para>
(Yazar, şu an <filename>libcurses.so</filename> sembolik bağı ile gelen <filename>libncurses</filename> paketiyle ilgili olarak bunun en iyi örnek olmadığını farkındadır, fakat daha iyisini düşünememektedir. Önerilere her zaman açığız <literal>:-)</literal>.)
      </para>
    </sect2>
  </sect1><sect1 xml:id="maint-guide-tr-s4">
    <title><literal>debian/</literal> altında gerekli olanlar</title><para>
Programın kaynak dizininin altında yeni bir dizin vardır, <filename>debian</filename> dizini. Paketin davranışını özelleştirmek için düzenleyebileceğimiz bazı dosyalar bu dizinde bulunmaktadır. En önemlileri, tüm paketler için gerekli olan, <filename>control</filename>, <filename>changelog</filename>, <filename>copyright</filename> ve <filename>rules</filename>'dur.
     </para>
    <sect2 xml:id="maint-guide-tr-s4.1" userlevel="chunkthis">
      <title><filename>control</filename> dosyası</title><para>
Bu dosya, paket yönetimi için kullanılacak olan <command>dpkg</command>, <command>dselect</command> ve diğer paket yönetim araçlarına gereken değerleri barındırır.
    </para><para>
<command>dh_make</command>'in bizim için oluşturduğu <filename>control</filename> dosyası:
    </para><para>
<screen linenumbering = 'numbered'>
Source: gentoo
Section: unknown
Priority: optional
Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
Build-Depends: debhelper (&gt;&gt; 3.0.0)
Standards-Version: 3.6.2

Package: gentoo
Architecture: any
Depends: ${shlibs:Depends}
Description: &lt;insert up to 60 chars description&gt;
  &lt;insert long description, indented with spaces&gt;
</screen>
    </para><para>
1-6 arası satırlar kaynak paketle ilgili kontrol bilgileridir.
    </para><para>
1. satır: kaynak paketin adı,
    </para><para>
2. satır: kaynak paketin dağıtımda yer aldığı bölümdür.
    </para><para>
Farkettiğiniz gibi, Debian bölümlere ayrılmıştır: main (özgür yazılım), non-free (özgür olmayan yazılım) ve contrib (özgür olmayan yazılıma bağımlı özgür yazılım). Bunların altında, kısaca paket türünü açıklayan mantıksal alt kısımlar vardır. Sadece-sistem yöneticisi için `admin', temel araçlar için `base', yazılımlama araçları için `devel', belgelendirme için `doc', kütüphaneler için `libs', elektronik posta istemci ve arka planda çalışan art alan yazılımları için `mail', ağ uygulamaları ve artalan süreçleri için `net', herhangi bir yere uymayan X11 yazılımları için `x11' vs. alt bölümleri bulunmaktadır.
    </para><para>
Öyleyse onu x11 olarak değiştirelim. ("main/" öneki ima edilmiştir, dolayısiyle onu atlayabiliriz.)
    </para><para>
3. satır: kullanıcının bu paketi yüklemesinin ne kadar önemli olduğunu belirtmektedir. Bu alanı nasıl ayarlayacağınıza karar vermek için <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>na bakınız. "optional" önceliği genellikle yeni paketler için kullanılmaktadır.
    </para><para>
Section ve priority, paketleri sıralayacak veya öntanımlıları seçecekleri zaman, <command>dselect</command> diğer kullanıcı araçları tarafından kullanılır. Bir kere paketi Debian'a yükledikten (upload) sonra, arşiv sürdürücüleri tarafından bu iki alanın değeri değiştirilebilir, ki bu da size e-posta ile bildirilir.
    </para><para>
Bu, normal öncelikli bir paket olduğu ve herhangi bir şeyle çakışmadığı için, "optional" olarak bırakacağız.
    </para><para>
4. satır: paket bakımcısının adı ve e-posta adresidir. Bu kısmı bir epostadaki geçerli bir  "To: " başlığı olarak düzenlemeniz gerekir, çünkü paketi Debian'a gönderdikten sonra, hata izleme sistemi hataları göndermek için bu e-posta adresini kullanacaktır. Virgül, &amp; ve parantez kullanımından kaçının.
    </para><para>
5. satır: paketinizin derlenebilmesi (build) için gerekli paketleri listelemektedir. gcc ve make gibi bazı paketler göz ardı edilmiştir; ayrıntılar için <literal>build-essential</literal> paketini inceleyiniz. Eğer paketinizi yapmak için  standartdışı bir derleyici veya başka araçlar gerekiyorsa, bunu `Build-Depends' satırına eklemelisiniz. Birden çok girdi varsa, virgüllerle ayrılır; bu alanın sözdizimi hakkında bilgi edinmek için ikilik paketlerin bağımlıklıklar ile ilgili açıklamalarını okuyunuz.
    </para><para>
Bu kısımda ayrıca Build-Depends-Indep (bağımlılıklar), Build-Conflicts (çakışmalar) ve diğer alanlar olabilir. Bu veri Debian otomatik paket yapım sistemi tarafından diğer bilgisayar platformları için ikilik paket yapımında kullanılacaktır. Derleme bağımlılıkları (build-dependency) ile ilgili bilgi edinmek için <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>na, diğer platformlar (mimariler) ve bunlara yazılımların uyarlanması ile ilgili bilgi edinmek için Geliştiricilerin Başvuru Kılavuzuna (Developers' Reference) bakınız.
    </para><para>
Paketinizin derlenebilmesi için hangi paketlere ihtiyaç duyduğunu bulmakta kullanabileceğiniz küçük bir kod:
    </para><para>
<screen>
strace -f -o /tmp/log ./configure
# Paket autoconf kullanmıyorsa, ./configure yerine make kullanılsın
for x in `dpkg -S $(grep open /tmp/log|\
        perl -pe 's!.* open\(\"([^\"]*).*!$1!' |\
        grep "^/"| sort | uniq|\
        grep -v "^\(/tmp\|/dev\|/proc\)" ) 2&gt;/dev/null|\
        cut -f1 -d":"| sort | uniq`; \
      do \
        echo -n "$x (&gt;=" `dpkg -s $x|grep ^Version|cut -f2 -d":"` "), "; \
      done
</screen>
    </para><para>
<literal>/usr/bin/foo</literal> için derleme bağımlılıklarını el yordamıyla bulmak isterseniz,
    </para><para>
<screen>objdump -p <emphasis>/usr/bin/foo</emphasis> | grep NEEDED
</screen>
    </para><para>
komutunu, listelenmiş her kütüphane için (örn, <literal>libfoo.so.6</literal>),
    </para><para>
<screen>dpkg -S libfoo.so.6
</screen>
    </para><para>
komutunu kullanabilirsiniz.  Daha sonra da her paketin <filename>-dev</filename> sürümünü <literal>Build-deps</literal> girdisi olarak alırsınız. Eğer bu amaç için <command>ldd</command>'yi kullanırsanız, dolaylı kütüphane bağımlılıklarını da rapor edeceğinden, bu gereğinden fazla derleme bağımlılığına sebep olacaktır.
    </para><para>
Gentoo ayrıca derleme aşamasında <filename>xlibs-dev, libgtk1.2-dev</filename> ve <filename>libglib1.2-dev</filename>'e ihtiyaç duymaktadır, <filename>debhelper</filename>'ın yanına onları da buraya ekleyeceğiz.
    </para><para>
6. satır: paketin uyduğu Debian Politika standartlarının sürümüdür; paketinizi yaparken okuduğunuz <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>nun sürüm numarasıdır.
    </para><para>
8. satır: ikilik paketin adıdır. Bu genellikle kaynak paketin adıyla aynıdır, ama hep böyle olması gerekmemektedir.
    </para><para>
9. Satır: ikilik paketin derlenebileceği işlemci mimarisini açıklamaktadır. Bu kısmı "any" olarak bırakacağız, çünkü <link linkend="tr-man1-dpkg-gencontrol"><command>dpkg-gencontrol(1)</command></link> bu kısmı paketin delenebileceği mimariye uygun değerlerle dolduracaktır.
    </para><para>
Eğer paketiniz mimariden bağımsızsa (mesela, bir kabuk veya bir Perl betiği ya da bir belge), bunu "all" olarak değiştirin ve daha sonra da <literal>binary-arch</literal> yerine <literal>binary-indep</literal> kurallarının kullanımı ile ilgili olarak <xref linkend="maint-guide-tr-s4.4"/> bölümünü  okuyunuz.
    </para><para>
10. satır, Debian paketleme sisteminin en güçlü özelliklerinden birini göstermektedir. Paketler birbirleriyle değişik şekilde ilişkide olabilir. <literal>Depends:</literal>'den başka,  <literal>Recommends:</literal>, <literal>Suggests:</literal>, <literal>Pre-Depends:</literal>, <literal>Conflicts:</literal>, <literal>Provides:</literal> ve <literal>Replaces:</literal> ilişki alanları belirtilebilir.
    </para><para>
Paket yönetim araçları bu ilişkilerle muhatap olurken genelde aynı şekilde davranır; bunun aksine durumlar ileride açıklanacaktır.
(<link linkend="tr-man8-dpkg"><command>dpkg(8)</command></link>,
<link linkend="tr-man8-dselect"><command>dselect(8)</command></link>,
<link linkend="tr-man8-apt"><command>apt(8)</command></link>,
<link linkend="tr-man1-aptitude"><command>aptitude(1)</command></link> v.b. kılavuz sayfalarına bakınız.)
    </para><para>
Paket içeriğinin çalışabilmesi için (derlenebilmesi için değil) bağımlı olduğu paketlerle ilişki alanları:
    </para><para><variablelist><varlistentry><term>Depends:</term>
      <listitem><para>
Paket, bağımlılığı olan paketler kurulmadan kurulmayacaktır. Bunu eğer paketiniz belli bir paket olmadan kesinlikle çalışmayacaksa (ya da ciddi bozukluklara sebep olacaksa) kullanın.
    </para></listitem></varlistentry><varlistentry><term>Recommends:</term>
    <listitem><para>
<command>dselect</command> ve <command>aptitude</command> gibi araçlar), paketinizle beraber bu alanda tavsiye edilen paketlerin de kurulmasını isteyip istemediğinizi soracaklardır; hatta <command>dselect</command> ısrar edecektir. <command>dpkg</command> ve <command>apt-get</command> bu alanı ihmal edecektir. Bunu kesinlikle zorunlu olmayan fakat genellikle yazılım ile beraber kullanılan paketler için kullanın.
    </para></listitem></varlistentry><varlistentry><term>Suggests:</term>
    <listitem><para>
Bir kullanıcı yazılımınızı kurmak istediğinde, tüm kurulum araçları bu alanda belirtilen paketlerin de kurulup kurulmayacağını soracaktır. <command>dpkg</command> ve <command>apt-get</command> bu alan önemsemezler. Bu alanı, paketinizle çalışması hoş olacak  fakat çalışması için mutlaka gerekli olmayan paketler için kullanın.
    </para></listitem></varlistentry><varlistentry><term>Pre-Depends:</term>
    <listitem><para>
Bu, <literal>Depends:</literal>'den daha güçlüdür. Önbağımlılıklar kurulmadan ve düzgün şekilde ayarlanmadan peketinizin kurulumu yapılmayacaktır. Bunu oldukça tutarlı bir şekilde ve debian-devel eposta listesinde tartıştıktan sonra kullanın. (Bunu, hiç kullanmayın şeklinde okuyun. <literal>:-)</literal>)
    </para></listitem></varlistentry><varlistentry><term>Conflicts:</term>
    <listitem><para>
Paket, çeliştiği tüm paketler kaldırılmadan kurulmayacaktır. Bunu, eğer paketiniz belli bir paketin varlığında çalışmayacak veya ciddi sorunlara yol açacaksa kullanın.
    </para></listitem></varlistentry><varlistentry><term>Provides:</term>
    <listitem><para>
Birden fazla alternatifi olan paletler için sanal isimler tanımlanmıştır. Tüm listeyi <filename>/usr/share/doc/debian-policy/virtual-package-names-list.txt.gz</filename> dosyasından alabilirsiniz. Bunu, eğer yazılımınız mevcut bir sanal paketin bir işlevini yerine getiriyorsa kullanın.
    </para></listitem></varlistentry><varlistentry><term>Replaces:</term>
    <listitem><para>
Programınız başka bir paketin dosyaların değiştiriyorsa ya da başka bir paketin tamamen yerini alıyorsa, bunu kullanın (<literal>Conflicts:</literal> ile birlikte kullanılır). Paketinizdeki dosyalar, ismi belirtilen paketlerin dosyalarının üzerine yazılacaktır.
    </para></listitem></varlistentry></variablelist>
    </para><para>
Tüm bu alanların kendilerine has bir sözdizimi vardır. Paket adları virgüllerle ayrılır. Bu paket adları ayrıca `|' (boru sembolü) ile ayrılmış alternatif paket adları şeklinde belirtilebilir.
    </para><para>
Alanlar kendi uygulanabilirliklerini belirttikleri paketlerin belirli sürümleriyle sınırlayabilir. Bu sürümler her bir paket adından sonra parentez içinde belirtilir, ayrıca sürüm numarasının önüne şu ilişki gösterimlerinden biri eklenmelidir: <literal>&lt;&lt;</literal>, <literal>&lt;=</literal>, <literal>=</literal>, <literal>&gt;=</literal> ve <literal>&gt;&gt;</literal> (Sırayla: kesinlikle önceki, önceki ya da aynısı, kesinlikle aynısı, sonraki ya da aynısı, kesinlikle sonraki). Örnek:
    </para><para>
<screen>
Depends: foo (&gt;= 1.2), libbar1 (= 1.3.4)
Conflicts: baz
Recommends: libbaz4 (&gt;&gt; 4.0.7)
Suggests: quux
Replaces: quux (&lt;&lt; 5), quux-foo (&lt;= 7.6)
</screen>
    </para><para>
Bilmeniz gereken en son özellik <literal>${shlibs:Depends}</literal>'dir. Paketiniz derlenip, geçici dizine kurulduktan sonra, <link linkend="tr-man1-dh_shlibdeps"><command>dh_shlibdeps(1)</command></link> ikilikler ve kütüphaneler için orayı tarayacak ve <filename>libc6</filename> veya <filename>xlib6g</filename> gibi paylaşımlı kütüphane bağımlılıklarını ve bunları içeren paketleri belirleyecektir. Bunları <link linkend="tr-man1-dh_gencontrol"><command>dh_gencontrol(1)</command></link>'deki listeye aktaracak ve doğru yere yerleştirilecek, bunun hakkında kaygılanmanıza gerek kalmayacaktır.
    </para><para>
Tüm bunları anlattıktan sonra <literal>Depends:</literal> satırını şu an olduğu gibi bırakabilir ve ardına <literal>Suggests: file</literal> satırını ekleyebiliriz, Çünkü gentoo o yazılım/paket tarafından sunulan bazı özellikleri kullanabilmektedir.
    </para><para>
11. satır: kısa açıklamadır. Pekçok kimsenin ekranı 80 sütun genişliğindedir, dolayısıyle bu kısım yaklaşık 60 karakteri geçmemelidir. Bu kısmı "fully GUI configurable X file manager using GTK+" olarak değiştireceğim.
    </para><para>
12. satır: uzun açıklamanın yer aldığı kısımdır. Bu paket hakkında ayrıntılı bilgi veren bir paragraf olmalıdır. Her satırın ilk sütunu boş olmalıdır. Hiç boş satır olmamalıdır, fakat bir sütuna tek bir . (nokta) koyarak boş bir satır bırakılmasını sağlayabilirsiniz. Ek olarak, uzun açıklamadan sonra birden fazla boş satır olmamalıdır.
    </para><para>
Sonuçta, güncellenmiş <filename>control</filename> dosyası:
    </para><para>
<screen linenumbering = 'numbered'>
Source: gentoo
Section: x11
Priority: optional
Maintainer: Josip Rodin &lt;joy-mg@debian.org&gt;
Build-Depends: debhelper (&gt;&gt; 3.0.0), xlibs-dev, libgtk1.2-dev, libglib1.2-dev
Standards-Version: 3.5.2

Package: gentoo
Architecture: any
Depends: ${shlibs:Depends}
Suggests: file
Description: fully GUI configurable X file manager using GTK+
 gentoo is a file manager for Linux written from scratch in pure C. It
 uses the GTK+ toolkit for all of its interface needs. gentoo provides
 100% GUI configurability; no need to edit config files by hand and re-
 start the yazılım. gentoo supports identifying the type of various
 files (using extension, regular expressions, or the 'file' command),
 and can display files of different types with different colors and icons.
 .
 gentoo borrows some of its look and feel from the classic Amiga file
 manager "Directory OPUS" (written by Jonathan Potter).
</screen>
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s4.2" userlevel="chunkthis">
      <title><filename>copyright</filename> dosyası</title><para>
Bu dosya paketin üst düzey özkaynakları, telif hakkı ve lisansı hakkında bilgiler içerir. Biçimi <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link> tarafından bir kurala bağlanmamıştır, fakat içeriği belirtilmiştir (bölüm 13.6 "Copyright information").
    </para><para>
<command>dh_make</command> şuna benzer öntanımlı bir dosya oluşturur:
    </para><para>
<screen linenumbering = 'numbered'>
This package was debianized by Josip Rodin &lt;joy-mg@debian.org&gt; on
Wed, 11 Nov 1998 21:02:14 +0100.

It was downloaded from &lt;fill in ftp site&gt;

Upstream Author(s): &lt;put author(s) name and email here&gt;

Copyright:

&lt;Must follow here&gt;
</screen>
    </para><para>
Bu dosyaya eklemeniz gereken önemli şeyler, paketi aldığınız yer, gerçek telif hakkı uyarısı ve lisanstır. Tüm lisansı ilave etmelisiniz, eğer GNU GPL veya LGPL, BSD veya Artistik lisans gibi herhangi bir genel özgür yazılım lisanlarından biri değilse, çünkü Debian sisteminde var olan <filename>/usr/share/common-licenses/</filename> dizinindeki uygun bir dosyaya atıfta bulunmak mümkündür.
    </para><para>
Kısacası, gentoo'nun <filename>copyright</filename> dosyasının son hali:
    </para><para>
<screen linenumbering = 'numbered'>
This package was debianized by Josip Rodin &lt;joy-mg@debian.org&gt; on
Wed, 11 Nov 1998 21:02:14 +0100.

It was downloaded from: ftp://ftp.obsession.se/gentoo/

Upstream author: Emil Brink &lt;emil@obsession.se&gt;

This software is copyright (c) 1998-99 by Emil Brink, Obsession
Development.

You are free to distribute this software under the terms of
the GNU General Public License.
On Debian systems, the complete text of the GNU General Public
License can be found in the file `/usr/share/common-licenses/GPL'.
</screen>
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s4.3" userlevel="chunkthis">
      <title><filename>changelog</filename> dosyası</title><para>
Bu, <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>nun 4.4 "debian/changelog" bölümünde tanımlanan özel bir biçime sahip gerekli bir dosyadır. Bu biçim <command>dpkg</command> ve diğer araçlar tarafından sürüm, gözden geçirme, dağıtım ve paketinizin aciliyet bilgisini alırken kullanılır.
    </para><para>
Yapmış olduğunuz tüm değişiklikleri belgelendirdiğiniz için, sizin için de önemlidir. Bu, paketinizi indiren insanların bilmeleri gereken bir sorun olup olmadığını görmelerini sağlar. Dosya, ikilik paket içerisinde <filename>/usr/share/doc/gentoo/changelog.Debian.gz</filename> olarak kaydedilecektir.
    </para><para>
<command>dh_make</command> şuna benzer öntanımlı bir dosya oluşturur:
    </para><para>
<screen linenumbering = 'numbered'>
gentoo (0.9.12-1) unstable; urgency=low

 * Initial Release.

-- Josip Rodin &lt;joy-mg@debian.org&gt;  Wed, 11 Nov 1998 21:02:14 +0100

</screen>
    </para><para>
1. satır: paket adı, sürüm, dağıtım ve aciliyettir. İsim kaynak paket adıyla uyuşmalıdır, dağıtım ya <literal>unstable</literal> (veya hatta <literal>experimental</literal>) olmalıdır ve aciliyet de (<literal>urgency</literal>) <literal>low</literal> olmalı, daha yükseğe değiştirilmemelidir. <literal>:-)</literal>
    </para><para>
3. satırdan 5. satıra kadar: günlük kayıtlarıdır (log entry), paket içinde yaptığınız değişiklikleri belgelendirdiğiniz yerdir (üst düzey değişiklikleri değil - bu amaç için üst düzey geliştirici tarafından oluşturulmuş bir dosya vardır, ki daha sonra bunu <filename>/usr/share/doc/gentoo/changelog.gz</filename> olarak kuracaksınız). Her yeni günlük kaydı yıldız (`*') ile başlayan en üst satırlardan önce eklenmelidir. Bunu <link linkend="tr-man1-dch"><command>dch(1)</command></link> ile veya bir metin düzenleyici ile kendiniz yapabilirsiniz.
    </para><para>
Sonuç şöyle birşey olacak:
    </para><para>
<screen linenumbering = 'numbered'>
gentoo (0.9.12-1) unstable; urgency=low

 * Initial Release.
 * This is my first Debian package.
 * Adjusted the Makefile to fix $DESTDIR problems.

-- Josip Rodin &lt;joy-mg@debian.org&gt; Wed, 11 Nov 1998 21:02:14 +0100

</screen>
    </para><para>
<xref linkend="maint-guide-tr-s9"/> bölümünde <filename>ChangeLog</filename> dosyalarının güncellenmesi ile ilgili ayrıntılı bilgi bulabilirsiniz.
      </para>
    </sect2><sect2  xml:id="maint-guide-tr-s4.4" userlevel="chunkthis">
      <title><filename>rules</filename> dosyası</title><para>
Artık şimdi <link linkend="tr-man1-dpkg-buildpackage"><command>dpkg-buildpackage(1)</command></link>'in asıl paketi oluşturmak için kullanacağı gerçek kurallara bakmalıyız. Bu dosya aslında bir diğer Makefile dosyasıdır, fakat üst düzey kaynaktaki(ler)den farklıdır. <filename>debian/</filename> içindeki diğer dosyalardan farklı olarak, bu çalıştırılabilir olarak imlenmiştir.
    </para><para>
Her <filename>rules</filename> dosyası, diğer Makefile dosyaları gibi, kaynağın nasıl işleneceği ile ilgili çeşitli kurallar içerir. Her kural gerçeklenmesi gereken hedeflerden, dosya adlarından veya eylem adlarından (örn. <literal>build:</literal> veya <literal>install:</literal>) oluşur. Çalıştırmak istediğiniz kurallar komut satırı değiştirgeleri olarak çağrılır (<command>./debian/rules build</command> veya <command>make -f rules install</command> gibi). Hedef isminden sonra, bağımlılığı, kuralın bağlı olduğu yazılım veya dosyanın ismini kullanabilirsiniz. Bundan sonra, sekme ile ayrılmış herhangi bir sayıda komut gelebilir. Yeni bir kural ilk sütunda yeni bir hedef bildirimi ile başlar. Boş satırlar ve `#' (diyez) ile başlayan satırlar yorum satırı olarak algılanır ve göz ardı edilir.
    </para><para>
Muhtemelen biraz kafanız karıştı, fakat <command>dh_make</command>'in oluşturduğu öntanımlı <filename>rules</filename> dosyasını incelerken hepsi netleşecektir. Ayrıca,  `<command>info make</command>'i daha fazla bilgi için okuyabilirsiniz.
    </para><para>
<command>dh_make</command>'in oluşturduğu <filename>rules</filename> dosyası için bilinmesi gereken, onun sadece bir öneri oluşudur. Basit paketler için çalışacak fakat karmaşık olanlar için çalışmayacaktır, ihtiyaçlarınıza uygun hale gelmesi için bu dosyadan çıkarma ve bu dosyaya ekleme yapmaktan korkmayın. Değiştirmemeniz gereken tek şey kurallardır, çünkü tüm araçlar <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>nda belirtildiği gibi bu isimleri kullanmaktadır.
    </para><para>
<command>dh_make</command>'in bizim için oluşturduğu (yaklaşık) bir <filename>rules</filename> dosyası:
    </para><para>
<screen linenumbering = 'numbered'>
#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This is the debhelper compatibility version to use.
export DH_COMPAT=4

CFLAGS = -g
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
CFLAGS += -O0
else
CFLAGS += -O2
endif

build: build-stamp
build-stamp:
       dh_testdir

       # Add here commands to compile the package.
       $(MAKE)
       #docbook-to-man debian/gentoo.sgml &gt; gentoo.1

       touch build-stamp

clean:
       dh_testdir
       dh_testroot
       rm -f build-stamp

       # Add here commands to clean up after the build process.
       -$(MAKE) clean

       dh_clean

install: build
       dh_testdir
       dh_testroot
       dh_clean -k
       dh_installdirs

       # Add here commands to install the package into debian/gentoo.
       $(MAKE) install DESTDIR=$(CURDIR)/debian/gentoo

# Build architecture-independent files here.
binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
       dh_testdir
       dh_testroot
#      dh_installdebconf
       dh_installdocs
       dh_installexamples
       dh_installmenu
#      dh_installlogrotate
#      dh_installemacsen
#      dh_installpam
#      dh_installmime
#      dh_installinit
       dh_installcron
       dh_installman
       dh_installinfo
#      dh_undocumented
       dh_installchangelogs ChangeLog
       dh_link
       dh_strip
       dh_compress
       dh_fixperms
#      dh_makeshlibs
       dh_installdeb
#      dh_perl
       dh_shlibdeps
       dh_gencontrol
       dh_md5sums
       dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install
</screen>
    </para><para>
Gerçek <filename>debian/rules</filename> dosyasında, satırbaşlarındaki boşluklar sekme karakterleridir.
    </para><para>
1. satırdakine benzer satırlara muhtemelen daha önce kabuk veya Perl betiklerinizden aşınasınızdır. Bu, işletim sistemine bu dosyanın <filename>/usr/bin/make</filename> ile yorumlanacağını söyler.
    </para><para>
6 ve 9. satırlardaki DH_* değişkenlerinin anlamları kısa açıklamalardan anlaşılıyor olmalı. <literal>DH_COMPAT</literal> ile ilgili ayrıntılı bilgi için, <link linkend="tr-man1-debhelper"><command>debhelper(1)</command></link> kılavuz sayfasının "Debhelper uyumluluk seviyeleri" ("Debhelper compatibility levels") bölümünü okuyunuz.
    </para><para>
11'den 16'ya kadar olan satırlar <literal>DEB_BUILD_OPTIONS</literal> değiştirgeleri için destek iskeleti görevi görür, <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>nun 11.1 "İkilikler" ("Binaries") bölümünde anlatılmıştır. Temelde, bu şeyler ikilik paketin hata ayıklama sembolleriyle beraber mi oluşturulacağını ve kurulum sırasında bunların ayıklanıp ayıklanmayacağını kontrol eder. Yine, bu sadece bir iskelettir, yapmanız gerekenler için bir ipucudur. Üst düzey derleme sisteminin (upstream build system) hata ayıklama sembollerini nasıl dahil ettiğini, kurulumda bunları nasıl ayırdığını ve bunu sizin nasıl gerçekleyeceğinizi incelemelisiniz.
    </para><para>
Genellikle <literal>CFLAGS</literal> değişkenini kullanarak <command>gcc</command>'ye <option>-g</option> seçeneğiyle derlemesini söyleyebilirsiniz - eğer bu sizin paketiniz için uygunsa; <literal>build</literal> kuralı içerisindeki <literal>$(MAKE)</literal> çağrısının sonuna <literal>CFLAGS="$(CFLAGS)"</literal> ekleyerek değişkeni türetiniz (aşağıya bakınız). Alternatif olarak, eğer paketiniz bir autoconf <filename>configure</filename> betiğini kullanıyorsa, yukarıdaki dizgeyi <literal>build</literal> kuralındaki <filename>./configure</filename>'nin öncesine ekleyebilirsiniz.
    </para><para>
Hata ayıklama sembollerin ayıklama konusuna gelirsek, yazılımlar genelde ayıklanmamış olarak kurulacak şekilde yapılandırılmışlardır ve çoğunlukla bunu değiştirecek bir seçenek yoktur. Ne büyük şans ki, <literal>DEB_BUILD_OPTIONS=nostrip</literal> bayrağını tespit edip sessizce çıkacak olan <link linkend="tr-man1-dh_strip"><command>dh_strip(1)</command></link> aracına sahipsiniz.
    </para><para>
18'den 26'ya kadar olan satırlar <literal>build</literal> kuralını (ve onun çocuğu olan <literal>build-stamp</literal>) açıklar. Bu kural, <command>make</command>'i bu yazılımı derlemek için kullanılacak olan kendi Makefile dosyası ile çalıştırır. Eğer yazılımınız ikilikleri derlemek için GNU yapılandırma araçlarını kullanıyorsa, kesinlikle <filename>/usr/share/doc/autotools-dev/README.Debian.gz</filename> dosyasını okuyunuz. Docbook'tan kılavuz sayfası üretme örneğine ileride <xref linkend="maint-guide-tr-s5.8"/> bölümünde değineceğiz.
    </para><para>
28-36 arası satırlarda belirtildiği gibi <literal>clean</literal> kuralı ile ilgili; paketin derlenmesi sonucu üretilen ve artık ihtiyaç duyulmayan öğeleri temizler. Bu kural her zaman çalışır olmalıdır (hatta kaynak ağacı temizlenmiş olsa bile!), dolayısiyle lütfen zorlayıcı değiştirgeleri kullanın (örn. <command>rm</command> için bu <option>-f</option>'dir) veya make'in geri dönüş değerlerini (hataları) ihmal etmesini komut isminden önce bir `-' kullanarak sağlayın.
    </para><para>
Kurulum işlemi, 38. satırdaki <literal>install</literal> kuralı başlar. Temel olarak yazılımın Makefile dosyasındaki <literal>install</literal> kuralını çalıştırır, fakat kurulumu <filename>$(CURDIR)/debian/gentoo</filename> dizinine yapar - gentoo'nun Makefile dosyasında kurulumun kök dizini olarak <literal>$(DESTDIR)</literal> kullanmamızın sebebi budur.
    </para><para>
Açıklama satırındada belirtildiği gibi, 48. satırdaki <literal>binary-indep</literal> kuralı, mimariden bağımsız paketleri derlemekte kullanılır. Böyle birşeye sahip olmadığımızdan burada hiçbir şey yapmayacağız.
    </para><para>
Bir sonraki kuralda, 52 den 79'a kadar olan satırlardaki <literal>binary-arch</literal> kuralı, paketin <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>na uyumluluğunu sağlamak için paket dosyalarınıza çeşitli işlemler uygulayan bazı <command>debhelper</command> yardımcı uygulamalarını çağırır.
    </para><para>
Eğer paketiniz `Architecture: all' (Tüm mimarilerde derlenir) türü bir paketse, <literal>binary-arch</literal> kuralını boş bırakıp, paketinizi derlemek için gerekli tüm komutları <literal>binary-indep</literal> kuralına eklemeniz gerekmektedir.
    </para><para>
<command>debhelper</command> araçlarının isimleri <literal>dh_</literal> ile başlar ve devamı aracın ne yaptığının açıklamasıdır. İsimleri yeterince açıklayıcı olmasına rağmen bir miktar daha açıklama yapabiliriz:
    </para><para><itemizedlist><listitem>
<link linkend="tr-man1-dh_testdir"><command>dh_testdir(1)</command></link> doğru dizinde olup olmadığınızı kontrol eder (örn. kaynak ağacının kökü).
    </listitem><listitem>
<link linkend="tr-man1-dh_testroot"><command>dh_testroot(1)</command></link> <literal>binary-arch</literal>, <literal>binary-indep</literal> ve <literal>clean</literal> kuralları için gerekli root izinlerine sahip olup olmadığınızı kontrol eder.
    </listitem><listitem>
<link linkend="tr-man1-dh_installman"><command>dh_installman(1)</command></link> kılavuz sayfalarını hedef dizindeki doğru yere yükleyecektir, sadece ona kaynak paketinin kök dizinine göre kılavuz sayfalarının yerlerini belirtmelisiniz.
    </listitem><listitem>
<link linkend="tr-man1-dh_strip"><command>dh_strip(1)</command></link> daha küçük hale getirmek için çalıştırılabilir dosyalar ve kütüphanelerden hata ayıklama başlıklarını temizler.
    </listitem><listitem>
<link linkend="tr-man1-dh_compress"><command>dh_compress(1)</command></link> 4 kB'tan büyük belgeleri ve kılavuz sayfalarını <link linkend="tr-man1-gzip"><command>gzip(1)</command></link> ile sıkıştırır.
    </listitem><listitem>
<link linkend="tr-man1-dh_installdeb"><command>dh_installdeb(1)</command></link> paketle ilgili dosyaları (örn. bakımcı betiklerini) <filename>debian/gentoo/DEBIAN</filename> dizinine kopyalar.
    </listitem><listitem>
<link linkend="tr-man1-dh_shlibdeps"><command>dh_shlibdeps(1)</command></link> kütüphanelerin ve çalışan dosyaların paylaşımlı kütüphane bağımlılıklarını hesaplar.
    </listitem><listitem>
<link linkend="tr-man1-dh_gencontrol"><command>dh_gencontrol(1)</command></link> <filename>control</filename> dosyasının düzgün ayarlanmış bir sürümünü <filename>debian/gentoo/DEBIAN</filename> altına yükler.
    </listitem><listitem>
<link linkend="tr-man1-dh_md5sums"><command>dh_md5sums(1)</command></link> paketteki tüm dosyalar için MD5 sağlama toplamları üretir.
    </listitem></itemizedlist>
    </para><para>
Tüm bu <filename>dh_*</filename> betiklerinin ne yaptıkları ve seçeneklerinin neler olduğu ile ilgili bilgi almak için kendi kılavuz sayfalarını okuyunuz. Başka (muhtemelen çok faydalı) ve burada bahsedilememiş <filename>dh_*</filename> betikleri de var. Eğer onlara ihtiyaç durarsanız, <link linkend="tr-man7-debhelper"><command>debhelper(7)</command></link> kılavuz sayfasını okuyunuz.
    </para><para>
<literal>binary-arch</literal> kısmı gerçekten de ihtiyacınız olmayan özellikleri içeren satırları çıkarmanız gereken kısımdır. gentoo için, cron, init, man, info ve örneklerle ilgili satırları iptal edeceğim, çünkü gentoo bunlara ihtiyaç duymuyor. Ayrıca 68. satırda, <filename>FIXES</filename>'i üstdüzey changelog dosyasının adı olan <filename>ChangeLog</filename> ile değiştireceğim.
    </para><para>
Son iki satır (ve burada bahsedilmeyen diğer satırlarla beraber) bazı az veya çok gerekli şeylerdir, ki bunları <link linkend="tr-man1-make"><command>make(1)</command></link> kılavuz sayfasında ve <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>nda okuyabilirsiniz. Şu an için, bilmek o kadar da önemli değil.
      </para>
    </sect2>
  </sect1>
  <sect1 xml:id="maint-guide-tr-s5">
    <title><filename>debian/</filename> altındaki diğer dosyalar</title><para>
<filename>debian/</filename> dizini altında daha başka alt dizinlerin de olduğunu göreceksiniz. Büyük çoğunluğu <literal>ex</literal> önekine veya sonekine sahiptir ki bu da örnekler (examples) manasına gelmektedir. Hepsine bir göz atın. Eğer onlardan herhangi birinin özelliklerini kullanmak ister veya ihtiyaç hissederseniz:
    </para><para><itemizedlist><listitem>
ilgili belgelere bakın (ipucu: <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>),
      </listitem><listitem>
eğer gerekliyse dosyaları ihtiyaçlarınıza göre değiştirin,
      </listitem><listitem>
eğer <literal>.ex</literal> sonekine sahipseler bunu kaldıracak şekilde tekrar isimlendirin,
      </listitem><listitem>
eğer <literal>ex</literal> önekine sahipseler bunu kaldıracak şekilde tekrar isimlendirin,
      </listitem><listitem>
eğer gerekliyse <filename>rules</filename> dosyasında değişiklik yapın.
      </listitem></itemizedlist>
    </para><para>
Bunlardan çok kullanılan bazıları alt bölümlerde açıklanmıştır.
    </para>
    <sect2 xml:id="maint-guide-tr-s5.1" userlevel="chunkthis">
      <title><filename>README.Debian</filename></title><para>
Orjinal paketinizle, debianlaştırılmış paketiniz arasındaki ek ayrıntılar ve zıtlıklar burada belgelenmelidir.
    </para><para>
<command>dh_make</command> şuna benzer öntanımlı bir dosya oluşturur:
    </para><para>
<screen>gentoo for Debian
-----------------

&lt;possible notes regarding this package - if none, delete this file&gt;

  -- Josip Rodin &lt;joy-mg@debian.org&gt;, Wed, 11 Nov 1998 21:02:14 +0100
</screen>
    </para><para>
Oraya koyacak birşeyimiz olmadığından dosyayı sileceğiz.
    </para></sect2>
    <sect2 xml:id="maint-guide-tr-s5.2" userlevel="chunkthis">
      <title><filename>conffiles.ex</filename></title><para>
Bir yazılımla ilgili en sinir bozucu şey, yazılımı özelleştirmek için büyük bir zaman ve çaba harcadıktan sonra, bir yükseltmenin (upgrade) tüm bunları boşa çıkarmasıdır. Debian bu sorunu yapılandırma dosyalarını imleyerek çözmektedir, böylece bir yükseltme yapmak istediğinizde eski yapılandırma dosyanızı korumak isteyip istemediğiniz sorulacaktır.
    </para><para>
Bir pakette bunu yapmanın yolu <filename>conffiles</filename> dosyasının her satırına bir yapılandırma dosyasının tam dosya yolunu (genellikle <filename>/etc</filename> altında olurlar) girmektir. Gentoo'nun bir yapılandırma dosyası vardır, <filename>/etc/gentoorc</filename> ve onu <filename>conffiles</filename> dosyasında gireceğiz.
    </para><para>
Eğer yazılımınız yapılandırma dosyaları kullanıyor ve onların da üzerine kendisi yazıyorsa, <command>dpkg</command> her seferinde kullanıcıdan değişiklikleri onaylamasını isteyeceğinden, onları <literal>conffile</literal> dosyaları olarak imlemek iyi bir yöntem değildir.
    </para><para>
Eğer paketlediğiniz yazılım, çalışması için her kullanıcının yapılandırma dosyasını değiştirmesini gerektiriyorsa, gene onu bir <literal>conffile</literal> dosyası olarak imlemeyin.
    </para><para>
Örnek yapılandırma dosyalarını `bakımcı betikleri''nden (`maintainer scripts') elde edebilirsiniz, daha fazla bilgi <xref linkend="maint-guide-tr-s5.12"/> bölümüne bakınız.
    </para><para>
Eğer yazılımınızn bir <literal>conffile</literal> dosyası olarak imlenebilecek bir yapılandırma dosyası yoksa, gönül rahatlığıyla <filename>conffiles</filename> dosyasını <filename>debian/</filename> dizininden silebilirsiniz.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s5.3" userlevel="chunkthis">
      <title><filename>cron.d.ex</filename></title><para>
Eğer paketiniz düzenli aralıklarla gerçeklenmesi gereken görevler gerektiriyorsa, bu dosyayı bunu ayarlamak için kullanabilirsiniz.
    </para><para>
Bu günlük döndürmeyi (log rotation) içermemektedir, bunu için <link linkend="tr-man1-dh_installlogrotate"><command>dh_installlogrotate(1)</command></link> ve <link linkend="tr-man8-logrotate"><command>logrotate(8)</command></link> kılavuz sayfalarına bakınız.
    </para><para>
Gerekmiyorsa, dosyayı silin.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s5.4" userlevel="chunkthis">
      <title><filename>dirs</filename></title><para>
Bu dosyada, ihtiyacımız olan fakat normal kurulum işleminin (<command>make install</command>) oluşturmadığı  dizinler belirtilir.
    </para><para>
Öntanımlı olarak şöyle gözükür:
    </para><para>
<screen>usr/bin
usr/sbin
</screen>
    </para><para>
Önlerinde / olmadığna dikkat edin. Muhtemelen şuna benzer şekilde değiştireceğiz:
    </para><para>
<screen>usr/bin
usr/share/man/man1
</screen>
    </para><para>
Fakat bu dizinler zaten Makefile tarafından oluşturuluyor, dolayısiyle bu dosyaya ihtiyacımız olmayacaktır, o halde sileceğiz.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s5.5" userlevel="chunkthis">
      <title><filename>docs</filename></title><para>
Bu dosyada, <command>dh_installdocs</command>'un bizim için geçici bir dizine yükleyeceği belgelendirme dosyalarının isimleri belirtilir.
    </para><para>
Öntanımlı olarak kaynak paketinin kök dizinindeki "BUGS", "README*", "TODO" gibi dosyaların isimlerini içerecektir.
    </para><para>
gentoo için, birkaç tane de ben ekledim:
    </para><para>
<screen>BUGS
CONFIG-CHANGES
CREDITS
ONEWS
README
README.gtkrc
TODO
</screen>
    </para><para>
Bu dosyayı kaldırıbiliriz de, bunun yerine bu dosyaları <literal>rules</literal> dosyasında <literal>dh_installdocs</literal> komutuna komut satırı değiştirgeleri olarak ekleyebiliriz:
    </para><para>
<screen>        dh_installdocs BUGS CONFIG-CHANGES CREDITS ONEWS README \
                       README.gtkrc TODO
</screen>
    </para><para>
Yine de, kaynak dosyanızda böyle herhangi bir dosyaya ihtiyaç duymayabilirsiniz. Bu durumda onu güvenli bir şekilde kaldırabilirsiniz. Fakat <literal>rules</literal> dosyasındaki <literal>dh_installdocs</literal> çağrısını kaldırmayın, çünkü bu <filename>copyright</filename> dosyasının ve diğer bazı şeylerin kurulumu için kullanılır.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s5.6" userlevel="chunkthis">
      <title><filename>emacsen-*.ex</filename></title><para>
Eğer paketiniz, kurulum sırasında baytderlemeli olması gereken Emacs dosyaları sağlıyorsa, bunun gerçekleşmesi için bu dosyayı kullanabilirsiniz.
    </para><para>
Bu dosyalar <link linkend="tr-man1-dh_installemacsen"><command>dh_installemacsen(1)</command></link> tarafından geçici bir dizine kurulur. Eğer bu dosyayı kullanırsanız, <filename>rules</filename> dosyasındaki ilgili satırları etkinleştirmeyi unutmayın.
      </para>
    </sect2><sect2 xml:id="maint-guide-tr-s5.7" userlevel="chunkthis">
      <title><filename>init.d.ex</filename></title><para>
Eğer paketiniz sistemin başlatılırken çalışması gereken bir artalan süreciyse, açık bir şekilde benim ilk başlardaki önerimi göz ardı etmişsiniz demektir, değil mi? <literal>:-)</literal>
    </para><para>
Bu, bir <filename>/etc/init.d/</filename> betiği için genel iskelet dosyasıdır, dolayısiyle sıklıkla düzenlemek zorunda kalacaksınız. Geçici dizine <link linkend="tr-man1-dh_installinit"><command>dh_installinit(1)</command></link> tarafından kurulur.
    </para><para>
Eğer ihtiyacınız yoksa, bu dosyayı silin.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s5.8" userlevel="chunkthis">
      <title><filename>manpage.1.ex</filename>, <filename>manpage.sgml.ex</filename></title>
      <para>
Programın(ların)ızın bir(er) kılavuz sayfası olmalıdır. Yoksa, bu dosyaları kılavuz sayfası şablonu olarak kullanabilirsiniz. Her biri doldurabileceğiniz taslaklardır.
    </para><para>
Kılavuz sayfaları normalde <link linkend="tr-man1-nroff"><command>nroff(1)</command></link> ile yazılır. <filename>manpage.1.ex</filename> örneği de nroff ile yazılmıştır. Bu dosyayı nasıl düzenleyeceğinizi öğrenmek için <link linkend="tr-man7-man"><command>man(7)</command></link> kılavuz sayfasını inceleyiniz.
    </para><para>
Diğer taraftan <command>nroff</command> yerine SGML ile yazmayı tercih ederseniz, <filename>manpage.sgml.ex</filename> şablonunu kullanabilirsiniz. Eğer bunu yapacaksanız:
    </para><para><itemizedlist>
        <listitem>
<literal>docbook-to-man</literal> paketini yüklememeli,
        </listitem><listitem>
<literal>control</literal> dosyasındaki <literal>Build-Depends</literal> satırına <literal>Build-Depends</literal>'ı eklemeli,
        </listitem> <listitem>
<literal>rules</literal> dosyanızdaki <literal>build</literal> kuralında bulunan <literal>docbook-to-man</literal> çağrısını içeren satırı açıklama satırı olmaktan çıkarmalısınız. `build' kuralındaki yorum satırını kaldırmak zorundasınız.
        </listitem></itemizedlist>
    </para><para>
Ve dosyanın adını <filename>gentoo.sgml</filename> gibi birşey olarak değiştirmeyi unutmayın!
    </para><para>
Son kılavuz sayfası ismi belgelendirdiği yazılımın ismini içermelidir, bundan dolayı "manpage" olan ismini "gentoo" olarak değiştireceğiz. Dosya adı ayrıca, dosyanın bir kullanıcı komutunun kılavuz sayfası olduğu anlamına geler ".1" sonekini içererecektir. Bunun doğru bölüm numarası olduğundan emin olmalısınız. Kılazuz sayfa bölümlerinin listesi:
    </para><para>
<literallayout indent="0">
 Bölüm No. Bölüm ismi             Açıklama
-----------------------------------------------------------------
     1     Kullanıcı komutları    Çalıştırılabilirler ve betikler.
     2     Sistem çağrıları       Çekirdek tarafından sağlanan işlevler.
     3     Kütüphane çağrıları    Sistem kütüphanelerindeki işlevler.
     4     Özel dosyalar          Genelde /dev dizinindeki aygıt dosyaları.
     5     Dosya biçimleri        /etc/passwd gibi dosyaların biçimleri.
     6     Oyunlar                Veye diğer değersiz yazılımlar.
     7     Makro paketleri        Man makroları gibi makrolar.
     8     Sistem yönetimi        Genellikle root tarafından kullanılan komutlar.
     9     Çekirdek yordamları    Çekirdekle ilgili standartdışı çağrılar.
</literallayout>
    </para><para>
O halde, gentoo'nun kılavuz sayfası <filename>gentoo.1</filename> olarak isimlendirilmelidir. X yazılımları için bölüm numarasının sonuna bir "x" ilave edebilirsiniz, örn. <filename>gentoo.1x</filename>. Bir <filename>gentoo.1</filename> kılavuz sayfası orjinal kaynakta yoktu, örnekleri ve üstdüzey belgeleri okuyarak bir tane yazdım.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s5.9" userlevel="chunkthis">
      <title><filename>menu.ex</filename></title><para>
X Pencere Sistemi kullanıcıları genellikle yazılımları çalıştırmak için özelleştirilebilen bir menüye sahiptir. Eğer Debian <literal>menu</literal> paketini yüklüyse, sistemdeki her yazılıma bir menü grubu oluşturulacaktır.
    </para><para>
<command>dh_make</command>'in oluşturduğu öntanımlı <filename>menu.ex</filename> dosyası:
    </para><para>
<screen>?package(gentoo):needs="X11|text|vc|wm" section="Apps/see-menu-manual"\
  title="gentoo" command="/usr/bin/gentoo"
</screen>
    </para><para>
İki noktadan sonraki ilk alan <literal>needs</literal>'dir ve yazılımın nasıl bir arayüze ihtiyaç duyduğunu belirtir. Listelenmiş alternatiflerden biri kalacak şekilde değerini değiştirin, örn. "text" veya "X11" kalsın.
    </para><para>
Bir sonraki alan <literal>section</literal>'dır, yazılımın menü ve altmenü girdisi olarak görüneceği  bölümdür. Geçerli bölümler <filename>/usr/share/doc/debian-policy/menu-policy.html/ch2.html#s2.1</filename> dosyasındadır.
    </para><para>
<literal>title</literal> alanı yazılımın ismidir. Baş harfini büyük yapabilirsiniz, sadece kısa tutun.
    </para><para>
 Son olarak, <literal>command</literal> alanı yazılımı çalıştıran komuttur.
     </para><para>
Artık menü girdisini şu şekilde değiştirebiliriz:
     </para><para>
<screen>?package(gentoo): needs="X11" section="Apps/Tools" title="Gentoo" command="gentoo"
</screen>
Ayrıca <literal>longtitle</literal>, <literal>icon</literal>, <literal>hints</literal>, v.b gibi başka bölümler de ekleyebilirsiniz. Ayrıntılı bilgi için <link linkend="tr-man5-menufile"><command>menufile(5)</command></link>, <link linkend="tr-man1-update_menus"><command>update-menus(1)</command></link> ve <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>na bakınız.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s5.10" userlevel="chunkthis">
      <title><filename>watch.ex</filename></title><para>
Bu dosya (<filename>devscripts</filename> paketindeki) <link linkend="tr-man1-uscan"><command>uscan(1)</command></link> ve <link linkend="tr-man1-uupdate"><command>uupdate(1)</command></link> yazılımlarını yapılandırmak için kullanılır. Bunlar orjinal kaynağı aldığınız siteyi gözlemlemek için kullanılır.
     </para><para>
Dosyaya koyduklarım:
     </para><para>
<screen># watch control file for uscan
# Site            Directory  Pattern               Version  Script
ftp.obsession.se  /gentoo    gentoo-(.*)\.tar\.gz  debian   uupdate
</screen>
     </para><para><tip><para>
Internete bağlanın, dosyayı oluşturduktan sonra <command>uscan</command>'i çalıştırın. Kılavuz sayfalarını okuyun! <literal>:-)</literal>
      </para></tip></para>
    </sect2>
    <sect2  xml:id="maint-guide-tr-s5.11" userlevel="chunkthis">
      <title><filename>ex.package.doc-base</filename></title><para>
Eğer paketinizin kılavuz sayfaları ve bilgilendirme (info) belgeleri dışında belgelendirmesi varsa, <filename>doc-base</filename>'i kullanarak onu kayıtlı hale getirmelisiniz. Böylece kullanıcı bu belgeleri örn. <link linkend="tr-man1-dhelp"><command>dhelp(1)</command></link>, <link linkend="tr-man1-dwww"><command>dwww(1)</command></link> veya <link linkend="tr-man1-doccentral"><command>doccentral(1)</command></link> gibi yazılımlarla bulabilir.
     </para><para>
Bu daha çok <filename>/usr/share/doc/paketadı/</filename> altına yerleştirilen HTML, PS ve PDF dosyalarını içermektedir.
     </para><para>
<screen>Document: gentoo
Title: Gentoo Manual
Author: Emil Brink
Abstract: This manual describes what Gentoo is, and how it can be used.
Section: Apps/Tools

Format: HTML
Index: /usr/share/doc/gentoo/html/index.html
Files: /usr/share/doc/gentoo/html/*.html
</screen>
     </para><para>
Dosya biçimiyle ilgili daha fazla bilgi almak için, <filename>/usr/share/doc/doc-base/doc-base.html/</filename> içindeki <filename>doc-base</filename>'e ve <link linkend="tr-man8-install_docs"><command>install-docs(8)</command></link> kılavuz sayfasına bakınız.
     </para><para>
Ek belgelerin kurulması ile ilgili ayrıntılar için <xref linkend="maint-guide-tr-s3.1"/> bölümüne bakınız.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s5.12" userlevel="chunkthis">
      <title><filename>postinst.ex, preinst.ex, postrm.ex, prerm.ex</filename></title><para>
Bu dosyalar paketleyicinin betikleri olarak anılır. Bu betikler paketin <filename>control</filename> alanına konulan ve paket yüklendiği, kaldırıldığı veya yükseltildiği zaman <command>dpkg</command> tarafından çalıştırılan betiklerdir.
     </para><para>
Şu an için, olabildiğince paketleyici betiklerini elle düzenlemekten kaçınmalısınız, çünkü biraz karmaşık yapıya meyillidirler. Ayrıntılı bilgi için <link xlink:href='http://www.debian.org/doc/debian-policy/'>Debian Politika Kılavuzu</link>nun,  6. bölümüne ve <command>dh_make</command> ile birlikte gelen örneklere bakınız.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="maint-guide-tr-s6">
    <title>Paketin Derlenmesi</title><para>
Artık paketi derlemeye hazır olmalıyız.
    </para>
    <sect2 xml:id="maint-guide-tr-s6.1" userlevel="chunkthis">
      <title>Baştan yeniden derlemek</title><para>
Programın ana dizinine girin ve aşağıdaki komutu çalıştırın:
     </para><para>
<screen>$ <command>dpkg-buildpackage -rfakeroot</command>
</screen>
     </para><para>
Bu komut herşeyi sizin için yapacak ve şunları gerçekleştirecektir:
     </para><para><itemizedlist>
        <listitem>
<command>fakeroot</command>'u kullanarak kaynak ağacının temizler (<literal>debian/rules clean</literal>)
        </listitem>
        <listitem>
Paketi yapılandırır (<literal>dpkg-source -b</literal>)
        </listitem>
        <listitem>
Paketi derler (<literal>debian/rules build</literal>)
        </listitem>
        <listitem>
<command>fakeroot</command>'u kullanarak ikilik paketi oluşturur (<literal>debian/rules binary</literal>)
        </listitem>
        <listitem>
<command>gnupg</command>'yi kullanarak kaynak <filename>.dsc</filename> dosyasını imzalar
        </listitem>
        <listitem>
<command>dpkg-genchanges</command> ve <command>gnupg</command>'yi kullanarak yükleme (upload) <filename>changes</filename> dosyasını oluşturur ve imzalar
        </listitem>
      </itemizedlist>
      </para><para>
Girdi olarak tek ihtiyacınız olan işlem sırasında iki kere kullanacağınız GPG anahtarınızın parolasıdır.
      </para><para>
Bütün bunlar yapıldıktan sonra, yukarıdaki dizin içinde (<filename>~/gentoo/</filename>) şu dosyaları göreceksiniz:
      </para><para><variablelist><varlistentry>
      <term><filename>gentoo_0.9.12.orig.tar.gz</filename></term>
      <listitem><para>
Bu, orjinal kaynak kodun sıkıştırılmış arşiv dosyasıdır, sadece paket ismi Debian standartlarına uygun olarak yeniden isimlendirilmiştir. <command>dh-make</command>'i ilk olarak <option>-f</option> seçeneğiyle çalıştırdığımızda oluşturulduğuna dikkat ediniz.
      </para></listitem></varlistentry><varlistentry>
      <term><filename>gentoo_0.9.12-1.dsc</filename></term>
      <listitem><para>
Kaynak kodun içeriğinin bir özetidir. Sizin <filename>control</filename> dosyanızdan oluşturulmuştur ve kaynak paketi <link linkend="tr-man1-dpkg_source"><command>dpkg-source(1)</command></link> ile açarken kullanılır. Bu dosya GPG imzalıdır, böylece başkaları dosyanın gerçekten size ait olduğuna emin olabilir.
      </para></listitem></varlistentry><varlistentry>
      <term><filename>gentoo_0.9.12-1.diff.gz</filename></term>
      <listitem><para>
Bu sıkıştırılmış dosya orjinal kaynak paketinde yaptığınız her değişikliği tekilleştirilmiş fark dosyası ("unified diff") biçiminde içerir. <link linkend="tr-man1-dpkg_source"><command>dpkg-source(1)</command></link> ile oluşturulur ve onun tarafından kullanılır. Uyarı: Eğer orjinal kaynak paketinin ismini <filename>paketismi_sürüm.orig.tar.gz</filename> şeklince oluşturmazsanız, <command>dpkg-source</command> <filename>.diff.gz</filename> dosyasını düzgün oluşturmada başarısız olacaktır.
      </para><para>
Eğer birisi paketinizi baştan yeniden oluşturmak isterse, yukarıdaki üç dosyayı kullanarak bunu kolaylıkla başarabilir. Dosyaları açma işlemi oldukça basittir: Sadece dosyaları bir yere kopyalayın ve <command>dpkg-source -x gentoo_0.9.12-1.dsc</command> komutunu çalıştırın.
      </para></listitem></varlistentry><varlistentry>
      <term><filename>gentoo_0.9.12-1_i386.deb</filename></term>
      <listitem><para>
Bu sizin tamamlanmış ikilik paketinizdir. <command>dpkg</command> kullanarak herhangi bir diğer paket gibi bunu da sisteminize kurabilir ya da kaldırabilirsiniz.
      </para></listitem></varlistentry><varlistentry>
      <term><filename>gentoo_0.9.12-1_i386.changes</filename></term>
      <listitem><para>
Bu dosya o anki paket gözden geçirimiyle ilgili yapılmış tüm değişiklikleri açıklar ve Debian FTP arşivinin bakım yazılımları tarafından ikilik ve kaynak paketlerini kurarken kullanılır. Kısmen <filename>changelog</filename> ve <filename>.dsc</filename> dosyasından üretilir. GPG ile imzalanır, böylece başkaları bunun gerçekten size ait olduğundan emin olabilir.
      </para><para>
Paket üstünde çalışırken, paketin davranışı değişecek ve yeni özellikler eklenecektir. Paketi indirenler bu dosyaya bakarak yapılmış değişiklikleri kolayca görebilir. Debian arşivinin bakımını yapan yazılımlar bu dosyanın içeriğini ayrıca <literal>debian-devel-changes</literal> ileti listesine de postalayacaktır.
        </para></listitem></varlistentry></variablelist>
      </para><para>
<filename>.dsc</filename> ve <filename>.changes</filename> dosyalarındaki uzun sayısal dizgeler, yukarıda bahsedilen dosyalar için MD5 sağlamalarıdır (MD5 checksum). Dosyalarınızı indiren biri <link linkend="tr-man1-md5sum"><command>md5sum(1)</command></link> ile sınayıp, sayıların uyuşmaması durumunda dosyaların bozulduğunu veya üzerinde oynandığını anlayabilir.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s6.2" userlevel="chunkthis">
      <title>Hızlı yeniden derleme</title><para>
<filename>debian/rules</filename> dosyasını ayrıntılı bir şekilde ayarlamaya çalışırken, büyük bir paket sözkonusu olduğunda için herşeyi sıfırdan bir defada oluşturmak istemeyebilirsiniz. Deneme amacıyla, üst düzey kaynak paketinden diğer dosyaları oluşturmaksızın sadece <filename>.deb</filename> paketini oluşturabilirsiniz:
      </para><para>
<screen>$ <command>fakeroot debian/rules binary</command>
</screen>
      </para><para>
Ayarlamanız bittikten sonra, yukarıdaki adımları takip ederek herşeyi olması gerektiği gibi yeniden oluşturmayı unutmayın. Aksi takdirde, <filename>.deb</filename> dosyalarını başarılı bir şekilde gönderemeyebilirsiniz (upload).
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s6.3" userlevel="chunkthis">
      <title><literal>debuild</literal> komutu</title><para>
Paket oluşturma işlemini <command>debuild</command> komutu ile otomatik hale getirebilirsiniz. (<link linkend="tr-man1-debuild"><command>debuild(1)</command></link> kılavuz sayfasına bakınız.)
      </para><para>
<command>debuild</command> komutunu <filename>/etc/devscripts.conf</filename> veya <filename>~/.devscripts</filename> üzerinden özelleştirebilirsiniz. En azından şu öğelerin bulunmasını öneririm:
      </para><para>
<screen>DEBSIGN_KEYID="GPG_anahtar_kimliğiniz"
DEBUILD_DPKG_BUILDPACKAGE_OPTS="-i -ICVS -I.svn"
</screen>
      </para><para>
Bu şekilde, paketleri her zaman GPG anahtarınız ile imazalamış olarak üretebilir ve de istenmeyen içeriğin eklenmesinden kaçınabilirsiniz. (Sponsorluk için de güzeldir.) Örneğin, kaynağı temizleyip paketi bir kullanıcı hesabını kullanarak tekrar aşağıdaki gibi oluşturmak  oldukça basittir:
      </para><para>
<screen>debuild clean
debuild
</screen>
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s6.4" userlevel="chunkthis">
      <title><literal>dpatch</literal> sistemi</title><para>
<command>dh_make</command> ve <command>dpkg-buildpackage</command> komutlarının basit kullanımı, içerisinde <filename>debian/</filename> altındaki paket yapımı için gereken dosyaları ve kaynak koda yapılmış yamaları içeren tek büyük bir <filename>diff.gz</filename> dosyası oluşturacaktır. Bu tür bir paket daha sonra kaynak ağacındaki değişiklikleri anlamak ve incelemek için biraz hantal olacaktır. Bu durum da pek hoş değildir.<footnote><para>Henüz Debian geliştiricisi değilseniz ve paketinizi sponsorunuzun inceledikten sonra göndermesi gerekiyorsa, paketi sponsorunuzun görüp incelemesini mümkün olduğunca kolaylaştırmanız gerekir.</para></footnote>
      </para><para>
Yama kümesinin bakımı ve Debian paketleriyle kullanımı için pekçok yöntem önerilmiştir. <literal>dpatch</literal> sistemi önerilen bu yama sürdürme sistemlerinin en basitlerinden biridir. Diğerleri dbs, cdbs, v.s., dir.
      </para><para>
<literal>dpatch</literal> ile paketlenmiş bir pakette kaynak kodda yapılan yapılan değişiklikler <filename>debian/patches/</filename> altında yama dosyaları olarak ve açık bir şekilde belgelendirilir ve <filename>debian/</filename> dizini dışındaki kaynak ağacına dokunulmaz. Eğer paketinizi gönderecek bir sponsor arıyorsanız, sponsorunuzun paketinizi incelemesini hızlandırmak için bu tür açık ayrımlar ve belgelendirmeler önemlidir. <literal>dpatch</literal> kullanım yöntemleri <link linkend="tr-man1-dpatch"><command>dpatch(1)</command></link> kılavuz sayfasında açıklanmıştır.
      </para><para>
Kaynakla ilgili birisi (bu kendiniz de olabilir) bir yama gönderdiği zaman, <literal>dpatch</literal> ile bunu pakete uygulamanız çok kolaydır:
      </para><para><itemizedlist>
        <listitem>
Kaynak ağacına <option>-p1</option> yaması olması için yamayı düzenleyin.
        </listitem>
        <listitem>
<literal>dpatch patch-template</literal> komutunu kullanarak başlığı ekleyin.
        </listitem>
        <listitem>
Bunu <filename>debian/patches</filename> altına koyun.
        </listitem>
        <listitem>
<literal>dpatch</literal> dosyalarının isimlerini <filename>debian/patches/00list</filename>'e ekleyin.
        </listitem>
      </itemizedlist>
      </para><para>
<literal>dpatch</literal> CPP makrolarını kullanarak mimariye bağlı yama yapabilme yeteneğine de sahiptir.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s6.5" userlevel="chunkthis">
      <title>Gönderirken <filename>orig.tar.gz</filename>'nin eklenmesi</title><para>
Paketinizi ilk defa arşive gönderiyorsanız, orjinal <filename>orig.tar.gz</filename> dosyasını da göndermelisiniz. Eğer paket sürümü <literal>-0</literal> veya <literal>-1</literal> Debian gözden geçirmesinde değilse <command>dpkg-buildpackage</command> komutunu <option>-sa</option> seçeneği ile kullanmalısınız. Başka bir deyişle, komutu <option>-sd</option> seçeneği ile kullanmak orjinal <filename>orig.tar.gz</filename> dosyasının hariç tutulmasına sebep olacaktır.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="maint-guide-tr-s7">
    <title>Paketin hatalara karşı denetimi</title>
    <sect2 xml:id="maint-guide-tr-s7.1" userlevel="chunkthis">
      <title><literal>lintian</literal> ve <literal>linda</literal> paketleri</title>
      <para>
<filename>.changes</filename> dosyası üzerinde <link linkend="tr-man1-lintian"><command>lintian(1)</command></link> ve <link linkend="tr-man1-linda"><command>linda(1)</command></link> komutlarını çalıştırdığınızda bu yazılımlar pekçok paket hatasını denetleyecektir:
      </para><para>
<screen>$ <command>lintian -i gentoo_0.9.12-1_i386.changes</command>
$ <command>linda -i gentoo_0.9.12-1_i386.changes</command>
</screen>
      </para><para>
Elbetteki, dosya adını paketiniz için üretilen <filename>.changes</filename> dosyasının adıyla değiştirmelisiniz. Eğer bazı hatalar gözüküyorsa (<literal>E:</literal> ile başlayan satırlar), açıklamaları okuyup (<literal>N:</literal> ile başlayan satırları) hataları düzeltin ve <xref linkend="maint-guide-tr-s6.1"/> bölümünde anlatıldığı gibi paketi tekrar oluşturun. Eğer <literal>W:</literal> ile başlayan satırlar varsa, bunlar uyarıdır, bu durumda paketi ayarlayın veya uyarı mesajlarının ilgisiz olduğundan emin olun (ve Lintian değişikliklerini uygulayın, bunun için belgesine bakınız.)
      </para><para><note><para>
<command>dpkg-buildpackage</command> ile paketi oluşturabilir, <command>lintian</command> ve <command>linda</command> komutlarını <link linkend="tr-man1-debuild"><command>debuild(1)</command></link> komutu ile tek bir komut olarak kullanabilirsiniz.
      </para></note></para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s7.2" userlevel="chunkthis">
      <title><literal>mc</literal> komutu</title><para>
<link linkend="tr-man1-dpkg-deb"><command>dpkg-deb(1)</command></link> ile <filename>*.deb</filename> paketlerini açabilirsiniz. Üretilmiş bir Debian paketinin içeriğini de <link linkend="tr-man1-debc"><command>debc(1)</command></link> ile listeleyebilirsiniz.
      </para><para>
Bu işlem,  sadece <filename>*.deb</filename> dosyalarının içeriğini değil aynı zamanda <filename>*.diff.gz</filename> ve <filename>*.tar.gz</filename> dosyalarının içeriğine de göz atmanızı sağlayan <link linkend="tr-man1-mc"><command>mc(1)</command></link> gibi bir dosya yöneticisi kullanılarak sezgisel bir hale getirilebilir.
      </para><para>
Gerek ikilik gerekse kaynak paketlerde, ilave istenmeyen dosyalara veya sıfır boyutlu dosyalara dikkat edin. Sıklıkla, yapılan paket başarılı bir şekilde temizlenemez, bunun için <filename>rules</filename> dosyanızı bu durumu telafi edecek şekilde ayarlayınız.
      </para><para><tip><para>
<command>zgrep ^+++ ../gentoo_0.9.12-1.diff.gz</command> komutu kaynak dosyasına yapılan ekleme ve değişiklikleri, <command>dpkg-deb -c gentoo_0.9.12-1_i386.deb</command> veya <command>debc gentoo_0.9.12-1_i386.changes</command> komutu ise ikilik paketteki dosyaları listeler.
      </para></tip></para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s7.3" userlevel="chunkthis">
      <title><literal>debdiff</literal> komutu</title><para>
<link linkend="tr-man1-debdiff"><command>debdiff(1)</command></link> komutu ile iki Debian ikilik paketinini dosya listelerini karışılaştırabilirsiniz. Bu, paketi güncellerken farkında olmadan dosyaların yerdeğiştirilmemiş veya kaldırılmamış veya herhangi bir gözden kaçmış hatanın yapılmamış olduğunu doğrulamak için faydalıdır. Aynı gruptaki <filename>*.deb</filename> dosyalarına basitçe <command>debdiff eski-paket.changes yeni-paket.changes</command> ile bakabilirsiniz.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s7.4" userlevel="chunkthis">
      <title><literal>interdiff</literal> komutu</title><para>
İki <filename>.diff.gz</filename> dosyasını <link linkend="tr-man1-interdiff"><command>interdiff(1)</command></link> komutu ile karşılaştırabilirsiniz. Bu, kaynak kod güncellenirken herhangi bir istenmeyen değişikliğin yapılmadığını doğrulamak için kullanılır: <command>interdiff -z eski-paket.diff.gz yeni-paket.diff.gz</command>.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s7.5" userlevel="chunkthis">
      <title><literal>debi</literal> komutu</title><para>
<link linkend="tr-man1-debi"><command>debi(1)</command></link> komutunu root olarak kullanarak paktinizi denemek için kurabilirsiniz. Kurulum ve çalıştırma işlemini kendi makinanız dışındakilerde deneyerek gerek yükleme gerekse çalıştırma sırasında karşılaştığınız uyarı ve hataları dikkatlice inceleyiniz.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s7.6" userlevel="chunkthis">
      <title><literal>pbuilder</literal> paketi</title><para>
Temiz bir çevrede (<literal>chroot</literal>), paket bağımlılıklarının doğrulanması için <filename>pbuilder</filename> paketi çok faydalıdır. Bu, farklı mimariler için otoderleyici altında kaynak koddan temiz bir paket oluşturulmasını garanti eder, bu şekilde ciddi bir öneme sahip RC (release critical: dağıtımda kritik önemde) sınıfında yer alan bir seri FTBFS'den (Fails To Build From Source: Kaynak Koddan Derlemede Başarısızlıklar) kaçınılmış olunur. Debian otoderleyicisi için <link xlink:href="http://buildd.debian.org/"/> adresine bakınız.
      </para><para>
<command>pbuilder</command> komutunun en temel kullanım şekli, doğrudan root kullanıcısı tarafından çağrılması durumudur. Örneğin, aşağıdaki komutu <filename>.orig.tar.gz</filename>, <filename>.diff.gz</filename> ve <filename>.dsc</filename> dosyalarının bir arada bulunduğu dizinde çalıştırınız:
      </para><para>
<screen>root # <command>pbuilder create</command> # ikinci seferde: pbuilder update
root # <command>pbuilder build foo.dsc</command>
</screen>
      </para><para>
Yeni oluşturulan paketler <filename>/var/cache/pbuilder/result/</filename> dizinine root iyeliğinde yerleştirilecektir.
      </para><para>
<command>pdebuild</command> komutu <command>pbuilder</command> komutunun paket işlevlerini normal bir kullanıcı olarak kullanmanıza yardımcı olur. <filename>.orig.tar.gz</filename> dosyasının bulunduğu kaynak kodun kök dizininde aşağıdaki komutu çalıştırınız:
      </para><para>
<screen>$ <command>sudo pbuilder create</command> # ikinci seferde: sudo pbuilder update
$ <command>pdebuild</command>
</screen>
       </para><para>
Yeni oluşturulan paketler yine <filename>/var/cache/pbuilder/result/</filename> dizinine yerleştirilecek fakat dosyalar root iyeliğinde olmayacaktır.<footnote><para>Bu noktada, <filename>/var/cache/pbuilder/result/</filename> dizinine kullanıcının yazabilmesi için gerekli izinleri vermenizi ve <filename>~/.pbuilderrc</filename> veya <filename>/etc/pbuilderrc</filename> dosyasının
      </para><para>
<screen>AUTO_DEBSIGN=yes</screen>
      </para><para>
satırını içermesini sağlamanızı öneririm.
      </para><para>
Bu, üretilen paketleri <filename>~/.gnupg/</filename> dizinindeki kendi GPG anahtarınızla imzalamanızı mümkün kılacaktır. <literal>pbuilder</literal> paketinin geliştirilmesi sürmekte olduğundan en güncel resmi belgeleri inceleyerek yapılandırmayı bir de kendiniz gözden geçirmelisiniz.</para></footnote>
      </para><para>
<command>pbuilder</command> tarafından kullanılması için ilave apt-kaynakları eklemek isterseniz <filename>~/.pbuilderrc</filename> veya <filename>/etc/pbuilderrc</filename> içindeki <literal>OTHERMIRROR</literal>'ı ayarlayıp aşağıdaki komutu çalıştırınız (Sarge için):
      </para><para>
<screen>$ <command>sudo pbuilder update --distribution sarge --override-config</command>
</screen>
      </para><para>
<option>--override-config</option> seçeneğine <literal>chroot</literal> ortamında apt-kaynaklarının güncellenmesi için ihtiyaç vardır.
      </para><para>
<link xlink:href="http://www.netfort.gr.jp/~dancer/software/pbuilder.html"/> adresine, <link linkend="tr-man1-pdebuild"><command>pdebuild(1)</command></link>, <link linkend="tr-man5-pbuilderrc"><command>pbuilderrc(5)</command></link> ve <link linkend="tr-man8-pbuilder"><command>pbuilder(8)</command></link> kılavuz sayfalarına bakınız.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="maint-guide-tr-s8">
    <title>Paketin Debian'a gönderilmesi</title><para>
Şu ana kadar paketinizi denediniz ve artık <link xlink:href="http://www.debian.org/devel/join/newmaint"/> adresinde belirtildiği gibi Debian'ın yeni paket bakımcısı haline gelme işlemine başlayabilirsiniz.
    </para>
    <sect2 xml:id="maint-guide-tr-s8.1" userlevel="chunkthis">
      <title>Paketlerin Debian arşivine gönderilmesi</title><para>
Resmen bir geliştirici olduktan sonra paketi Debian arşivine yüklemeniz gerekecektir. Bunu elle yapabilirsiniz, fakat <link linkend="tr-man1-dupload"><command>dupload(1)</command></link> ve <link linkend="tr-man1-dput"><command>dput(1)</command></link> gibi bu amaç için geliştirilmiş araçları kullanmak işinizi kolaylaştırır.
      </para><para>
Önce, <command>dupload</command> komutunun yapılandırma dosyasını düzenlemelisiniz. Bunun için ya <filename>/etc/dupload.conf</filename> dosyasını veya kendi <filename>~/.dupload.conf</filename> dosyanızda bazı yerleri değiştirmelisiniz. Dosyaya aşağıdakine benzer satırlar koyun:
      </para><para>
<screen>package config;

$default_host = "anonymous-ftp-master";

$cfg{'anonymous-ftp-master'} = {
      fqdn =&gt; "ftp-master.debian.org",
      method =&gt; "ftp",
      incoming =&gt; "/pub/UploadQueue/",
      # files pass on to dinstall on ftp-master which sends emails itself
      dinstall_runs =&gt; 1,
};

1;
</screen>
      </para><para>
Elbetteki benim kişisel ayarlarımı kendinizinkine göre değiştirin ve dosyadaki her bir seçeneğin ne anlama geldiğini anlamak için <link linkend="tr-man5-dupload.conf"><command>dupload.conf(5)</command></link> kılavuz sayfasını okuyunuz.
      </para><para>
<literal>$default_host</literal> seçeneği en yanıltıcı olanıdır - hangi yükleme kuyruğunun öntanımlı olarak kullanılacağını belirler. "<filename>anonymous-ftp-master</filename>", birincil olandır, fakat daha hızlı bir tane eklemek isteyeceksinizdir. Yükleme kuyruklarıyla ilgili daha fazla bilgi için  Geliştiricilerin Referansında (Developers' Reference) "Paket Yükleme" ("Uploading a package") bölümünü (<filename>/usr/share/doc/developers-reference/ch-pkgs.en-us.iso-8859-1.html#s-upload</filename> dosyasındadır) okuyunuz.
      </para><para>
İnternet sağlayıcınıza bağlanarak şu komutu çalıştırın:
      </para><para>
<screen>$ <command>dupload gentoo_0.9.12-1_i386.changes</command>
</screen>
      </para><para>
<command>dupload</command>, <filename>.changes</filename> içindeki dosyaların MD5 sağlamalarının doğruluğunu kontrol eder, gerektiğinde yeniden paketi, <xref linkend="maint-guide-tr-s6.1"/> bölümündeki gibi yeniden oluşturmanız için uyaracaktır, bu işlemden sonra paketiniz düzgün bir şekilde yüklenebilir.
      </para><para>
Eğer <link xlink:href="ftp://ftp-master.debian.org/pub/UploadQueue/"/> adresinde <command>dupload</command> ile yüklemeyle ilgili bir sorun yaşarsanız, ftp'yi kullanarak <filename>gnupg</filename> ile imzalanmış <filename>*.commands</filename> dosyasını aynı adrese kendiniz yüklemeyi deneyerek sorunu çözebilirsiniz.<footnote><para><link xlink:href="ftp://ftp-master.debian.org/pub/UploadQueue/README"/> dosyasına bakın. Bundan başka, <literal>dput</literal> paketindeki <command>dcut</command> komutunu da kullanabilirsiniz.</para></footnote> Örneğin,<filename>hello.commands</filename>'i kullanın:
      </para><para>
<screen>-----BEGIN PGP SIGNED MESSAGE-----

Uploader: Roman Hodek &lt;Roman.Hodek@informatik.uni-erlangen.de&gt;
Commands:
 rm hello_1.0-1_i386.deb
 mv hello_1.0-1.dsx hello_1.0-1.dsc

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia

iQCVAwUBNFiQSXVhJ0HiWnvJAQG58AP+IDJVeSWmDvzMUphScg1EK0mvChgnuD7h
BRiVQubXkB2DphLJW5UUSRnjw1iuFcYwH/lFpNpl7XP95LkLX3iFza9qItw4k2/q
tvylZkmIA9jxCyv/YB6zZCbHmbvUnL473eLRoxlnYZd3JFaCZMJ86B0Ph4GFNPAf
Z4jxNrgh7Bc=
=pH94
-----END PGP SIGNATURE-----
</screen>
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s8.2" userlevel="chunkthis">
      <title>Paketin özel bir arşive gönderilmesi</title><para>
Eğer bir geliştirici olarak <filename>http://people.debian.org/~</filename><replaceable>hesap_ismi</replaceable> adresinde <command>dupload -t </command><replaceable>hedef_ismi</replaceable> ile bir kişisel paket arşivi oluşturmak isterseniz, aşağıdakileri <filename>/etc/dupload.conf</filename> dosyasına eklemelisiniz:
      </para><para>
<screen>
# Geliştirici hesabı
$cfg{'<emphasis>hedef_ismi</emphasis>'} = {
    fqdn =&gt; "people.debian.org",
    method =&gt; "scpb",
    incoming =&gt; "/home/<emphasis>hesap_ismi</emphasis>/public_html/package/",
    # Duyuruya gerek yok.
    dinstall_runs =&gt; 1,
};
$cfg{'<emphasis>hedef_ismi</emphasis>'}{preupload}{'changes'} = "
    echo 'mkdir -p public_html/package' | ssh people.debian.org  2&gt;/dev/null ;
    echo 'Paket dizini oluşturuldu!'";

$cfg{'<emphasis>hedef_ismi</emphasis>'}{postupload}{'changes'} = "
    echo 'cd public_html/package ;
    dpkg-scanpackages . /dev/null &gt;Packages || true ;
    dpkg-scansources . /dev/null &gt;Sources || true ;
    gzip -c Packages &gt;Packages.gz ;
    gzip -c Sources &gt;Sources.gz ' | ssh people.debian.org  2&gt;/dev/null ;
    echo 'Paket arşivi oluşturuldu!'";
</screen>
      </para><para>
Burada APT arşivi hızlı ve özensizce bir SSH kabuğu çalıştırarak oluşturulmuştur. <command>dpkg-scanpackages</command> ve <command>dpkg-scansources</command> ile üzerine yazılan dosyalar <filename>/dev/null</filename>'a yönlendirilmiştir. Bu yöntem Debian Geliştiricisi olmayanların paketleri kendi sunucularında tutmaları için de kullanılabilir. Bundan başka, <command>apt-ftparchive</command> veya başka betiklerle APT arşivi oluşturulabilir.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="maint-guide-tr-s9">
    <title>Paketin Güncellenmesi</title>
    <sect2 xml:id="maint-guide-tr-s9.1" userlevel="chunkthis">
      <title>Yeni Debian gözden geçirmesi</title><para>
Diyelim ki paketinizle ilgili #54321 numaralı bir bir hata bildirimi var ve çözebileceğiniz bir sorunu içeriyor olsun. Paketinizin yeni bir Debian gözden geçirmesini oluşturmak için, aşağıdakilere ihtiyacınız vardır:
      </para><para><itemizedlist>
        <listitem><para>
Elbetteki paketin kaynak kodunda hatayı düzeltiniz.
        </para></listitem><listitem><para>
<command>dch -i</command> veya <command>dch -v &lt;sürüm&gt;-&lt;yayım&gt;</command> kullanarak doğrudan Debian değişiklik kayıtları (<filename>changelog</filename>) dosyasının başına yeni bir gözden geçirme ekleyin ve daha sonra da tercih ettiğiniz bir metin düzenleyici ile açıklamalarınızı yazınız.
        </para><para><tip><para>
Soru: İstenilen biçimde zaman bilgisini nasıl alırsınız? Yanıt: <command>822-date</command> veya <command>date -R</command> kullanınız.
        </para></tip></para></listitem><listitem><para>
"<literal>Closes: #54321</literal>" ifadesini takip edecek şekilde değişiklik kaydındaki hatanın kısa açıklamasını ve çözümünü yazınız. Bu şekilde, paketinizin Debian arşivi tarafından kabul edilmesiyle, hata raporu, arşivin bakımını yapan yazılımlar tarafından otomatik olarak sihirli bir şekilde kapatılacaktır.
        </para></listitem><listitem><para>
<xref linkend="maint-guide-tr-s6.1"/>, <xref linkend="maint-guide-tr-s7"/> ve <xref linkend="maint-guide-tr-s8"/> bölümlerinde yaptıklarınızı tekrar yapınız. Farklı olarak, değişikliğe uğramadığından ve de Debian arşivinde mevcut olması nedeniyle paketin orjinal kaynak kodunu göndermeyeceksiniz.
        </para></listitem></itemizedlist>
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s9.2" userlevel="chunkthis">
      <title>Yeni üstdüzey dağıtım (kolay yol)</title><para>
Şimdi biraz farklı, biraz daha karışık bir durumu değerlendirelim - yeni bir üst düzey sürüm  yayınlanmış olsun ve siz de bunu paketlemek istiyorsunuz. O zaman şunları yapmanız gerekir:
      </para><para><itemizedlist>
        <listitem><para>
Yeni kaynak paketini indirin ve sıkıştırılmış tar dosyasını (mesela adı <filename>gentoo-0.9.13.tar.gz</filename> olsun) eski kaynak ağacının üstündeki dizine koyun (örn. <filename>~/gentoo/</filename>).
        </para></listitem><listitem><para>
Eski kaynak dizinine giriniz ve aşağıdaki komutu çalıştırınız:
        </para><para>
<screen>$ <command>uupdate -u gentoo-0.9.13.tar.gz</command>
</screen>
        </para><para>
Elbetteki bu dosya adını yazılımınızın yeni kaynak adıyla değiştiriniz. <link linkend="tr-man1-uupdate"><command>uupdate(1)</command></link> tar paketini düzgün şekilde isimlendirecek, <filename>.diff.gz</filename> dosyasından değişikleri uygulamaya çalışacak ve yeni <filename>debian/changelog</filename> dosyasını güncelleyecektir.
        </para></listitem><listitem><para>
<filename>../gentoo-0.9.13</filename> dizinine geçin ve <xref linkend="maint-guide-tr-s6.1"/>, <xref linkend="maint-guide-tr-s7"/> ve <xref linkend="maint-guide-tr-s8"/> bölümlerinde yaptıklarınızı tekrar yapınız.
        </para></listitem>
      </itemizedlist>
      </para><para>
Eğer <filename>debian/watch</filename> dosyasını <xref linkend="maint-guide-tr-s5.10"/> bölümünde anlatıldığı gibi düzenlerseniz, <link linkend="tr-man1-uscan"><command>uscan(1)</command></link>'i kullanarak otomatik ve sihirli bir şekilde gözden geçirilmiş kaynak kodları bulabilir ve daha sonra da onları indirip <command>uupdate</command>'i çalıştırabilirsiniz.
      </para>
    </sect2>
    <sect2  xml:id="maint-guide-tr-s9.3" userlevel="chunkthis">
      <title>Yeni üstdüzey dağıtım (gerçekçi)</title><para>
Paketleri Debian arşivi için hazırlarken, oluşan paketleri ayrıntılı bir şekilde kontrol etmelisiniz. Burada bunun daha gerçekçi bir örneği var:
      </para><para><orderedlist numeration="arabic">
        <listitem><para>Yeni üstdüzey kaynaktaki değişiklikleri doğrulayın:
        </para><para><itemizedlist>
          <listitem><para>
Yeni üstdüzey sürümün <filename>changelog</filename>, <filename>NEWS</filename> ve yeni sürümle birlikte dağıtılmış her ne başka belgelesi varsa okuyunuz.
          </para></listitem><listitem><para>
<filename>diff -urN</filename>'yi kullanarak eski ve yeni sürüm arasındaki değişikliklerin esas olarak nerelerde yapılmış olduğunu  anlamaya çalışın ve ayrıca, şüpheli gördüğünüz herşeye bir göz atın.
          </para></listitem>
          </itemizedlist>
        </para></listitem><listitem><para>
Eski Debian paketini yenisine uyarlayın:
        </para><para><itemizedlist>
            <listitem><para>
Kaynak tar paketini açın ve kaynak ağacının kökünü <filename>&lt;paketismi&gt;-&lt;üstdüzey_sürümü&gt;/</filename> olarak yeniden isimlendirin, <command>cd</command> ile dizinin içine girin.
          </para></listitem><listitem><para>
Sıkıştırılmış tar dosyasını üst dizine kopyalayın ve ismini <filename>&lt;paketismi&gt;_&lt;üstdüzey_sürümü&gt;.orig.tar.gz</filename> olarak değiştirin.
          </para></listitem><listitem><para>
Eski kaynak ağacına yaptığınız benzer değişiklikleri yeni kaynak ağacına da yapın. Olası yöntemler şunlar olabilir:
          </para><para><itemizedlist mark="disc">
            <listitem>
<command>zcat </command><replaceable>/dosya/yolu/&lt;paketismi&gt;_&lt;eski_sürüm&gt;</replaceable><command>.diff.gz | patch -p1</command> komutu,
            </listitem><listitem>
<command>uupdate</command> komutu,
            </listitem><listitem>
Eğer kaynak kod yönetimi için bir Subversion deposunu kullanıyorsanız, <command>svn merge</command> komutu kullanın veya
            </listitem><listitem>
eğer <command>dpatch</command> ile paketlendiyse basitçe eski kaynak kodundaki <filename>debian/</filename> dizinini kopyalayın
            </listitem></itemizedlist>
          </para></listitem><listitem><para>
Eski <filename>changelog</filename> kayıtlarını koruyun (sesler geliyor... ama bazen kazalar olabiliyor...)
          </para></listitem><listitem><para>
Yeni paket sürümü, üstdüzey sürüm numarasına <literal>-1</literal> Debian yayım numarası eklenmesiyle elde edilen yeni sürüm numarası olacaktır, örn., <literal>0.9.13-1</literal>.
          </para></listitem><listitem><para>
<filename>debian/changelog</filename> dosyasının başına bu yeni sürümü "New Upstream Release" (Yeni üstdüzey dağıtım) şeklinde bir girdi olarak ekleyin. Örneğin, <command>dch -v 0.9.13-1</command>.
          </para></listitem><listitem><para>
Özlü bir şekilde, yeni sürümde bildirilmiş hataları gidermek üzere yaptığınız değişiklikleri açıklayın ve <filename>changelog</filename> dosyasında bu hataları kapatın.
          </para></listitem><listitem><para>
Özlü bir şekilde, yeni sürümde bildirilmiş hataları gidermek üzere üstdüzey geliştiricinin yaptığı değişiklikleri açıklayın ve <filename>changelog</filename> dosyasında bu hataları kapatın.
          </para></listitem><listitem><para>
Eğer yama/birleştir (patch/merge) temiz bir şekilde uygulanmazsa, neyin hatalı gitmiş olabileceğini araştırın (ipuçları <filename>.rej</filename> dosyalarındadır). Genellikle sorun, yaptığınız yamanın üstdüzey kodlara zaten uygulanmış olması nedeniye yamanın ilgisiz kalmasıdır.
          </para></listitem><listitem><para>
Yeni sürüme geçiş sessiz ve rahatsız etmeden olmalıdır (var olan kullanıcılar yeni sürüme geçişi, eski hataların düzeltildiğini ve yeni özelliklerinin eklendiğini farketmeleri dışında farketmemelidir).<footnote><para>
Please make your package properly updates the config file upon upgrades
using well designed <literal>postinst</literal> etc., so that it
<emphasis role="bold">doesn't</emphasis> do things not wanted by the user!  These are
the enhancements that explain <emphasis role="bold">why</emphasis> people choose Debian.
When the upgrade is necessarily intrusive (eg., config files scattered
through various home directories with totally different structure), you
may consider to set package to the safe default (e.g., disabled service)
and provide proper documentations required by the policy
(<filename>README.Debian</filename> and <filename>NEWS.Debian</filename> ) as the last
resort. But don't bother with the debconf note.
</para></footnote>
          </para></listitem><listitem><para>
Eğer silinmiş şablon dosyaları herhangi bir nedenle eklemek ihtiyacı duyarsanız, <command>dh_make</command> komutunu <option>-o</option> seçeneği ile zaten debianlaşmış dizinde çalıştırıp daha sonra da bunları düzenleyiniz.
          </para></listitem><listitem><para>
Mevcut Debian değişiklikleri yeniden değerlendirilmelidir; aksini zorlayan nedenler olmadıkça üstdüzey sürümün (öyla ya da böyle) zaten sağladığı elemanları atın, yoksa onları saklamayı unutmayın.
          </para></listitem><listitem><para>
Eğer derleme sistemine özgü herhangi bir değişiklik yapıldıysa (bunu 1. adımdan bileceksiniz), <filename>debian/rules</filename> ve <filename>debian/control</filename> dosyalarını derleme bağımlılıkları açısından gerekliyse güncelleyin.
          </para></listitem>
          </itemizedlist>
        </para></listitem><listitem><para>
Yeni paketi <xref linkend="maint-guide-tr-s6.3"/> veya <xref linkend="maint-guide-tr-s7.6"/> bölümünde açıklandığı gibi derleyiniz. Bunun için <command>pbuilder</command> kullanımı da tercih edilebilir.
        </para></listitem><listitem><para>
Yeni paketlerin olması gerektiği gibi derlendiğini doğrulayın:
        </para><para><itemizedlist>
          <listitem>
<xref linkend="maint-guide-tr-s7"/> bölümündekileri uygulayın.
          </listitem><listitem>
<xref linkend="maint-guide-tr-s9.6"/> bölümündekileri uygulayın.
          </listitem><listitem>
<link xlink:href="http://www.debian.org/Bugs/">Debian Hata İzleme Sistemi</link>nde hala açık olan fakat giderilmiş hatalar var mı diye tekrar kontrol edin.
          </listitem><listitem>
Paketin doğru dağıtıma gönderildiğinden, uygun hata kapatmalarının <literal>Closes:</literal> alanında listelendiğinden, <literal>Maintainer:</literal> ve <literal>Changed-By:</literal> alanlarının eşleştiğinden ve dosyanın GPG imzalı olduğundan, v.s. emin olmak için <filename>.changes</filename> dosyasının içeriğini kontrol edin.
          </listitem></itemizedlist>
        </para></listitem><listitem><para>
Paketleme sırasında birşeyi düzeltmek için bir değişiklik yaparsanız, 2. adıma dönerek herşey aklınıza yatana kadar işlemleri tekrarlayın.
        </para></listitem><listitem><para>
Eğer paketinizin sponsorlarca desteklenmesi gerekiyorsa, derleme aşamasında özel seçenekler kullanılması gerekliyse (<command>dpkg-buildpackage -sa -v ...</command> gibi) bunları not alın ve sponsorlarınızın paketi düzgün şekilde oluşturmaları için onları bilgilendirin.
        </para></listitem><listitem><para>
Paketi arşive kendiniz gönderecekseniz, <xref linkend="maint-guide-tr-s8"/> bölümünde açıklananları uygulayın.
        </para></listitem>
      </orderedlist></para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s9.4" userlevel="chunkthis">
      <title><filename>orig.tar.gz</filename> dosyası</title><para>
Eğer paketleri sadece <filename>debian/</filename> dizini olan yeni kaynak ağacından üst dizinde <filename>.orig.tar.gz</filename> dosyası olmaksızın oluşturmaya çalışırsanız, farkında olmadan  <filename>diff.gz</filename> dosyası bulunmayan doğal bir kaynak paketi oluşturmuş olursunuz. Bu tür bir paketleme başka hiçbir dağıtımda kullanılamayacak, sadece Debian'a özgü paketler için geçerlidir.<footnote><para>Paket Debian'a özel bile olsa bazıları hala, <filename>orig.tar.gz</filename> dosyasından başka, <filename>debian/</filename> dizininin içeriğini <filename>diff.gz</filename> içinde paketlemenin daha iyi bir uygulama oldugunu ileri sürerler.</para></footnote>
      </para><para>
Doğal olmayan ve hem <filename>orig.tar.gz</filename> hem de <filename>debian/</filename> dosyasını içeren bir kaynak paket elde etmek için,  <xref linkend="maint-guide-tr-s2.4"/> bölümünde açıklandığı gibi <command>dh_make</command> komutu tarafından yapılana benzer şekilde, sürümün sıkıştırılmış tar dosyasını ana dizine kopyalamalı ve ismini <filename>&lt;paketismi&gt;_&lt;üstdüzey_sürüm&gt;.orig.tar.gz</filename> olarak değiştirmelisiniz.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s9.5" userlevel="chunkthis">
      <title><literal>cvs-buildpackage</literal> komutu ve benzetmeler</title><para>
Paketleme etkinliklerini yönetmek için bir kaynak kod yönetim sistemi kullanmayı düşünmelisiniz. Bunlardan çok kullanılanları için özelleştirilmiş çeşitli sarmalayıcı betikler vardır.
      </para><para><variablelist><varlistentry>
      <term>CVS</term><listitem><para><literal>cvs-buildpackage</literal>
      </para></listitem></varlistentry><varlistentry>
      <term>Subversion</term><listitem><para><literal>svn-buildpackage</literal>
      </para></listitem></varlistentry><varlistentry>
      <term>Arch (tla)</term><listitem><para>
        <itemizedlist mark="bullet">
          <listitem>
<para><literal>tla-buildpackage</literal></para>
          </listitem><listitem>
<para><literal>arch-buildpackage</literal></para>
          </listitem>
        </itemizedlist>
        </para></listitem></varlistentry></variablelist>
      </para><para>
Bu komutlar ayrıca, yeni üstdüzey paket sürümlerini de kendileri yapabilmektedir.
      </para>
    </sect2>
    <sect2 xml:id="maint-guide-tr-s9.6" userlevel="chunkthis">
      <title>Paket yükseltiminin doğrulanması</title><para>
Yeni bir paket sürümü oluşturduğunuzda, paketin olması gerektiği gibi yükseltildiğinden emin olmak için şu doğrulamaları yapmalısınız:
      </para><para><itemizedlist>
        <listitem>
Eski sürümden yükseltme yapın.
        </listitem><listitem>
Yeni sürümü kaldırmak için eski sürümün kurulmasını sağlayın.
        </listitem><listitem>
Yeni paketin kurulumunu yapın.
        </listitem><listitem>
Paketi kaldırıp yeniden kurun.
        </listitem> <listitem>
Yapılandırma dosyaları dahil herşeyiyle sistemden tamamen kaldırın.
        </listitem>
      </itemizedlist>
      </para><para>
Eğer paket <filename>pre/post/inst/rm</filename> betiklerinin kullanımına önem veriyorsa, bunların güncelleme yollarını da denemeyi unutmayın.
      </para><para>
Eğer paketiniz Debian tarafından evvelce dağıtıma sokulmuş ise kullanıcıların çoğu son Debian dağıtımındaki sürümden bu paketinize yükseltme yapacaklardır. Bu bakımdan, bu sürümden de yükseltme yapmayı denemeyi unutmayın.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="maint-guide-tr-s10">
    <title>Nereden yardım alınabilir</title><para>
Herkese açık bir yerde sorularınızı sormadan önce, lütfen olası kaynakları araştırınız.</para>
<itemizedlist>
<listitem><filename>/usr/share/doc/dpkg</filename>,
</listitem><listitem><filename>/usr/share/doc/debian</filename>,
</listitem><listitem><filename>/usr/share/doc/autotools-dev/README.Debian.gz</filename>,
</listitem><listitem><filename>/usr/share/doc/package/*</filename>
</listitem></itemizedlist><para>
dosyaları ile bu belgede bahsedilen kılavuz ve bilgi sayfayarı bu kaynaklar arasında sayılabilir. Ayrıca, <link xlink:href="http://nm.debian.org/"/> ve <link xlink:href="http://people.debian.org/~mpalmer/debian-mentors_FAQ.html"/> adreslerindeki tüm bilgilere de bakınız.
      </para><para>
Eğer belgelerde paketlemeyle ilgili aradığınız bilgiyi bulamazsanız bunu Debian akıl hocaları <email>debian-mentors@lists.debian.org</email> ileti listesinde sorabilirsiniz. Daha tecrübeli Debian geliştiricileri sizlere memnuniyetle yardım edeceklerdir, fakat soru sormadan önce en azından bir kaç belgeyi okumuş olmalısınız.
      </para><para>
Bu ileti listesi hakkında daha ayrıntılı bilgi edinmek için <link xlink:href="http://lists.debian.org/debian-mentors/"/> adresine bakınız.
      </para><para>
Bir hata raporu (evet, gerçekten hata raporları) aldığınızda, Debian Hata İzleme Sistemi'ne  (<link xlink:href="http://www.debian.org/Bugs/"/>) girmenizin ve oradaki belgeleri okuyarak hatalarla verimli bir şekilde baş edebilmenizin vakti gelmiş demektir. <filename>/usr/share/doc/developers-reference/ch-pkgs.en-us.iso-8859-1.html</filename> dosyasındaki Geliştiricilerin Referansı (Developers' Reference) altındaki Hatalarla Baş Etme (Handling Bugs) kısmını okumanızı özellikle tavsiye ederim.
      </para><para>
Hala sorularınız varsa onları Debian Geliştiricileri <email>debian-devel@lists.debian.org</email> ileti listesinde  sorabilirsiniz. <link xlink:href="http://lists.debian.org/debian-devel/"/> adresini bu liste ile ilgili ayrıntılı bilgi almak için inceleyebilirsiniz.
      </para><para>
Herşey yolunda gitse bile dua etmeniz gerekir, neden mi? Çünkü bir kaç saat (veya gün) içinde Dünya'nın çeşitli yerlerinden kullanıcılar paketinizi kullanmaya başlayacaklar ve eğer ciddi bir hata yaptıysanız bunların pekçoğundan kızgın içerikli pekçok ileti alacaksınız... Sadece şaka yapıyorum <literal>:)</literal>
      </para><para>
Rahat olun ve hata raporları için hazır olun, çünkü paketinizin Debian politikalarına tam uyması için daha yapılacak çok iş var. (Bir kere daha, belgeleri lütfen okuyunuz). İyi şanslar!
    </para>
  </sect1>

  <appendix xml:id="maint-guide-tr-apa">
    <title>Örnekler</title><para>
Burada üstdüzey geliştiricinin <filename>gentoo-1.0.2.tar.gz</filename> tar paketini paketleyip, tüm paketleri <filename>nm_target</filename>'e göndereceğiz.
    </para>
    <sect1 xml:id="maint-guide-tr-apa1">
      <title>Basit paketleme örneği</title><para>
<screen>$ <command>mkdir -p </command><emphasis>/dosya/yolu</emphasis> # yeni bir dizin
$ <command>cd </command><emphasis>/dosya/yolu</emphasis>
$ <command>tar -xvzf </command><emphasis>/dosya/yolu/gentoo-1.0.2</emphasis><command>.tar.gz</command> # kaynak paket
$ <command>cd </command><emphasis>gentoo-1.0.2</emphasis>
$ <command>dh_make -e </command><emphasis>isim@alan.dom </emphasis><command>-f </command><emphasis>/dosya/yolu/gentoo-1.0.2</emphasis><command>.tar.gz</command>
...  Soruları yanıtla.
...  Kaynak ağacını düzelt.
...  Bu bir betik paketiyse debian/control dosyasında "Architecture: all" yap.
...  ../<replaceable>gentoo_1.0.2</replaceable>.orig.tar.gz dosyasını silme.
$ <command>debuild</command>
... Hiç uyarı gelmemesini sağla.
$ <command>cd ..</command>
$ <command>dupload -t </command><emphasis>nm_target gentoo_1.0.2-1</emphasis><command>_i386.changes</command>
</screen></para>
    </sect1>
    <sect1  xml:id="maint-guide-tr-apa2">
      <title><literal>dpatch</literal> ve <literal>pbuilder</literal> ile paketleme örneği</title><para>
<screen>$ <command>mkdir -p </command><emphasis>/dosya/yolu</emphasis> # yeni bir dizin
$ <command>cd </command><emphasis>/dosya/yolu</emphasis>
$ <command>tar -xvzf </command><emphasis>/dosya/yolu/gentoo-1.0.2</emphasis><command>.tar.gz</command>
$ <command>cp -a </command><emphasis>gentoo-1.0.2 gentoo-1.0.2-orig</emphasis>
$ <command>cd </command><emphasis>gentoo-1.0.2</emphasis>
$ <command>dh_make -e </command><emphasis>isim@alan.dom </emphasis><command>-f </command><emphasis>/dosya/yolu/gentoo-1.0.2</emphasis><command>.tar.gz</command>
...  Soruları yanıtla.
...  Kaynak ağacını düzelt.
...  Paketleri "dpkg-buildpackage -rfakeroot -us -uc" ile derlemeyi dene.
...  Kaynak paketindekileri düzenleyip derlenebeler hale getir.
...  ../<replaceable>gentoo_1.0.2</replaceable>.orig.tar.gz dosyasını silme
$ <command>cd ..</command>
$ <command>cp -a </command><emphasis>gentoo-1.0.2 gentoo-1.0.2-keep</emphasis> # yedekle
$ <command>mv </command><emphasis>gentoo-1.0.2</emphasis><command>/debian debian</command>
$ <command>diff -Nru </command><emphasis>gentoo-1.0.2-orig gentoo-1.0.2</emphasis><command> &gt; </command><emphasis>yama-dosyası</emphasis>
... Bunu yaparken gentoo-1.0.2 dizininin üstüne yazabilirsiniz.
... Her ihtimale karşı gentoo-1.0.2-keep dizinini silme.
$ <command>mkdir -p debian/patches</command>
$ <command>dpatch patch-template </command><emphasis>yama/dosyası </emphasis> <command>-p "01_patchname" "patch-file description"</command>\
  <command> &lt; </command><emphasis>yama-dosyası </emphasis><command> &gt; debian/patches/01_patchname.dpatch</command>
$ <command>cd debian/patches</command>
$ <command>echo 01_patchname.dpatch &gt;00list</command>
$ <command>cd ../.. </command> # <emphasis>/dosya/yolu</emphasis>'na geç.
$ <command>rm -rf </command><emphasis>gentoo-1.0.2</emphasis>
$ <command>editor debian/rules</command>
</screen>
      </para><para>
<filename>debian/rules</filename> dosyasının özgün hali:
      </para><para>
<screen>config.status: configure
     ./configure --prefix=/usr --mandir=/usr/share
build: config.status
     ${MAKE}
clean:
     $(testdir)
     $(testroot)
     ${MAKE} distclean
     rm -rf debian/imaginary-package debian/files debian/substvars
</screen>
      </para><para>
<filename>debian/rules</filename> dosyasını <command>dpatch</command>'ın kullanabilmesi için bir metin düzenleyici ile şu hale getirin:
      </para><para>
<screen>config.status: patch configure
     ./configure --prefix=/usr --mandir=/usr/share
build: config.status
     ${MAKE}
clean: clean-patched unpatch
clean-patched:
     $(testdir)
     $(testroot)
     ${MAKE} distclean
     rm -rf debian/imaginary-package debian/files debian/substvars
patch: patch-stamp
patch-stamp:
     dpatch apply-all
     dpatch call-all -a=pkg-info &gt;patch-stamp

unpatch:
     dpatch deapply-all
     rm -rf patch-stamp debian/patched
</screen>
      </para><para>
<command>dpatch</command> sistemi ile kaynak ağacını yeniden paketlemek için artık hazırsınız.
      </para><para>
<screen>$ <command>tar -xvzf </command><emphasis>gentoo_1.0.2</emphasis><command>.orig.tar.gz</command>
$ <command>cp -a debian/ </command><emphasis>gentoo-1.0.2</emphasis><command>/debian</command>
$ <command>cd </command><emphasis>gentoo-1.0.2</emphasis>
$ <command>sudo pbuilder update</command>
$ <command>pdebuild</command>
$ <command>cd /var/cache/pbuilder/result/</command>
$ <command>dupload -t</command><emphasis>nm_target gentoo_1.0.2-1</emphasis><command>_i386.changes</command>
</screen>
      </para>
    </sect1>
  </appendix>

</article>

