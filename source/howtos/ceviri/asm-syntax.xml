<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
        asm-syntax.xml, v1.0, GPLv2, Ocak 2001
     ******************************************************************** -->
<article xml:id="asm-syntax" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
    <info>
     <title>Linux ile Sembolik Makina Dili Kullanımı</title>
     <authorgroup>
      <author>
       <personname>
        <firstname>Phillip</firstname>
       </personname>
       <affiliation>
        <address>
         <email>phillip@ussrback.com</email>
        </address>
       </affiliation>
      </author>
      <author role="translator">
       <personname>
        <firstname>Fehmi Noyan İSİ</firstname>
       </personname>
       <affiliation>
        <address>
         <email>fnoyanisi@yahoo.com</email>
        </address>
       </affiliation>
      </author>
     </authorgroup>
     <pubdate>8 Ocak 2001</pubdate>
     <legalnotice>
      <para>
Bu belgenin, <emphasis>Linux ile Sembolik Makina Dili Kullanımı</emphasis>, 1.0 sürümünün <emphasis role="bold">telif hakkı © 2003 <emphasis>Fehmi Noyan İSİ</emphasis></emphasis>'ye ve özgün belgenin <emphasis role="bold">telif hakkı © 2003 <emphasis>Phillip</emphasis><email>phillip@ussrback.com</email></emphasis>'e aittir. Bu belgeyi, Free Software Foundation tarafından
yayınlanmış bulunan GNU Genel Kamu Lisansının 2. ya da daha sonraki
sürümünün koşullarına bağlı kalarak kopyalayabilir, dağıtabilir ve/veya
değiştirebilirsiniz. Bu Lisansın özgün kopyasını <uri xlink:href="http://www.gnu.org/copyleft/gpl.html">http://www.gnu.org/copyleft/gpl.html</uri> adresinde bulabilirsiniz.</para>
      <para>
BU BELGE <quote>ÜCRETSİZ</quote> OLARAK RUHSATLANDIĞI İÇİN, İÇERDİĞİ
BİLGİLER İÇİN İLGİLİ KANUNLARIN İZİN VERDİĞİ ÖLÇÜDE HERHANGİ BİR GARANTİ
VERİLMEMEKTEDİR. AKSİ YAZILI OLARAK BELİRTİLMEDİĞİ MÜDDETÇE TELİF HAKKI
SAHİPLERİ VE/VEYA BAŞKA ŞAHISLAR BELGEYİ <quote>OLDUĞU GİBİ</quote>,
AŞİKAR VEYA ZIMNEN, SATILABİLİRLİĞİ VEYA HERHANGİ BİR AMACA UYGUNLUĞU DA
DAHİL OLMAK ÜZERE HİÇBİR GARANTİ VERMEKSİZİN DAĞITMAKTADIRLAR. BİLGİNİN
KALİTESİ İLE İLGİLİ TÜM SORUNLAR SİZE AİTTİR. HERHANGİ BİR HATALI BİLGİDEN
DOLAYI DOĞABİLECEK OLAN BÜTÜN SERVİS, TAMİR VEYA DÜZELTME MASRAFLARI SİZE
AİTTİR.
  </para>
      <para>
İLGİLİ KANUNUN İCBAR ETTİĞİ DURUMLAR VEYA YAZILI ANLAŞMA HARİCİNDE HERHANGİ
BİR ŞEKİLDE TELİF HAKKI SAHİBİ VEYA YUKARIDA İZİN VERİLDİĞİ ŞEKİLDE BELGEYİ
DEĞİŞTİREN VEYA YENİDEN DAĞITAN HERHANGİ BİR KİŞİ, BİLGİNİN KULLANIMI VEYA
KULLANILAMAMASI (VEYA VERİ KAYBI OLUŞMASI, VERİNİN YANLIŞ HALE GELMESİ,
SİZİN VEYA ÜÇÜNCÜ ŞAHISLARIN ZARARA UĞRAMASI VEYA BİLGİLERİN BAŞKA BİLGİLERLE
UYUMSUZ OLMASI) YÜZÜNDEN OLUŞAN GENEL, ÖZEL, DOĞRUDAN YA DA DOLAYLI HERHANGİ
BİR ZARARDAN, BÖYLE BİR TAZMİNAT TALEBİ TELİF HAKKI SAHİBİ VEYA İLGİLİ KİŞİYE
BİLDİRİLMİŞ OLSA DAHİ, SORUMLU DEĞİLDİR.
  </para>
      <para>
Tüm telif hakları aksi özellikle belirtilmediği sürece sahibine aittir.
Belge içinde geçen herhangi bir terim, bir ticari isim ya da kuruma itibar
kazandırma olarak algılanmamalıdır. Bir ürün ya da markanın kullanılmış
olması ona onay verildiği anlamında görülmemelidir.
  </para>
     </legalnotice>
    </info>
    <section xml:id="asm-syntax-intro">
     <info>
      <title>Giriş</title>
     </info>
     <para>
Bu belge (özellikle satıriçi sembolik makina dili konusunda) programlama alanındaki eksikliklerden dolayı hazırlanmıştır ve şunu belirtmeliyim ki bu belge size bir çekirdek kodu yazma becerisi kazandırmak için yazılmamıştır, çünkü bu konuda zaten yeteri kadar belge mevcuttur.
    </para>
     <para>
Bu belgenin çeşitli kısımlarını deneyimlerimden yararlanarak yazdım ve bu sebepten herhangi bir hata bulunması olasıdır. Eğer herhangi bir bölümde böyle bir hataya rastlarsanız bana e-posta yolu bildirmek ve konu hakkında beni bilgilendirmek için tereddüt etmeyin.
  </para>
     <para>
Bu belgeden yaralanabilmek için temel bir x86 sembolik makina dili ve C bilgisi
gereklidir.
    </para>
    </section>
    <section xml:id="asm-syntax-diff">
     <info>
      <title>Intel ve AT&amp;T Sözdizimi</title>
     </info>
     <para>
Intel ve AT&amp;T Sembolik Makina Dili sözdizimleri görünüşte birbirlerinden çok farklıdırlar ve bu durum ilk başta Intel sözdizimi kullanıp daha sonra AT&amp;T sözdizimi ile karşılaşan ya da önce AT&amp;T daha sonra Intel sözdizimi kullanan birisi için karışıklık yaratmaktadır. Sözü fazla uzatmadan temellere başlayalım.
    </para>
     <section>
      <info>
       <title>Önekler</title>
      </info>
      <para>
Intel sözdiziminde yazmaçların ve sabit değerlerin önekleri yoktur. Buna karşın AT&amp;T sözdiziminde yazmaçlar bir '%' ve sabit değerler de bir '$' öneki alırlar. Intel sözdiziminde hexadecimal (onaltılık) veya binary (ikilik) sistemdeki sabit değerler sırasıyla 'h' ve 'b' öneki alırlar. Eğer ilk hexadecimal basamak bir harf ise değer bir '0' öneki alır. Örnek:
      </para>
      <literallayout indent="0" class="normal">
  Intel Sözdizimi         AT&amp;T Sözdizimi
------------------      ---------------------
  mov eax,1               movl $1,%eax
  mov ebx,0ffh            movl $0xff,%ebx
  int 80h                 int  $0x80
</literallayout>
     </section>
     <section>
      <info>
       <title>Terimlerin Yönü</title>
      </info>
      <para>
Intel sözdizimindeki terimlerin yönü AT&amp;T sözdizimindekinin tersidir.
Intel sözdiziminde ilk terim hedef (destination) ve ikinci terim kaynak
(source) olur, buna karşın AT&amp;T sözdiziminde ilk terim kaynak ve
ikinci terim hedeftir. Bu durumda AT&amp;T sözdiziminin yararı açıktır.
Soldan sağa okuruz, soldan sağa yazarız, öyleyse soldan sağa olan sözdizimi
zaten doğal olandır. Örnek:
      </para>
      <informaltable frame="none" style=";background:#999999;">
       <tgroup cols="2">
        <thead>
         <row style="background:#eeeedd;">
          <entry align="center">
           <literal>Intel Sözdizimi</literal>
          </entry>
          <entry align="center">
           <literal>AT&amp;T Sözdizimi</literal>
          </entry>
         </row>
        </thead>
        <tbody>
         <row style="background:#ffffee;">
          <entry>
           <literallayout indent="0" width="40" class="normal"><userinput>komut </userinput><varname>hedef</varname>,<varname>kaynak</varname>
mov   eax,[ecx]
</literallayout>
          </entry>
          <entry>
           <literallayout indent="0" width="40" class="normal"><userinput>komut </userinput><varname>kaynak</varname>,<varname>hedef</varname>
movl  (%ecx),%eax
</literallayout>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </section>
     <section>
      <info>
       <title>Bellek Terimleri</title>
      </info>
      <para>
Yukarıda da görüldüğü gibi bellek terimleri de farklıdır. Intel sözdiziminde
temel yazmaç <userinput>[</userinput> ve <userinput>]</userinput> karakaterleri
arasına yazılırken buna karşın AT&amp;T sözdiziminde <userinput>(</userinput>
ve <userinput>)</userinput> karakterleri arasına yazılır. Örnek:
      </para>
      <informaltable frame="none" style=";background:#999999;">
       <tgroup cols="2">
        <thead>
         <row style="background:#eeeedd;">
          <entry align="center">Intel Sözdizimi</entry>
          <entry align="center">AT&amp;T Sözdizimi</entry>
         </row>
        </thead>
        <tbody>
         <row style="background:#ffffee;">
          <entry>
           <literallayout indent="0" width="20" class="normal">
mov eax,[ebx]
mov eax,[ebx+3]
</literallayout>
          </entry>
          <entry>
           <literallayout indent="0" width="20" class="normal">
movl (%ebx),%eax
movl 3(%ebx),%eax
</literallayout>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <para>
Karmaşık işlemler gerektiren yönergelerde AT&amp;T sözdiziminin Intel
sözdizimine göre anlaşılması daha güçtür. Bu tür işlemler için Intel
sözdizimi
      </para>
      <literallayout indent="0" class="normal"><varname>segreg</varname>:[<varname>base</varname>+<varname>index</varname>*<varname>scale</varname>+<varname>disp</varname>]
</literallayout>
      <para>
şeklindedir. AT&amp;T sözdizimi ise
      </para>
      <literallayout indent="0" class="normal">
    %<varname>segreg</varname>:<varname>disp</varname>(<varname>base</varname>,<varname>index</varname>,<varname>scale</varname>)
</literallayout>
      <para>
şeklindedir.
      </para>
      <para><varname>index</varname>, <varname>scale</varname>, <varname>disp</varname> ve
<varname>segreg</varname> isteğe bağlıdır ve istenirse kullanılmayabilir.
<varname>scale</varname> tanımlı değilse ve <varname>index</varname> tanımlı ise,
<varname>scale</varname> <userinput>1</userinput> kabul edilir.
<varname>segreg</varname> yönergeye ve uygulamanın gerçek kipte mi yoksa korumalı
kipte mi çalıştığına bağlıdır. Gerçek kipte komuta bağlı olmasına karşın, korumalı
kipte kullanımı gerekli değildir. Kullanılan sabit değer, AT&amp;T'de
<varname>scale</varname> veya <varname>disp</varname> için kulanıldığında
<userinput>$</userinput> öneki kullanılmaz. Örnek:
      </para>
      <informaltable frame="none" style=";background:#999999;">
       <tgroup cols="2">
        <thead>
         <row style="background:#eeeedd;">
          <entry align="center">Intel Sözdizimi</entry>
          <entry align="center">AT&amp;T Sözdizimi</entry>
         </row>
        </thead>
        <tbody>
         <row style="background:#ffffee;">
          <entry>
           <literallayout indent="0" width="40" class="normal"><userinput>komut </userinput><varname>foo</varname>,<varname>segreg</varname>:[<varname>base</varname>+<varname>index</varname>*<varname>scale</varname>+<varname>disp</varname>]
mov   eax,[ebx+20h]
add   eax,[ebx+ecx*2h]
lea   eax,[ebx+ecx]
sub   eax,[ebx+ecx*4h-20h]
</literallayout>
          </entry>
          <entry>
           <literallayout indent="0" width="40" class="normal"><userinput>komut </userinput> %<varname>segreg</varname>:<varname>disp</varname>(<varname>base</varname>,<varname>index</varname>,<varname>scale</varname>),<varname>foo</varname>
movl  0x20(%ebx),%eax
addl  (%ebx,%ecx,0x2),%eax
leal  (%ebx,%ecx),%eax
subl  -0x20(%ebx,%ecx,0x4),%eax
</literallayout>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <para>
Gördüğünüz gibi AT&amp;T'nin anlaşılması güçtür.
      </para>
      <literallayout indent="0" class="normal">
    [<varname>base</varname>+<varname>index</varname>*<varname>scale</varname>+<varname>disp</varname>]
</literallayout>
      <para>
kalıbı,
      </para>
      <literallayout indent="0" class="normal"><varname>disp</varname>(<varname>base</varname>,<varname>index</varname>,<varname>scale</varname>)
</literallayout>
      <para>
kalıbına göre daha anlamlı bir görünüm sağlar.
      </para>
     </section>
     <section>
      <info>
       <title>Sonekler</title>
      </info>
      <para>
Sizin de fark ettiğiniz gibi AT&amp;T sözdiziminde komutların sonekleri vardır. Bu sonekler kullanılan terimin boyutunu verir. Uzun için (long: 32 bit) <userinput>l</userinput>, sözcük için (word: 16 bit) <userinput>w</userinput> ve bayt (byte: 8 bit) için <userinput>b</userinput> kullanılır. Intel sözdiziminde bellek terimleri için benzer yönergeler kullanılır, örneğin <literal>byte ptr</literal>, <literal>word ptr</literal>, <literal>dword ptr</literal>. Tabii ki <literal>dword</literal>, <userinput>long</userinput>'a karşılık gelmektedir. Bu işlem C dilindeki tür dönüştürmeye benzemektedir, fakat kullanılan yazmaçların kapasitesi varsayılan tür genişliği olarak düşünüldüğü zaman gerekli olmamaktadır. Örnek:
    </para>
      <informaltable frame="none" style=";background:#999999;">
       <tgroup cols="2">
        <thead>
         <row style="background:#eeeedd;">
          <entry align="center">Intel Sözdizimi</entry>
          <entry align="center">AT&amp;T Sözdizimi</entry>
         </row>
        </thead>
        <tbody>
         <row style="background:#ffffee;">
          <entry>
           <literallayout indent="0" class="normal">
mov al,bl
mov ax,bx
mov eax,ebx
mov eax, dword ptr [ebx]
</literallayout>
          </entry>
          <entry>
           <literallayout indent="0" class="normal">
movb %bl,%al
movw %bx,%ax
movl %ebx,%eax
movl (%ebx),%eax
</literallayout>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <warning>
       <info>
        <title>BURADAN SONRAKİ TÜM ÖRNEKLER AT&amp;T SÖZDİZİMİNDE OLACAKTIR</title>
       </info>
      </warning>
     </section>
    </section>
    <section xml:id="asm-syntax-syscalls">
     <info>
      <title>Sistem Çağrıları</title>
     </info>
     <para>
Bu bölümde linux sistem çağrılarının sembolik makina dilinde kullanımını kısaca anlatılacaktır. Sistem çağrıları, <filename>/usr/man/man2</filename> dizini altında bulunan kılavuz dosyalarındaki bütün işlevleri içerir. Ayrıca <filename>/usr/include/sys/syscall.h</filename> başlık dosyasında da listelenmişlerdir. Bu işlevlerin büyük bir listesi <uri xlink:href="http://www.linuxassembly.org/syscall.html">http://www.linuxassembly.org/syscall.html</uri> adresinde bulunabilir. Bu işlevler Linux <userinput>int $0x80</userinput> ile de çalıştırılabilir.
    </para>
     <section>
      <info>
       <title>Altıdan Az Değiştirge Alan Sistem Çağrıları</title>
      </info>
      <para>
Tüm sistem çağrıları için sistem çağrı numarası <userinput>%eax</userinput> içine atılır. Altıdan az değiştirge alan sistem çağrıları için değiştirgeler sırasıyla <userinput>%ebx</userinput>, <userinput>%ecx</userinput>, <userinput>%edx</userinput>, <userinput>%esi</userinput>, <userinput>%edi</userinput> yazmaçlarına atılır. Sistem çağrısından dönen değer <userinput>%eax</userinput> içerisinde saklanır.
      </para>
      <para>
Sistem çağrı numarasına <filename>/usr/include/sys/syscall.h</filename> başlık dosyasından bakılabilir. Macrolar <userinput>SYS_<emphasis>sistem_çağrısının_adı</emphasis></userinput> şeklinde ifade edilir , örneğin <literal>SYS_exit</literal>, <literal>SYS_close</literal>, vb.
      </para>
      <example>
       <info>
        <title>Hello world</title>
       </info>
       <screen>
/* write.s */

.data
  hello:
  .string "hello world\n"
.text
  .globl _start
_start:
  movl $SYS_write,%eax  // SYS_write = 4
  movl $STDOUT,%ebx     // fd = fileno(stdio)
  movl $hello,%ecx      // buf = str
  movl $12,%edx         // count = 0x6
  int  $0x80

  movl $SYS_exit
</screen>
      </example>
      <para><userinput>write</userinput>(2) man sayfasına göre, <userinput>write</userinput> işlevi
      </para>
      <literallayout indent="0" class="normal">
    ssize_t <userinput>write</userinput>(int <varname>fd</varname>, const void *<varname>buf</varname>, size_t <varname>count</varname>)
</literallayout>
      <para>şeklinde belirtilir.
      </para>
      <para>
Bundan dolayı <varname>fd</varname> <userinput>%ebx</userinput> içerisine, <varname>buf</varname> <userinput>%ecx</userinput> çerisine, <varname>buf</varname> <userinput>%edx</userinput> içerisine ve <literal>SYS_write</literal> da <userinput>%eax</userinput> içerisine atılır. Bu işlem sistem çağrısının çalıştırılması için bir <literal>int $0x80</literal> yönergesi tarafından takip edilir. Sistem çağrısından geri dönen değer <userinput>%eax</userinput> içerisinde saklanır.
      </para>
      <para>
Aynı işlem beş değiştirgeden az değiştirgesi bulunan sistem çağrılarına uygulanabilir. Sadece kullanılmayan yazmaçlara dokunmayın. <userinput>open</userinput> veya <userinput>fcntl</userinput> gibi isteğe bağlı fazladan değiştirge bulunduran sistem çağrıları kendileri atama yaparlar.
      </para>
     </section>
     <section>
      <info>
       <title>Beşten Fazla Değiştirge Alan Sistem Çağrıları</title>
      </info>
      <para>
Değiştirge sayısı beşten fazla olan sistem çağrılarında da yine sistem çağrı numarası <userinput>%eax</userinput> içerisine saklanır fakat argümalar bellekte tutulur ve ilk değiştirgesi gösteren bir gösterici <userinput>%ebx</userinput>'e atılır.
      </para>
      <para>
Eğer yığıtı kullanıyorsanız değiştirgeler yığıtın içerisine geriye doğru <userinput>push</userinput> edilmelidir, örneğin son değiştirgeden ilkine doğru. Daha sonra yığıt gösterici <userinput>%ebx</userinput> taban yazmacı içerisine kopyalanmalıdır. Aksi taktirde değiştirgeleri ayrılmış bir bellek alanına kopyalayın ve ilk değiştirgenin adresini <userinput>%ebx</userinput> içerisine koyun.
      </para>
      <example xml:id="asm-syntax-exp-mmap">
       <info>
        <title>sistem çağrısı mmap</title>
       </info>
       <screen>
/* mmap.s */

.data
  fd:
    .long 0
  fdlen:
    .long 0
  mappedptr:
    .long 0

.text
.globl _start
_start:
  subl $24,%esp

// open(file, O_RDONLY);
  movl $SYS_open,%eax
  movl 32(%esp),%ebx     // argv[1], %esp+8+24 de
  xorl %ecx,%ecx         // %ecx'i O_RDONLY, yani 0 yap
  int  $0x80

  test %eax,%eax         // dönen değer &lt; 0 ise çık
  js   exit

  movl %eax,fd           // fd'i sakla

// lseek(fd,0,SEEK_END);
  movl %eax,%ebx
  xorl %ecx,%ecx         // göreli bellek konumunu sıfır yap
  movl $SEEK_END,%edx
  movl $SYS_lseek,%eax
  int   $0x80

  movl %eax,fdlen        // dosya uzunluğunu sakla

  xorl %edx,%edx

// mmap(NULL,fdlen,PROT_READ,MAP_SHARED,fd,0);
  movl %edx,(%esp)
  movl %eax,4(%esp)
  movl $PROT_READ,8(%esp)
  movl $MAP_SHARED,12(%esp)
  movl fd,%eax
  movl %eax,16(%esp)
  movl %edx,20(%esp)

  movl $SYS_mmap,%eax
  movl %esp,%ebx
  int  $0x80

  movl %eax,mappedptr    // göstericiyi sakla

// write(STDOUT, mappedptr, fdlen);
  movl $STDOUT,%ebx
  movl %eax,%ecx
  movl fdlen,%edx
  movl $SYS_write,%eax
  int  $0x80

// munmap(mappedptr, fdlen);
  movl mappedptr,%ebx
  movl fdlen,%ecx
  movl $SYS_munmap,%eax
  int  $0x80

// close(fd);
  movl fd,%ebx           // dosya tanımlayıcıyı yükle
  movl $SYS_close,%eax
  int  $0x80
exit:
// exit(0);
  movl $SYS_exit,%eax
  xorl %ebx,%ebx
  int  $0x80

  ret
</screen>
      </example>
      <example>
       <info>
        <title>mmap()'i C içerisinde kullanmak</title>
       </info>
       <screen>
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;

#define STDOUT 1

void
main(void)
{
  char file[] = "mmap.s";
  char *mappedptr;
  int fd, filelen;

  fd = fopen(file, O_RDONLY);
  filelen = lseek(fd, 0, SEEK_END);
  mappedptr = mmap(NULL, filelen, PROT_READ, MAP_SHARED, fd, 0);
  write(STDOUT, mappedptr, filelen);
  munmap(mappedptr, filelen);
  close(fd);
}
</screen>
      </example>
      <para>
mmap() değiştirgelerinin bellekte dizilişleri:
</para>
      <informaltable frame="none" style=";background:#999999;">
       <tgroup cols="6">
        <thead>
         <row style="background:#eeeedd;">
          <entry align="center">
           <userinput>%esp</userinput>
          </entry>
          <entry align="center">
           <userinput>%esp+4</userinput>
          </entry>
          <entry align="center">
           <userinput>%esp+8</userinput>
          </entry>
          <entry align="center">
           <userinput>%esp+12</userinput>
          </entry>
          <entry align="center">
           <userinput>%esp+16</userinput>
          </entry>
          <entry align="center">
           <userinput>%esp+20</userinput>
          </entry>
         </row>
        </thead>
        <tbody>
         <row style="background:#ffffee;">
          <entry>
           <literal>00000000</literal>
          </entry>
          <entry>
           <literal>filelen</literal>
          </entry>
          <entry>
           <literal>00000001</literal>
          </entry>
          <entry>
           <literal>00000001</literal>
          </entry>
          <entry>
           <literal>fd</literal>
          </entry>
          <entry>
           <literal>00000000</literal>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
      <para>ASM Karşılığı:</para>
      <screen><prompt>$</prompt><userinput>cat mmap.s</userinput>
.include "defines.h"
.data
  file:
    .string "mmap.s"
  fd:
    .long 0
  filelen:
    .long 0
  mappedptr:
    .long 0
.globl main
main:
  push %ebp
  movl %esp,%ebp
  subl $24,%esp

// open($file, $O_RDONLY);
  movl $fd,%ebx          // fd kaydediliyor
  movl %eax,(%ebx)

// lseek($fd,0,$SEEK_END);
  movl $filelen,%ebx     // dosya uzunluğu kaydediliyor
  movl %eax,(%ebx)

  xorl %edx,%edx

// mmap(NULL,$filelen,PROT_READ,MAP_SHARED,$fd,0);
  movl %edx,(%esp)
  movl %eax,4(%esp)      // dosya uzunluğu hala %eax içerisinde
  movl $PROT_READ,8(%esp)
  movl $MAP_SHARED,12(%esp)
  movl $fd,%ebx          // dosya tanımlayıcısı yükleniyor
  movl (%ebx),%eax
  movl %eax,16(%esp)
  movl %edx,20(%esp)
  movl $SYS_mmap,%eax
  movl %esp,%ebx
  int  $0x80

  movl $mappedptr,%ebx   // ptr kaydediliyor
  movl %eax,(%ebx)

// write($stdout, $mappedptr, $filelen);
// munmap($mappedptr, $filelen);
// close($fd);

  movl %ebp,%esp
  popl %ebp

  ret
<prompt>$</prompt>
</screen>
      <note>
       <para>
Yukarıdaki kaynak kodu <xref linkend="asm-syntax-exp-mmap"/> örneğindeki kaynak kodundan farklıdır. Yukarıda bulunan kaynak kodu diğer sistem çağrılarını, bu bölümün konusu olmadıkları için, göstermemektedir. Yukarıdaki kod sadece <filename>mmap.s</filename> dosyasını açar, oysa <xref linkend="asm-syntax-exp-mmap"/> kaynak kodu komut satırı değiştirgelerini okumaktadır. <userinput>mmap</userinput>  örneği dosya uzunluğunu okumak için de <userinput>lseek</userinput>'i kullanmaktadır.
</para>
      </note>
     </section>
     <section>
      <info>
       <title>Soket Sistem Çağrıları</title>
      </info>
      <para>
Soket sistem çağrıları, <userinput>%eax</userinput> içerisine giden, sadece bir sistem çağrı numarası kullanır: <userinput>SYS_socketcall</userinput>. Soket işlevleri <filename>/usr/include/linux/net.h</filename> başlık dosyası içerisinde bulunan ve <userinput>%ebx</userinput>'e kaydedilen bir altişlev numarası yolu ile tanımlanır. Sistem çağrı değiştirgesini  gösteren bir gösterici <userinput>%ecx</userinput> içerisinde saklanır. Soket sistem çağrıları da <literal>int $0x80</literal> çağırılarak çalıştırılabilir.
      </para>
      <screen>
/* socket.s */

.text
.globl _start
_start:
 sub $12,%esp

// socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
  movl $AF_INET,(%esp)
  movl $SOCK_STREAM,4(%esp)
  movl $IPPROTO_TCP,8(%esp)

  movl $SYS_socketcall,%eax
  movl $SYS_socketcall_socket,%ebx
  movl %esp,%ecx
  int  $0x80

  movl $SYS_exit,%eax
  xorl %ebx,%ebx
  int  $0x80
  ret
</screen>
     </section>
    </section>
    <section xml:id="asm-syntax-cmdline-args">
     <info>
      <title>Komut Satırı Değiştirgeleri</title>
     </info>
     <para>
Linux çalışabilir dosyalarında komut satırı değiştirgeleri yığıt üzerinde dizilirler. <literal>argc</literal> ilk olarak gelir ve bir boş gösterici tarafından takip edilen, komut satırındaki dizgeleri gösteren göstericilerin oluşturduğu bir dizi tarafından izlenir (<literal>**argv</literal>). Daha sonra çevreye ait göstericilerin tutulduğu bir dizi gelir (<literal>**envp</literal>). Bunlar sembolik makina dili altında kolayca elde edilir ve bu örnek kod ile de gösterilmiştir.
    </para>
     <example>
      <info>
       <title>args.s</title>
      </info>
      <screen>
/* args.s */

.text

.globl _start

_start:
  popl %ecx              // argc

lewp:
  popl %ecx              // argv
  test %ecx,%ecx
  jz   exit

  movl %ecx,%ebx
  xorl %edx,%edx

strlen:
  movb (%ebx),%al
  inc  %edx
  inc  %ebx
  test %al,%al
  jnz  strlen
  movb $10,-1(%ebx)

// write(1, argv[i], strlen(argv[i]));
  movl $SYS_write,%eax
  movl $STDOUT,%ebx
  int  $0x80

  jmp  lewp

exit:
  movl $SYS_exit,%eax
  xorl %ebx,%ebx
  int  $0x80

  ret
</screen>
     </example>
    </section>
    <section xml:id="asm-syntax-inline-asm">
     <info>
      <title>GCC Satıriçi Sembolik Makina Dili</title>
     </info>
     <para>
GCC satıriçi sembolik makina dili hakındaki bu bölüm sadece x86 uygulamalarını kapsayacaktır. Terimler diğer işlemcilerde farklılık göstereceklerdir. Başvurulabilecek
diğer belgeler bu belgenin <link linkend="asm-syntax-links">sonundadır</link>.
    </para>
     <para>
GCC içerisinde temel sembolik makina dili sözdizimi oldukça açıktır. Temel sözdizimi ile aşağıdaki gibidir:
    </para>
     <literallayout indent="0" class="normal">
    __asm__("movl %esp,%eax");    // bildik görünüyor ?
</literallayout>
     <para>veya</para>
     <literallayout indent="0" class="normal">
    __asm__
    ("
      movl $1,%eax                // SYS_exit
      xor  %ebx,%ebx
      int  $0x80
    ");
</literallayout>
     <para>
Sembolik makina dili için girdi ve çıktı olarak kullanılacak bilgilerin tanımlanması ile daha etkili bir kullanım mümkündür. Özel bir giriş/çıkış/değişiklik alanı zorunlu değildir. Kullanım şekli:
    </para>
     <literallayout indent="0" class="normal">
    __asm__("<varname>asm_deyimleri</varname>" : <varname>çıkış</varname> : <varname>giriş</varname> : <varname>değişiklik</varname>);
</literallayout>
     <para><varname>giriş</varname> ve <varname>çıkış</varname> alanları terim belirteçleri ile gösterilir ve parantez içinde gösterilen C değişkeni onu takip eder. <varname>çıkış</varname> teriminden önce, onun bir <varname>çıkış</varname> terimi olduğunu belirtmek için <userinput>=</userinput> kullanılmalıdır. Birden çok <varname>çıkış</varname>, <varname>giriş</varname> ve <varname>değişiklik</varname> yazmacı bulunabilir. Her bir "değer" virgül (',') ile birbirinden ayrılmalıdır ve toplamda 10'dan fazla değer girilmemelidir. Terim dizgesi ya yazmacın tam adını ya da kısaltmasını içermelidir.
    </para>
     <table xml:id="asm-syntax-table-abbr" frame="none" style=";background:#999999;">
      <info>
       <title>Kısaltma Tablosu</title>
      </info>
      <tgroup cols="2">
       <thead>
        <row style="background:#eeeedd;">
         <entry align="center">Kısaltma</entry>
         <entry align="center">Yazmaç</entry>
        </row>
       </thead>
       <tbody>
        <row style="background:#ffffee;">
         <entry>a</entry>
         <entry>
          <literal>%eax  %ax  %al</literal>
         </entry>
        </row>
        <row style="background:#ffffee;">
         <entry>b</entry>
         <entry>
          <literal>%ebx  %bx  %bl</literal>
         </entry>
        </row>
        <row style="background:#ffffee;">
         <entry>c</entry>
         <entry>
          <literal>%ecx  %cx  %cl</literal>
         </entry>
        </row>
        <row style="background:#ffffee;">
         <entry>d</entry>
         <entry>
          <literal>%edx  %dx  %dl</literal>
         </entry>
        </row>
        <row style="background:#ffffee;">
         <entry>S</entry>
         <entry>
          <literal>%esi  %si</literal>
         </entry>
        </row>
        <row style="background:#ffffee;">
         <entry>D</entry>
         <entry>
          <literal>%edi  %di</literal>
         </entry>
        </row>
        <row style="background:#ffffee;">
         <entry>m</entry>
         <entry>bellek (memory)</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <example>
      <screen>
__asm__("test %%eax,%%eax", : /* çıktı yok */ : "a"(foo));
</screen>
      <para>veya</para>
      <screen>
__asm__("test %%eax,%%eax", : /* çıktı yok */ : "eax"(foo));
</screen>
     </example>
     <para><userinput>__asm__</userinput>'den sonra <userinput>__volatile__</userinput> komutunu kullanabilirsiniz:
    </para>
     <blockquote>
      <para>
" bir <userinput>__asm__</userinput> komutunun silinmesini, taşınmasını ve birleştirilmesini <userinput>__asm__</userinput> den sonra <userinput>__volatile__</userinput> yazarak önleyebilirsiniz."
</para>
     </blockquote>
     <example>
      <para>
(Konsol komut satırından <literal>info gcc "C Extensions" "Extended Asm"</literal>
yazarak erişilen "Assembler Instructions with C Expression Operands" sayfasından alınmıştır.)
    </para>
      <screen><prompt>$</prompt><userinput>cat inline1.c</userinput>
#include &lt;stdio.h&gt;

int
main(void)
{
  int foo = 10, bar = 15;

  __asm__ __volatile__
    ("addl %%ebxx,%%eax"
      : "=eax"(foo)                            // çıktı
      : "eax"(foo), "ebx"(bar)                 // girdi
      : "eax"                                  // değişiklik
    );
  printf("foo + bar = %d\n", foo);

  return 0;
}
<prompt>$</prompt>
</screen>
     </example>
     <para>
Yazmaçların <userinput>%</userinput> yerine <userinput>%%</userinput> ile öneklendirildiğini fark etmişsinizdir. Giriş/çıkış/değişiklik alanları kullanıldığında bu zorunludur çünkü genişletilmiş alanlara sahip yazmaçların kullanılması da olasıdır. Bunu daha sonra kısaca açıklayacağım.
    </para>
     <para><userinput>"eax"</userinput> yazmak veya <userinput>"ax"</userinput>, <userinput>"al"</userinput> gibi özel bir yazmaç tanımlamak yerine sadece <userinput>"a"</userinput> yazabilirsiniz. Bu tüm genel amaçlı yazmaçlar için geçerlidir (<link linkend="asm-syntax-table-abbr">Kısaltma tablosuna</link> bakınız). Bu kullanım kod yazımında her zaman kullanışlı olmadığı için GCC size yazmaç kısaltmaları sağlar. Maksimum 10 (<userinput>%0</userinput>-<userinput>%9</userinput>) tane kısaltma olduğundan sadece 10 girdi/çıktı tanımlayabilirsiniz.
    </para>
     <screen><prompt>$</prompt><userinput>cat inline2.c</userinput>
int
main(void)
{
  long eax;
  short bx;
  char cl;

  __asm__("nop;nop;nop"); // kodun geri kalanını satıriçi
                          // sembolik makina dilinden ayırmak için

  __volatile__ __asm__(" test %0,%0 test %1,%1 test %2,%2"
    : /* çıktı yok */
    : "a"((long)eax), "b"((short)bx), "c"((char)cl) );

   __asm__("nop;nop;nop");

   return 0;
}
<prompt>$</prompt> <userinput>gcc -o inline2 inline2.c</userinput>
<prompt>$</prompt> <userinput>gdb ./inline2</userinput>
GNU gdb 4.18
Copyright 1998 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB. Type "show warranty" for details.
This GDB was configured as "i686-pc-linux-gnulibc1"...
(no debugging symbols found)...
(gdb) disassemble main
Dump of assembler code for function main:
... start: inline asm ...
0x8048427: nop
0x8048428: nop
0x8048429: nop
0x804842a: mov 0xfffffffc(%ebp),%eax
0x804842d: mov 0xfffffffa(%ebp),%bx
0x8048431: mov 0xfffffff9(%ebp),%cl
0x8048434: test %eax,%eax
0x8048436: test %bx,%bx
0x8048439: test %cl,%cl
0x804843b: nop
0x804843c: nop
0x804843d: nop
... end: inline asm ...
End of assembler dump.
<prompt>$</prompt>
</screen>
     <para>
Gördüğünüz gibi, üretilen satıriçi sembolik makina dili kodu girdi bölümünde belirtilen değişkenlerin değerlerini yazmaçlara atar ve sonra gerçek kodu üretir. Derleyici, terim boylarını değişkenlerin boylarından yararlanarak otomatik olarak bulur ve böylece <literal>%0</literal>, <literal>%1</literal> ve <literal>%2</literal> kısaltmaları ile gösterilen yazmaçlar değerlerini alır. (Yazmaç kısaltmalarını kullanırken komut kısmında terim boyutunu belirtmek derleme sırasında hatalara neden olabilir).
    </para>
     <para>
Kısaltmalar terim belirteçlerinde de kullanılabilir. Bu işlem, yazılımcının 10'dan fazla girdi/çıktı tanımlaması yapmasına izin vermez. Bu işlemin aklıma gelen tek kullanım biçimi, terim belirteci olarak <userinput>"q"</userinput> kullanılan durumlardır. Terim belirteci olarak <userinput>"q"</userinput> kullanıldığı zaman derleyici kendisi <userinput>a</userinput>, <userinput>b</userinput>, <userinput>c</userinput> veya <userinput>d</userinput>'den uygun olanı seçer. Eğer yazmaç ataması <userinput>"q"</userinput> ile yapılmışsa hangi yazmacın kullanıldığını tahmin edemeyiz ve değişiklik alanıda belirtemeyiz, bu sebepten sadece yazmaç ile ilgili rakam yazılır. Örnek
    </para>
     <screen><prompt>$</prompt><userinput>cat inline3.c</userinput>
#include &lt;stdio.h&gt;

int
main(void)
{
  long eax=1, ebx=2;

  __asm__ __volatile__ (
    "add %0,%2"
    : "=b"((long)ebx)
    : "a"((long)eax), "q"(ebx)
    : "2"
  );

  printf("ebx = %x\n", ebx);

  return 0;
}
<prompt>$</prompt>
</screen>
    </section>
    <section xml:id="asm-syntax-compile">
     <info>
      <title>Derleme</title>
     </info>
     <para>
Sembolik Makina Dili yazılımlarını derlemek normal C programlarını derlemeye çok benzer. Eğer yazılımınız "Liste 1"deki gibi ise normal bir C programı gibi derleyebilirsiniz. Eğer <function>main</function> yerine <literal>_start</literal> kullanmışsanız, "Liste 2"deki gibi, derleme işlemi birazcık değişecektir:
    </para>
     <table frame="all" style=";background:#999999;">
      <tgroup cols="2">
       <thead>
        <row style="background:#eeeedd;">
         <entry align="center">Liste 1</entry>
         <entry align="center">Liste 2</entry>
        </row>
       </thead>
       <tbody>
        <row style="background:#ffffee;">
         <entry>
          <screen><prompt>$</prompt><userinput>cat write.s</userinput>
.data
hw:
  .string "hello world\n"
.text
.globl main
main:
  movl $SYS_write,%eax
  movl $1,%ebx
  movl $hw,%ecx
  movl $12,%edx
  int  $0x80
  movl $SYS_exit,%eax
  xorl %ebx,%ebx
  int  $0x80
  ret
<prompt>$</prompt> <userinput>gcc -o write write.s</userinput>
<prompt>$</prompt> <userinput>wc -c ./write</userinput>
  4790 ./write
<prompt>$</prompt> <userinput>strip ./write</userinput>
<prompt>$</prompt> <userinput>wc -c ./write</userinput>
  2556 ./write
</screen>
         </entry>
         <entry>
          <screen><prompt>$</prompt><userinput>cat write.s</userinput>
.data
hw:
  .string "hello world\n"
.text
.globl _start
_start:
  movl $SYS_write,%eax
  movl $1,%ebx
  movl $hw,%ecx
  movl $12,%edx
  int  $0x80
  movl $SYS_exit,%eax
  xorl %ebx,%ebx
  int $0x80

<prompt>$</prompt> <userinput>gcc -c write.s</userinput>
<prompt>$</prompt> <userinput>ld -s -o write write.o</userinput>
<prompt>$</prompt> <userinput>wc -c ./write</userinput>
  408./write
</screen>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <para><option>-s</option> değiştirgesi isteğe bağlıdır ve sadece boyutu kısaltılmış çalışabilir bir ELF dosyası yaratır. Ayrıca bu yöntem (Liste 2'deki),derleyicinin, normalde olduğu gibi, fazladan giriş ve çıkış deyimleri eklemediği için, daha küçük çalışabilir dosyalar üretir.
    </para>
    </section>
    <section xml:id="asm-syntax-links">
     <info>
      <title>Bağlantılar</title>
     </info>
     <itemizedlist>
      <listitem>
       <simpara>
        <uri xlink:href="http://www.linuxassembly.org/">http://www.linuxassembly.org/</uri>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link xlink:href="http://www.gnu.org/software/binutils/manual/gas-2.9.1/as.html">GNU Assembler Manual</link>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link xlink:href="http://gcc.gnu.org/onlinedocs/">GNU C Compiler Manual</link>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link xlink:href="http://www.gnu.org/software/gdb/documentation/">GNU Debugger Manual</link>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link xlink:href="http://gcc.gnu.org/onlinedocs/gcc-4.0.2/gcc/Constraints.html">Constraints for asm Operands</link>
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <link xlink:href="http://www.gnu.org/software/binutils/manual/gas-2.9.1/html_mono/as.html#SEC196">AT&amp;T Syntax Reference</link>
       </simpara>
      </listitem>
     </itemizedlist>
    </section>
    <appendix xml:id="asm-syntax-examples">
     <info>
      <title>Örnek Kodlar</title>
     </info>
     <example>
      <info>
       <title>defines.h</title>
      </info>
      <screen>
/* defines.h */

SYS_exit              = 1
SYS_fork              = 2
SYS_write             = 4
SYS_open              = 5
SYS_close             = 6
SYS_execve            = 11
SYS_lseek             = 19
SYS_dup2              = 63
SYS_mmap              = 90
SYS_munmap            = 91
SYS_socketcall        = 102
SYS_socketcall_socket = 1
SYS_socketcall_bind   = 2
SYS_socketcall_listen = 4
SYS_socketcall_accept = 5

SEEK_END              = 2
PROT_READ             = 1
MAP_SHARED            = 1

AF_INET               = 2
SOCK_STREAM           = 1
IPPROTO_TCP           = 6

STDOUT                = 1
</screen>
     </example>
     <example>
      <info>
       <title>daemon.s</title>
      </info>
      <screen>
/* daemon.s */

BIND_PORT = 0xff00   // 255

.data
SOCK:
  .long 0x0
LEN:
  .long 0x10
SHELL:
  .string "/bin/sh"

.text
.globl _start
_start:
  subl $0x20,%esp

// socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

  movl $SYS_socketcall,%eax
  movl $SYS_socketcall_socket,%ebx
  movl $AF_INET,(%esp)
  movl $SOCK_STREAM,0x4(%esp)
  movl $IPPROTO_TCP,0x8(%esp)
  movl %esp,%ecx
  int  $0x80

// save sockfd
  movl %eax,SOCK

  xorl  %edx,%edx
// bind(%eax, %esp+0xc, 0x10);
  movw $AF_INET,0xc(%esp)
  movw $BIND_PORT,0xe(%esp)
  movl %edx,0x10(%esp)
  movl %eax,(%esp)
  leal 0xc(%esp),%ebx
  movl %ebx,0x4(%esp)
  movl $0x10,0x8(%esp)
  movl $SYS_socketcall,%eax
  movl $SYS_socketcall_bind,%ebx
  int  $0x80

  movl  SOCK,%eax

// listen(%eax, 0x1);
  movl %eax,(%esp)
  movl $0x1,0x4(%esp)
  movl $SYS_socketcall,%eax
  movl $SYS_socketcall_listen,%ebx
  int  $0x80

  movl  SOCK,%eax

// accept(%eax, %esp+0xc, LEN);
  movl  %eax,(%esp)
  leal  0xc(%esp),%ebx
  movl  %ebx,0x4(%esp)
  movl  $LEN,0x8(%esp)
  movl  $SYS_socketcall,%eax
  movl  $SYS_socketcall_accept,%ebx
  int   $0x80

// for(i=2;i&gt;-1;;i--) dup2(%eax,i)
  movl $0x2,%ecx
DUP2LOOP:
  pushl %eax
  movl  %eax,%ebx
  mov   $SYS_dup2,%eax
  int   $0x80
  dec   %ecx
  popl  %eax
  jns   DUP2LOOP

// execve(SHELL, { SHELL, NULL }, NULL );
  movl $SYS_execve,%eax
  movl $SHELL,%ebx
  movl %ebx,(%esp)
  movl %edx,0x4(%esp)
  movl %esp,%ecx
  int  $0x80

// _exit(0)
  movl $SYS_exit,%eax
  movl %edx,%ebx
  int  $0x80

  ret
</screen>
     </example>
    </appendix>
   </article>
