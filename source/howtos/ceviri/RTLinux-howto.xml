<?xml version="1.0" encoding="UTF-8"?>
<!--DOCTYPE article SYSTEM "../../docbook/dtd/belgeler.dtd" [
<!ENTITY % belgeler.dtd SYSTEM "../../belgeler.dtd">
]-->
<!-- ********************************************************************
       howtos/ceviri/RTLinux-howto.xml
     ******************************************************************** -->
<article xml:id="rtlinux-howto" xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
 <info>
  <title>RTLinux için Modül Geliştirme NASIL</title>
  <authorgroup>
   <author>
    <personname>
     <firstname>Dinil</firstname>
     <surname>Divakaran</surname>
    </personname>
   </author>
   <author role="translator">
    <personname><firstname>Aysun Özdemir</firstname></personname>
   </author>
  </authorgroup>
  <revhistory>
   <title>Bu çevirinin sürüm bilgileri:</title>
   <revision>
    <revnumber>1.0</revnumber>
    <date>Ocak 2006</date>
    <authorinitials>aö</authorinitials>
    <revremark>İlk çeviri</revremark>
   </revision>
  </revhistory>
  <revhistory>
   <title>Özgün belgenin sürüm bilgileri:</title>
   <revision>
    <revnumber>1.1</revnumber>
    <date>2002-08-29</date>
    <authorinitials>dd</authorinitials>
    <revremark>...</revremark>
   </revision>
  </revhistory>
  <legalnotice>
   <title>Yasal Açıklamalar</title>
   <para>
    Bu belgenin, <emphasis>RTLinux NASIL</emphasis> çevirisinin 1.0 sürümünün
    <emphasis role="bold">telif hakkı © 2006
    <emphasis>Aysun Özdemir</emphasis>'e</emphasis>, özgün İngilizce sürümünün  <emphasis role="bold">telif hakkı © 2002
    <emphasis>Dinil Divakaran</emphasis>'a</emphasis> aittir. Bu belgeyi,
    Free Software Foundation tarafından yayınlanmış bulunan
    <link xlink:href="&gpl;">GNU Genel Kamu Lisansı</link>nın 2. ya da daha
    sonraki sürümünün koşullarına bağlı kalarak kopyalayabilir, dağıtabilir
    ve/veya değiştirebilirsiniz. Bu Lisansın özgün kopyasını
    <link xlink:href="&gnu-licences;"/> adresinde bulabilirsiniz.
  </para>
   <para>
    BU BELGE "ÜCRETSİZ" OLARAK RUHSATLANDIĞI İÇİN, İÇERDİĞİ BİLGİLER İÇİN
    İLGİLİ KANUNLARIN İZİN VERDİĞİ ÖLÇÜDE HERHANGİ BİR GARANTİ
    VERİLMEMEKTEDİR. AKSİ YAZILI OLARAK BELİRTİLMEDİĞİ MÜDDETÇE TELİF HAKKI
    SAHİPLERİ VE/VEYA BAŞKA ŞAHISLAR BELGEYİ "OLDUĞU GİBİ", AŞİKAR VEYA
    ZIMNEN, SATILABİLİRLİĞİ VEYA HERHANGİ BİR AMACA UYGUNLUĞU DA DAHİL OLMAK
    ÜZERE HİÇBİR GARANTİ VERMEKSİZİN DAĞITMAKTADIRLAR. BİLGİNİN KALİTESİ İLE
    İLGİLİ TÜM SORUNLAR SİZE AİTTİR. HERHANGİ BİR HATALI BİLGİDEN DOLAYI
    DOĞABİLECEK OLAN BÜTÜN SERVİS, TAMİR VEYA DÜZELTME MASRAFLARI SİZE AİTTİR.
   </para>
   <para>
    İLGİLİ KANUNUN İCBAR ETTİĞİ DURUMLAR VEYA YAZILI ANLAŞMA HARİCİNDE
    HERHANGİ BİR ŞEKİLDE TELİF HAKKI SAHİBİ VEYA YUKARIDA İZİN VERİLDİĞİ
    ŞEKİLDE BELGEYİ DEĞİŞTİREN VEYA YENİDEN DAĞITAN HERHANGİ BİR KİŞİ,
    BİLGİNİN KULLANIMI VEYA KULLANILAMAMASI (VEYA VERİ KAYBI OLUŞMASI, VERİNİN
    YANLIŞ HALE GELMESİ, SİZİN VEYA ÜÇÜNCÜ ŞAHISLARIN ZARARA UĞRAMASI VEYA
    BİLGİLERİN BAŞKA BİLGİLERLE UYUMSUZ OLMASI) YÜZÜNDEN OLUŞAN GENEL, ÖZEL,
    DOĞRUDAN YA DA DOLAYLI HERHANGİ BİR ZARARDAN, BÖYLE BİR TAZMİNAT TALEBİ
    TELİF HAKKI SAHİBİ VEYA İLGİLİ KİŞİYE BİLDİRİLMİŞ OLSA DAHİ, SORUMLU
    DEĞİLDİR.
   </para>
   <para>
    Tüm telif hakları aksi özellikle belirtilmediği sürece sahibine aittir.
    Belge içinde geçen herhangi bir terim, bir ticari isim ya da kuruma itibar
    kazandırma olarak algılanmamalıdır. Bir ürün ya da markanın kullanılmış
    olması ona onay verildiği anlamında görülmemelidir.
   </para>
  </legalnotice>
  <abstract>
   <para>
    Bu belgede RTLinux kurulumu ve gerçek zamanlı Linux yazılımlarının NASIL
    yazılacağı anlatılmaktadır.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="rtlinux-howto-intro">
  <title>Giriş</title>
  <sect2 xml:id="rtlinux-howto-purpose">
   <title>Amaç</title>
   <para>
    Bu belge yeni başlayan kullanıcıların RTLinux ile olabildiğince sorunsuz bir şekilde çalışmalarını sağlamayı amaçlar.
   </para>
  </sect2>
  <sect2 xml:id="rtlinux-howto-whoshouldread">
   <title>Bu Belgeyi Kimler okumalı</title>
   <para>
    Bu belge gerçek zamanlı çekirdeğin çalışmasını bilmek isteyen herkes
    içindir. Modül yazılımlamaya alışkın olanlar için bu belge zor
    gelmeyecektir. Ama diğerlerinin üzülmesine de gerek yok; sadece modül
    yazılımlamanın temel kavramları gerekli ve onlardan da gerektiği yerlerde
    bahsedeceğiz.
   </para>
  </sect2>
  <sect2 xml:id="rtlinux-howto-acknowledgement">
   <title>Teşekkür</title>
   <para>
    İlk olarak danışmanım Pramode C. E.'e yardımları ve cesaretlendirmeleri
    için teşekkür ediyorum. Victor Yodaiken'e de teşekkür ediyorum, onun
    birçok makaleden biraraya getirdiği bilgiler olmasaydı belgenin bu halini
    alması mümkün olmazdı. Ayrıca "Bir Linux-tabanlı Gerçek-zamanlı İşletim
    Sistemi" başlıklı tezi için Michael Barabanov'a teşekkürler.
   </para>
  </sect2>
  <sect2 xml:id="rtlinux-howto-feedback">
   <title>Geri Besleme</title>
   <para>
    Belgeyle ilgili yorumlarınızı bana eposta ile göndermekten çekinmeyin.
    Belgede hatalar varsa bana bildirin ki bir sonraki sürümde onları
    düzeltebileyim. Teşekkürler.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="rtlinux-howto-install">
  <title>RTLinux Kurulumu</title>
  <para>
   RTLinux çekirdeğinin derlenmesindeki ilk adım <link
   xlink:href="http://ftp.kernel.org/pub/linux/kernel/v2.2/linux-2.2.18.tar.gz">
   2.2.18</link> (sadece x86 için) ya da <link
   xlink:href="http://ftp.kernel.org/pub/linux/kernel/v2.4/linux-2.4.0-test1.tar.gz">
   2.4.0-test1</link> (x86, PowerPC, Alpha) sürümü önceden yamanmış çekirdeğin
   <filename>/usr/src/</filename> içine indirilmesi ve sıkıştırılmış
   dosyaların açılmasıdır. Ayrıca RTLinux çekirdeğinin yeni bir kopyasını
   (3.0 sürümünü) <link xlink:href="http://www.rtlinux.org"/> adresinden
   <filename>/usr/src/rtlinux/</filename> içine koyun. (Komut satırı
   gösteriminde <command>$</command> kullanacağız).
  </para>
  <orderedlist>
   <listitem>
    <para>Şimdi RTLinux çekirdeğini yapılandıralım:</para>
<screen>$ <command>cd /usr/src/linux</command>
$ <command>make config</command>
       ya da
$ <command>make menuconfig</command>
       ya da
$ <command>make xconfig</command>
</screen>
   </listitem>
   <listitem>
    <para>Çekirdeği derlemek için:</para>
<screen>$ <command>make dep</command>
$ <command>make bzImage</command>
$ <command>make modules</command>
# <command>make modules_install</command>
# <command>cp arch/i386/boot/bzImage /boot/rtzImage</command>
</screen>
   </listitem>
   <listitem>
    <para>
     Sonraki adım LILO yu biçimlendirmektir.
     <filename>/etc/lilo.conf</filename> dosyasına aşağıdaki satırları
     ekleyin:
    </para>
<screen>image=/boot/rtzImage
label=rtl
read-only
root=/dev/hda1
</screen>
    <warning>
     <para>
      Yukarıda ki <filename>/dev/hda1</filename>'i sizin kök dosya sisteminiz
      ile değiştirin. Hangisi olduğunu bulmanın en kolay yolu
      <filename>/etc/lilo.conf</filename> dosyasındaki
      <quote>root=</quote> girdisine bakmaktır.
     </para>
    </warning>
   </listitem>
   <listitem>
    <para>
     Şimdi bilgisayarınızı yeniden başlatın ve LILO komut satırına 'rtl'
     yazarak RTLinux çekirdeğini yükleyin. Sonra
     <filename>/usr/src/rtlinux/</filename> dizinine geçerek RTLinux'u
     yapılandırın.
    </para>
<screen>$ <command>make config</command>
        ya da
$ <command>make menuconfig</command>
        ya da
$ <command>make xconfig</command>
</screen>
   </listitem>
   <listitem>
    <para>Son olarak RTLinux'u derleyin ve kurun.</para>
<screen>$ <command>make</command>
$ <command>make devices</command>
# <command>make install</command>
</screen>
    <para>
     En son adımda kullanıcı yazılımları oluşturmada ve derlemede gerekli
     olacak RTLinux için öntanımlı kurulum dizinini içeren (başlık dosyaları,
     yardımcı araçlar ve belgelendirmeyi içerir) dizin oluşturulacak:
    </para>
    <para>
     <filename>/usr/rtlinux-xx</filename> (xx sürümü gösterir)
    </para>
    <para>
     Buna da bir sembolik bağ oluşturulacaktır:
    </para>
    <para>
     <filename>/usr/rtlinux</filename>
    </para>
    <para>
     Lütfen ileriye yönelik uyumluluğu sağlayabilmek için kendi RTLinux
     yazılımlarınızın hepsinin  <filename>/usr/rtlinux</filename>'u  öntanımlı
     yol olarak kullanmalarını sağlayın.
    </para>
    <note>
     <para>
      Eğer Linux çekirdek seçeneklerinde herhangi bir değişiklik yaparsanız
      lütfen bunları da yapmayı unutmayınız:
     </para>
<screen>$ <command>cd /usr/src/rtlinux</command>
$ <command>make clean</command>
$ <command>make</command>
# <command>make install</command>
</screen>
    </note>
   </listitem>
  </orderedlist>
 </sect1>
 <sect1 xml:id="rtlinux-howto-whyrtlinux">
  <title>Neden RTLinux</title>
  <para>
   RTLinux tasarımının nedenleri standart Linux çekirdeğinin çalışması
   incelenerek anlaşılabilir. Linux çekirdeği, donanımı kullanıcı
   seviyesindeki görevlerden ayırır. İyi bir ortalama başarım sağlamak veya
   iyi bir iş çıkarmak için çekirdek her göreve birer öncelik atar ve bunlar
   üzerinde bazı zamanlama algoritmaları kullanır. Bu görev, işlemci
   tarafından zaman dilimlerine bölüştürülerek dış ortamda çalıştırılır,
   böylece çekirdek her bir kullanıcı seviyeli görevi geçici olarak
   durdurabilir. Bu sıralama algoritmaları ile birlikte aygıt sürücüleri,
   kesintisiz sistem çağrıları, geçersiz durum kesme sinyali kullanımı ve
   sanal bellek işlemleri sonuçları önceden kestirilemeyen işlem kaynaklardır.
   Dolayısıyla bu kaynaklar bir görevin gerçek zamanlı başarımı için engel
   teşkil eder.
  </para>
  <para>
   'mpg123' ya da başka bir çalıcı kullanarak müzik dinliyorsanız gerçek
   zamanlı olmayan başarım hakkında bir fikriniz vardır. Önceden belirlenen
   zaman dilimi için bu süreç çalıştırıldıktan sonra, standart Linux çekirdeği
   görevin önceliğini hiçe sayıp işlemciyi başka bir göreve verebilir
   (örneğin; X sunucusunu veya Netscape'i açan bir göreve). Sonuç olarak
   müziğin sürekliliği kaybolur. Böylece çekirdek, işlemci zamanının bütün
   süreçler arasında doğru dağılımını sağlamayı denerken bir takım başka
   olayların meydana gelmesini engelleyebilir.
  </para>
  <para>
   Bir gerçek zamanlı çekirdek, altındaki süreçlerin zamanlama
   gereksinimlerini garantileyebilmelidir. RTLinux çekirdeği, yukarıda
   bahsedilen sonuçları önceden kestirilemeyen işlem kaynaklarının
   kaldırılmasıyla gerçek zamanlı görevleri gerçekleştirebilir. RTLinux
   çekirdeğinin standart Linux çekirdeği ve donanım arasında oturduğunu
   varsayabiliriz. Bu durumda Linux çekirdeği gerçekzaman katmanını asıl
   donanım olarak  görür. Artık, kullanıcı her bir görev için ayrı ayrı olmak
   üzere bütün görevler için önceliklikleri belirleyebilir ve tanıtabilir.
   Kullanıcı zamanlama algoritmaları, öncelikler, çalışma sıklığı vb. üstünde
   kararlar vererek süreçler için doğru zamanlamayı sağlayabilir. RTLinux
   çekirdeği, en düşük önceliği standart Linux çekirdeğine atar. Böylece
   kullanıcı görevleri gerçekzamanda çalışabilir.
  </para>
  <para>
   Güncel gerçek zamanlı çalışma bütün donanım kesme sinyallerinin
   durdurulması ile elde edilir. Sadece RTLinux ile ilgili kesmeler için rutin
   kesme servisi çalışır. Bütün diğer kesme sinyalleri, RTLinux çekirdeğinin
   boşta kalması nedeniyle standart Linux çekirdeği çalışmaya başladığında
   yazılım kesmeleri olarak Linux çekirdeğine aktarılmak üzere tutulurlar.
   RTLinux yürütücüsü yürütme gücünü kendi üstüne almaz.
  </para>
  <para>
   Gerçek zamanlı görevler ayrıcalıklıdır (yani donanıma doğrudan erişirler)
   ve sanal belleği kullanmazlar. Gerçek zamanlı görevler, belleğe özdevimli
   yüklenebilen özel Linux modülleri olarak yazılırlar. Bir gerçek zamanlı
   görev için ilklendirme kodu, gerçek zamanlı görev yapısını ilklendirir ve
   RTLinux çekirdeğine süre sonu, periyodu ve son anda ortaya çıkan
   kısıtlamalar hakkında bilgi verir.
  </para>
  <para>
   RTLinux'un varlığı, Linux çekirdeğinin yapısına dokunmadığından Linux
   çekirdeği ile birlikte anlamlı olur. Linux çekirdeğinin gelecekteki
   gelişimine engel olmaksızın, nispeten basit değişikliklerle mevcut Linux
   çekirdeğini tam bir gerçek zamanlı ortama dönüştürmeyi başarır.
  </para>
 </sect1>
 <sect1 xml:id="rtlinux-howto-rtlinuxyazılımming">
  <title>RTLinux Programları Yazmak</title>
  <sect2 xml:id="rtlinux-howto-writingmodulles">
   <title>Modül Yazımına Giriş</title>
   <para>
    Modül nedir, dersek? Bir Linux modülü <command>gcc</command>'nin
    <option>-c</option> seçeneği ile kullanılması sonucu oluşan nesne
    dosyasından başka birşey değildir. Bir modül, sıradan bir C dili
    dosyasının <function>main()</function> işlevi olmaksızın derlenmesiyle
    oluşur. <function>main()</function> işlevi yerine <function>init_module/
    cleanup_module</function> işlev çifti vardır:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <function>init_module()</function> işlevi, modül çekirdeğe eklenirken
      çağrılır. Bu işlev başarı halinde 0, başarısızlık halinde negatif değer
      döndürmelidir.
     </para>
    </listitem>
    <listitem>
     <para>
      <function>cleanup_module()</function> işlevi, tam modül kaldırılırken
      çağrılır.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Genellikle, <function>init_module()</function> ya çekirdekle bir şeyler
    için bir eylemcinin varlığını bildirir ya da bir çekirdek işlevini kendi
    kodu ile değiştirir (genellikle kod bir şeyler yaptıktan sonra orjinal
    işlevi çağırır). <function>cleanup_module()</function> işlevinin
    <function>init_module()</function> işlevinin yaptığını geri aldığı kabul
    edilir, böylece modül emniyetle kaldırılabilir.
   </para>
   <para>
    Örneğin, eğer siz <filename>module.c</filename> diye bir C dosyası
    yazarsanız (<function>main()</function> işlevi
    <function>init_module()</function> ve
    <function>cleanup_module()</function> işlevleriyle değiştirilerek), bu kod,
   </para>
<screen>$ <command>gcc -c {BAZI-SEÇENEKLER} my_module.c</command></screen>
   <para>ile bir modüle dönüştürülebilir. Bu komut;</para>
<screen>$ <command>insmod module.o</command></screen>
   <para>
    gibi bir '<command>insmod</command>' komutuyla çekirdeğe eklenebilen
    <filename>module.o</filename> isimli bir modül dosyası oluşturur. Benzer
    biçimde, bu modülü kaldırmak için '<command>rmmod</command>' komutunu
    kullanabilirsiniz:
   </para>
<screen>$ <command>rmmod module</command></screen>
  </sect2>
  <sect2 xml:id="rtlinux-howto-creatingthreads">
   <title>RTLinux Evrelerinin Oluşturulması</title>
   <para>
    Bir gerçek zamanlı uygulama genellikle çeşitli evrelerin çalışmalarının
    birleşimidir. Evreler bir ortak adres uzayını paylaşan hafif süreçlerdir.
    RTLinux'da, bütün evreler Linux çekirdeğinin adres uzayını paylaşır.
    Evreleri kullanmanın avantajı, evreler arasındaki geçişin bağlamsal
    geçişlere göre oldukça ucuz olmasıdır. Aşağıdaki örnekte görüleceği gibi
    farklı işlevler kullanarak bir evrenin çalışması üzerinde tam bir denetim
    kurabiliriz.
   </para>
  </sect2>
  <sect2 xml:id="rtlinux-howto-exampleyazılımme">
   <title>Örnek Bir Program</title>
   <para>
    Bir evrenin çalışmasını anlamanın en iyi yolu, bir gerçek zamanlı yazılımı
    izlemektir. Örneğin, aşağıda görünen yazılım her saniye bir kez çalışacak
    ve her bir yineleme sırasında 'Merhaba Dunya' yazacak.
   </para>
   <example>
    <title>hello.c dosyası</title>
<screen>#include &lt;rtl.h&gt;
#include &lt;time.h&gt;
#include &lt;pthread.h&gt;

pthread_t evre;

void * evre_kodu(void)
{
        pthread_make_periodic_np(pthread_self(), gethrtime(), 1000000000);

        while (1)
        {
                pthread_wait_np ();
                rtl_printf("Merhaba Dunya\n");
        }

        return 0;
}

int init_module(void)
{
   return pthread_create(&amp;evre, NULL, evre_kodu, NULL);
}

void cleanup_module(void)
{
   pthread_delete_np(evre);
}
</screen>
   </example>
   <para>
    Şöyle <function>init_module()</function> ile başlayalım.
    <function>init_module()</function>, <command>pthread_create()</command>
    işlevini çağırır. Bu, çağrılan evre ile aynı anda çalışan yeni bir evre
    oluşturmak içindir. <emphasis>Bu işlev sadece Linux çekirdek evresinden
    çağrılabilir (<function>init_module()</function> kullanılarak)</emphasis>.
   </para>
<literallayout>
int  pthread_create(pthread_t      *evre,
                    pthread_attr_t *oznitelik,
                    void           * (*evre_kodu)(void *),
                    void           *arg);
</literallayout>
   <para>
    Oluşturulan yeni evre <filename>pthread.h</filename> başlık dosyasında
    tanımlanan <command>pthread_t</command> türündedir. Bu evre,
    <function>evre_kodu()</function> işlevini,  değiştirgesini 
    <varname>arg</varname> ile aktararak çalıştırır.
    <varname>oznitelik</varname> değişkeni yeni evreye uygulanacak evre
    özniteliklerini belirler. Eğer <varname>oznitelik</varname> NULL ise,
    öntanımlı öznitelikler kullanılır.
   </para>
   <para>
    Bundan dolayı burada, <function>evre_kodu()</function> değiştirgesiz
    çağrılır. <function>evre_kodu</function> üç bileşenden (ilklendirme,
    çalışma ve sonlandırma) oluşur.
   </para>
   <para>
    İlkllendirme aşamasında <function>pthread_make_periodic_np()</function>
    çağrısı yapılır.
   </para>
<literallayout>int pthread_make_periodic_np(pthread_t evre,
                             hrtime_t  başlatma_anı,
                             hrtime_t  süre);
</literallayout>
   <para>
    <function>pthread_make_periodic_np</function><varname>evre</varname>'yi
    çalışmaya hazır olarak imler. Evre <varname>başlatma_anı</varname>'nda
    çalışmasına başlayacak ve nanosaniyelerle belirlenmiş bir
    <varname>süre</varname>'yle çalışacaktır.
   </para>
   <para>
    <function>gethrtime</function> işlevi sistemin başlamasından beri
    geçen zamanı nanosaniyeler cinsinden döndürür.
   </para>
<literallayout>hrtime_t gethrtime(void);</literallayout>
   <para>
    Bu zaman asla sıfırlanamaz ya da ayarlanamaz.
    <function>gethrtime</function>, daima monoton artan değerler verir.
    <command>hrtime_t</command> türü, 64 bitlik işaretli tamsayı belirtir.
   </para>
   <para>
    <function>pthread_make_periodic_np()</function> çağrısıyla evre, işlemci
    zamanlayıcısına bu evreyi bir saniyede bir çalıştırmasını söyler. Bu, evre
    için ilklendirme bölümünün sonudur.
   </para>
   <para>
    <function>while()</function> döngüsü, çalışmakta olan gerçek zamanlı
    evreyi sonraki <varname>süre</varname>'nin başlamasına kadar beklemeye
    alacak <function>pthread_wait_np()</function> işlevine bir çağrı ile
    başlar. Bu evre önceki bir <function>pthread_make_periodic_np</function>
    çağrısını ile devreye alınır. Evre tekrar çağrılır çağrılmaz, başka bir
    <function>pthread_wait_np()</function> çağrısıyla karşılaşana kadar
    <function>while</function> döngüsünde kalanlar çalıştırılır.
   </para>
   <para>
    Bizim döngüden çıkmamızı sağlayacak bir yol olmadığından bu evre 1Hz'lik
    sıklıkla çalıştırılmaya devam edecektir. Programı sonlandırmanın tek yolu
    <command>rmmod</command> komutu ile onu çekirdekten ayırmaktır. Bu, evreye
    ayrılan özkaynakları serbest bırakarak evrenin iptal edilmesini sağlayan
    <function>pthread_delete_np()</function> işlevini çağıracak olan
    <function>cleanup_module()</function> işlevini çağıracaktır.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="rtlinux-howto-compile">
  <title>Derleme ve Çalıştırma</title>
  <para>
   <filename>hello.c</filename> yazılımını çalıştırmak için  (tabii ki RTLinux
   açılışından sonra) aşağıdaki adımları sırası ile yapmalısınız:
  </para>
  <orderedlist>
   <listitem>
    <para>
     GCC derleyicisini kullanarak kaynak kodunu derleyip bir modül oluşturun.
     Birşeyleri basitleştirmek adına bir Makefile oluşturmak daha iyidir.
     Böylece kodu derlemek için tek ihtiyacınız <command>make</command> yazmak
     olacaktır.
    </para>
    <para>
     Aşağıdaki satırları <filename>Makefile</filename> isimli bir dosyaya
     yazarak Makefile'ı oluşturabilirsiniz:
    </para>
<screen>include rtl.mk
all: hello.o
clean:
   rm -f *.o
hello.o: hello.c
   $(CC) ${INCLUDE} ${CFLAGS} -c hello.c
</screen>
   </listitem>
   <listitem>
    <para>
     <filename>rtl.mk</filename> dosyasını <filename>hello.c</filename> ve
     <filename>Makefile</filename> ile aynı dizinin içine kopyalayın.
     <filename>rtl.mk</filename> dosyası, kodu derlemek için gerekli bütün
     seçenekleri içeren bir başlık dosyasıdır. Bunu RTLinux kaynak ağacından
     kopyalayabilirsiniz ve <function>hello.c</function> dosyasının yanına
     koyabilirsiniz.
    </para>
   </listitem>
   <listitem>
    <para>
     Kodu derlemek için '<command>make</command>' komutunu kullanın:
    </para>
<screen>$ <command>make</command></screen>
   </listitem>
   <listitem>
    <para>
     Oluşan ikilik nesne dosyası RTLinux tarafından çalıştırılacak çekirdeğe
     eklenmelidir. Bunun için '<command>rtlinux</command>' komutunu kullanmak
     gerekir (tabii önce 'root' olmak gerekir).
    </para>
<screen># <command>rtlinux start hello</command></screen>
   </listitem>
  </orderedlist>
  <para>
   Artık <command>hello.o</command> yazılımının iletisini saniyede bir
   yazdırması izleyebiliyor olmalısınız. Makinenizin yapılandırmasına bağlı
   olarak çıktıyı konsolda doğrudan ya da
  </para>
<screen>$ <command>dmesg</command></screen>
  <para>
   komutunu girerek görebilirsiniz. Programı sonlandırmak için modülü
   çekirdekten ayırmanız gerekir. Bunu yapmak için:
  </para>
<screen>$ <command>rtlinux stop hello</command></screen>
  <para>
   Modülü eklemek ve çıkarmak için diğer bir yol da sırayla
   <command>insmod</command> ve <command>rmmod</command> kullanmaktır.
  </para>
  <para>
   Burada örnek yazılımımızı çok basit yaptık. Gördüğümüzün aksine burada bir
   yazılımda çok sayıda evre olabilir. Öncelik evre oluşturulurken
   belirtilebilir ve daha sonra değiştirilebilir. Ayrıca kullanılacak işlemci
   zamanlama algoritmasını da seçebiliriz. Aslında kendi zamanlama
   algoritmamızı kendimiz yazabiliriz!
  </para>
  <para>
   Örneğimizde, evreye öncelik olarak 1 verebilir ve
   <function>evre_kodu()</function> işlevinin başlangıcına aşağıdaki
   satırları ekleyerek FIFO zamanlamasını seçebiliriz:
  </para>
<screen>struct sched_param p;
p.sched_priority = 1;
pthread_setschedparam (pthread_self(), SCHED_FIFO, &amp;p);
</screen>
 </sect1>
 <sect1 xml:id="rtlinux-howto-interprocess">
  <title>Süreçlerarası İletişim</title>
  <para>
   Önceki bölümlerde gördüğümüz örnek yazılım bir gerçek zamanlı süreç olarak
   bilinen süreçtir. Bir uygulama yazılımının her bir parçası gerçek zamanlı
   olmak zorunda değildir. Programın sadece hassas zaman kısıtlamaları
   gerektiren bölümleri bir gerçek zamanlı süreç gibi yazılmalıdır. Diğer
   bölümleri kullanıcı seviyesinde yazılıp çalıştırılabilir. Kullanıcı
   seviyesinde çalışan süreçleri yazmak, çalıştırmak ve hatalarını ayıklamak
   gerçek zamanlı evrelerden çoğunlukla daha kolaydır. Fakat tam bu noktada,
   kullanıcı seviyesindeki Linux süreçleri ile gerçek zamanlı evreler arasında
   iletişimi sağlayacak bir yöntem ihtiyacı ortaya çıkar.
  </para>
  <para>
   Süreçlerarası iletişimin çeşitli yolları vardır. Biz en önemli ve en ortak
   iletişim yolundan, gerçek zamanlı FIFO'dan bahsedeceğiz.
  </para>
  <sect2 xml:id="rtlinux-howto-realtimefifo">
   <title>Gerçek Zamanlı FIFO</title>
   <para>
    Gerçek zamanlı FIFOlar tek yönlü kuyruklardır (First In First Out - ilk
    giren ilk çıkar). Yani bir süreç FIFOnun bir ucunda veri yazarken diğer
    süreçler FIFOnun diğer ucundan bilgileri okuyabilir. Genellikle bu
    süreçlerin bir tanesi gerçek zamanlı evre, diğeri kullanıcı seviyesindeki
    süreçtir.
   </para>
   <para>
    Gerçek zamanlı FIFOlar aslında, ana numarası 150 olan karakter
    aygıtlarıdır (/dev/rtf*). Gerçek zamanlı evreler kullanacakları FIFO'ları
    belirtmek için bir tamsayı kullanır (örneğin,
    <filename>/dev/rtf2</filename> için 2). FIFOların numaraları için bir
    sınır vardır. FIFOlarla çalışmak için
    <function>rtf_create(), rtf_destroy(), rtf_get(), rtf_put()</function> vb
    işlevler vardır.
   </para>
   <para>
    Diğer taraftan, Linux kullanıcı süreci gerçek zamanlı FIFOları normal
    karakter aygıtları gibi görür. Bu yüzden <function>open(), close(),
    read()</function> ve <function>write()</function> gibi işlevler bu
    aygıtlarda kullanılabilir.
   </para>
  </sect2>
  <sect2 xml:id="rtlinux-howto-fifoprog">
   <title>FIFO Kullanan Bir Uygulama</title>
   <para>
    İlk olarak, PC hoparlöründen müzik çalan (sadece iki notalı) basit bir C
    yazılımını (ismi <filename>pcaudio.c</filename> olsun) göz önüne alalım.
    Şimdi, nota çalmak için sadece <filename>/dev/rtf3</filename> karakter
    aygıtına yazmamız gerektiğini varsayalım. (Sonra, bir gerçek zamanlı
    sürecin FIFOdan (<filename>/dev/rtf3</filename>) okumasını ve PC
    hoparlörüne göndermesini göreceğiz)
   </para>
<screen>#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;

#define DELAY 30000

void make_tone1(int fd)
{
  static char buf = 0;
  write (fd, &amp;buf, 1);
}

void make_tone2(int fd)
{
  static char buf = 0xff;
  write (fd, &amp;buf, 1);
}

main()
{
  int i, fd = open ("/dev/rtf3", O_WRONLY);
  while (1)
  {
    for (i=0;i&lt;DELAY;i++);
    make_tone1(fd);
    for (i=0;i&lt;DELAY;i++);
    make_tone2(fd);
  }
}
</screen>
   <para>
    Şimdi, yukarda görünen yazılım (<filename>pcaudio.c</filename>) derlenir
    ve çalıştırılırsa, bir kare dalgaya uygun düzenli pıtırtılar oluşturmalı.
    Fakat bundan önce '<filename>/dev/rtf3</filename>'ten okumak için bir
    modüle ve uygun veriyi PC hoparlörüne göndermemiz lazım. Bu gerçek zamanlı
    yazılımı rtlinux kaynak ağacında (<filename>/usr/src/rtlinux/examples/
    sound/</filename>) bulabilirsiniz. <filename>sound.o</filename> modülünü
    '<command>insmod</command>' komutunu kullanarak çekirdeğe ekleyin.
   </para>
   <para>
    Modülü ekledikten sonra aygıttan okumak için, yazılımımızı artık
    çalıştırabiliriz ('<command>gcc</command>' kullanarak derleyin ve sonra
    oluşan '<filename>a.out</filename>'u çalıştırın). Bu şekilde süreç,
    sistemde başka süreç olmadığı zaman (zamanın tükenmesi) biraz daha düzenli
    tonlar üretir. Fakat diğer konsolda X sunucusu  başlatıldığı zaman tonda
    sessizlik daha uzun süreli olmaya başlar. Sonunda bir 'find' komutu
    çalıştırıldığı zaman (<filename>/usr</filename> dizininde bir dosya için)
    örnek ses tamamen bozulur. Bunun ardındaki sebep, veriyi gerçek zamanlı
    olmayan FIFO üstünde yazmamızdır.
   </para>
   <para>
    Seste herhangi bir karışıklık meydana gelmesin diye biz şimdi bu süreç
    gerçek zamanlı nasıl çalışır, onu göreceğiz. Önce yukarıdaki yazılımı bir
    gerçek zamanlı yazılıma dönüştürelim. (Dosya adı
    <filename>rtaudio.c</filename> olsun.)
   </para>
<screen>#include &lt;rtl.h&gt;
#include &lt;pthread.h&gt;
#include &lt;rtl_fifo.h&gt;
#include &lt;time.h&gt;

#define FIFO_NO 3
#define DELAY 30000
pthread_t thread;

void * sound_thread(int fd)
{
  int i;
  static char buf = 0;
  while (1)
  {
    for(i=0; i&lt;DELAY; i++);
    buf = 0xff;
    rtf_put(FIFO_NO, &amp;buf, 1);

    for(i=0;i&lt;DELAY;i++);
    buf = 0x0;
    rtf_put(FIFO_NO, &amp;buf, 1);
  }
  return 0;
}

int init_module(void)
{
  return pthread_create(&amp;thread, NULL, sound_thread, NULL);
}

void cleanup_module(void)
{
  pthread_delete_np(thread);
}
</screen>
   <para>
    Eğer hala yapmadıysanız <command>sound.o</command> modülünü çekirdeğe
    ekleyin. Yukarıdaki yazılımı bir Makefile yazarak (daha önce söylediğimiz
    gibi) derleyin, böylece <command>rtaudio.o</command> modülü üretilir. Bu
    modülü eklemeden önce birkaç şey daha lazım. Yukarıdaki yazılımın sonsuz
    döngü içinde çalıştığına dikkat edelim. Evreyi uyutmak ya da sonlandırmak
    için kodumuz olmadığı için evre çalışmasını durdurmayacaktır. Bu yolla
    sizin PC hoparlörünüz bu tonu üretmeye devam edecek ve siz başka bir
    şeyler yapmak için bilgisayarınızı yeniden başlatmak zorunda kalacaksınız.
   </para>
   <para>
    Bu yüzden evrenin tonlar arasında gecikme yapmayı kendi kendine soran
    küçük kod değişikliğini (sadece <function>sound_thread()</function>
    işlevinde) yapalım.
   </para>
<screen>void * sound_thread(int fd)
{
  static char buf = 0;
  pthread_make_periodic_np (pthread_self(), gethrtime(), 500000000);

  while (1)
  {
    pthread_wait_np();
    buf = (int)buf^0xff;
    rtf_put(FIFO_NO, &amp;buf, 1);
  }
  return 0;

}
</screen>
   <para>
    Artık '<command>rmmod</command>' komutu ile modülü yalnızca kaldırarak
    süreci sonlandırabiliriz.
   </para>
   <para>
    Burada süreçlerarası iletişim için gerçek zamanlı FIFOların nasıl
    kullanılacağını gördük. Ayrıca RTLinux'a olan gerçek ihtiyaç yukarıdaki
    örnekten anlaşılabilir.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="rtlinux-howto-whatisnext">
  <title>Sonrası</title>
  <para>
   Bu belge RTLinux'ta yazılımlamanın temellerini içermeye ayrılmıştır. Bir
   kez temelini anlarsanız bilginizi kendi kendinize geliştirmeniz zor değil.
   Böylece rtlinux kaynağı ile birlikte mevcut diğer bütün örnekleri inceleyip
   anlayabilirsiniz. Sonra modüller yazabilir ve onları deneyebilirsiniz.
   Modül yazılımlama hakkında daha fazla bilgi için Ori Pomerantz tarafından
   yazılan <link xlink:href="http://www.faqs.org/docs/kernel/">Linux Çekirdek
   Modülü Geliştirme Kılavuzu</link>na bakabilirsiniz.
  </para>
 </sect1>
</article>
