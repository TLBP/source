<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: dlopen-mini-howto.xml,v 1.20 2003/07/19 09:25:04 nilgun Exp $
     ******************************************************************** -->
<article xml:id="c-dlopen-mini-howto" lang="tr">
  <info>
    <title>C++ dlopen mini NASIL</title>
    <authorgroup>
      <author>
       <personname><firstname>Aaron</firstname>
        <surname>Isotton</surname></personname>
      </author><author role="translator">
       <personname><firstname>A. Kemal Ökmen</firstname>
      </author>
    </authorgroup>

    <revhistory><title>Bu çevirinin sürüm bilgileri:</title>
      <revision>
        <revnumber>1.0</revnumber>
        <date>Mart 2006</date>
        <authorinitials>akö</authorinitials>
        <revremark>İlk çeviri</revremark>
      </revision>
    </revhistory><revhistory>
      <title>Özgün belgenin sürüm bilgileri:</title>
      <revision>
        <revnumber>1.10</revnumber>
        <date>2006-03-22</date>
        <authorinitials>AI</authorinitials>
        <revremark>Lisans GFDL'den GPL'e değiştirildi. dlerror kullanımı düzeltildi; Teşekkürler Carmelo Piccione. Örnekte sanal yıkıcı kullanımı; Teşekkürler Joerg Knobloch. Kaynak Kod bölümü eklendi. Ufak düzeltmeler.</revremark>
      </revision><revision>
        <revnumber>1.03</revnumber>
        <date>2003-08-12</date>
        <authorinitials>AI</authorinitials>
        <revremark>GLib Dynamic Module Loader referansı eklendi. Teşekkürler
        G. V. Sriraam.</revremark>
      </revision><revision>
        <revnumber>1.02</revnumber>
        <date>2002-12-08</date>
        <authorinitials>AI</authorinitials>
        <revremark>SSS eklendi. Küçük değişiklikler</revremark>
      </revision><revision>
        <revnumber>1.01</revnumber>
        <date>2002-06-30</date>
        <authorinitials>AI</authorinitials>
        <revremark>Sanal yıkıcı açıklaması güncellendi. Küçük
        değişiklikler.</revremark>
      </revision><revision>
        <revnumber>1.00</revnumber>
        <date>2002-06-19</date>
        <authorinitials>AI</authorinitials>
        <revremark>Telif ve Lisans bölümleri başa getirildi. Terimler bölümü eklendi. Küçük değişiklikler.</revremark>
      </revision><revision>
        <revnumber>0.97</revnumber>
        <date>2002-06-19</date>
        <authorinitials>JYG</authorinitials>
        <revremark>Küçük gramer ve cümle değişiklikleri girildi.</revremark>
      </revision><revision>
        <revnumber>0.96</revnumber>
        <date>2002-06-12</date>
        <authorinitials>AI</authorinitials>
        <revremark>Kaynakça eklendi. Extern işlev ve değişkenlerin açıklaması düzeltildi.</revremark>
      </revision><revision>
        <revnumber>0.95</revnumber>
        <date>2002-06-11</date>
        <authorinitials>AI</authorinitials>
        <revremark>Küçük geliştirmeler.</revremark>
      </revision>
    </revhistory>
    <pubdate>22 Mart 2006</pubdate>
    <legalnotice><title>Yasal Açıklamalar</title><para>
Bu belgenin, <emphasis>C++ dlopen mini NASIL</emphasis> çevirisinin 1.0 sürümünün <emphasis role="bold">telif hakkı © 2006 <emphasis>A. Kemal Ökmen</emphasis>'e</emphasis>, özgün İngilizce sürümünün <emphasis role="bold">telif hakkı © 2002-2006 <emphasis>Aaron Isotton</emphasis>'a</emphasis> aittir.&notice.gpl;
  </para>&notice.disc;
    </legalnotice>
    <abstract><para>
C++'da <function>dlopen</function> API kullanarak işlevler ve sınıflar çalışma anında nasıl yüklenir.
    </para></abstract>
  </info>

  <sect1 xml:id="c-dlopen-mini-howto-intro">
    <title>Giriş</title><para>
Unix C++ programcıları arasında <function>dlopen</function> Uygulama Programlama Arayüzü - UPA (API) kullanılarak çalışma anında işlev ve sınıf yüklemenin nasıl yapıldığı sorusu sıklıkla ortaya çıkar.
    </para><para>
Aslında, herzaman kolay değildir ve bazı açıklamalara ihtiyaç duyulur. Bu mini NASIL belgesi bunu yapar.
    </para><para>
Bu belgeyi anlamak için ortalama C, C++ ve <function>dlopen</function> API bilgisi gereklidir.
    </para><para>
Bu NASIL belgesinin özgün sürümü <link xlink:href="http://www.isotton.com/howtos/C++-dlopen-mini-HOWTO/"/> adresinde bulunmaktadır.
    </para>
    <sect2 xml:id="c-dlopen-mini-howto-credits">
      <title>Teşekkürler/Katkıda Bulunanlar</title><para>
Bu belgenin hazırlanmasında katkıları olanlara teşekkür ederim:
      </para><para><itemizedlist>
<listitem><para>
Düzenlemeleri için Joy Y Goodreau 
</para></listitem><listitem><para>
Biçimleme ve isim cendereleme ile ilgili birkaç husus ve ayrıca <literal>extern "C"</literal> hakkında birkaç incelik için D. Stimitis 
</para><para>
Bu NASIL belgesinde hataları gösteren ve ipuçları veren isimsiz diğer kişiler. Siz kendinizi biliyorsunuz!
</para></listitem></itemizedlist></para>
    </sect2>

    <sect2 xml:id="c-dlopen-mini-howto-feedback">
      <title>Geri Bildirim</title><para>
Bu belge için geribildirim memnuniyetle karşılanır.
      </para>
    </sect2>

    <sect2 xml:id="c-dlopen-mini-howto-terms">
      <title>Belgede Kullanılan Terimler</title>
<variablelist><varlistentry>
<term><function>dlopen</function> API</term><listitem><para>
<function>dlclose</function>, <function>dlerror</function>, <function>dlopen</function> ve <function>dlsym</function> işlevleri <literal>dlopen(3)</literal> man sayfasında açıklanmıştır.
</para><para>
Tek bir <function>dlopen</function> <emphasis>işlevi</emphasis>nden bahsederken <quote><function>dlopen</function></quote> ve <emphasis>tüm</emphasis> uygulama geliştirme arayüzünden bahsederken <quote><function>dlopen</function> API</quote> terimi  kullanıldı.
</para></listitem></varlistentry><varlistentry>
<term>isim cendereleme</term><listitem><para>
İngilizce <emphasis>name mangling</emphasis> teriminin Türkçe karşılığı olarak kullanıldı.
</para></listitem></varlistentry><varlistentry>
<term>soyut sınıf</term><listitem><para>
İngilizce <emphasis>abstract class</emphasis> teriminin Türkçe karşılığı olarak kullanıldı. Bazı kaynaklarda <emphasis>özet sınıf</emphasis> olarak da geçer.
</para></listitem></varlistentry></variablelist>
    </sect2>
  </sect1>

  <sect1 xml:id="c-dlopen-mini-howto-theproblem">
    <title>Sorun</title><para>
Bazen bir kütüphaneyi (ve onun işlevlerini) çalışma zamanında yüklemek zorunda olabilirsiniz; bu çoğunlukla programınız için bir çeşit uyumlu-ek (plug-in) veya modül yazdığınızda ortaya çıkar.
    </para><para>
C programlama dilinde, kütüphane yükleme çok sadedir (<function>dlopen</function>, <function>dlsym</function> ve <function>dlclose</function> işlevlerini çağırmak yeterli), C++ ile bu biraz karmaşıktır. C++ kütüphanelerini dinamik olarak yüklemenin zorluğu kısmen <link linkend="c-dlopen-mini-howto-mangling">isim cendereleme</link> (name mangling) işleminden ve <function>dlopen</function> API'nin C ile yazılmasından ileri gelir. Bu yüzden C++ sınıflarını yüklemek için elverişli bir yöntem sunmaz.
    </para><para>
C++'da sınıfların nasıl yüüklendiğini açıklamadan önce, dilerseniz isim cendereleme özelliğine bakarak sorunu analiz edelim. Sorunun nasıl oluştuğunu ve nasıl çözüleceğini anlamak için ilgilenmeseniz bile isim cendereleme işleminin açıklamasını okumanızı tavsiye ediyorum.
    </para>
    <sect2 xml:id="c-dlopen-mini-howto-mangling">
      <title>İsim Cendereleme</title><para>
Her C++ programında (veya kütüphanesinde veya nesne dosyasında), statik olmayan tüm işlevler ikili dosya içinde <emphasis>sembol</emphasis>lerle temsil edilir. Bu semboller bir işlevin programda, kütüphanede veya nesne dosyasında tek ve diğerlerinden farklı olarak gösterildiği bir dizgedir.
      </para><para>
C'de sembol isimleri ile işlev isimleri aynıdır: <function>strcpy</function>'nin sembolü de <function>strcpy</function> olacaktır, vb. C'de bu şekilde kullanım mümkündür çünkü statik olmayan aynı isimli iki işlev yoktur.
      </para><para>
C++ aşırı yüklemeye (farklı işlevlerin değişik değiştirgelerle aynı isme sahip olması) izin verdiği için ve C'nin izin vermediği bir çok özelliği olduğu için -sınıflar, eleman işlevler, istisnai durum belirtimleri gibi- işlev isimlerini basitçe sembol ismi olarak kullanmak mümkün değildir. Bunu çözmek için C++ isim cendereleme denen, işlev isimlerinin ve tüm gerekli bilgilerin (değiştirgelerin sayısı ve boyutu gibi) sadece derleyicinin bildiği bazı garip görünümlü dizgelere dönüştürüldüğü yöntemi kullanır. Örneğin cenderelenen <function>foo</function> ismi <computeroutput>foo@4%6^</computeroutput> gibi gözükebilir. Hatta "foo" kelimesini bile içermeyebilir.
      </para><para>
Cendereleme ile ilgili başka bir sorun da C++ standardının (şu anda <citation>ISO14882</citation>) isimlerin nasıl cendereleneceğini tanımlamamasıdır. Bu yüzden her derleyici cendereleme işlemini kendine göre yapar. Hatta bazı derleyicilerin farklı sürümleri arasında bile isim cendereleme algoritmaları değişiklik göstermektedir (özellikle g++2.x ve 3.x). Belirli bir derleyicinin isim cendereleme işlemini nasıl yaptığını çözseniz bile (ve böylece işlevleri <function>dlsym</function> ile yükleyebilirsiniz) bu muhtemelen sadece sizin derleyicinizde çalışacak ve bir sonraki sürüme uymayacaktır.
      </para>
    </sect2>

    <sect2 xml:id="c-dlopen-mini-howto-classes">
      <title>Sınıflar</title><para>
<function>dlopen</function> API ile ilgili diğer bir sorun sadece yükleme <emphasis>işlevlerini</emphasis> desteklemesidir. Fakat C++ sıklıkla programınızda kullanmak isteyeceğiniz bir sınıf ortaya çıkarır. Açıktır ki bu sınıfı kullanmak için o sınıfın bir örneğini (nesne) oluşturmanız gerekir, fakat bu kolay bir şekilde yapılamaz.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="c-dlopen-mini-howto-thesolution">
    <title>Çözüm</title>
    <sect2 xml:id="c-dlopen-mini-howto-externC">
      <title><literal>extern "C"</literal></title><para>
C++, C bağlamaları (bindings) ile işlev bildirimi için özel bir anahtar kelimeye sahiptir: <literal>extern "C"</literal>. <literal>extern "C"</literal> olarak bildirilen bir işlev, C işlevinde olduğu gibi, işlev ismini sembol ismi olarak kullanır. Bu yüzden sadece üye olmayan işlevler <literal>extern</literal> "C" olarak bildirilebilir ve aşırı yüklenemez.
      </para><para>
Pek çok kısıtlamanın olmasının yanında <literal>extern</literal> "C" işlevleri çok kullanışlıdır çünkü bir C işlevi gibi <function>dlopen</function> kullanarak çalışma anında yüklenebilir.
      </para><para>
Bu, <literal>extern</literal> "C" olarak sınıflandırılan işlevlerin C++ kodu içermeyecekleri anlamına <emphasis>gelmez</emphasis>.
      </para>
    </sect2>

    <sect2 xml:id="c-dlopen-mini-howto-loadingfunctions">
      <title>İşlevlerin Yüklenmesi</title><para>
C++'da işlevler C'deki gibi <function>dlsym</function> ile yüklenir. Sembol isimlerinin cenderelenmesini engellemek için yüklemek istediğiniz işlevler <literal>extern "C"</literal> olarak sınıflandırılmalıdır.
      </para><example><title>Bir işlevin yüklenmesi</title>
        <para>main.cpp:</para><para>
<programlisting>
#include &lt;iostream>
#include &lt;dlfcn.h>

int main() {
    using std::cout;
    using std::cerr;

    cout &lt;&lt; "C++ dlopen demo\n\n";

    // open the library
    cout &lt;&lt; "Opening hello.so...\n";
    void* handle = dlopen("./hello.so", RTLD_LAZY);

    if (!handle) {
        cerr &lt;&lt; "Cannot open library: " &lt;&lt; dlerror() &lt;&lt; '\n';
        return 1;
    }

    // sembolü yükle
    cout &lt;&lt; "Loading symbol hello...\n";
    typedef void (*hello_t)();

    // hataları resetle
    dlerror();
    hello_t hello = (hello_t) dlsym(handle, "hello");
    const char *dlsym_error = dlerror();
    if (dlsym_error) {
        cerr &lt;&lt; "Cannot load symbol 'hello': " &lt;&lt; dlsym_error &lt;&lt;
            '\n';
        dlclose(handle);
        return 1;
    }

    // hesaplama yapmak için kullan
    cout &lt;&lt; "Calling hello...\n";
    hello();

    // kütüphaneyi kapat
    cout &lt;&lt; "Closing library...\n";
    dlclose(handle);
}
</programlisting>
</para><para>hello.cpp:</para><para>
<programlisting>
#include &lt;iostream>

extern "C" void hello() {
    std::cout &lt;&lt; "hello" &lt;&lt; '\n';
}
</programlisting>
      </para></example><para>
<function>hello</function> işlevi <filename>hello.cpp</filename> içinde <literal>extern "C"</literal> tanımlanmıştır; <filename>main.cpp</filename> içinde <function>dlsym</function>'in çağırılması ile yüklenmiştir. İşlev <literal>extern "C"</literal> olarak sınıflandırılmalıdır çünkü aksi taktirde sembol ismini bilemeyecektik.
</para><para><warning><para>
<literal>extern "C"</literal> tanımlamanın iki değişik biçimi vardır: yukarıdaki gibi <literal>extern "C"</literal> kullanımı ve küme parantezleri arasında <literal>extern "C" { … }</literal> biçiminde. İlki (satıriçi biçimi) harici ilintilemeli (extern linkage) ve C dili ilintilemeli bildirimdir; ikincisi sadece dil ilintilemesini etkiler. Bu yüzden aşağıdaki iki bildirim eşdeğerdir:
</para><para>
<programlisting>
extern "C" int foo;
extern "C" void bar();
</programlisting>
</para><para>ve</para><para>
<programlisting>
extern "C" {
     extern int foo;
     extern void bar();
}
</programlisting>
</para><para>
<literal>extern</literal> ve <literal>extern</literal> olmayan <emphasis>işlev</emphasis> bildirimi arasında fark olmadığından değişken bildirimi yapmadığınız sürece sorun yoktur. <emphasis>Değişken</emphasis> tanımlarsanız şunu aklınızdan çıkarmayın
</para><para>
<programlisting>
extern "C" int foo;
</programlisting>
</para><para>ile</para><para>
<programlisting>
extern "C" {
    int foo;
}
</programlisting>
</para><para>aynı şey <emphasis>değildir</emphasis>.
</para><para>
Daha ileri açıklamalar için 7. bölüme özellikle dikkat ederek <citation>ISO14882</citation> 7.5 bölümüne veya <citation>STR2000</citation>, 9.2.4'e bakınız.
</para><para>
Harici (extern) değişkenlerle daha ileri işlemler için <xref linkend="c-dlopen-mini-howto-seealso"/> bölümündeki belgeleri inceleyiniz.
</para></warning></para>
    </sect2>

    <sect2 xml:id="c-dlopen-mini-howto-loadingclasses">
      <title>Sınıfların Yüklenmesi</title><para>
Bir sınıfı yüklemek biraz daha karmaşıktır çünkü sadece bir işlev göstericisi değil, sınıfın bir <emphasis>örneği</emphasis> gereklidir.
</para><para>
<literal>new</literal> kullanarak bir sınıfın örneğini yaratamayız çünkü sınıf çalıştırılabilir kod içinde tanımlı değildir ve (bazı durumlarda) ismini bile bilmeyiz.
</para><para>
Çözüm çokbiçimlilik ile gerçekleştirilir. Bir baz -<emphasis>çalıştırılabilir kod</emphasis> içinde sanal üyeler ile <emphasis>arayüz</emphasis> sınıfı- ve bir türemiş -<emphasis>modül</emphasis> içinde <emphasis>gerçekleştirim</emphasis> sınıfı- tanımlarız. Genel olarak arayüz sınıfı soyuttur (abstract - bir sınıf eğer saf sanal işlevi varsa soyuttur).
</para><para>
Sınıfların dinamik yüklenmesi genellikle uyumlu-eklentiler (plug-in) için kullanıldığından -ki açıkça tanımlanmış arayüzleri ortaya çıkarması gerekir- bir arayüz ve türemiş gerçekleştirim sınıfı tanımlamak zorunda oluruz.
</para><para>
Sonra, hala modül içindeyken, sınıf üretim işlevleri (<emphasis>class factory functions</emphasis>) olarak bilinen iki ek yardımcı işlev tanımlarız. Bu işlevlerden bir tanesi sınıfın bir örneğini yaratır ve bunun göstericisini geri döndürür. Diğer işlev üretim tarafından oluşturulmuş bir sınıf göstericisi alır ve onu yokeder. Bu iki işlev <literal>extern "C"</literal> olarak sınıflandırılır.
</para><para>
Sınıfı modülden kullanmak için <function>dlsym</function> kullanarak <link linkend="c-dlopen-mini-howto-loadingfunctions">hello işlevini yüklediğimiz gibi</link> iki üretim işlevini yükleriz; sonra, istediğimiz kadar örnek oluşturur ve yokederiz.
</para><example><title>Bir Sınıfın Yüklenmesi</title><para>
Burada arayüz olarak çok bilinen <classname>polygon</classname> sınıfını ve gerçekleştirim olarak türemiş <classname>triangle</classname> sınıfını kullanıyoruz.
</para><para>main.cpp:</para><para>
<programlisting>
#include "polygon.hpp"
#include &lt;iostream>
#include &lt;dlfcn.h>

int main() {
    using std::cout;
    using std::cerr;

    // load the triangle library
    void* triangle = dlopen("./triangle.so", RTLD_LAZY);
    if (!triangle) {
        cerr &lt;&lt; "Cannot load library: " &lt;&lt; dlerror() &lt;&lt; '\n';
        return 1;
    }

    // hataları resetle
    dlerror();

    // sembolleri yükle
    create_t* create_triangle = (create_t*) dlsym(triangle, "create");
    const char* dlsym_error = dlerror();
    if (dlsym_error) {
        cerr &lt;&lt; "Cannot load symbol create: " &lt;&lt; dlsym_error &lt;&lt; '\n';
        return 1;
    }

    destroy_t* destroy_triangle = (destroy_t*) dlsym(triangle, "destroy");
    dlsym_error = dlerror();
    if (dlsym_error) {
        cerr &lt;&lt; "Cannot load symbol destroy: " &lt;&lt; dlsym_error &lt;&lt; '\n';
        return 1;
    }

    // sınıfın bir örneğini yarat
    polygon* poly = create_triangle();

    // sınıfı kullan
    poly->set_side_length(7);
        cout &lt;&lt; "The area is: " &lt;&lt; poly->area() &lt;&lt; '\n';

    // sınıfı yoket
    destroy_triangle(poly);

    // triangle kütüphanesini boşalt (unload)
    dlclose(triangle);
}
</programlisting>
</para><para>polygon.hpp:</para><para>
<programlisting>
#ifndef POLYGON_HPP
#define POLYGON_HPP

class polygon {
protected:
    double side_length_;

public:
    polygon()
        : side_length_(0) {}

    virtual ~polygon() {}

    void set_side_length(double side_length) {
        side_length_ = side_length;
    }

    virtual double area() const = 0;
};

// sınıf üretiminin türleri
typedef polygon* create_t();
typedef void destroy_t(polygon*);

#endif
</programlisting>
</para><para>triangle.cpp:</para><para>
<programlisting>
#include "polygon.hpp"
#include &lt;cmath>

class triangle : public polygon {
public:
    virtual double area() const {
        return side_length_ * side_length_ * sqrt(3) / 2;
    }
};


// sınıf üretimi

extern "C" polygon* create() {
    return new triangle;
}

extern "C" void destroy(polygon* p) {
    delete p;
}
</programlisting>
</para></example><para>
Sınıfları yüklerken dikkat edilmesi gereken bir kaç şey vardır:
</para><para><itemizedlist>
<listitem><para>
<emphasis>Hem</emphasis> oluşturma <emphasis>hem de</emphasis> yoketme işlevi yapmalısınız; örneği çalıştırılabilir kodun içinden <literal>delete</literal> kullanarak yoketmemeli, herzaman onu modüle geri göndermelisiniz. Bunun sebebi C++'da <literal>new</literal> ve <literal>delete</literal> operasyonlarının aşırı yüklü olabilmesidir; bu, bellek sızıntısı ve parçalama arızasına (segmentation fault) yolaçan eşleşmeyen <literal>new</literal> ve <literal>delete</literal> çağırımına sebep olabilecektir. Modül ve çalıştırılabilir kodun bağlanması için farklı standart kütüphaneleri kullanılırsa yine aynısı geçerlidir.
</para></listitem><listitem><para>
Arayüz sınıfının yıkıcısı her durumda sanal olmalıdır. Bunun zorunlu olmadığı çok nadir durumlar olabilir, fakat risk almaya değmez, çünkü ek yük genellikle ihmal edilebilir.
</para><para>
Eğer baz sınıfın hiçbir yıkıcıya ihtiyacı yoksa yine de boş (ve sanal) bir yıkıcı tanımlayın; aksi taktirde er ya da geç sorunlarla karşılaşırsınız; bunu garanti ederim. Bu sorunlar hakkında daha fazla bilgi için comp.lang.c++ SSS <link xlink:href="http://www.parashift.com/c++-faq-lite/"/>, bölüm 20'yi okuyabilirsiniz.
</para></listitem>
      </itemizedlist></para>
    </sect2>
  </sect1>

  <sect1 xml:id="c-dlopen-mini-howto-source">
    <title>Kaynak Kod</title><para>
Saklamak için bu nasıl belgesindeki tüm kaynak kodları <link xlink:href="../indirin/examples.tar.gz">buradan</link> indirebilirsiniz.
    </para>
  </sect1>

  <sect1 xml:id="c-dlopen-mini-howto-faq">
    <title>Sıkça Sorulan Sorular</title>
    <qandaset defaultlabel="number"><qandaentry>
<question><para>
Windows kullanıyorum ve <filename>dlfcn.h</filename> başlık dosyasını bulamıyorum! Sorun nedir?
</para></question><answer><para>
Sorun Windows'da <function>dlopen</function> API'nin olmamasıdır ve dolayısıyla <filename>dlfcn.h</filename> başlık dosyası yoktur. Benzer bir API olan <function>LoadLibrary</function> işlevi vardır ve burada yazılanların bir çoğu ona da uygulanabilir. Daha fazla bilgi için <link xlink:href="http://msdn.microsoft.com/">Microsoft Developer Network</link> adresine başvurunuz.
</para></answer>
</qandaentry><qandaentry>
<question><para>
Acaba Windows <function>LoadLibrary</function> API için <function>dlopen</function>-uyumlu bir çeşit sarmalayıcı (wrapper) var mıdır?
</para></question><answer><para>
Olduğunu bilmiyorum ve tüm <function>dlopen</function> seçeneklerini destekleyen bir sarmalayıcının olacağını düşünmüyorum.
</para><para>
Bunun yanında alternatifler mevcut: çeşitli farklı dinamik yükleme API'leri taşıyan libtltdl (libtool'un bir parçası), diğerleri arasında <function>dlopen</function> ve <function>LoadLibrary</function>. Başka bir tanesi ise <link xlink:href="http://developer.gnome.org/doc/API/glib/glib-dynamic-loading-of-modules.html">GLib'in Dinamik Modül Yükleme işlevselliği (Dynamic Module Loading functionality of GLib)</link>. Daha iyi bir çapraz-platform uyumluluğu sağlamak için bunlardan birini kullanabilirsiniz. Bunlardan birini hiç kullanmadım, bu yüzden ne kadar kararlı oldukları hakkında veya gerçekten çalışıp çalışmadıkları hakkında bir şey söyleyemem.
</para><para>
Ayrıca platformdan bağımsız olarak kütüphane yükleme ve sınıf oluştuma hakkında daha teknik bilgiler için <link xlink:href="http://www.dwheeler.com/program-library">Program Kütüphanesi NASIL</link> belgesinin <quote>Dinamik Yüklü Kütüphaneler - Dynamically Loaded (DL) Libraries</quote> başlıklı 4. bölümünü okumalısınız.
</para></answer>
      </qandaentry>
    </qandaset>
  </sect1>

  <sect1 xml:id="c-dlopen-mini-howto-seealso">
    <title>Ayrıca bakınız</title>
    <itemizedlist><listitem>
<function>dlopen(3)</function> man sayfası. <function>dlopen</function> API'nin amacını ve kullanımını açıklar.
</listitem><listitem>
<link xlink:href="http://www.linuxjournal.com/">Linux Journal</link>'da yayınlanan James Norton tarafından yazılan <link xlink:href="http://www.linuxjournal.com/article.php?sid=3687">Dynamic Class Loading for C++ on Linux</link> makalesi.
</listitem><listitem>
<literal>extern "C"</literal>, kalıtım, sanal işlevler, <literal>new</literal> ve <literal>delete</literal> hakkında gözde C++ referans belgeniz. <citation>STR2000</citation>'i tavsiye ederim.
</listitem><listitem>
<citation>ISO14882</citation>
</listitem><listitem>
Statik, paylaşımlı ve dinamik yüklenen kütüphaneler ve bunların nasıl oluşturulduğu hakkında ihtiyacınız olan herşeyi bulabileceğiniz <link xlink:href="http://www.dwheeler.com/program-library">Program Library HOWTO</link> belgesi. Bilhassa önerilir.
</listitem><listitem>
GCC ile kütüphane yapımını öğrenmek için <link xlink:href="http://tldp.org/HOWTO/GCC-HOWTO/index.html">Linux GCC HOWTO</link> belgesi.
</listitem></itemizedlist>
  </sect1>

  <bibliography xml:id="c-dlopen-mini-howto-bibliography"><title>Kaynakça</title>
    <bibliomixed>
<abbrev>ISO14482</abbrev>
<title>ISO/IEC 14482-1998 — The C++ Programming Language</title>,
<releaseinfo><ulink  url="http://webstore.ansi.org/"/> adresinde basılı kitap ve PDF olarak mevcut.</releaseinfo>
    </bibliomixed><bibliomixed>
<abbrev>STR2000</abbrev>
<author>
  <surname>Stroustrup</surname></personname>
 <personname><firstname>Bjarne</firstname>
</author>
<title>The C++ Programming Language</title>,
<edition>Special Edition</edition>
ISBN <isbn>0-201-70073-5</isbn>
<publishername>Addison-Wesley</publishername>
    </bibliomixed>
  </bibliography>
</article>
