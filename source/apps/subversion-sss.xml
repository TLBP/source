<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
         subversion-sss.xml
     ******************************************************************** -->
<part xml:id="subversion-sss"  xmlns="http://docbook.org/ns/docbook"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="tr">
 <?dbhtml dir="../uygulamalar/subversion"?>
 <info>
  <title>Subversion SSS</title>
  <subtitle>Sıkça Sorulan Sorular</subtitle>
  <author role="translator">
   <personname>
    <firstname>Volkan "knt" YAZICI</firstname>
   </personname>
   <affiliation>
    <address>
     <email>v0lkany@yahoo.com</email>
    </address>
   </affiliation>
  </author>
  <pubdate>25 Şubat 2005</pubdate>
  <revhistory>
   <revision>
    <revnumber>1.0.9</revnumber>
    <date>25 Şubat 2005</date>
    <authorinitials>Özgün belge: CollabNet, Çeviri: knt</authorinitials>
    <revremark>
     Çevirinin özgün sürümünü
     <link xlink:href="https://web.itu.edu.tr/~yazicivo/doc/subversion-sss.html"/>
     adresinde bulabilirsiniz.
    </revremark>
   </revision>
  </revhistory>
  <legalnotice>
   <para>
    <literallayout class="normal">
/* ================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * 3. The end-user documentation included with the redistribution, if
 * any, must include the following acknowledgment: "This product includes
 * software developed by CollabNet (http://www.Collab.Net/)."
 * Alternately, this acknowledgment may appear in the software itself, if
 * and wherever such third-party acknowledgments normally appear.
 *
 * 4. The hosted project names must not be used to endorse or promote
 * products derived from this software without prior written
 * permission. For written permission, please contact info@collab.net.
 *
 * 5. Products derived from this software may not use the "Tigris" name
 * nor may "Tigris" appear in their names without prior written
 * permission of CollabNet.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL COLLABNET OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of CollabNet.
 */
</literallayout>
   </para>
  </legalnotice>
  <legalnotice>
   <para>Telif hakkı © 2005 Volkan Yazıcı</para>
   <para>
Özgün belge için geçerli lisans koşulları bu çeviri için de geçerlidir.
    </para>
  </legalnotice>
 </info>
 <chapter xml:id="subversion-sss-genel">
  <info>
   <title>Genel Sorular</title>
  </info>
  <qandaset defaultlabel="number">
   <qandaentry>
    <question>
     <para>Neden böyle bir proje mevcut?</para>
    </question>
    <answer>
     <para>
CVS kullanıcısını ele geçirmek için. Yapmaya çalıştığımız daha çok CVS'in eksik birçok yanını tamamlayarak yeni bir sürüm denetim sistemi oluşturmak. Daha fazla bilgi için <link xlink:href="http://subversion.tigris.org/">anasayfamıza</link> bakabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion mülkiyeti özel bir yazılım mı? Subversion'ın CollabNet'e ait olduğunu duydum.</para>
    </question>
    <answer>
     <para>
Hayır, Subversion açık kaynak kodlu, özgür bir yazılım. CollabNet sadece tüm zamanını yazılım geliştirmeye harcayan geliştiricilerin ücretlerini ödeyerek, yazılım kodunun telif haklarını, <link xlink:href="http://www.debian.org/social_contract#guidelines">Debian Özgür Yazılım Kılavuzu</link> ile uyumlu Apache/BSD-tarzı bir lisans ile, elinde tutuyor. Diğer bir ifadeyle, Subversion'ı CollabNet ya da başka birinden hiçbir şekilde izin almaya gerek kalmadan, istediğiniz şekilde bilgisayarınıza yükleyebilir, Subversion'ın üzerinde değişiklikler yapabilir ve onu dağıtabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Kendi projelerimde kullanmak için Subversion yeterli kararlılığa sahip mi?</para>
    </question>
    <answer>
     <para>
Evet, kesinlikle. Başlıca öneme sahip olan (`prime-time') üretimler için kullanıma hazırdır.
    </para>
     <para>
Subversion 2000 yılından beri geliştirilmektedir ve gelişiminden 1 yıl sonra kendi kendini sunabilecek hale gelmiştir. Bir yıl sonra "alpha" sürümü duyurulduğu zaman ise zaten düzinelerce geliştirici ve şirket tarafından kullanılmaktaydı. Alfa sürümünün duyurulmasından sonraki iki sene boyunca, yazılım 1.0 sürümüne ulaşana kadar, hataları düzeltilip daha yazılımın kararlı bir hale gelmesi sağlandı. Yazılımı 1.0 ile çağırmamayı biz ne kadar uzun tutmaya çalışsak da, bir çok insan 1.0 sürümüne çıkmadan önce bile, Subversion'ı 1.0 sürüm numarası ile çağırıyordu. Şunun da farkındaydık ki, bir çok insan Subversion'ı kullanmak için 1.0 sürümünü bekliyordu ve yazılım hakkında bu sürüm etiketine bağladıkları çok farklı beklentileri vardı. Ve biz de bu standardı bozmadık.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion'ın istemci/sunucu uyumluluğunda izlediği yöntem nedir? </para>
    </question>
    <answer>
     <para>
İstemci ve sunucu tarafı sürüm numaralarının ilk kısımları aynı olduğunda uyumlu çalışacağı düşünülüp, bu şekilde tasarlanmıştır. Şöyle ki: <literal>1.X</literal> sürümüne sahip bir istemci, <literal>1.Y</literal> sürüm numaralı bir sunucu üzerinde çalışabilecektir. Fakat şu da unutulmamalıdır ki, sürüm numaraları farklı istemci ve sunucular arasındaki iletişimde bazı işlemlerin kullanılamayacak olması olasılığı vardır.
  </para>
     <para>
Sunucu ve istemcinin birlikte işlerlik politikası <link xlink:href="http://svn.collab.net/repos/svn/trunk/HACKING">HACKING</link> dosyasının "Compatibility" (Uyumluluk) kısmında belgelenmiştir.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion hangi işletim sistemleri üzerinde çalışabilir?</para>
    </question>
    <answer>
     <para>
Günümüzdeki tüm Unix, Win32, BeOS, OS/2, MacOS X türevlerinde çalışabilir.
    </para>
     <para>
Subversion ANSI C ile yazılmış olup, APR ()<link xlink:href="http://apr.apache.org/">Apache Portable Runtime</link>) kütüphanesini taşınabilirlik katmanı olarak kullanmaktadır. Bu nedenle Subversion, APR'nin çalıştığı her platformda (ki bu neredeyse tüm platformları kapsıyor) rahatlıkla çalışabilir. Subversion'ın sunucu (arşiv) tarafı ise dosya sistemi BDB olmadığı sürece Win9x platformlarda da çalışmaktadır. (Çünkü <link xlink:href="http://www.sleepycat.com/">Berkeley DB</link>'nin Win9x sistemlerdeki paylaşımlı bellek kısımlarında bazı sorunları var.) 1.1 sürümünde kullanılmaya başlanan FSFS arşivleri bu kısıtlamaya sahip değildir. Fakat Win9x sistemlerdeki dosya kilitleme mekazimasındaki bir kısıtlamadan dolayı FSFS de Win9x sistemlerde çalışmamakta. Ama FSFS için bu kısıtlamanın da 1.1.2 sürümünde ortadan kalkması için çalışılıyor.
  </para>
     <para>
Toplamak gerekirse; Subversion istemcisi APR'nin çalıştığı her platformda; Subversion sunucusu ise yine, arşivi Win95/Win98/WinMe sistemlerde tutamasa bile, APR'nin çalıştığı her platformda çalışabilir.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Bu yeni dosya sistemi nasıl bir şey? Ext2 benzeri bir şey mi yoksa?</para>
    </question>
    <answer>
     <para>
Hayır. "Subversion dosya sistemi" çekirdek seviyesinde, işletim sistemlerine kurulabilen bir dosya sistemi değildir. Bunun yerine, Subversion'ın arşiv tasarımı için kullanılan bir terimdir. Arşiv, veritabanı üstüne kurulmuş olup, sürüm numaralarına sahip bir dosya sistemini taklit eden bir C API'si sunuyor. Bu yüzden arşive erişen bir yazılım için yazmak, diğer dosya sistemleri için yapılanlara benzer. Normal bir dosya sistemi ile Subversion dosya sistemi arasındaki ana fark ise, Subversion dosya sisteminde, herhangi bir dosya/dizin yenisi ile değiştirilse ya da silinse dahi, arşivde kendine ait bir sürüm numarası ile varlığını korur.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion'ın bir Apache eklentisi olduğunu duydum. Subversion sunucular için ne kullanıyor?</para>
    </question>
    <answer>
     <para>
Hayır. Subversion bir çeşit kütüphaneler topluluğudur. Yanında bu kütüphaneleri kullanan bir komut satırı istemcisi ile gelir. İki çeşit Subversion sunucusu vardır: <userinput>svnserve</userinput>, cvs pserver benzeri, başlı başına tek bir sunucudur ya da Apache <command>httpd-2.0</command> ile <command>mod_dav_svn</command> modülü. <userinput>svnserve</userinput> özel bir protokol kullanırken, <command>mod_dav_svn</command> ağ protokolü olarak WebDAV kullanır. Daha fazla bilgi için Subversion kitabındaki <link xlink:href="http://svnbook.red-bean.com/html-chunk/ch06.html">6. bölüme</link> bakınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Yani bu Subversion kullanmak için Apache yüklemek zorunda olduğum anlamına mı geliyor?</para>
    </question>
    <answer>
     <para>
Kısaca cevaplamak gerekirse: Hayır.
    </para>
     <para>
Eğer sadece bir Subversion arşivine erişmek istiyorsanız, istemciyi kurmanız yeterli. Eğer ağdaki bir Subversion arşivine ev sahipliği yapmak istiyorsanız Apache2'yi ya da <userinput>svnserve</userinput>'ü kurmalısınız.
  </para>
     <para>
Ağ üzerinden ulaşılabilir bir Subversion sunucusu kurmak için daha fazla bilgiye Subversion kitabındaki <link xlink:href="http://svnbook.red-bean.com/html-chunk/ch06.html">6. bölümden</link> ulaşabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Şu an Apache 1.x kullanıyorum ve Subversion arşivlerini sunmak için Apache 2.0 kuramam. Bu bir Subversion sunucusu çalıştıramayacağım anlamına mı geliyor?</para>
    </question>
    <answer>
     <para>
Hayır, Subversion sunucusu olarak <userinput>svnserve</userinput> kullanabilirsiniz. <userinput>svnserve</userinput>'de çok iyi bir şekilde çalışıyor.
    </para>
     <para>
Eğer WebDAV ve onun ile gelen diğer bir çok eklentiyi istiyorsanız, evet, o zaman Apache 2.0 kurmalısınız. Apache 2.0'ı başka bir port numarası üzerinde çalıştırırken, Apache 1.x'i 80. port altında çalıştırmak daima bir seçenek olmuştur. Apache'nin farklı sürümleri aynı makine üzerinde sorunsuzca çalışabilmektedir. Yapmanız gereken tek şey <filename>httpd.conf</filename> dosyasındaki <literal>Listen</literal> ibaresinin karşısındaki 80 değerini 8080 gibi istediğiniz bir değer ile değiştirmek ve arşivinizin URL'sini doğru port değeri ile vermek. (Örnek: <literal>http://svn.mydomain.com:8080/repos/blah/trunk/</literal>)
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden SCM'nin Y sistemi gibi bir X sistemi kullanmıyorsunuz?</para>
    </question>
    <answer>
     <para>
SCM (Kaynak Denetim Yönetimi [Source Control Management]) sistemlerinde yeni bir çığır açma ya da piyasadaki tüm SCM'lerin en iyi özelliklerini toplama gibi bir niyetimiz yok. Yaptığımız tek şey CVS'in yerine bir şeyler oluşturmak. Lütfen ilk soruya bakınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden tüm arşivim aynı revizyon numarasını paylaşıyor? Tüm projelerimin kendinlerine ait revizyon numaralarının olmasını istiyorum.</para>
    </question>
    <answer>
     <para>
Arşivdeki genel bir revizyon numarasının kullanıcının bakış açısından hiçbir anlamı yoktur. Bu şema tasarımının asıl hedefine ulaşmasını sağlayan bir iç mekanizmadır. Bu sayede kullanıcı herzaman saçma sapan uzun tarih/zaman katarları yazmaktan kurtarılmış olur.
    </para>
     <para>
Revizyon numaraları sadece arşiv ve kullanıcı açısından kullanım kolaylığı ile ilgilidir. Bunun arşivde ne sakladığınız ile ilgili bir nedeni yoktur. Hatta arşivdeki revizyon numaraları projenin gerçek gelişimi hakkında isabetli bir tahmin yapmak için dahi yeterli değildir. Projenin gerçek gelişimi hakkında fikir sahibi olmanın çok daha karmaşık yolları vardır.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion `changeset' özelliğine sahip mi?</para>
    </question>
    <answer>
     <para>
Bu biraz yüklü bir soru. Çünkü <emphasis>changeset</emphasis> denildiği zaman neredeyse herkes ya farklı bir tanım ile yaklaşıyor ya da bir sürüm denetim sistemi <emphasis>changeset</emphasis> özelliği sunduğu zaman herkesin beklentisi farklı oluyor.
    </para>
     <para>
Bu ufak tartışmanın amacı doğrultusunda <emphasis>changeset</emphasis>'in ufak bir tanımını şu şekilde verebiliriz: Tek bir etiket altındaki değişikliklerin bir toplamı. Değişiklikler düz bir metin dosyası üzerinde olabileceği gibi, dizin yapısındaki düzenlemeleri ya da metadata ayarlamalarını da içerebilir. Daha genel anlamda, <emphasis>changeset</emphasis> sadece etikete sahip bir yamadır.
    </para>
     <para>
Subversion ilk sırada sürüm numaralarına sahip arşiv ağaçlarını yönetir (arşiv bu ağaçların toplamından oluşur) ve <emphasis>changeset</emphasis>'ler de bu arada türetilir. Arch ya da BitKeeper gibi sistemlerde öncelik <emphasis>changset</emphasis>'lerde olup (yani tüm arşiv bir yama deposudur) ağaç yapıları bu yamalar ile birlikte oluşturulur.
    </para>
     <para>
Kesin olarak ifade edilmeye çalışıldığında iki felsefenin de eksileri ve artıları var: hesap 30 yıl öncesine kadar gidiyor. Her ikisinin de geliştirilecek olan yazılımın türüne bağlı olaraktan iyi ve kötü yanları var. Bunu burada tartışmayacağız. Onun yerine, Subversion ile neler yapabileceğiniz hakkında bir açıklama bulacaksınız burada.
    </para>
     <para>
Subversion'da, global bir revizyon numarası olan 'N' arşivde bir ağacı etiketler ve bu sayede arşiv N. onaylamadan sonraki durumu görebilir. Bu ayrıca açıkca belirtilmiş bir <emphasis>changeset</emphasis>'in de etiketidir: Eğer N. ağaç ile N-1. ağacı karşılaştırırsanız, bu iki ağaç arasındaki onaylanmış kesin farkların bir yamasını elde edersiniz.
    </para>
     <para>
Bu sebepten dolayı, "N. revizyon"un sadece bir ağaç olmadığı kolayca anlaşılabilir olup, bunun ayrıca bir <emphasis>changeset</emphasis> olduğu da açıkça görülebilir. Eğer projenizdeki hataları herhangi bir durum takip sistemi kullanarak tespit ediyorsanız, revizyon numaralarını size ilgili hataların yamalarını vermeleri için kullanabilirsiniz. Örnek verecek olursak: "Bu durum 9238. revizyonda düzeltildi." şeklinde açıklamaya sahip bir arşiv kaydının düzeltilmesi için ilgili <emphasis>changeset</emphasis>'i <literal>svn log -r9238</literal> çıktısı ile gördükten sonra, yamayı <literal>svn diff -r9237:9238</literal> ile oluşturabilirsiniz. Buna ek olarak <userinput>svn</userinput>'nin <literal>merge</literal> komutu da revizyon numaralarını kullanır. Başka bir daldaki (branch) değişiklikleri kendi dalınıza aktarmak içinse, diğer dalın URL'sini parametreler arasına eklemeniz yeterli: <literal>svn merge -r9237:9238</literal>. Artık #9238 <emphasis>changeset</emphasis>'i de kendi çalışır kopyanıza eklenmiş oldu.
    </para>
     <para>
Düşünüdüğünde bu <emphasis>changeset</emphasis>'ler çevresine kurulmuş bir sistem için hiç de karmaşık değil, fakat hala CVS'e karşı uçsuz bucaksız bir kolaylık.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion'ın yeni sürümü ne zaman çıkacak?</para>
    </question>
    <answer>
     <para>
Proje durum sayfamıza bakabilirsiniz: <uri xlink:href="http://subversion.tigris.org/project_status.html">http://subversion.tigris.org/project_status.html</uri>
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion sembolik bağları destekliyor mu?</para>
    </question>
    <answer>
     <para>
Subversion 1.1 ve üstü sürümlerde normal <userinput>svn add</userinput> komutu ile sembolik bağ ekleyebilirsiniz.
    </para>
     <para>
Ayrıntıda ise, Subversion'ın kendi tuttuğu arşiv için sembolik bağ kavramı yoktur. Onun yerine sürüm numarasına sahip sembolik bağları <literal>svn:special</literal> özelliği ekleyerek normal bir dosyaymışcasına saklar. Unix istemcileri bu özelliği fark edip, çalışma kopyasında dosyayı bir sembolik bağmış gibi gösterir. Win32 istemcilerinin sembolik bağ özelliği olmadığından dolayı dosyanın bir sembolik bağ olduğunu algılayamaz ve normal bir dosyaymış gibi gösterir.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion'ın yüksek çözünürlükte bir logosuna ihtiyacım var. Bunu nereden bulabilirim?</para>
    </question>
    <answer>
     <para>
Subversion'ın logosunun vektörel biçimleri de mevcut olmak üzere, <link xlink:href="http://svn.collab.net/repos/svn/trunk">Subversion arşivine</link> ve <link xlink:href="http://svn.collab.net/repos/svn/trunk/www">logoların bulunduğu dizine</link> bakabilirsiniz.
    </para>
     <para>
Özel olarak logoların <link xlink:href="http://svn.collab.net/repos/svn/trunk/www/logo/subversion_logo.eps">EPS</link> ve <link xlink:href="http://svn.collab.net/repos/svn/trunk/www/logo/subversion_logo.ai">Adobe Illustrator</link> biçimleri de mevcut.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Sormak istediğim başka sorularım var. Daha fazla bilgiye nereden ulaşabilirim?</para>
    </question>
    <answer>
     <para>
Lütfen merak ettiğiniz sorularınızı Subversion Kullanıcılar Grubunun <link xlink:href="mailto:users@subversion.tigris.org">e-posta listesine</link> gönderiniz. Diğer bir seçenek olarak ise bir çok Subversion kullancısını etkin olarak bulabileceğiniz <link xlink:href="http://www.freenode.net/">irc.freenode.net</link> IRC sunucusundaki <literal>#svn</literal> kanalına bakabilirsiniz.
    </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>
 <chapter xml:id="subversion-sss-nasil">
  <info>
   <title>Neyi Nasıl Yapabilirim?</title>
  </info>
  <qandaset defaultlabel="number">
   <qandaentry>
    <question>
     <para>Subversion'ın kaynak kodunu nasıl kendi çalışma dizinime çekebilirim (Nasıl `checkout' yapabilirim)?</para>
    </question>
    <answer>
     <para>
Subversion istemcisini kullanarak aşağıdaki komutu vermeniz yeterli:
    </para>
     <para>
      <screen>$ <userinput>svn co http://svn.collab.net/repos/svn/trunk subversion</userinput></screen>
     </para>
     <para>
Bu sayede Subversion'ın kaynak kodununun bir kopyasını kendi makinenizdeki <filename>subversion</filename> dizini altına indirmiş olacaksınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Nasıl bir arşiv oluşturup içine veri atabilirim?</para>
    </question>
    <answer>
     <para><uri xlink:href="http://svn.collab.net/repos/svn/trunk/README">http://svn.collab.net/repos/svn/trunk/README</uri> adresine ya da özel olarak <emphasis>Quickstart Guide</emphasis>'ın IV. bölümüne bakabilirsiniz.
    </para>
     <para>
Hatta daha ayrıntılı bilgi için <link xlink:href="http://svnbook.red-bean.com/">Subversion Kitabı</link> nın 5. bölümüne göz atınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Önceki bir CVS arşivimi, nasıl bir Subversion arşivine çevirebilirim?</para>
    </question>
    <answer>
     <para>
Bu iş için Subversion geliştirme ekibi üyeleri <userinput>cvs2svn</userinput> adından bir araç geliştirmiş ve halen de devamlılığını sağlaması için bakımını sağlamaktadır. <userinput>cvs2svn</userinput>'i <uri xlink:href="http://cvs2svn.tigris.org/">http://cvs2svn.tigris.org/</uri> adresinde bulabilirsiniz. Ama kullanmadan önce <link xlink:href="http://svn.collab.net/repos/cvs2svn/trunk/README">README</link> dosyasını okumalısınız.
    </para>
     <para>
Eğer <userinput>cvs2svn.py</userinput> işinizi görmezse (örneğin arşiviniz üzerinde çevirme işlemi yaparken hata verip çıkıyorsa ya da dal ve etiketlerle sizin istediğiniz gibi işlem yapmıyorsa) kullanabileceğiniz başka 2 araç daha var. Tüm bu araçlar değişik özelliklere sahip (ve tabii ki beraberinde içerdikleri değişik hatalar ile):
    </para>
     <para>
Bunlardan birisi Chia-liang Kao tarafından yazılan <link xlink:href="http://public.perforce.com/public/revml/index.html">VCP</link>'ye dayanıyor. Buna <link xlink:href="http://search.cpan.org/perldoc?VCP::Dest::svk">CPAN</link>'den ulaşabilirsiniz. Lev Serebryakov tarafından yazılmış <userinput>refinecvs</userinput>'e <uri xlink:href="http://lev.serebryakov.spb.ru/refinecvs/">http://lev.serebryakov.spb.ru/refinecvs/</uri> adresinden ulaşabilirsiniz.
    </para>
     <para>
Bunun dışında <link xlink:href="http://yazicivo.fateback.com/doc/project_links.html">Subversion bağlantılarına</link> da göz atınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Ya eğer bir vekil sunucu arkasındaysam?</para>
    </question>
    <answer>
     <para>
Eğer Subversion istemcisinde doğru ayarları yapacak olursak, vekil sunucu arkasındayken de rahatlıkla çalışabilirsiniz. İlk önce <filename>servers</filename> ayar dosyanız üzerinde gerekli değişiklikleri kullanacağınız vekil sunucuya göre yapın. Ayar dosyanın bulunduğu dizin kullandığınız işletim sistemine göre değişir. Linux ya da Unix sistemlerde <filename>~/.subversion</filename> dizini altinda bulabilirsiniz ayar dosyasını. Windows sistemlerde ise <filename>%APPDATA%\Subversion</filename> dizini altında. (<userinput>echo %APPDATA%"</userinput> komutunu deneyin, fakat unutmayın ki bu gizlenmiş bir dizindir.)
    </para>
     <para>
Dosyanın içinde açıklayıcı yorum satırları ne yapmanız gerektiğini zaten yazar. Eğer bu dosyanız yoksa, en son Subversion istemcilerinden birini indirip herhangi bir Subversion komutu çalıştırın; bu sayede ayar dizinleri ve şablon dosyaları otomatik olarak oluşturulmuş olacaktır.
    </para>
     <para>
Eski Subversion sürümleri, 0.14.3 bootstrap paketi de dahil olmak üzere, bu dosyanın yerine <filename>~/.subversion/proxies</filename> kullanırlar. Bu eski dosya şu anki Subversion tarafından gözardı edilmektedir.
    </para>
     <para>
Bir sonraki adımda, vekil sunucunuzun Subversion tarafından kullanılan tüm HTTP yöntemlerini desteklediğine emin olun. Bazı vekil sunucular şu yöntemleri öntanımlı olarak desteklememektedir: <literal>PROPFIND, REPORT, MERGE, MKACTIVITY, CHECKOUT</literal>. Genel olarak, böyle bir sorunu çözmek ise kullandığınız vekil sunucusu yazılımı ile ilgilidir. Squid için ayar dosyası şu şekilde olacak:
    </para>
     <para>
      <screen>
#  TAG: extension_methods
#       Squid only knows about standardized HTTP request methods.
#       You can add up to 20 additional "extension" methods here.
#
#Default:
# none
extension_methods REPORT MERGE MKACTIVITY CHECKOUT
</screen>
     </para>
     <para>
(Squid'in 2.4 ve üstü sürümleri zaten <literal>PROPFIND</literal>'ı desteklemektedir.)
    </para>
     <para>
Ek olarak, vekil sunucunuzdan kullanabileceğiniz HTTP yöntemleri ile ilgili daha fazla ayrıntı için <link linkend="subversion-sss-http-methods">Subversion kullandığı tüm HTTP yöntemleri neler?</link> başlıklı soruya  bakabilirsiniz.
    </para>
     <para>
Eğer Subversion trafiğinizi vekil sunucudan geçirmek çok zor ya da imkansızsa ve hala Subversion kodlarını <literal>checkout</literal> etmek istiyorsanızvekil sunucunun etrafından dolanabilirsiniz. 80. portu filtreleyen bazı vekil sunucular yine de 81. porta hiçbir kısıtlama getirmezler. Bu nedenden dolayı, <literal>svn.collab.net</literal> arşiv sunucusu hem 80. portu hem de 81. portu dinlemektedir. Yani farklı olarak şunu da deneyebilirsiniz:
    </para>
     <para>
      <screen>$ <userinput>svn checkout http://svn.collab.net:81/repos/svn/trunk subversion</userinput></screen>
     </para>
     <para>
ve belki bu sayede vekil sunucuyu atlatmayı başarırsınız. Bir diğer strateji olarak <literal>checkout</literal> işlemini SSL üzerinden gerçekleştirmek olabilir (ki çoğu vekil sunucu yazılım buna izin vermektedir):
    </para>
     <para>
      <screen>$ <userinput>svn checkout https://svn.collab.net/repos/svn/trunk subversion</userinput></screen>
     </para>
     <para>
Elbette bunu yapmak için Subversion istemcinizin SSL desteği ile kurulmuş olması lazım. Bunu yapmak için <userinput>./configure</userinput> esnasından <option>--with-ssl</option> desteğini vermeniz yeterli. Kurulu Subversion istemcinizin SSL destekleyip desteklemediğini öğrenmek için ise <userinput>svn --version</userinput> komutunu deneyebilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Sistem yöneticilerim Subversion için bir HTTP sunucu kurmama izin vermiyor? Uzaktan erişim istiyorsam başka bir yolum var mı?</para>
    </question>
    <answer>
     <para>
Bir seçenek olarak Apache yerine <userinput>svnserver</userinput> kullanmak olabilir. Ayrıntılı bilgi için Subversion kitabının <link xlink:href="http://svnbook.red-bean.com/html-chunk/ch06.html">6. bölümüne</link> göz gezdirebilirsiniz.
    </para>
     <para>
Fakat şu da var ki, eğer sistem yöneticileriniz sizin Apache çalıştırmanızı izin vermiyorsa, 3690. porttan başka bir sunucu çalıştırmanıza da büyük bir ihtimalle izin vermeyeceklerdir. Bundan sonra cevabın kalan bölümü sistem yöneticilerinizin var olan bir SSH altyapısını kullanmanıza izin veriyor olup olmamasından ibaret.
    </para>
     <para>
Eğer daha önceden CVS kullandıysanız, CVS sunucusuna bağlanmak için SSH kullanmış olmanız lazım. <literal>ra_svn</literal> Subversion bağlantıyöntemini kullanmak da bununla birebir. Sadece <literal>svn+ssh</literal> ön ekini arşiv URL'nize eklemeniz yeterli:
    </para>
     <para>
      <screen>$ <userinput>svn checkout svn+ssh://your.domain.com/full/path/to/repository</userinput></screen>
     </para>
     <para>
Bu sayede SSH ile karşı tarafta, sizin kullanıcı kimliğiniz ile giriş yapılan, özel bir <userinput>svnserve</userinput> işlemi başlatmış olup, tüm veri aktarımını şifrelenmiş bir kanal üzerinden gerçekleştirmiş olursunuz.
    </para>
     <para>
Bir diğer çözüm yolu olarak SSH port yönlendirmesini arkamıza alarak korunan sunucuya <literal>ra_dav</literal> ile bağlanmak. Güvenlik duvarınızın arkasında sizin arşivinize bağlanabilen bir makineye SSH ile bağlanmalısınız. Dikkat ederseniz bağlandığınız SSH sunucusu sizin arşivinizin bulunduğu makinede değil. Orada da olabilir, ama olmak zorunda da değil.
    </para>
     <para>
Daha sonra bulunduğunuz makineden sizin arşivinizi sunan HTTP sunucusuna bir port yönlendirmesi tanımlamanız gerekli. Daha sonra Subversion arşivinize bu yerel porttan rahatlıkla bağlanabilirsiniz. Ardından, istekleriniz Subversion arşivinize bu SSH sunucusu sayesinde kanal aracılığıyla iletilecektir.
    </para>
     <para>
Örnek olarak: Bir Subversion <literal>ra_dav</literal> kurulumu şirket güvenlik duvarınızın arkasındaki 10.1.1.50 makinesinde olsun (buna <literal>svn-server.example.com</literal> diyelim). Şirketiniz dış dünya tarafından kullanıma açık <literal>ssh-server.example.com</literal>'a SSH üzerinden bağlantıya izin veriyor olsun. Artık firewall arkasındaki arşivinize <literal>http://svn-server.example.com/repos/ours</literal>'den erişebilirsiniz.
    </para>
     <para>
Örnek: İstemci ssh sunucusuna port yönlendirmesi ile bağlanalım ve port yönlendirmesini kullanarak arşivi <literal>checkout</literal> edelim:
    </para>
     <para>
      <screen>
$ <userinput>ssh -L 8888:svn-server.example.com:80 me@ssh-server.example.com</userinput>
$ <userinput>svn checkout http://localhost:8888/repos/ours</userinput>
</screen>
     </para>
     <para>
Şu da var ki <literal>svn-server.example.com</literal> httpd işlemini hakları kısıtlanmış bir kullanıcı ile çalıştırıyor olabilir. Bu durumda Subversion sunucunuz root bağlantısına ihtiyaç duymamış olacak.
    </para>
     <para>
Joe Orton şunu ekler:
    </para>
     <para>
      <blockquote>
       <para>
Subversion sunucusu MOVE ve COPY isteklerindeki "Destination" başlığında yer alan sunucu adına karşı hassastır. Bu yüzden bu noktada biraz dikkatli olmanız gerekmekte - bir "ServerAlias localhost" ibaresi her şeyin yolunda çalışması için gerekli.
   </para>
      </blockquote>
     </para>
     <para>
SSH port yönlendirme ile ilgili bazı bağlantılar:
    </para>
     <para>
      <itemizedlist>
       <listitem>
        <uri xlink:href="http://www.onlamp.com/pub/a/onlamp/excerpt/ssh_11/index3.html">http://www.onlamp.com/pub/a/onlamp/excerpt/ssh_11/index3.html</uri>
       </listitem>
       <listitem>
        <uri xlink:href="http://csociety.ecn.purdue.edu/%7Esigos/projects/ssh/forwarding/">http://csociety.ecn.purdue.edu/%7Esigos/projects/ssh/forwarding/</uri>
       </listitem>
       <listitem>
        <link xlink:href="http://www.zip.com.au/%7Eroca/ttssh.html">TTSSH: Port yönlendirmesi yapabilen bir Win32 SSH istemci</link>
       </listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion altında birden fazla projeyi nasıl yönetebilirim?</para>
    </question>
    <answer>
     <para>
Bu ilgilendiğiniz proje bağlı. Eğer projeler birbirleri ile ilgiliyse ve kendi aralarında veri paylaşıyorlarsa, en iyisi ikisini tutan bir çok alt dizinden oluşmuş tek bir arşiv oluşturmak olur. Şunun gibi:
    </para>
     <para>
      <screen>
$ <userinput>svnadmin create /repo/svn</userinput>
$ <userinput>svn mkdir file:///repo/svn/projA</userinput>
$ <userinput>svn mkdir file:///repo/svn/projB</userinput>
$ <userinput>svn mkdir file:///repo/svn/projC</userinput>
</screen>
     </para>
     <para>
Eğer projeler birbiri ile tamamen ilişkisizse ve aralarında bir veri paylaşımı olmayacak gibi görünüyorsa, bu durumda her bir proje için kendine ait ayrı bir arşiv oluşturmak en iyisi olacaktır:
    </para>
     <para>
      <screen>
$ <userinput>mkdir /repo/svn</userinput>
$ <userinput>svnadmin create /repo/svn/projA</userinput>
$ <userinput>svnadmin create /repo/svn/projB</userinput>
$ <userinput>svnadmin create /repo/svn/projC</userinput>
</screen>
     </para>
     <para>
(Ben Collins-Sussman'in <email>sussman@collab.net</email> açıklandığı gibi) Bu iki yaklaşım arasındaki fark ise şu şekilde:
    </para>
     <para>
      <blockquote>
       <para>
İlk durumda projeler arasında kolayca kopyalama ya da yer değiştirme işlemi gerçekleştirirken bunların hepsinin kaydı da saklanmış olur. (<literal>svn cp/mv</literal> aslında sadece tek bir arşivde çalışıyor.) Revizyon numaraları arşiv genelinde olduğundan, yapılan bir onaylamanın revizyon numarası diğer tüm projeler için de geçerli olacak. Ve bu şöyle bir tuhaflığa yol açacak: Geliştiricilerden birisi <literal>projB</literal>de bir değişiklik onaylatacak ve bir de bakacak ki bundan önce 10 tane revizyon olmuş, fakat bunları hiçbiri <literal>projB</literal> üzerinde olmamış. Aslında tam bir anlaşma sayılmaz. Sadece biraz tuhaf geliyor ilk bakışta. Bu daha çok <userinput>svn</userinput>'in başına, geliştiriciler sıklıkla <userinput>rapidsvn</userinput> üzerinde değişiklik onaylatıp, <userinput>rapidsvn</userinput> ile <userinput>svn</userinput> aynı arşivde olduğunda geliyor. :-)İkinci seçenek güvenlik açısından daha kolay olabilir: Apache'nin erişim denetimi mekanizmasını kullanarak projeleri birbirleri arasında izole etmek (kullanıcı hak ve dosya izinleri açısından) daha kolay olur. İlk durumda ise projeleri birbirlerinden ayırmak için bayağı becerikli askı (hook) betikleri yazmak zorundayız ("Acaba bu kullanıcı şu dizine yazma hakkına sahip mi?"). Elbette kullanıma hazır böyle bir betiğimiz mevcut.
    </para>
      </blockquote>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Birbirinden tamamen farklı iki arşivi nasıl birleştirebilirim?</para>
    </question>
    <answer>
     <para>
Eğer arşivlerden birinin geçmişi önemli değilse, diğer projenin altında yeni bir dizin oluşturup, bunu oraya atabilirsiniz.
    </para>
     <para>
Eğer iki projenin de geçmişi sizin için önemliyse, birini <userinput>svnadmin dump</userinput> ile yedekledikten sonra, bu yedeği <userinput>svnadmin load</userinput> ile diğerinin içine atabilirsiniz. Revizyon numaraları kaybolacak, fakat projelerin geçmişi korunmuş olacak.
    </para>
     <para>
Peter Davis <email>peter@pdavis.cx</email> bu konu ile ilgili <userinput>svn</userinput>'in CVS modüllerindeki kullanımına benzer bir yöntem anlatıyor:
  </para>
     <para>
      <blockquote>
       <para>
Eğer söz konusu olan ayrı ayrı iki farklı dizin ağaçlarının aynı arşivde birleştirilmesi ise, <userinput>svn</userinput>'in CVS modül versiyonlarını kullanabilirsiniz.
    </para>
       <para>
Bir dizin üzerindeki <literal>svn:externals</literal> değişkenini orjinal arşiv <literal>checkout</literal> edilmeye çalışıldığında diğerlerinin de kendiliğinden <literal>checkout</literal> edilebileceği şekilde ayarlayınız. Diğer arşiv hala ayrı gözükürken, elinizdeki çalışma kopyasında ikisi de <literal>merge</literal> edilmiş gözükecektir. Eğer <literal>checkout</literal> ettiğiniz arşivde bir değişiklik onaylatmak isterseniz de bu diğer bağladığımız arşivi de etkileyecektir.
    </para>
       <para><literal>merge</literal> işlemi tam olarak o kadar da net değildir: Çekim işlemi sadece çalışan örnekleri etkileyecektir, bu yüzden ikinci arşivden çekilmiş olan modüllere ulaşmak istediğinizde birinci adresin URL'sini kullanamayacaksınız. İkisi de ayrı URL'de kalmışlardır.
    </para>
      </blockquote>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivimi ya da elimdeki çalışma kopyamın yedeğini bir NFS sunucu üstünde tutmalı mıyım?</para>
    </question>
    <answer>
     <para>
Eğer arşivinizi Berkeley DB üstünde tutuyorsanız (ki öntanımlı olarak Berkeley DB kurulur; dosya sistemi olarak) arşivinize NFS üzerinde erişmeyiniz. BDB <link xlink:href="http://www.sleepycat.com/docs/ref/env/remote.html">veritabanının uzaktaki bir dosya sisteminde tutulmasına desteklememektedir</link>. Bazı NFS sunucuları NFS ile bağlanmış disk bölümlerinde BDB desteklediklerini iddia etseler de, bu konuda gördüğümüz tek şey NFS ya da SMB ağı ile bağlı BDB veritabanlarında veri bozukluğu.
    </para>
     <para>
Eğer arşiviniz bir <link xlink:href="http://web.mit.edu/ghudson/info/fsfs">FSFS</link> dosya sistemi kullanıyorsa, bunu (kitleme (locking) özelliği destekleyen) modern bir NFS sunucu üzerinde tutarsanız bir sorun olmaz.
    </para>
     <para>
Çalışan örnekler de NFS üzerinde tutulabilir (çok rastlanan bir senaryo olan ev dizininiz bir NFS sunucuda tutuluyorsa gibi). Linux NFS sunucularında, Subversion içinde yeniden adlandırma işlemleri çok yüklü olduğu için bir arşivi <literal>checkout</literal> ederken bazı kullanıcıların dediğine göre alt dizinlerin alımı (subtree checking) özelliği kapalı olmalıymış (ki öntanımlı olarak açık gelir). NFS sunucularında alt ağaç alımının kapatılmasının nasıl olacağı hakkında ayrıntılı bilgi için <link xlink:href="http://nfs.sourceforge.net/nfs-howto/server.html">NFS Sunucu Kılavuzu</link> ve <userinput>exports</userinput>(5)'a göz atabilirsiniz.
    </para>
     <para>
SMB üzerinde arşiv çekimi yapılmaya çalışıldığında verinin bozulduğu şeklinde en az bir tane hata raporu aldık. Sorudaki sunucu Samba'nın eski bir sürümüydü (2.2.7a). Samba'nın yeni sürümü (3.0.6) ile bu sorun tekrarlanmadı.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden arşivim çok yer kaplıyor? </para>
    </question>
    <answer>
     <para>
Arşiv tüm verinizi bir Berkeley DB ortamı altında <filename>repos/db/</filename> dizininde saklar. Burada bir çok tablo ve günlük dosyası (<filename>log.*</filename>) topluluğu bulunmaktadır. Berkeley DB bütün bu tablolarda yapılan değişikliklerin kaydını tutar ve bu sayede herhangi bir kesinti esnasında veri kurtarılabilir. (<link linkend="subversion-sss-wedged-repos">Daha fazla bilgi</link>.)
    </para>
     <para>
Eğer günlük dosyaları hakkında bir şey yapmazsanız, sürekli değişikliklerin kaydını tutarak, çok fazla disk alanı kaplayacak şekilde büyüyecektir. İstenilen herhangi bir anda Berkeley DB aslında sadece bir kaç günlük dosyasına ihtiyaç duyar (<link xlink:href="http://subversion.tigris.org/servlets/ReadMsg?list=users&amp;msgNo=15194">Şu mesaja</link> ve devamına bakınız); geri kalan rahatlıkla silinebilir. Eğer tüm günlük dosyalarını sonsuza kadar koruyacaksanız, Berkeley DB teorik olarak oluşumunun ilk anından sonsuza kadar tüm değişiklikleri kaydedecektir. Fakat pratikte, eğer yedek alıyorsanız, bu harcadığı disk alanına değmeyecektir.
    </para>
     <para><userinput>svnadmin</userinput>'i kullanarak hangi günlük dosyalarının silinebileceğini görebilirsiniz. Bunu yapacak bir cron görevi dahi atayabilirsiniz.
    </para>
     <para>
      <screen>
$ <userinput>svnadmin list-unused-dblogs /repos</userinput>
/repos/db/log.000003
/repos/db/log.000004
[...]
$ <userinput>svnadmin list-unused-dblogs /repos | xargs rm</userinput>
# disk space reclaimed!
</screen>
     </para>
     <para>
Ayrıca Berkeley DB'nin <literal>db_archive</literal> komutunu da kullanabilirsiniz:
    </para>
     <para>
      <screen>$ <userinput>db_archive -a -h /repos/db | xargs rm</userinput>
# disk space reclaimed!
</screen>
     </para>
     <para>
Ayrıca <userinput>svnadmin hotcopy</userinput> ya da <userinput>hotbackup.py</userinput>'ye de göz atınız.
    </para>
     <para>
      <note>
       <para>Berkeley DB 4.2, Subversion 0.35 ve üzerinde yeni oluşturulan arşivlerde otomatik günlük dosyası silme işlemi etkin haldedir. Bunu kullanmak için <userinput>svnadmin create</userinput> komutuna <option>--bdb-log-keep</option> seçeneğini eklemeniz yeterli. Berkeley DB kılavuzundaki <link xlink:href="http://www.sleepycat.com/docs/api_c/env_set_flags.html#DB_LOG_AUTOREMOVE">DB_LOG_AUTOREMOVE</link> kısmına göz atabilirsiniz.
    </para>
      </note>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question xml:id="subversion-sss-reposperms">
     <para>Arşiv izinlerini nasıl doğru bir şekilde ayarlayabilirim?</para>
    </question>
    <answer>
     <para>
Mümkün olduğu kadar az kullanıcının arşiv üzerinde yetkisi olmasını sağlayın. Örnek olarak, apache ya da <userinput>svnserve -d</userinput> komutunu özel bir kullanıcı ile başlatın ve tüm arşiv yetkisini bu kullanıcıya verin. Bu kullanıcı dışında başka hiçbir kullanıcının arşive <literal>file:///</literal> şeklinde bir URL kullanarak erişimini kısıtlayın ve <userinput>svnlook</userinput>, <userinput>svnadmin</userinput> ile arşiv üzerinde işlem yapmaya çalışırken, tahsis ettiğimiz o özel kullanıcının hakları ile bu komutları çalıştırdığınızdan emin olun.
    </para>
     <para>
Eğer istemciniz arşive <literal>file:///</literal> veya <literal>svn+ssh://</literal> URL'leri ile ulaşıyorsa, o zaman birden fazla kullanıcının arşive erişiminden kurtulamayız. Bu durumda, Subversion kitabının <link xlink:href="http://svnbook.red-bean.com/html-chunk/ch06s05.html">6. kısmının son bölümüne</link> bakın ve en altta yer alan <literal>checklist</literal> kenar çubuğuna dikkat edin. Bu senaryoyu daha güvenli bir hale getirmek için atmanız gereken bir kaç adımın altını çiziyor.
    </para>
     <para>
      <note>
       <info>
        <title>SELinux / Fedora Core 3+ / RedHat Enterprise kullanıcıları için bilgi:</title>
       </info>
       <para>
Normal Unix izinlerine ek olarak SELinux altında her dosya, dizin, işlem için bir `güvenlik bağlamı' (security context) vardır. Bir işlem herhangi bir dosyaya erişmeye çalıştığında, sistem normal dosya izinlerinin ötesinde dosyanın ve işlemin güvenlik bağlamlarının uyumlu olup olmadığı yönünde kontrol yapar.
    </para>
       <para>
Fedora Core 3'de diğer sistemlerin aksine SELinux yüklü ve ayarlı olarak gelir, ki bu nedenle Apache çok kısıtlı haklar altında çalışır. Subversion'ı Apache altında çalıştırabilmek için arşivin güvenlik bağlamlarını Apache'nin erişebileceği şekilde ayarlamanız gerekmekte. <userinput>chcon</userinput> komutunu güvenlik bağlamlarını ayarlamakta kullanabilirsiniz (<userinput>chmod</userinput> komutunda hakları ayarlamaya benzer şekilde). Örnek vermek gerekirse: Kullanıcılardan biri şu komutu çalıştırabilir:
    </para>
       <para>
        <screen>$ <userinput>chcon -R -h -t httpd_sys_content_t <emphasis>PATH_TO_REPOSITORY</emphasis></userinput>
</screen>
       </para>
       <para>
ki, güvenlik bağlamı arşive ulaşabilecek şekilde ayarlansın.
    </para>
      </note>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden salt-okunur işlemler için de arşive yazma izni gerekiyor?</para>
    </question>
    <answer>
     <para>
Çoğu istemci işlemi sadece okumadan ibarettir; <literal>checkout</literal> ya da <literal>update</literal> gibi. Bir erişim denetimi açısından, apache de hepsini bu şekilde görür. Ama <literal>libsvn_fs</literal> (arşiv dosya sistem API'si) hala herhangi bir veri üretmek için arşive geçici yazma işlemi yapmak zorundadır. Bu nedenle arşive erişen tüm işlemler, Berkeley DB dosyalarına erişip onları kullanabilmek için, hem yazma hem de okuma işlemi yapmak zorundadır.
    </para>
     <para>
Özel olarak, arşiv çok fazla "salt-okunur" işleme iki ağaç yapısını karşılaştırarak cevap verir. Ağaçlardan biri genellikle HEAD revizyonudur ve diğeri de sıklıkla geçici bir hareket ağacıdır, ki bu nedenle bir yazma işlemine ihtiyaç duyulur.
    </para>
     <para>
Bu kısıtlama sadece BDB altyapısına aittir, <link xlink:href="http://svnbook.red-bean.com/svnbook-1.1/ch05.html#svn-ch-5-sect-1.2.A">FSFS altyapısında</link> böyle bir kısıtlama yoktur.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Bir dosyayı arşivden nasıl tamamen silebilirim?</para>
    </question>
    <answer>
     <para>
Bazı özel durumlar vardır, bir dosya ya da onaylamanın tüm kayıtlarını ortadan kaldırmak isterseniz. (Belki birisi yanlışlıkla kişisel bir dosya onaylatmıştır.) Bu o kadar kolay değildir, çünkü Subversion kasıtlı bir şekilde bir verinin asla kaybolmaması için tasarlanmıştır. Revizyonlar, biri diğerinin üzerine eklenen değişmez ağaç yapılarıdır. Herhangi bir revizyonu geçmişten silmek, domino taşı etkisi yaratacaktır; tüm onun üstüne yığılmış diğer revizyonlarda bir karmaşaya sebep olup büyük olasılıkla <literal>checkout</literal> edilmiş arşiv örneğinizi de geçersiz hale sokacaktır.
    </para>
     <para>
Fakat Subversion'ın ilerisi için <userinput>svnadmin obliterate</userinput> komutu altında böyle bir planı var. (Bkz. <link xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=516">Hata Raporu 516</link>.)
   </para>
     <para>
Şu an için ise tek bir çözüm yolunuz var: Arşivinizin <userinput>svnadmin dump</userinput> ile bir yedeğini aldıktan sonra buna <userinput>svndumpfilter</userinput> uygulayarak istenmeyen dizini dışladıktan sonra <userinput>svnadmin loadile</userinput> ile yeni bir arşivin içine atmak. Daha ayrıntılı bilgi için Subversion kitabının <link xlink:href="http://svnbook.red-bean.com/html-chunk/ch05.html">5. bölümüne</link> bakabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Onaylanan bir değişikliğin günlük kaydını daha sonradan nasıl değiştirebilirim?</para>
    </question>
    <answer>
     <para>
Günlük kayıtları arşivde her bir revizyona iliştirilmiş özellikler olarak saklanırlar. Öntanımlı olarak, günlük kayıt özelliği (<literal>svn:log</literal>) bir kere onaylandıktan sonra değiştirilemez. Bunun nedeni (<literal>svn:log</literal> gibi) <link xlink:href="http://svnbook.red-bean.com/svnbook/ch05.html#svn-ch-5-sect-1.2">revizyon özelliklerinde</link> yapılan değişiklikler, bu özelliğin önceki değerinin tümüyle yok sayılmasına yol açmasıdır ve Subversion bunu yanlışlıkla yapmanızı engellemek için etkisiz kılmıştır. Bunun yanında, revizyon özelliklerini değiştirmek için Subversion'da kullanabileceğiniz bir kaç yöntem mevcut.
    </para>
     <para>
İlk yöntem olarak arşiv yöneticisi revizyon özelliklerinin değiştirilebilir olmasını sağlayabilir. Bunu <literal>pre-revprop-change</literal> adında bir askı ile yapabilir. (Bkz. Subversion Kitabı, <link xlink:href="http://svnbook.red-bean.com/svnbook/ch05s02.html#svn-ch-5-sect-2.1">5. Bölümün ilgili kısmı</link>.) <literal>pre-revprop-change</literal> askısı revizyon özelliğinin değişmemiş haline ulaşıp onu bir şekilde koruyabilir. (Örneğin, eposta atarak.) Bir kere revizyon özelliklerinin değiştirilmesi etkinleştirildiğinde, bunu <option>--revprop</option> seçeneğini <userinput>svn propedit</userinput> ya da <userinput>svn propset</userinput> komutuna ekleyerek aşağıdaki yöntemlerden biri ile yapabilirsiniz:
    </para>
     <para>
      <screen>
$ <userinput>svn propedit -r N --revprop svn:log URL</userinput>
$ <userinput>svn propset -r N --revprop svn:log "yeni gunluk kaydi" URL</userinput>
</screen>
     </para>
     <para>
Burada <varname>N</varname> revizyon numarasını, <varname>URL</varname> ise arşiv adresini belirtiyor. Eğer bu komutu çalıştığı kopyanın içinde giriyorsanız <varname>URL</varname> kısmını yazmanıza gerek yok.
    </para>
     <para>
Bir günlük kaydını değiştirmenin ikinci bir yolu ise <userinput>svnadmin setlog</userinput> komutunu kullanmaktır. Bunu arşivin dosya sistemindeki yerini belirterek yapabilirsiniz. Uzaktaki bir arşivi bu komut ile değiştiremezsiniz.
    </para>
     <para>
      <screen>
$ <userinput>svnadmin setlog REPOS_PATH -r N FILE</userinput>
</screen>
     </para>
     <para>
Burada <varname>REPOS_PATH</varname> arşivin yeri, <varname>N</varname> revizyon numarası ve <varname>FILE</varname> da yeni günlük kaydının bulunduğu dosya. Eğer <literal>pre-revprop-change</literal> askısı yoksa (ya da bu askıyı bir sebepten dolayı geçmek istiyorsanız), <option>--bypass-hooks</option> seçeneğini kullanabilirsiniz. Eğer bu seçeneği kullanacaksanız çok dikkatli olun. Eposta ile haber verme ya da revizyon numaralarının kaydını tutan yedek alma askılarını da atlıyor olabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion için yazdığım bir yamayı nasıl onaylatabilirim?</para>
    </question>
    <answer>
     <para><command>İlk olarak</command>, <link xlink:href="http://svn.collab.net/repos/svn/trunk/HACKING">HACKING</link> dosyasını okuyunuz.
    </para>
     <para>
Bunu tam olarak anladıktan sonra, <literal>dev</literal> listesine başlığı <literal>[PATCH]</literal> kelimesi ile başlayıp tek satırlık bir açıklama ve iletinin içinde ilgili yamanızı içeren bir eposta atınız (Eğer MUA'nız bunu `spam' olarak görmezse). Sonra geliştiricilerden biri yamanızı alıp (üstünde gerekli değişiklikleri yaptıktan sonra) uygulayıp, sonucu kontrol edecektir.
    </para>
     <para>
Basit olarak izleyeceğiniz adımlar şu şekilde olacak:
    </para>
     <para>
      <screen>
$ <userinput>svn co http://svn.collab.net/repos/svn/trunk subversion</userinput>
$ <userinput>cd subversion/www</userinput>

    [ faq.html'de değişklikleri yap ]

$ <userinput>svn diff faq.html &gt; /tmp/foo </userinput>
$ <userinput>Mail -s "[PATCH] FAQ updates" &lt; /tmp/foo</userinput>
</screen>
     </para>
     <para>
Elbette gönderdiğiniz eposta yamanızın ne yaptığını hakkında uzun ve tatmin edici bir açıklama içerecek, <link xlink:href="http://svn.collab.net/repos/svn/trunk/HACKING">HACKING</link> belgesinde da yazdığı gibi, ki siz bunu zaten okudunuz, değil mi?
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivde belirli bir yere nasıl aktarma (`import') işlemi gerçekleştirebilirim? (Orjinal arşiv kopyasında herhangi bir yer değiştirme ya da silme işlemi yapmadan, sıfırdan bir arşiv kolu oluşturmak gibi.)</para>
    </question>
    <answer>
     <para>
Örnek vermek gerekirse, <filename>/etc</filename> dizininin bir kısmını arşivinizin altında versiyon kontrolü için saklayacağımızı varsayalım:
    </para>
     <para>
      <screen>
shell# <userinput>svn mkdir file:///root/svn-repository/etc \</userinput>
 &gt; <userinput>-m "Arşivde /etc'ye karşılık gelecek bir dizin oluştur."</userinput>
shell# <userinput>cd /etc</userinput>
shell# <userinput>svn checkout file:///root/svn-repository/etc .</userinput>
shell# <userinput>svn add apache samba alsa X11</userinput>
shell# <userinput>svn commit -m "Ayar dosyalarımın ilk sürümü."</userinput>
</screen>
     </para>
     <para>
Bu şekilde <userinput>svn checkout</userinput> komutunun şık bir özelliğinden yararlanmış oluyoruz: Arşivden belirli bir dizini, <filename>/etc</filename> altında zaten varolan bir dizine açıyoruz. İlk önce arşivimizde <filename>etc</filename> adında bir dizin oluşturduk ve <filename>/etc</filename> sanki bir normal bir çalışan kopyaymış gibi, arşivimizin <filename>etc</filename> dizinini <filename>/etc</filename>'ye <literal>checkout</literal> ettik. Bunu bir kere yaptıktan sonra, <userinput>svn add</userinput> komutunu kullanarak arşive istediğiniz dosya ya da dizini ekleyebilirsiniz.
    </para>
     <para><link xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=1328">1328 nolu hata raporunda</link><literal>import</literal> edilen bir dizinin doğrudan, çalışan bir arşiv kopyasına otomatik olarak çevrilebilmesi şeklinde de bir istek var.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Bazılarının Subversion sunucularını yükseltirken bahsettikleri "dök/yükle (`dump/load') döngüsü" tam olarak ne anlama geliyor?</para>
    </question>
    <answer>
     <para>
Subversion'ın arşiv veritabanı şeması gelişim sürecinde sık sık değişti. Subversion'ın pre-1.0 sürümü ile oluşturulmuş eski arşivler bir üst sürüme güncellenmek istendiğinde aşağıdaki işlemlere ihtiyaç duyabilirler. Eğer Subversion'ın X ve Y sürümleri arasında bir veritabanı şeması değişikliği olmuşsa, arşiv yöneticileri Y sürümüne güncelleme işlemini şu şekilde yapabilirler:
    </para>
     <para>
      <orderedlist inheritnum="ignore" continuation="restarts">
       <listitem><userinput>svnserve</userinput>, Apache ve arşive erişen diğer ne varsa kapatın.
    </listitem>
       <listitem>
        <para><userinput>svnadmin</userinput>'in X sürümünü kullanarak aşağıdaki komutu çalıştırın:
    </para>
        <para>
         <screen>
shell# <userinput>svnadmin dump /path/to/repository &gt; dumpfile.txt</userinput>
</screen>
        </para>
       </listitem>
       <listitem>
        <para>
Arşivi başka bir yere taşıyın:
    </para>
        <para>
         <screen>
shell# <userinput>mv /path/to/repository /path/to/saved-old-repository</userinput>
</screen>
        </para>
       </listitem>
       <listitem>
        <para>
Şimdi kurulu Subversion'ı X sürümünden, Y sürümüne (derleyerek ya da kurarak) yükseltin.
    </para>
       </listitem>
       <listitem>
        <para>
Subversion'ın yeni kurulu Y sürümü ile aşağıdaki komutu çalıştırın:
    </para>
        <para>
         <screen>
shell# <userinput>svnadmin create /path/to/repository</userinput>
</screen>
        </para>
       </listitem>
       <listitem>
        <para>Yine Y sürümü ile:</para>
        <para>
         <screen>
shell# <userinput>svnadmin load /path/to/repository &lt; dumpfile.txt</userinput>
</screen>
        </para>
       </listitem>
       <listitem>
        <para>
Tüm askı betiklerini ve diğer şeyleri eski arşivden yenisine kopyalayın.
    </para>
       </listitem>
       <listitem>
        <para><userinput>svnserve</userinput>, Apache ve diğerlerini baştan başlatın.
   </para>
       </listitem>
      </orderedlist>
     </para>
     <para><literal>dump</literal> ve <literal>load</literal> işlemleri hakkında daha ayrıntılı bilgi için<sbr/><uri xlink:href="http://svnbook.red-bean.com/html-chunk/ch05s03.html#svn-ch-5-sect-3.4">http://svnbook.red-bean.com/html-chunk/ch05s03.html#svn-ch-5-sect-3.4</uri> adresine bakınız.
    </para>
     <para>
      <note>
       <para>
Çoğu yeni Subversion sürümü bir <literal>dump</literal> ve <literal>load</literal> işlemini aslında gerektirmemekte. Eğer böyle bir gereksinim doğarsa, bunu duyurularda ve <filename>CHANGES</filename> dosyasında göze çarpan bir şekilde belirtiriz. Eğer böyle bir uyarı ibaresi ile karşılaşmazsanız, herhangi bir <literal>dump</literal> veya <literal>load</literal> işlemine ihtiyacınız yok demektir.
    </para>
      </note>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>İstemcilerin bir SSPI kimlik denetimi kullanarak Windows `Domain Controller'dan sisteme giriş yapmalarını nasıl sağlayabilirim?</para>
    </question>
    <answer>
     <para><link xlink:href="http://tortoisesvn.tigris.org/">TortoiseSVN</link> Windows sistemlerde Subversion kurulumu ile ilgili çok güzel bir belgeye sahip. <uri xlink:href="http://tortoisesvn.tigris.org/docs/TortoiseSVN_en/ch03.html#tsvn-serversetup-apache-5">http://tortoisesvn.tigris.org/docs/TortoiseSVN_en/ch03.html#tsvn-serversetup-apache-5</uri> adresindeki SSPI ile kimlik dentimi kısmına bakınız.
    </para>
     <para>
Bu belgenin eski bir sürümünde şöyle bir eksik satır var:
    </para>
     <para>
      <screen>SSPIOfferBasic On</screen>
     </para>
     <para>
Bu satır olmadan, bir tarayıcı kullanıcıdan kimlik bilgilerini isteyecekken, bir Subversion istemcisi bunu yapmayacaktır. (Bir tarayıcı SSPI kimlik denetiminden anlıyor, fakat NEON - Subversion'ın HTTP kütüphanesi - sadece basit kimlik denetimini anlayabiliyor.) İstemci hiçbir zaman kimlik denetimi için sormayacağından, kimlik denetimi isteyen herhangi bir işlem geçersiz olacaktır. Bu satır sayesinde <literal>mod_auth_sspi</literal> istemci ile basit kimlik denetimi kullanacak, fakat kimlik doğrulaması için Windows `Domain Controller'dan faydalanacak.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question xml:id="subversion-sss-adm-dir">
     <para><filename>.svn</filename> dizin isimleri hoşuma gitmedi; <filename>SVN</filename> tarzı bir şeyi daha çok tercih ederdim. Bunu nasıl değiştirebilirim?</para>
    </question>
    <answer>
     <para>
Önerimiz, eğer yapabiliyorsanız <filename>.svn</filename> kullanmanız yönünde olacak. Eğer değiştirecek olursanız, sizin kullandığınız Subversion istemcisinden başkasını kullananlar için sorun çıkabilir. Eğer yapmak zorunda iseniz, <filename>subversion/include/svn_wc.h</filename> dosyasındaki
    </para>
     <para>
      <screen>#define SVN_WC_ADM_DIR_NAME ".svn"</screen>
     </para>
     <para>satırını</para>
     <para>
      <screen>#define SVN_WC_ADM_DIR_NAME "SVN"</screen>
     </para>
     <para>
satırı ile değiştirip, Subversion'ı yeniden derlemeniz yeterli.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Bir dosyanın büyük-küçük harfini nasıl değiştirebilirim?</para>
    </question>
    <answer>
     <para>
Bu sorun iki durumda çıkıyor. Eğer dosyalarınızı dosya sistemi büyük-küçük harf duyarsız bir işletim sisteminde, Windows gibi, ekliyorsanız kendinizi herhangi bir dosyayı yanlış harf kullanarak yazmış bulabilirsiniz. Alternatif olarak, bir dosya isminin harflerinin büyük-küçüklüğünü değiştirmek istemiş olabilirsiniz.
    </para>
     <para>
Eğer büyük-küçük harf duyarlı bir dosya sisteminde çalışıyorsanız, bu zaten bir sorun oluşturmayacaktır. Dosyayı yeni ismine taşımanız yeterli:
    </para>
     <para>
      <screen>svn mv file.java File.java</screen>
     </para>
     <para>
Fakat bu büyük-küçük harf duyarsız bir işletim sisteminde çalışmayacaktır. Windows'da bunu başarmak için, dosyayı geçici bir yere kopyalarsanız, ardından arşivdekini sildikten sonra bunu tekrar yerine koyarsınız. Ya da daha iyi bir yöntem olarak Subversion URL'lerini kullanarak dosyanın yerini değiştirmek suretiyle yeniden adlandırabilirsiniz. Bu sayede boş yere geçmiş kayıtlarında yer harcamamış olup anında istediğiniz hale gelecektir.
    </para>
     <para>
İki yöntem de Windows'daki çalışan kopyalarınızı sorunlu bırakacaktır; çünkü, Windows dosyaları güncellemeye çalıştığında dosya isimlerini birbirine karıştırabilir. (Şöyle bir mesaj alacaksınız: <emphasis>svn: Failed to add file 'File.java': object of the same name already exists.</emphasis>) Eğer bunu yapmak istemiyorsanız, iki adımdan oluşan bir işlem gerçekleştirmelisiniz.
    </para>
     <para>
Harfleri yanlış yazılmış her dosya için, şu komut harfleri değiştirecektir:
    </para>
     <para>
      <screen>
$ <userinput>svn mv svn://svnserver/path/to/file.java</userinput> ¬
         <userinput>svn://svnserver/path/to/File.java</userinput>
</screen>
     </para>
     <para>
Çalışan örneği güncellemek için, ilgili dizine geçin ve şunu yapın:
    </para>
     <para>
      <screen>
$ <userinput>svn update file.java</userinput>
$ <userinput>svn update</userinput>
</screen>
     </para>
     <para>
İlk güncelleme <filename>file.java</filename> dosyasını kopyanızdan silecek, ikincisi ise <filename>File.java</filename>'yı ekledikten sonra sizi elinizde doğru çalışır bir kopya ile bırakacak. Eğer çok fazla problem yaratan dosyanız varsa, şunu da deneyebilirsiniz:
    </para>
     <para>
      <screen>
$ <userinput>svn update *</userinput>
$ <userinput>svn update</userinput>
</screen>
     </para>
     <para>
Gördüğünüz üzere, yanlış harf ile girilen bir dosyayı, büyük-küçük harf duyarsız bir dosya sisteminde düzeltmek oldukça meşakkatli bir iş. Elinizden geldiğince dosyayı ilk oluşturduğunuzda doğru karakterler ile oluşturmaya çalışın.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Katıştırma (`merge') işlemi için CVS'de kullandığım `tag'ları kullanabilir miyim?</para>
    </question>
    <answer>
     <para>
Aşağıda da gösterildiği gibi, birinin revizyon numarasını hatırlamanıza gerek kalmadan da bir dal, arşiv yığınına katılabilir. Ya da tersi (bu, aşağıdaki örnekte gösterilmemiştir).
    </para>
     <para>
Aşağıdaki örnekte içinde <filename>foo</filename> adlı değiştirmek istediğimiz dosyanın bulunduğu <literal>bar</literal> adında bir dalın, var olan arşiv depomuz olan <filename>/home/repos</filename>'da nasıl oluşturulacağı anlatılıyor.
    </para>
     <para>
Dal katıştırmalarını izlemek için, arşivde <filename>tags/branch_traces/</filename> etiketleri saklamak için kuruldu.
    </para>
     <para>
      <screen><emphasis># dalları ve etiketleri ayarlayalım</emphasis>
$ <userinput>svn copy file:///home/repos/trunk \</userinput>
&gt;          <userinput>file:///home/repos/branches/bar_branch \</userinput>
&gt;          <userinput>-m "start of bar branch"</userinput>
$ <userinput>svn copy file:///home/repos/branches/bar_branch \</userinput>
&gt;          <userinput>file:///home/repos/tags/branch_traces/bar_last_merge \</userinput>
&gt;          <userinput>-m "start"</userinput>

<emphasis># Dalın çalışan kopyasını checkout edelim</emphasis>
$ <userinput>svn checkout file:///home/repos/branches/bar_branch wc</userinput>
$ <userinput>cd wc</userinput>

<emphasis># foo.txt dosyasını düzenleyip arşive teslim edelim</emphasis>
$ <userinput>echo "some text" &gt;&gt; foo.txt</userinput>
$ <userinput>svn commit -m "edited foo"</userinput>

<emphasis># trunk'ı değiştirip daldaki değişikleri katıştıralım</emphasis>
$ <userinput>svn switch file:///home/repos/trunk</userinput>
$ <userinput>svn merge file:///home/repos/tags/branch_traces/bar_last_merge \</userinput>
&gt;           <userinput>file:///home/repos/branches/bar_branch</userinput>

<emphasis># Şimdi 'foo.txt' içeriğini kontrol edelim,</emphasis>
<emphasis># değişiklikleri içeriyor olmalı.</emphasis>

<emphasis># katıştırdığımız kısmı teslim edelim</emphasis>
$ <userinput>svn commit -m "Merge change X from bar_branch."</userinput>

<emphasis># Son olarak, son durumu yansıtması için izlemek</emphasis>
<emphasis># için kullandığımız `trace' dalını güncelliyoruz.</emphasis>
$ <userinput>svn delete -m "Remove old trace branch in preparation for refresh." \</userinput>
&gt;            <userinput>file:///home/repos/tags/branch_traces/bar_last_merge</userinput>
$ <userinput>svn copy file:///home/repos/branches/bar_branch \</userinput>
&gt;          <userinput>file:///home/repos/tags/branch_traces/bar_last_merge \</userinput>
&gt;          <userinput>-m "Reflect merge of change X."</userinput>
</screen>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden <literal>$Revision$</literal> anahtar değişkeni değer olarak dosyanın değiştirilmiş son revizyon numarasını alıyor; halbuki ben o anki geçerli sürüm numarasını almasını istiyorum.</para>
    </question>
    <answer>
     <para>
Subversion arşivin revizyon numarasını genelin tümü itibariyle arttırdığı için, herhangi bir anahtar kelimenin bu numara yerine geçmesi mümkün değildir. Aksi halde her güncelleme ya da onaylamadan sonra elinizdeki kopyada yer alan tüm örnekler teker teker taranıp, muhtemelen de değiştirmeli.
    </para>
     <para>
İstediğiniz bilgiye (elinizdeki kopyanın revizyon numarasına) <userinput>svnversion</userinput> komutu ile ulaşabilirsiniz. Bunun ile belirttiğiniz kopyanın revizyon numarası hakkında bilgi sahibi olabilirsiniz. (Bkz. <userinput>svnversion --help</userinput>)
    </para>
     <para>
Windows kullanıcıları <link xlink:href="http://tortoisesvn.tigris.org/download.html">TortoiseSVN yükleme sayfasından</link> SubWCRev.exe uygulamasını indirebilirler. Bunu kullanarak belirtilen bir dosyadaki tüm <literal>$WCREV$</literal> etiketlerini o anki kopyanızın revizyon numarası ile değiştirebilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion da CVS'deki <literal>$Log$</literal> gibi bir anahtar değişkene sahip mi?</para>
    </question>
    <answer>
     <para>
Hayır. CVS'deki <literal>$Log$</literal> anahtar kelimesi için bir karşılık yok. Eğer belirli bir dosyanın günlüğüne ulaşmak istiyorsanız, <userinput>svn log dosyam</userinput> ya da <userinput>svn log dosyamın_yolu</userinput> komutlarını kullanabilirsiniz. Posta listesinden, <literal>$Log$</literal>'un neden kötü olduğuna dair bir kaç açıklama:
   </para>
     <para>
      <blockquote>
       <para>
Dallar arasındaki değişikleri birbirine katıştırmaya başladığınız andan itibaren, <literal>$Log$</literal> tam bir felaket haline geliyor. Bu anahtar kelimenin doğası gereği otomatik olarak kolayca çözülemeyen uyuşmazlıklar pratik olarak garantilenmiştir.
    </para>
      </blockquote>
     </para>
     <para>Ve:
   </para>
     <para>
      <blockquote>
       <para>
Subversion günlük kayıtları, <literal>svn:log</literal> revizyon özelliği sayesinde, değiştirilebilir değerlerdir. Bu nedenle herhangi bir dosyada <literal>$Log:$</literal> yerine yazılmış olan değerinin tarihi geçmiş olabilir. İlgili dosya değişmemiş olsa bile <literal>$Log:$</literal>'un geçtiği her yerde girilmiş olan değer ileride değiştirilmek zorunda kalınabilir.
    </para>
      </blockquote>
     </para>
     <para>
      <emphasis>Umrumda bile değil. Her ne olursa olsun ben kullanmak istiyorum. Bir sonraki sürüme böyle bir özellik ekleyecek misiniz?</emphasis>
     </para>
     <para>
Hayır. Bu sürümü eklemek ya da eklenmesi için gerekli yama gönderilse bile, bu yamayı onaylamak gibi bir planımız yok henüz. Eğer dosyalarınızı günlük kayıtları ile dağıtmak istiyorsanız, kurulu sisteminizin imkanları doğrultusunda bununla uğraşabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Projemdeki bir dosyanın yerel kullanıcılar tarafından paylaşılabilmesini, ama yapılan değişikliklerin arşive asla geçirilememesini istiyorum. Bu dosya için <userinput>svn commit</userinput>'i nasıl etkisiz hale getirebilirim?</para>
    </question>
    <answer>
     <para>
Dosyayı sürüm denetimi altına koymayın. Bunun yerine sürüm denetimine <filename>file.tmpl</filename> gibi bir şablon koyun.
    </para>
     <para>
Ardından, başlangıç <userinput>svn checkout</userinput>'un ardından, kullanıcılarınızın (ya da kurulu sisteminizin) normal bir OS kopyalama işlemi ile bu dosyayı çekip, dosyanın üzerinde çalışmalarına izin verin. Dosya sürümlenmiş olduğundan, asla <literal>commit</literal> edilemeyecektir. Ve eğer isterseniz, dosyayı bulunduğu dizinin <literal>svn:ignore</literal> özelliğine ekleyerek, <userinput>svn status</userinput> çıktılarında bu dosyanın başında bir <userinput>?</userinput> işareti görmekten de kurtulmuş olursunuz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Herhangi bir arşive <literal>svn+ssh</literal> ile giriş yaptığımda parolam <filename>~/.subversion/auth/</filename> içinde saklanmıyor. Her seferinde parolayı baştan yazmaktan başka bir yol var mı?</para>
    </question>
    <answer>
     <para><userinput>ssh</userinput>'ın kendine ait parola ve kimlik denetleme önbellek şeması mevcut. Kimlik denetimi için kullandığı önbellekte saklama işlemi Subversion'ın dışında bir şey olduğu için, Subversion'dan ayrı olarak çözülmelidir.
    </para>
     <para>
OpenSSH ile beraber, anahtar oluşturmak için <userinput>ssh-keygen</userinput> ve parolaları istemcinin önbelleğine eklemek için <userinput>ssh-add</userinput> komutları gelmektedir. <userinput>keychain</userinput>, <userinput>ssh-agent</userinput>'ın kullanımını kolaylaştıran bir betik. Windows'da ise, <userinput>PuTTY</userinput> popüler bir ssh istemcisi; OpenSSH anahtarlarını almak için <userinput>PuTTYgen</userinput>'e, parolaları önbelleğe atmak için ise  <userinput>pageant</userinput>'a bakınız.
    </para>
     <para><userinput>ssh-agent</userinput>'ın ayarlanması ise bu belgenin amaçları dışında, ama <link xlink:href="http://www.google.com/search?q=%22ssh-agent%22"><userinput>ssh-agent</userinput>'ın Google araması</link> sizi çabucak ilgili yanıtlara ulaştıracaktır. Eğer sabırsız biriyseniz, şu bağlantıları deneyebilirsiniz:
    </para>
     <para>
      <itemizedlist>
       <listitem>
        <uri xlink:href="http://www.csua.berkeley.edu/ssh-howto.html">http://www.csua.berkeley.edu/ssh-howto.html</uri>
       </listitem>
       <listitem>
        <uri xlink:href="http://mah.everybody.org/docs/ssh">http://mah.everybody.org/docs/ssh</uri>
       </listitem>
       <listitem>
        <uri xlink:href="http://kimmo.suominen.com/docs/ssh/">http://kimmo.suominen.com/docs/ssh/</uri>
       </listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivdeki tüm dosyalar üzerindeki bazı özellikleri nasıl ayarlayabilirim? Ve arşive yeni eklenen tüm dosyaların da bu özelliğe sahip olduğundan nasıl emin olurum?</para>
    </question>
    <answer>
     <para>
Subversion öntanımlı olarak kendiliğinden bir dosyanın içeriğini değiştirmeyecektir; bunun olması için dosyanın <literal>svn:eol-style</literal> ve <literal>svn:keywords</literal> özelliklerini kendiniz ayarlamalısınız. Bu Subversion'ı, CVS'in öntanımlı bu özelliğine karşılık daha güvenli kılmasının yanında bazı güçlükler de doğurmaktadır.
   </para>
     <para>
İlk soruya cevap verecek olursak: Bir arşivdeki tüm dosyalar üzerinde belirli bir özelliği sağlamak için bunu zor yoldan yapmalısınız. Yapabileceğiniz tek şey elinizdeki arşiv kopyasındaki tüm dosyalar üzerinde <userinput>svn propset</userinput> komutunu çalıştırmak ve ardından <userinput>svn commit</userinput> ile bu değişiklikleri onaylatmak. Betikler ile bu işi daha kolay bir hale sokabilirsiniz.
    </para>
     <para>
Ya ilerideki dosyalar için? Ne yazık ki, onaylanan dosyalarda sunucu tarafında bu değişiklikleri yapabilecek otomatik bir mekanizma yok. Bunun anlamı, kullanıcılarınız arşive <userinput>svn add</userinput> ile bir dosya eklerken bunun doğru haklarını bilip, ona göre ayarlamaları kendileri yapmalı. Neyse ki, bunu istemci tarafından yapabilecek bir aracımız var. Subversion kitabındaki <link xlink:href="http://svnbook.red-bean.com/svnbook-1.1/ch07s02.html#svn-ch-7-sect-2.4">auto-props</link> kısmını okuyabilirsiniz. Tüm kullancılarınızın dosyalar için <literal>auto-props</literal> ayarlarını doğru yaptığından emin olmalısınız.
    </para>
     <para>
Sunucuya, onaylanmak istenen dosyaların haklarını kontrol edip ona göre geri çevirilip çevirilmeyeceğine karar veren bir <literal>pre-commit</literal> askı betiği ekleyebilirsiniz. (Bkz. <uri xlink:href="http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/check-mime-type.pl">http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/check-mime-type.pl</uri>) Fakat bu yaklaşımın da bazı yan etkileri var. Birisi <literal>svn:eol-style</literal> özelliğini ayarlamayı unutulursa, örneğin, birisi o dosyayı başka bir OS'da açtığı an anlaşılacaktır. Bir kere fark edildikten sonra da düzeltilmesi kolaydır: Doğru özellikleri ayarla ve dosyayı arşive onayla.
    </para>
     <para>
      <note>
       <para>
Bir çok kullanıcının, sunucuların istemcilere <literal>auto-props</literal> ayarlarını otomatik olarak dağıtması gibi bir isteği oldu. <link xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=1974">1974 numaralı özellik isteğinde</link> bu zaten dile getirilmiş ve geliştiriciler tarafından hala üzerinde tartışılmaktadır; fakat şu ana kadar üzerinde başka bir çalışma olmamıştır.
    </para>
      </note>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivimin hangi Berkeley DB sürümünü kullandığını nasıl anlayabilirim?</para>
    </question>
    <answer>
     <para>
Eğer sunucunuz kendi makinenizde çalışıyorsa, bunun cevabı basit: sisteminizde hangi BDB sürümü yüklü ise. Eğer arşiv bir yedekten ya da bilinmeyen bir kaynaktan alınmışsa o zaman şöyle bulabilirsiniz:
    </para>
     <para>
En büyük numaralı <filename>db/log.*</filename> dosyası üstünde 12 ve 16. baytlardaki iki 4 baytlık tam sayıyı gösterecek bir komut çalıştırın. Bunu GNU <userinput>od</userinput> ile yapmak için <userinput>od -j12 -N8 -tx4 log.<emphasis>&lt;numara&gt;</emphasis></userinput> ya da Mac OS X <userinput>hexdump</userinput> ile yapmak için <userinput>hexdump -s12 -n8 -x log.<emphasis>&lt;numara&gt;</emphasis></userinput> komutlarını kullanabilirsiniz. İlk tam sayının sihirli numarası, dosyayı bir BDB günlük dosyasını tanıtan, <literal>0x00040988</literal> olmalı. İkinci sayı ise günlük biçiminin sürümüdür; aşağıdaki tablodaki BDB sürümlerinin hangi günlük biçimini kullanıldığını bulmak için kullanabilirsiniz.
   </para>
     <para>
      <literallayout class="normal">
Günlük biçimi sürümü    BDB uygulamasının sürümü
   5 (0x00000005)                4.0
   7 (0x00000007)                4.1
   8 (0x00000008)                4.2
  10 (0x0000000a)                4.3
</literallayout>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivimde bir internet sayfasının kayıtlarını tutuyorum. Yaptığım her değişiklik onayından sonra asıl internet sayfasının da aynı anda bu güncellemeleri yapmasını nasıl sağlayabilirim?</para>
    </question>
    <answer>
     <para>
Bu sıklıkla karşılaşılan bir sorun olup, çözümü <literal>post-commit</literal> askı betikleri ile gayet kolaydır. Kitabın <link xlink:href="http://svnbook.red-bean.com/en/1.1/ch05s02.html#svn-ch-5-sect-2.1">5. bölümü</link> olan askı betiklerine bakabilirsiniz. Yapmanız gereken tek şey çalışan internet sitesini sunucuda bir arşiv kopyası olarak tutmak ve <literal>post-commit</literal> askısına da karşı sunucuda <userinput>svn update</userinput> komutunun çalışmasını sağlayacak bir betik eklemek.
    </para>
     <para>
Pratikte, dikkat etmeniz gereken bir kaç nokta var. Onaylama işlemini sağlayan sunucu (<userinput>svnserve</userinput> ya da Apache), <literal>post-commit</literal> askı betiğinin çalıştığı sunucu ile aynı olmalı. Bunun anlamı, uygulamanın arşiv kopyasını düzgün bir şekilde güncelleyebilmek için doğru haklara sahip olması gerektiği. Diğer bir deyişle, arşiv kopyasının sahibi ve <userinput>svnserve</userinput> ya da Apache'yi çalıştıran kullanıcının hakları aynı olmalı; ya da en azından kopya arşiv üzerinde doğru haklar olamalı ki sunucu onu güncelleyebilsin.
    </para>
     <para>
Eğer sunucu izninin olmadığı bir arşiv kopyasını (örneğin, <literal>joe</literal> kullanıcısının <filename>~/public_html/</filename> dizini gibi) güncellemeye çalışacaksa, bir yöntem olarak uygulamayı <literal>+s</literal> izni ile çalıştırmanız olabilir, fakat Unix betiklerin <literal>+s</literal> ile çalışmasına izin vermez. Bunun yerine ufak bir C yazılımı kullanabilirsiniz:
  </para>
     <para>
      <screen>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void)
{
    return \
    ( system("/usr/local/bin/svn update /home/joe/public_html/") != -1 ) \
    ? 0 : 1;
}
</screen>
     </para>
     <para>
ve derlenmiş yazılımın üzerinde <userinput>chmod +s</userinput> komutunu çalıştırıp, yazılımın <literal>joe</literal> kullancısınına ait olduğuna emin olduktan sonra, <literal>post-commit</literal> askı dosyasına yazılımı çalıştıracak bir satır eklenebilir.
    </para>
     <para>
Ek olarak Apache'nin <filename>.svn/</filename> dizinlerini de sunmasını istemeyiz sanırım. Bunun için şu satırı <filename>httpd.conf</filename> dosyanıza eklemeniz yeterli:
    </para>
     <para>
      <screen>
# Subversion çalışma kopyasının yönetsel
# dizinlerinde gezinmeyi yasakla.
&lt;DirectoryMatch "^/.*/\.svn/"&gt;
    Order deny,allow
    Deny from all
&lt;/DirectoryMatch&gt;
</screen>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivdeki tek bir dosyayı çalışma dizinime nasıl çekebilirim?</para>
    </question>
    <answer>
     <para>
Subversion tek bir dosyanın <literal>checkout</literal> edilmesini desteklememektedir, sadece bir dizin yapısını <literal>checkout</literal> edebilirsiniz.
    </para>
     <para>
Bunun yerine tek bir dosyayı almak için <userinput>svn cat</userinput> komutunu kullanabilirsiniz. Bu dosyanın içeriğini alacaktır, ancak sürümlenmiş bir arşiv kopyası oluşturmayacaktır.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Çalışma dizinimdeki bütün ekleme, silme, kopyalama ve isim değiştirme işlemlerinden, tüm bu işlemler olduktan sonra nasıl haberdar olabilirim?</para>
    </question>
    <answer>
     <para>
Olamazsınız. Denemesi kötü bir fikir.
    </para>
     <para>
Arşiv kopyasının tasarımında basit iki nokta vardır: (1) Dosyaları nasıl isterseniz öyle değiştirin ve (2) ağaç yapısında herhangi bir değişiklik yapmak istediğinizde (ekleme, silme, yer değiştirme, kopyalama) bir Subversion istemcisi kullanın. Eğer bu kurallara uyulursa, istemci arşiv kopyasını rahatlıkla yönetebilir. Eğer yeniden adlandırmalar ya da diğer işlemler Subversion'ın haberi dışında olursa, kullanıcı arayüzü ihlal edilmiş olup, arşiv kopyanız bozulmuş olabilir. İstemci bu durumda ne olduğuna karar veremez.
    </para>
     <para>
İnsanlar bazen böyle bir sorunla karşılaşırlar, çünkü arşivlerinin sürüm denetimini saydamlaştırmak isterler. Kullanıcıları kandırarak, onları bir arşiv kopyasına yönlendirirler ve daha sonra bir betik ile bu kopya üzerinde ne değişiklikler yapıldığına bakılıp ona göre ilgili istemci komutu çalıştırırlar. Ne yazık ki, bu yöntem uzun vadede pek işlemez. <userinput>svn status</userinput>, betiğin sonradan kolaylıkla <userinput>svn add</userinput> ya da <userinput>svn rm</userinput> yapabileceği, kayıp ve sürümlenmiş elemanları gösterir. Fakat bir silme ya da yer değiştirme işlemi gerçekleşirse, şanssızsınız demektir. Betiğiniz bunları algılayabilecek tuhaf yöntemler içerse bile, <userinput>svn mv</userinput> ya da <userinput>svn copy</userinput> işlem olduktan sonra çalışmayacaktır.
    </para>
     <para>
Özet olarak, arşiv kopyaları Subversion altında bir bütündür ve Subversion saydam olmak için tasarlanmamıştır. Eğer istediğiniz saydamlık ise bir Apache sunucusu kurarak "SVNAutoversioning" özelliğini kullanabilirsiniz. (Bkz. Subversion kitabında <link xlink:href="http://svnbook.red-bean.com/en/1.0/apc.html">Ek Bölüm C</link>.) Bu sayede kullanıcıların arşive bir ağ diskiymiş gibi erişmesini sağlamış olup, yığına yapılan herhangi bir değişikliği otomatik olarak sunucu tarafında onaylatabilirsiniz.
    </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>
 <chapter xml:id="subversion-sss-tamirat">
  <info>
   <title>Sorun Giderme</title>
  </info>
  <qandaset defaultlabel="number">
   <qandaentry>
    <question xml:id="subversion-sss-stuck-bdb-repos">
     <para>Arşivim sürekli kurtarma işlemine (<literal>DB_RUNRECOVERY</literal>) ihtiyacı olduğu yönünde hatalar verip donuyor. Bunun sebebi ne olabilir?</para>
    </question>
    <answer>
     <para>
Arşivinizdeki BerkeleyDB veritabanı kesilmelere karşı hassastır. Eğer veritabanına bağlanmış bir uygulama çıkarken düzgün bir şekilde bağlantısını koparmazsa, veritabanı kararsız bir durumda bırakılır. Bunun en sık rastlanan nedenleri:
    </para>
     <para>
      <itemizedlist>
       <listitem>Uygulama bir izin sorunu ile karşılaşıp çıkmıştır.</listitem>
       <listitem>Uygulama çökmüş ya da `Segmentation Fault' vermiş olabilir.</listitem>
       <listitem>Uygulama kasıtlı olarak öldürülmiş olabilir.</listitem>
       <listitem>Diskte yer kalmamış olabilir.</listitem>
      </itemizedlist>
     </para>
     <para>
Bu çeşit durumların çoğunda <userinput>svnadmin recover</userinput> komutunu, arşivi tekrar eski kararlı durumuna getirmek için kullanabilirsiniz. (<link linkend="subversion-sss-wedged-repos">Daha fazla bilgi</link>.) Şu da unutulmamalı ki, disk alanı sıkıntısı yaşandığı zaman, sık sık <literal>checkout</literal> ve <literal>update</literal> işlemleri sunan bir arşiv geri dönüşü olmayacak şekilde çökebilir. (Bu yüzden yedek almayı eksik etmeyin.)
    </para>
     <para>
`SegFault' hataları, kasıtlı öldürülen uygulamalar ve disk alanında sıkıntı yaşaması gibi sorunlar ile nadiren karşılaşılır. İzin sorunları ise çok daha seyrek gözlenir: Bir uygulama arşive ulaşır ve yanlışlıkla bir yapının izin ya da sahibini değiştirir; ardından başka bir uygulama aynı yapıya erişmeye çalıştığında tıkanır.
    </para>
     <para>
Bundan kaçınmanın en iyi yolu, arşiv izin ve sahiplerini doğru bir şekilde ayarlamaktır. Öneriler için <link linkend="subversion-sss-reposperms">buraya</link> bakabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Ne zaman arşive erişmeye çalışsam işlemim hep donup kalıyor. Arşivim zarar mı görmüş?</para>
    </question>
    <answer>
     <para>
Arşiviniz zarar görmüş ya da veriniz kaybolmuş değil. Eğer uygulamanız veritabanına doğrudan (<userinput>mod_dav_svn, svnlook, svnadmin</userinput> ya da <filename>file://</filename> şeklinde URL kullanarak) erişiyorsa, verilerinize BerkeleyDB kullanarak ulaşıyordur. Berkeley DB kayıt günlüğü tutan bir sistemdir, ki bu da onun herhangi bir işlemde önce onun kaydının tutulduğu anlamına gelir. Eğer uygulamanız bir nedenden dolayı kesilmişse (Control+C ya da `SegFault' ile), arkada bir kilit dosyası (lock file) ve işlemin neden bitirilemediğine dair de bir log dosyası bırakılmıştır. Arşivinize ulaşmaya çalışan herhangi bir uygulama, bu kilit dosyasının ortadan kalkmasını bekleyecektir. Arşivi tekrar ayağa kaldırmak için, Berkeley DB ile yaptığı işlemi bitireceğine ya da bitirmeyip eski kararlı haline geri dönüp dönmeyeceği hakkında seçim yapmanız lazım.
    </para>
     <para>
      <warning>
       <para>
Eğer aynı anda arşivi onarmaya ve bir uygulama ile de ona erişmeye çalışırsanız, verinize ciddi şekilde zarar verebilirsiniz.
    </para>
      </warning>
     </para>
     <para>
Bunu yapmadan önce arşive erişen tüm yolları kapattığınıza emin olun. (Örneğin, Apache'yi kapatın, <userinput>svn</userinput> komutunun çalıştırma izinlerini etkisiz kılın.) Bu komutu, root olarak değil de, arşivin sahibi olarak çalıştırmaya dikkat edin; aksi halde arkanızda root kullanıcısına ait dosyalar bırakacaksınız ve bunlar da o arşivi yöneten kullanıcı tarafından erişilemez olacaklar. Ayrıca doğru <literal>umask</literal> değerlerine sahip olduğunuza da dikkat edin; herhangi yanlış bir yerde arşive erişme iznine sahip grup üyeleri dışarda bırakılacaklardır.
    </para>
     <para>
En basit hali ile onarma işlemini çalıştırmak için:
    </para>
     <para>
      <screen>
$ <userinput>svnadmin recover /path/to/repos</userinput>
</screen>
     </para>
     <para>
Komut bir kez işini bitirdikten sonra <filename>db</filename> dizinindeki hakları gözden geçiriniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Ne zaman bir <userinput>svn</userinput> komutu çalıştırsam, çalışma dizininin kilitlendiği şeklinde uyarı veriyor. Arşivim zarar görmüş olabilir mi?</para>
    </question>
    <answer>
     <para>
Arşiv kopyanız kilitlenmedi ya da herhangi bir veri kaybınız olmadı. Subversion'ın arşiv kopyaları günlük kaydı tutma özelliği sahip olduklarından, yaptığınız her işlem öncesinde ve sonrasında kaydedilir. Eğer <userinput>svn</userinput> istemciniz bir şekilde kesilirse (işlem öldürülür, Control+C kullanılınır ya da işlem `SegFault' verirse), işlemin neden durduğuna dair bilgilerin kayıtları ile birlikte arkada bir kaç kapatılmamış kilit dosyası bırakılır. (<userinput>svn status</userinput> komutunda başında L olan dosyalar kilitlenmiş anlamındadır.) Arşiv kopyanıza erişmeye çalışacak olan herhangi bir uygulama bu kilit dosyalarını gördüğünde hata verip çıkacaktır. Arşiv kopyanızı tekrar ayağa kaldırmak için <userinput>svn</userinput> istemcinize en son yapmaya çalıştığı işi bitirmesini söylemelisiniz. En basitinden:
    </para>
     <para>
      <screen>$ <userinput>svn cleanup çalışma-kopyası</userinput></screen>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Yaptığım değişiklikleri onaylatmaya çalıştığımda Subversion kopyamın tarihinin geçmiş olduğu uyarısını veriyor.</para>
    </question>
    <answer>
     <para>
Buna şu üç durum neden olabilir:
    </para>
     <para>
      <orderedlist inheritnum="ignore" continuation="restarts">
       <listitem>
        <para>
Başarısız bir onaylama işleminin ardında bıraktığı döküntü arşivinizi kirletir.
    </para>
        <para>
Sunucuya yeni bir revizyon eklendiği anda sizin istemcinizin <literal>post-commit</literal> işlemlerini (sizin arşiv kopyanızın da güncellenmesi buna dahil olmak üzere) bitiriyor olması, arşiv ile aranızda bir sorun yaratabilir. Buna bir çok neden olabileceği gibi, (nadiren rastlansa da) veritabanı tarafından ya da (ki en sık bununla karşılaşılınır) yanlış zamanlı ağ kesintilerinden kaynaklanabilir.
    </para>
        <para>
Eğer böyle bir şey olursa, büyük ihtimalle onaylamak istediğini değişiklikler arşivde çoktan onaylanmıştır. <userinput>svn log -rHEAD</userinput> komutunu başaramadığınızı zannettiğiniz onaylama işleminizin gerçekleşip gerçekleşmediğini öğrenmek için kullanabilirsiniz. Eğer onaylamayı başarmışsanız, <userinput>svn revert</userinput> komutu ile yaptığınız değişiklikleri geri aldıktan sonra <userinput>svn update</userinput> ile kopyanızı yeni revizyona yükseltebilirsiniz. (Şuna da dikkat etmek gerek ki, sadece <userinput>svn update</userinput> sizin değişikliklerinizin de dahil olduğu güncel sürümü alabilir,<userinput>svn revert</userinput> bunu yapmaz.)
    </para>
       </listitem>
       <listitem>
        <para>
Karma revizyonlar.
    </para>
        <para>
Subversion herhangi bir değişikliği onaylarken, istemci sadece revizyon numaralarını ilgilendiren düğümleri onaylar, arşiv kopyasındaki tüm düğümleri değil. Bunun anlamı, bir arşiv kopyasında, son olarak ne onayladığınıza bağlı olarak birbirinden farklı revizyonlara sahip dosya ve dizinler olabilir. Belirli işlemlerde (dizin özelliklerinin değiştirilmesi gibi), eğer arşiv dosyanın daha güncel bir revizyonuna sahip ise veri kaybı olmaması için onaylama kabul edilmeyecektir. (Bkz. <link xlink:href="http://svnbook.red-bean.com/svnbook/ch02s03.html#svn-ch-2-sect-3.4">Karma Revizyon ile Yapabilecekleriniz</link>.)
    </para>
        <para><userinput>svn update</userinput> komutunu çalıştırarak arşiv kopyanızı düzeltebilirsiniz.
    </para>
       </listitem>
       <listitem>
        <para>
Gerçekten eski bir revizyonda olabilirsiniz. Şöyle ki, onaylamaya çalıştığınız değişikliğin bulunduğu dosya başka birisi tarafından çoktan yenilenmiştir. Bunun için <userinput>svn update</userinput> komutu ile arşiv kopyanızı güncellemelisiniz.
    </para>
       </listitem>
      </orderedlist>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Dağıtımım ile gelen derlenmiş Subversion paketlerini kurdum ve Subversion'ı çalışma dizinime çekmeye çalıştığımda "Unrecognized URL scheme." hatası alıyorum. Bu neden kaynaklanabilir?</para>
    </question>
    <answer>
     <para>
Subversion arşive ulaşmak için bir eklenti sistemi kullanır. Şu an bu eklentilerden üçü mevcut: <literal>ra_local</literal>, yerel bir arşive; <literal>ra_dav</literal>, WebDAV üzerinden bir arşive ve <literal>ra_sav</literal> de yerel ya da uzaktaki bir <userinput>svnserve</userinput> sunucusuna erişmenizi sağlar. Subversion'da herhangi bir arşive erişmeye çalıştığınızda, uygulama verdiğiniz URL şemasına göre uygun eklentiyi dinamik olarak yükler. <filename>file://URL</filename> şeması <literal>ra_local</literal> eklentisini ve <filename>http://URL şeması</filename> <literal>ra_dav</literal> eklentisini yüklemeye çalışacaktır.
    </para>
     <para>
Gördüğünüz hatanın anlamı, dinamik yükleyicinin (ya da bağdaştırıcının) yüklemek istediği ilgili eklentiyi bulamadığıdır. Bu daha çok Subversion'ı kütüphane paylaşımı (shared library) desteği ile kurduğunuzda karşılaşılır. Bu yüzden bir de <userinput>make install</userinput> yapmadan önce çalıştırmayı deneyin. Diğer olası bir neden ise, <userinput>make install</userinput> dediniz fakat kütüphaneler öyle bir yere yüklendi ki dinamik yükleyici bunları bulamıyor. Linux'da bunu çözmek için paylaşımlı kütüphanelerin bulunduğu dizini <filename>/etc/ld.so.conf</filename> dosyasına ekleyip <userinput>ldconfig</userinput> komutunu vermeniz yeterli. Eğer bunu yapmak istemiyorsanız ya da bunu yapmak için root haklarınız yoksa, aynı dizini <literal>LD_LIBRARY_PATH</literal> değişkenine de ekleyebilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivimi aramaya ya da açmaya çalıştığımda hata alıyorum, fakat arşivin URL'sini doğru girdiğimden eminim. Nerede yanlış yapıyor olabilirim? </para>
    </question>
    <answer>
     <para><link linkend="subversion-sss-wedged-repos">Şu soruya</link> bakınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para><userinput>configure</userinput> komutunu çalıştırdığımda <literal>subs-1.sed line 38: Unterminated `s' command.</literal> hatası alıyorum. Sorun neden kaynaklı olabilir? </para>
    </question>
    <answer>
     <para>
Büyük ihtimalle <filename>/usr/local/bin/apr-config</filename> ve <filename>/usr/local/bin/apu-config</filename> dosyalarının eski kopyaları sisteminizde mevcuttur. Bunları kaldırın, <filename>apr/</filename> ve <filename>apr-util/</filename> dizinlerinin tamamen güncel olduğundan emin olduktan sonra tekrar deneyiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion'ı *N*X altında BerkeleyDB 4.2 desteği ile derlemeye çalıştığımda sorun yaşıyorum. Ne yapmalıyım?</para>
    </question>
    <answer>
     <para>
Subversion, <literal>apr-util</literal>'e uygun BDB kurulum seçeneklerini sorduktan sonra, BerkeleyDB'yi derler. Bunun anlamı, Subversion ya da Apache ile gelen <literal>apr-util</literal>'inizin BDB'yi doğru bir şekilde algılayabilmeli. Bunu yapmanın bir yolu <literal>apr-util</literal>'in <userinput>./configure</userinput> komutuna <option>--with-berkeley-db</option> seçeneğini vermek. (Bu seçeneği Apache ya da Subversion'a bir kez verdiğinizde, aynısı <literal>apr-util</literal> için de geçerli oluyor.)
    </para>
     <para>
Sorun şundan kaynaklanıyor: BerkeleyDB 4.2, <literal>apr-util</literal>'in son yayınlanan sürümünden daha yeni; dolayısıyla <literal>apr-util</literal> onu nasıl algılayacağını bilmiyor.
    </para>
     <para>
Uzun vadeli çözüm şimdiden hazır: CVS'deki <literal>apr-util</literal> kolaylıkla BDB 4.2'yi algılayabiliyor. <literal>apr-util</literal> ya da Apache httpd farklı sürümlere sahip olsa dahi bu özellik geniş ölçüde çalışacak.
    </para>
     <para>
Kısa vadede, elinizdeki sürüm için yapılabilecek en iyi şey <literal>apr-util</literal>'in <userinput>./configure</userinput> betiğine <link xlink:href="http://subversion.tigris.org/db42-support-patch.txt">şu yamayı uygulamak</link>.
    </para>
     <para>
Eğer ilk önce Apache'yi kuruyorsanız, bu yamayı <literal>httpd-2.0.48</literal> ile gelen <literal>apr-util</literal>'in <filename>configure</filename> betiğine uygulayın ve şu seçenekler ile kurun:
    </para>
     <para>
      <screen>
$ <userinput>./configure \</userinput>
&gt; <userinput>--enable-dav \</userinput>
&gt; <userinput>--enable-so \</userinput>
&gt; <userinput>--with-berkeley-db=/usr/local/BerkeleyDB.4.2 \</userinput>
&gt; <userinput>--with-dbm=db42</userinput>
</screen>
     </para>
     <para>
Apache'nin doğru BDB kütüphanesi ile kurulup kurulmadığını şöyle anlayabilirsiniz:
    </para>
     <para>
      <screen>
$ <userinput>ldd /usr/local/apache2/bin/httpd | fgrep libdb-4.2.so</userinput>
</screen>
     </para>
     <para>
Ardından Subversion'ı BDB ile daha fazla ilgilenmeye gerek kalmadan kurabilirsiniz. (...fakat Subversion, Apache standart bir yere kurulmamışsa, Apache'nin nereye kurulduğunun ufak bir parametre ile bildirimini isteyebilir.)
    </para>
     <para>
Eğer Apache'yi kurmuyorsanız, yamayı Subversion ile gelen <literal>apr-util</literal>'in <userinput>./configure</userinput> betiğinine uyguladıktan sonra benzer derleme seçenekleri girerek devam edin:
    </para>
     <para>
      <screen>$ <userinput>configure \</userinput>
&gt; <userinput>--with-berkeley-db=/usr/local/BerkeleyDB.4.2 \</userinput>
&gt; <userinput>--with-dbm=db42</userinput>
</screen>
     </para>
     <para>
Subversion'ın doğru BDB kütüphanesine göre kurulup kurulmadığını yine benzer bir şekilde öğrenebilirsiniz:
    </para>
     <para>
      <screen>$ <userinput>ldd /usr/local/bin/svn | fgrep libdb</userinput></screen>
     </para>
     <para>
Eğer kütüphanelerinizi öntanımlı olandan farklı yerlere kurduysanız, yukarıda izlediğimiz adımlardaki komutların yollarını ona göre ayarlamanız gerekmekte.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion'ı Windows altında MSVC++ 6.0 ile derlemeye çalıştığımda sorun yaşıyorum. Ne yapmalıyım?</para>
    </question>
    <answer>
     <para>
Büyük olasılıkla sadece en son platform SDK'sını edinmeniz yeterli. VC++ 6.0 ile gelen yeterli derecede güncel değil.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para><literal>file:///</literal> URL'sinde bir Windows sürücüsünün harfini nasıl yazabilirim?</para>
    </question>
    <answer>
     <para>Şu şekilde:</para>
     <para>
      <screen>
$ <userinput>svn import file:///d:/some/path/to/repos/on/d/drive</userinput>
</screen>
     </para>
     <para>
Bkz. <link xlink:href="http://svnbook.red-bean.com/html-chunk/ch02s03.html#svn-ch-2-sidebar-1">Arşiv URL'leri</link>
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>VS.NET/ASP.NET'in <filename>.svn</filename> dizini ile ufak bir uyuşmazlığı var gibi. Bu durumda ne yapabilirim?</para>
    </question>
    <answer>
     <para>
VS.Net, yayınını IIS üzerinde yapmak için WebDAV kullanan, ASP.Net adında bir alt sisteme sahiptir. Bu alt sistem, `.' ile başlayan herhangi bir dosya yolunu reddeder. Bu uzaktan bir Subversion arşivi yayınlamaya çalıştığınızda <filename>.svn</filename> dizininden dolayı sorun oluşturur. Hata mesajı olarak da <emphasis>unable to read project information</emphasis> gibisinden bir şeyler alırsınız.
    </para>
     <para>
Bunun için bir kaç çözüm yolu mevcut:
    </para>
     <para>
      <itemizedlist>
       <listitem>
        <para><link linkend="subversion-sss-adm-dir">Burada anlatıldığı gibi</link>, istemcinizi <filename>.svn</filename> yerine başka bir dizin kullanacak şekilden yeniden derleyin. Ya da,
    </para>
       </listitem>
       <listitem>
        <para>
Eğer TortoiseSVN kullanıyorsanız, bu sorun için düzeltilmiş bir istemci kullanabilirsiniz. (Bkz. <uri xlink:href="http://tortoisesvn.tigris.org/download.html">http://tortoisesvn.tigris.org/download.html</uri>. Veya,
    </para>
       </listitem>
       <listitem>
        <para><uri xlink:href="http://weblogs.asp.net/fbouma/archive/2004/02/28/81479.aspx">http://weblogs.asp.net/fbouma/archive/2004/02/28/81479.aspx</uri> adresindeki Jim Bolla'nın tavsiyesini deneyin: <emphasis>"Eğer yerel ya da uzakta paylaşımdaki bir internet projelerinde çalışıyorsanız, projeyi normal bir sınıf kütüphanesi (regular class library) projesine çevirerek bu sorundan kurtulabilirsiniz. Bunun nasıl yapılacağına dair internetteki kaynaklardan derlediğim bazı belgelerim var."</emphasis> (Jim Bolla ile bu belgeleri alabilmek için bağlantı kurduk. Eğer alabilirsek onları buraya ekleyeceğiz.) Ya da,
    </para>
       </listitem>
       <listitem>
        <para><uri xlink:href="http://weblogs.asp.net/fbouma/archive/2004/02/28/81479.aspx">http://weblogs.asp.net/fbouma/archive/2004/02/28/81479.aspx</uri> adresinde Steele Price'ın önerisini deneyebilirsiniz: <emphasis>"Şu adımları izleyerek <filename>.svn</filename> isimli dizin sorununun ardından kolaylıkla gelebilirsiniz: <uri xlink:href="http://blog.steeleprice.net/archive/2003/11/09/134.aspx">http://blog.steeleprice.net/archive/2003/11/09/134.aspx</uri>"</emphasis>
      </para>
       </listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Ağ üzerinden bir Subversion arşivine yaptığım değişiklikleri onaylatmaya çalışırken sorun yaşıyorum.</para>
    </question>
    <answer>
     <para>
Diyelim ki, kullanıcılardan biri yerel arşivi <literal>import</literal> ederken sorun yaşamadığını bildirmiş olsun:
    </para>
     <para>
      <screen>
$ <userinput>mkdir test</userinput>
$ <userinput>touch test/testfile</userinput>
$ <userinput>svn import test file:///var/svn/test -m "Initial import"</userinput>
Adding         test/testfile
Transmitting file data .
Committed revision 1.
</screen>
     </para>
     <para>
Fakat aynı şey uzaktaki bir arşiv söz konusu olduğunda sorun yaşadığını da bildirmiş olsun:
    </para>
     <para>
      <screen>
$ <userinput>svn import http://svn.sabi.net/test testfile -m "import"</userinput>
nicholas's password: xxxxxxx svn_error:

#21110 : &lt;Activity not found&gt;

The specified activity does not exist.
</screen>
     </para>
     <para>
Görüldüğü üzre, <userinput>httpd</userinput> işlemi <filename>REPOS/dav/</filename> dizini üzerinde yazma haklarına sahip değil. Apache'nin <filename>dav/</filename> (ve tabii ki <filename>db/</filename>) dizinine yazma yetkisi olduğundan emin olun.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Windows XP üzerinde çalışan Subversion sunucum bazen zarar görmüş veri yolluyor gibi. Böyle bir şey gerçekten olabilir mi?</para>
    </question>
    <answer>
     <para>
Windows XP Servis Paketi 1'i yüklemelisiniz. Servis paketleri hakkında tüm bilgilere şu adreste ulaşabilirsiniz: <uri xlink:href="http://support.microsoft.com/default.aspx?scid=kb;EN-US;q317949">http://support.microsoft.com/default.aspx?scid=kb;EN-US;q317949</uri>
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Subversion sunucusu ile istemci arasında geçen haberleşmeyi en iyi şekilde ağdan nasıl dinleyebilirim?</para>
    </question>
    <answer>
     <para>
İletişimi <link xlink:href="http://ethereal.ntop.org/">Ethereal</link> programı ile dinleyebilirsiniz:
    </para>
     <para>
      <orderedlist inheritnum="ignore" continuation="restarts">
       <listitem><emphasis>Capture</emphasis> menüsünden, <emphasis>Start</emphasis>'ı seçiniz. </listitem>
       <listitem><emphasis>Filter</emphasis> kısmına <literal>port 80</literal> yazın ve karma özelliğini (`promiscuous mode'u) kapatın.
</listitem>
       <listitem>Subversion istemcinizi çalıştırın.
</listitem>
       <listitem><emphasis>Stop</emphasis> tuşuna basın (çoğunlukla küçük bir pencerededir). İşte şimdi dinlemiş oldunuz. Bir sürü satırdan oluşuyor olması gerek.
</listitem>
       <listitem>Listenin oluştuğu tablonun başındaki <emphasis>Protocol</emphasis>'e tıklayarak, paketleri kullandıkları protokole göre dizin.
</listitem>
       <listitem>Ardından ilk ilgili TCP satırını seçin.
</listitem>
       <listitem>Üzerine sağ tıklayıp, <emphasis>Follow TCP Stream</emphasis> seçeneğini seçin. Subversion istemcisinin HTTP işletişiminde kullandığı istek ve cevapları görüyor olmalısınız.
    </listitem>
      </orderedlist>
     </para>
     <para>
Yukarıdaki talimatlar Ethereal'ın grafik arayüzlü sürümüne göredir ve (<literal>tethereal</literal> ile bilinen) komut satırı sürümünde uygulanmamalıdır.
    </para>
     <para>
Bunun yanısıra, eğer güncel (0.16 sürümünden yüksek) istemciler kullanıyorsanız, sunuculardaki <literal>neon-debug-mask</literal> seçeneğini ayar dosyalarında etkin hale getirirseniz, <userinput>svn</userinput> istemcinizi çalıştırdığınızda hata ayıklama iletileri ekrana döküleceltir. <literal>neon-debug-mask</literal> değişkeninin nümerik değerleri olan <literal>NE_DBG_...</literal> tanımlarının değerlerine <filename>ne_utils.h</filename> başlık dosyasından ulaşabilirsiniz. `neon' 0.23.7 için, <literal>neon-debug-mask</literal>'ı 130 (<literal>NE_DBG_HTTP+NE_DBG_HTTPBODY</literal>) gibi bir değere ayarlamanız, HTTP iletişimde akan verinin ekrana dökülmesini sağlayacaktır.
    </para>
     <para>
Ağ üzerinde tarama yaparken, sıkıştırma özelliğini de kapamak isteyebilirsiniz. Bunun için <filename>config</filename> ayar dosyasındaki <literal>compression</literal> parametresine bakabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden <literal>svn revert</literal> açık bir hedefe ihtiyaç duyuyor? Neden öntanımlı olarak devirli değil? Bu özelliği neredeyse diğer tüm komutlar ile farklılaşıyor.</para>
    </question>
    <answer>
     <para>
Kısaca: Bu sizin iyiliğiniz için.
    </para>
     <para>
Subversion verinizin korunmasına çok öncelikli bir önem verir ve bunu sadece sürümlenmiş veriniz için de yapmaz. Sürümlenmiş ve sürüm denetim sistemine eklenmek üzere ayarlanmış dosyalar büyük bir dikkatle işlenmelidir.
    </para>
     <para><userinput>svn revert</userinput> komutu açık bir hedefe ihtiyaç duyar (istenilen hedef dizin o an bulunduğunuz yer olsa bile) ve bu bunu başarmanın tek yoludur. Bu ihtiyaç (ve eğer istiyorsanız beraberinde <option>--recursive</option> (<option>-R</option>) seçeneği sizin ne yaptığınızdan emin olmanız için kasıtlı bir şekilde yer almaktadır. Çünkü dosya bir kez geri alındığında (<literal>revert</literal> edildiğinde), yerel değişiklikleriniz tamamiyle ortadan kalkar.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Apache'yi başlattığımda <literal>mod_dav_svn</literal> db-4.X sürümü yerine db-3.X sürümünü bulduğundan "bad database version" hatası veriyor.</para>
    </question>
    <answer>
     <para><literal>apr-util</literal> kurulumunuz DB-3, <userinput>svn</userinput> ise DB-4 ile bağlanmış. Ne yazık ki, DB sembolleri farklı değil. <literal>mod_dav_svn</literal> modülü Apache'nin işlem alanına alındığında, <literal>apr-util</literal>'in DB-3 kütüphanesine bağlanmış sembollerine ulaşıyorlar.
    </para>
     <para>
Çözüm, <literal>apr-util</literal>'in DB-4 desteği ile kurulduğundan emin olmak. Bunun için Apache ya da <literal>apr-util</literal>'in <userinput>./configure</userinput> betiğine doğru seçenekleri (<literal>--with-dbm=db4 --with-berkeley-db=/the/db/prefix</literal>) vermeniz yeterli.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>RedHat 9'da "Function not implemented" hataları aldığımdan Subversion hiçbir şekilde çalışmıyor. Bu sorunu nasıl giderebilirim?</para>
    </question>
    <answer>
     <para>
Bu aslında bir Subversion sorunu olmamasına karşın, kullanıcıları sık sık etkiliyor.
    </para>
     <para>
RedHat 9 ve Fedora ile gelen Berkeley DB kütüphaneleri çekirdekteki NPTL (Native Posix Threads Library) desteğini kullanırlar.
    </para>
     <para>
RedHat tarafından dağıtılan çekirdeklerde bu özellik öntanımlı olarak eklenmiş olarak gelir zaten, fakat eğer kendi çekirdeğinizi derlediyseniz bu özelliği etkin kılmamış olabilirsiniz. Böyle bir durumda şuna benzer hata mesajları alabilirsiniz.
    </para>
     <para>
      <screen>
svn: Berkeley DB error
svn: Berkeley DB error while creating environment for filesystem tester/db:
Function not implemented
</screen>
     </para>
     <para>
Bu aşağıdaki bir kaç yöntemden biri ile giderilebilir:
    </para>
     <para>
      <itemizedlist>
       <listitem>db4'ü kendi kullandığınız çekirdeğe göre baştan derleyebilirsiniz.
</listitem>
       <listitem>Bir RedHat 9 çekirdeği kullanabilirsiniz.
</listitem>
       <listitem>Kullandığınız çekirdeğe NPTL yamaları uygulayabilirsiniz.
</listitem>
       <listitem>NPTL desteğine sahip güncel bir çekirdek (<literal>&gt;= 2.5.x</literal>) kullanabilirsiniz.
</listitem>
       <listitem>Subversion'ı (Apache'yi) başlatmadan önce, <literal>LD_ASSUME_KERNEL</literal> değişkeninin <literal>2.2.5</literal> değerine ayarlı olup olmadığını kontrol edip, eğer öyleyse değişkeni kaldırın (<userinput>unset LD_ASSUME_KERNEL</userinput>). (Bu değişken genellikle RedHat 9 altından Wine ve WineX kullanmak için ayarlanır.)
   </listitem>
      </itemizedlist>
     </para>
     <para>
Ayrıca NPTL desteğine sahip bir Berkeley DB kullanmak için de, NPTL desteğine sahip bir glibc kütüphanesi kullanmanız gerek ki, bu da glibc'nin i686 versiyonu anlamına gelir. (Bkz. <uri xlink:href="http://svn.haxx.se/users/archive-2004-03/0488.shtml">http://svn.haxx.se/users/archive-2004-03/0488.shtml</uri>.)
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden SVN günlük dosyasına Apache ile onaylatılan değişikliklerde, değişikliği yapan kullanıcı olarak "(no author)" ibaresi düşülüyor.</para>
    </question>
    <answer>
     <para>
Apache ile `anonymous' (kimliksiz) kullanıcıların arşiv üzerinde yazma haklarına sahip olmasına izin verirseniz, Apache sunucusu, <userinput>svn</userinput> istemcisinden kullanıcı adı istemeyecektir ve hatta, herhangi bir kimlik sorgulaması yapmadan kullanıcıya işlemini yapma izni verecektir. Bu nedenle, Subversion, onaylamanın kim tarafından yapıldığından haberdar olamayacağı için, günlük dosyalarında şöyle bir ibare yer alacaktır:
    </para>
     <para>
      <screen>
$ <userinput>svn log</userinput>
------------------------------------------------------------------------
rev 24:  (no author) | 2003-07-29 19:28:35 +0200 (Tue, 29 Jul 2003)
</screen>
     </para>
     <para>
Apache'de erişim kısıtlamarının ayarlanması ile ilgili olarak Subversion kitabındaki <link xlink:href="http://svnbook.red-bean.com/book.html#svn-ch-5-sect-4">Bir Arşivin Ağa Bağlanması</link> bölümüne göz atınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arada sırada "Access Denied" hataları alıyorum Windows'ta. Genelde rastgele zaman aralıklarında tekrarlıyor bu hatayı. Neden kaynaklı olabilir? </para>
    </question>
    <answer>
     <para>
Bu daha çok dosya sistemi değişikliklerini denetleyen Windows servislerinden (anti-virüs yazılımları, indeksleme servisleri, COM+ Durum Bildiri Servisi) kaynaklı bir sorun. Sorun, Subversion tarafındaki bir hatadan kaynaklı olmadığından, bu da sorunun çözülmesini bizim için güç kılıyor. Konu hakkında yapılan araştırmanın bir son durum özetine <link xlink:href="http://svn.haxx.se/dev/archive-2003-10/0136.shtml">buradan</link> ulaşabilirsiniz. 7598. revizyonda bu rastlantının karşıya çıkma sıklığını azaltacak yeni bir yöntem geliştirildiğinden, eğer 7598'den daha düşük bir revizyona sahipseniz, bunu son sürüme yükseltmeniz tavsiye olunur.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>FreeBSD üzerindeyken bazı komutlar (özellikle <literal>svnadmin create</literal>) zaman zaman donuyor. Neden kaynaklı olabilir?</para>
    </question>
    <answer>
     <para>
Bu genelde sistemde var olan entropi eksikliğinden olur. Büyük olasılıkla sisteminizi sabit disk ve ağ kesmeleri gibi kaynaklarından entropi kazanacak şekilde ayarlamanız gerekmekte. Başta <userinput>random</userinput>(4) ve <userinput>rndcontrol</userinput>(8) olmak üzere, bu değişikliği etkileyecek komutların kılavuz (man) sayfalarına bakınız.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivimi bir internet tarayıcısı ile sorunsuz görüntüleyebildiğim halde, <literal>svn checkout</literal> ile arşive erişmeye çalıştığımda "301 Moved Permanently" şeklinde bir hata alıyorum. Sorun neden kaynaklı olabilir?</para>
    </question>
    <answer>
     <para>
Aldığınız hata, <filename>httpd.conf</filename> dosyanızın yanlış ayarlandığı anlamına geliyor. Bu hata genellikle Subversion'ın sanal konumunun aynı anda birbirinden farklı iki alanda tanımlanmasından doğmaktadır.
    </para>
     <para>
Örneğin, eğer arşivinizi <literal>&lt;Location /www/foo&gt;</literal> şeklinde belirttiyseniz  ve <literal>DocumentRoot</literal> değişkeniniz de <filename>/www</filename> dizinine ayarlıysa başınız dertte demektir. <filename>/www/foo/bar</filename> dizinine herhangi bir istek geldiğinde Apache <filename>/foo/bar</filename> isimli <emphasis>gerçek</emphasis> bir dosyayı <literal>DocumentRoot</literal> altında tanımlı <filename>/www</filename> altında mı, yoksa <literal>mod_dav_svn</literal> için belirttiğimiz <filename>/www/foo</filename> için <filename>/bar</filename> altında mı bulması gerektiğine karar veremiyor. Ve genellikle böyle durumlarda ortaya çıkan "Moved Permanently" (kalıcı olarak kaldırılmıştır) hatasını düşüyor.
    </para>
     <para>
Çözümü için arşiv olarak belirttiğiniz konumun, başka bir tanımlamanın konumu ile kesişmediğine dikkat edin.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Bir dosyanın eski bir sürümüne <literal>svn</literal> ile bakmaya çalıştığımda "path not found" hatası alıyorum. Bunun sebebi ne olabilir?</para>
    </question>
    <answer>
     <para>
Subversion'ın diğer güzel bir özelliği ise, arşivin kopyalama ve yeniden adlandırma işlemlerini anlayıp, eski bağlantıları koruması. Örneğin, <filename>/trunk</filename> dizinini <filename>/branches/mybranch</filename> şeklinde kopyalarsanız, arşiv, `brach'deki herbir dosyanın <filename>/trunk</filename>'da bir öncelinin olduğunu bilir. <userinput>svn log --verbose</userinput> komutunu çalıştırırsanız kopyalama işleminin geçmiş kayıtlarını listeleyip, yeniden adlandırmayı görebilirsiniz:
    </para>
     <para>
      <screen>
r7932 | joe | 2003-12-03 17:54:02 -0600 (Wed, 03 Dec 2003) | 1 line
Changed paths:
   A /branches/mybranch (from /trunk:7931)
</screen>
     </para>
     <para>
Ne yazık ki, arşiv tüm bu kopyalama ve yeniden adlandırma işlemlerinden haberdar olduğu halde, istemciler değildir. <userinput>svn diff</userinput>, <userinput>svn merge</userinput> ve <userinput>svn cat</userinput> gibi komutlar yeniden adlandırmaları anlayıp, takip etme yetisine sahip oldukları halde, bunu yapamazlar. Bu özellik post-1.0 sürümüne eklenmek üzere programlanmıştır. (Bkz. <link xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=1093">1093. hata bildirimi</link>) Mesela, <userinput>svn diff</userinput> ile <filename>/branches/mybranch/foo.c</filename> dosyasının iki eski sürümünü karşılaştırmak istediğinizde, yeniden adladırmadan dolayı, komut otomatik olarak aslında iki eski <filename>/trunk/foo.c</filename> sürümünün karşılaştırılması gerektiğini anlamayacaktır. Bunun yerine, `branch' yolunun bir önceki revizyonda yer almadığı şeklinde bir hata alacaksınız.
    </para>
     <para>
Tüm bu çeşit problemler için kendiniz biraz koşturmak zorunda kalacaksınız. Bu nedenle, kendiniz yeniden adlandırmalardan haberdar olup, bunları <userinput>svn log --verbose</userinput> ile öğrenip açıkça <userinput>svn</userinput> istemcinize belirtmelisiniz. Örneğin,
    </para>
     <para>
      <screen>
$ <userinput>svn diff -r 1000:2000 http://host/repos/branches/mybranch/foo.c</userinput>
svn: Filesystem has no item
svn: '/branches/mybranch/foo.c' not found in the repository at revision 1000
</screen>
     </para>
     <para>komutu yerine</para>
     <para>
      <screen>
$ <userinput>svn diff -r1000:2000 http://host/repos/trunk/foo.c</userinput>
...
</screen>
     </para>
     <para>komutunu vermelisiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>HTTP Digest auth neden çalışmıyor olabilir?</para>
    </question>
    <answer>
     <para>
Bu büyük ihtimalle Apache HTTP sunucusunun 2.0.48 ve öncesi sürümleri için geçerli olan, yaması mevcut, bir hatasından kaynaklanıyor. (Bkz. <uri xlink:href="http://nagoya.apache.org/bugzilla/show_bug.cgi?id=25040">http://nagoya.apache.org/bugzilla/show_bug.cgi?id=25040</uri>) <uri xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=1608">http://subversion.tigris.org/issues/show_bug.cgi?id=1608</uri> adresine de bulgularınızın uyup uymadığını karşılaştırmak için göz atabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>AIX üzerinde <literal>xlc</literal> ile derlemeye çalıştığımda hata alıyorum. Neden kaynaklı olabilir?</para>
    </question>
    <answer>
     <para>
Ortam değişkeni olan <literal>CFLAGS</literal>'a <option>-qlanglvl=extended</option> seçeneğini eklerseniz derleme işlemi <userinput>xlc</userinput> için biraz daha esnekleşip, sorunsuz gerçekleşecektir. Ayrıntılar için <uri xlink:href="http://svn.haxx.se/dev/archive-2004-01/0922.shtml">http://svn.haxx.se/dev/archive-2004-01/0922.shtml</uri> adresindeki iletiye ve bu ileti ile ilgili iletilere bakabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Arşivden bir dizini (<option>-N</option> seçeneği ile) devirli olmayacak şekilde çalışma dizinime çektikten sonra, bazı alt dizinlerin görünmesini istiyorum. Fakat <literal>svn up subdir</literal> ile bunu yapamıyorum.</para>
    </question>
    <answer>
     <para>
Bkz. <link xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=695">İleti #695</link>. <userinput>svn checkout -N</userinput> komutunun şu anki uyarlamasında bir takım eksikler mevcut. Bu ise eksik dosyaların olduğu arşiv kopyanızda, "tamsızlık" olarak sonuçlanıyor. Subversion geliştiricilerin hiçbiri böyle bir şeye bağımlılık duymasa da, görünürde bir çok CVS kullancısı bu paradigmaya bağımlı. Şu an itibari ile işleyiş yönteminizi değiştirmekten başka bir şansınız yok: Tüm arşivi kopyaladıktan sonra, arşivi istediğiniz dizinler kapsanacak şekilde daraltabilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para><literal>mod_dav_svn</literal>'yi Windows üzerinde Apache ile çalıştırmaya çalıştığımda, <literal>mod_dav_svn.so</literal> dosyasını doğru yer olan <literal>\Apache\modules</literal> altına koyduğum halde, Apache'den modülü bulamadığına dair hata alıyorum.</para>
    </question>
    <answer>
     <para>
Bu hata iletisi böyle bir durum için biraz yanıltıcı. Daha çok Apache <filename>mod_dav_svn.so</filename> tarafından gerek duyulan bir kaç DLL'nin yüklenememesi ile ilgili. Eğer Apache bir servis olarak çalışıyorsa, normal bir kullanıcı ile aynı <literal>PATH</literal> değişkenine sahip olmayacaktır. <filename>libdb4*.dll, libeay32.dll</filename> ve <filename>ssleay32.dll</filename> dosyalarının <filename>\Apache\bin</filename> ya da <filename>\Apache\modules</filename> altında olduğundan emin olun. Eğer belirtilen dizinlerin birinde değillerse, bir kopyalarına Subversion'ın kurulum dizini altından ulaşabilirsiniz.
    </para>
     <para>
Eğer bu sorununuzu hala çözmezse, <link xlink:href="http://www.dependencywalker.com/">Dependency Walker</link> gibi bir araç kullanarak <filename>mod_dav_svn.so</filename>'nun çözülmemiş bağımlılıklarını görebilirsiniz.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Neden arşiv askılarım çalışmıyor. Dışarıdan program çağrıları gerektiği halde hiç de öyle bir çağrı yolluyor gözükmüyorlar.</para>
    </question>
    <answer>
     <para>
Arşiv askılarından program çalıştırmaya çalışırken programların tam yollarını girmeyi deneyiniz. Subversion askıları çalıştırdığında, bulundukları ortam, Subversion'ı başlatan kullanıcınınki ile aynıdır ki bu, siz aynı programları elle çalıştırmayı denediğinizde kullandığınız ortamdan farklı bir ortam olabilir. Özel olarak: Unix üzerinde <literal>$PATH</literal>, Windows üzerinde <literal>%PATH%</literal>, beklediğiniz dizinlere sahip olmuyor olabilir.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para><option>--diff-cmd</option> seçeneği ile <option>-u</option> seçeneğini kullandığımda neden uyarı alıyorum? <option>--extensions</option> seçeneği ile bunu etkisiz kılmaya çalıştığım halde olmuyor.</para>
    </question>
    <answer>
     <para>
Dışarıdan bir <userinput>diff</userinput> uygulaması kullandığınızda, Subversion komut satırını gerçekten karmaşık bir hale sokar. İlk olarak belirtilen <option>--diff-cmd</option>'dir. Ardından <option>--extensions</option> (boşsa yoksayılır), <option>--extensions</option> belirtilmezse (ya da '' şeklinde belirtilirse) <option>-u</option> gelir. Üçüncü ve dördüncüde, Subversion bir <option>-L</option> ekledikten sonra, ilk dosyanın adını girer (Örneğin: <filename>project_issues.html (revision 11209)</filename>). Beşinci ve altıncı alanlarda yeniden bir <option>-L</option> ve ikinci dosya adı... Yedinci ve sekizinciler ise birinci ve ikinci dosya isimleri... (Örneğin: <filename>.svn/text-base/project_issues.html.svn-base</filename> ve <filename>.svn/tmp/project_issues.html.tmp</filename>.)
    </para>
     <para>
Eğer seçtiğiniz <userinput>diff</userinput> uygulaması bu seçenekleri desteklemiyorsa, ufak bir kapsayıcı betik yazarak, bu seçenekleri göz ardı ettikten sonra asıl <userinput>diff</userinput> uygulamanızı çalıştırabilirsiniz.
    </para>
     <para>
Uyarı: Subversion çağrılan <userinput>diff</userinput> uygulamasının işlemesi için gönderdiği dosyaları değiştirmesini beklemez ve böyle bir durumda çalışma kopyanız içinden çıkılmaz bir hal alabilir.
    </para>
     <para>
Daha fazla bilgi için: <link xlink:href="http://subversion.tigris.org/issues/show_bug.cgi?id=2044">İleti #2044</link>
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>N'olamaz! Subversion istemcim parolalarımı düz bir metin dosyasında tuttuyor.</para>
    </question>
    <answer>
     <para>
Sakin olup, derin bir nefes alın ilk önce. <emphasis>(Canım dur daha karpuz kesecez :P)</emphasis>
    </para>
     <para>
Her şeyden önce, kaydedilmiş parolalarınızın bulunduğu dizinin (Unix sitemlerde genellikle <filename>~/.subversion/auth/</filename> altındadır) haklarının 700, yani orada sadece sizin okuma hakkınızın olduğuna dikkat ediniz. Diskteki veriyi koruması için işletim sisteminize güvenin.
    </para>
     <para>
Eğer bu sizi gerçekten rahatsız ediyorsa, parola saklama özelliğini tamamen kapatabilirsiniz. Bunun için, svn 1.0 istemcisinde, ayar dosyanıza <literal>store-auth-creds = no</literal> satırını eklemeniz yeterli. svn 1.1 ve üstü istemcilerde ise daha özel bir alanı işaret eden <literal>store-passwords = no</literal> satırını kullanabilirsiniz. (Son durumda sunucu sertifikaları halen kaydedilmeye devam edecek yalnız.)
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>"<emphasis>svn: bdb: call implies an access method which is inconsistent with previous calls</emphasis>" hatası alıyorum. Bunu nasıl düzeltebilirim?</para>
    </question>
    <answer>
     <para>
Berkeley DB 4.1'in arasıra kararsız davrandığı oluyor - 4.0 ve 4.2 sürümleri daha iyi. Bu hata mesajı 4.1'i genelde tek bir nedenden dolayı oluşan bir hatasının belirtisi.
    </para>
     <para>
Sorunun nedeni Subversion BDB-tarzı arşivi oluşturan tablolardan birinin veritabanı biçim alanında bozulma oluşması. Nedeni bilinmemekle birlikte, <literal>btree</literal> türünden <literal>recno</literal> türüne geçişi sağlayan tablolardan birini neredeyse her zaman kopyalar. En basitinden kurtarma işlemi için gerekli adımlar aşağıda anlatılmıştır - eğer bunlar başarılı olmazsa, <link xlink:href="mailto:users@subversion.tigris.org">Subversion Kullancıları E-Posta Listesi</link> ile temasa geçebilirsiniz.
    </para>
     <para>
      <itemizedlist>
       <listitem>Hiçbir işlemin arşive erişmeye çalışmadığına emin olun.
</listitem>
       <listitem>Şimdi, bir zip ya da tar dosyasına <emphasis>arşivinizin yedeğini alın</emphasis>.
</listitem>
       <listitem>Arşivin <filename>db</filename> alt dizinine geçin.
</listitem>
       <listitem>
        <filename>rm __db.* log.*</filename>
       </listitem>
       <listitem>
        <userinput>db_dump -p -r copies &gt; copies.dump</userinput>
       </listitem>
       <listitem><filename>copies.dump</filename> dosyasını bir metin düzenleyici yardımı ile açın. En tepeye yakın kısımdaki <literal>type=recno</literal> ibaresini <literal>type=btree</literal> ile değiştirin ve <literal>re_len=</literal> ile başlayan satırı silin.
</listitem>
       <listitem>
        <userinput>rm copies</userinput>
       </listitem>
       <listitem>
        <userinput>db_load copies &lt; copies.dump</userinput>
       </listitem>
       <listitem>
        <userinput>svnadmin dump .. &gt; ../../my-recovered.svndump</userinput>
       </listitem>
       <listitem>Şimdi yeni bir arşiv oluşturun, daha demin oluşturduğumuz arşiv dökümünü (<filename>my-recovered.svndump</filename>) yükleyin ve gerekli askı betikleri ile ayar dosyalarını yeni arşive kopyalayın. Arşivdeki en yüksek revizyon numarasının olması gereken değer olduğuna emin olun.
</listitem>
      </itemizedlist>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para><literal>hotbackup</literal> ile arşivimin yedeğini almaya çalıştığımda, <literal>svnadmin</literal> 2GB'tan büyük dosyalarda hata veriyor.</para>
    </question>
    <answer>
     <para>
APR'nin Apache 2.0.x ve Subversion 1.x ile kullanılan önceki 0.9 dalındaki sürümleri 2GB'tan büyük dosyaların kopyalanmasına izin vermemekte. <userinput>svnadmin hotcopy</userinput> sorununu çözen bir düzeltme APR'ye 0.9.5+, Apache'ye de 2.0.50+ sürümlerinde eklendi. Bu düzeltme tüm platformlarda çalışmıyor, fakat Linux'da çalışıyor.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>Henüz yeni onayladığım bir dosya için ilgili günlük kayıtlarını göremiyorum. Neden olabilir?</para>
    </question>
    <answer>
     <para>
Farzedin ki, <userinput>svn checkout</userinput> ile içinde bir <filename>foo.c</filename> dosyası bulunan bir arşivin 7. revizyonunu (r7) çalışma kopyanız olarak indirdiniz. Dosya üzerinde değişiklikler yapıp ve bunları onayladınız. Bu noktada iki şey olur:
    </para>
     <para>
      <itemizedlist>
       <listitem>Sunucudaki arşiv r8'e yükselir.
</listitem>
       <listitem>Elinizdeki çalışma kopyasında sadece <filename>foo.c</filename> r8'e yükselir, diğer dosyalar r7'de kalır.
    </listitem>
      </itemizedlist>
     </para>
     <para>
Şimdi <emphasis>karma revizyonlu çalışma kopyası</emphasis> denen şeye sahibiz. Sadece bir tek dosya r8'de, fakat diğer bütün dosyalar onaylanana ya da <userinput>svn update</userinput> denene kadar r7'de kalır.
    </para>
     <para>
      <screen>
$ <userinput>svn -v status</userinput>
   7        7 nesscg       .
   8        8 nesscg       foo.c
 </screen>
     </para>
     <para>
Eğer <userinput>svn log</userinput> komutunu hiçbir argüman vermeden çalıştırırsanız, komut şu anki dizinin günlük bilgisini ekrana döker. (Yukarıdaki listede '.' ile geçen.) Şu an bulunduğunuz dizin de hala r7'de olduğu için, r8 için günlük bilgisini göremezsiniz.
    </para>
     <para>
Son günlük bilgierini görmek için, şunları yapabilirsiniz:
    </para>
     <para>
      <orderedlist inheritnum="ignore" continuation="restarts">
       <listitem>
        <userinput>svn log -rHEAD</userinput>
       </listitem>
       <listitem><userinput>svn log URL</userinput> (URL, arşivin URL'sini gösteriyor.)
</listitem>
       <listitem>Sadece bir dosyanın günlük bilgisini görmek için: <userinput>svn log foo.c</userinput>
</listitem>
       <listitem>Tüm arşivinizi yükseltin ve haliyle tüm dosyalar r8'e geçeceğinden <userinput>svn log</userinput> komutunu kullanın.
    </listitem>
      </orderedlist>
     </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>
 <chapter xml:id="subversion-sss-dev">
  <info>
   <title>Geliştirici Soruları</title>
  </info>
  <qandaset defaultlabel="number">
   <qandaentry>
    <question>
     <para>Bellek diski (`ram disk') üzerinde nasıl bütünlük sınaması yapabilirim?</para>
    </question>
    <answer>
     <para>
Bkz. <uri xlink:href="http://svn.haxx.se/dev/archive-2003-02/0068.shtml">http://svn.haxx.se/dev/archive-2003-02/0068.shtml</uri>
    </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>
 <chapter xml:id="subversion-sss-ref">
  <info>
   <title>Atıflar</title>
  </info>
  <qandaset defaultlabel="number">
   <qandaentry>
    <question xml:id="subversion-sss-http-methods">
     <para>Subversion tarafından kullanılan tüm HTTP yöntemleri neler?</para>
    </question>
    <answer>
     <para>
Aşağıdaki e-posta her şeyi söylemektedir. Yazarın da altını çizdiği gibi, Subversion aslında henüz tüm WebDAV/DeltaV yöntemlerini kullanmamaktadır, ama muhtemelen günün birinde bu olacak. Bu yüzden eğer bir vekil sunucu kuruyorsanız, bunların hepsine izin verebilirsiniz:
    </para>
     <para>
      <literallayout class="normal">From: Nuutti Kotivuori <email>naked@iki.fi</email>
Subject: Re: list of HTTP messages used by svn?
To: "Hamilton Link" <email>helink@sandia.gov</email>
Cc: <email>dev@subversion.tigris.org</email>
Date: Sat, 10 Aug 2002 13:51:52 +0300

Hamilton Link şunları yazmış:
&gt;Önerebileceğiniz svn kullandığı tüm HTTP yöntemlerinin listesini
&gt;bulabileceğim bir adres var mı? İlgili belgelerde
&gt;(project_faq.html ve INSTALL dosyası) bulabildiğim kadarı ile,
&gt;svn'nin kullandığı yöntemlerin listesi en azından şöyle:
&gt;
&gt;GET, PROPFIND, REPORT, OPTIONS, MERGE, MKACTIVITY, and CHECKOUT
&gt;
&gt;Fakat bunlar benim sadece özel olarak bulduklarım ve hepsinin
&gt;kullanıldığından da tam olarak emin değilim ve pek de hakkında
&gt;fikir yürütme yanlısı değilim.
&gt;
&gt;Eğer elimde tam bir liste olsaydı, şirketin vekil sunucularına
&gt;bakan yöneticilere birçok kez yerine bir kere giderdim ve
&gt;sorunsuz bir çıkış için gerekli değişiklikleri onlara bildirip
&gt;proxy'de kesintisiz bir svn desteğine sahip olurdum.

<uri xlink:href="http://www.webdav.org/deltav/WWW10/deltav-intro.htm">http://www.webdav.org/deltav/WWW10/deltav-intro.htm</uri>

Listenin bir kopyası burada:

HTTP/1.1: GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, CONNECT

WebDAV: LOCK, UNLOCK, PROPFIND, PROPPATCH, COPY, MOVE, MKCOL

DeltaV: CHECKIN, CHECKOUT, UNCHECKOUT, VERSION-CONTROL, REPORT,
UPDATE, LABEL, MERGE, MKWORKSPACE, BASELINE-CONTROL, MKACTIVITY

Subversion bunların dışında ne başka bir yöntem kullanmatadır, ne de
bunların hepsini tam olarak kullanmaktadır. Fakat tüm WebDAV/DeltaV
desteğine sahip olmak diğer bir kaç rastgele seçimden daha iyi. Eğer
ayarlara sahip geçerli vekil sunucunuz Squid ise, o büyük ihtimalle
HTTP/1.1 ve WebDAV için gerekli her şeye sahiptir - ve ona sadece
DeltaV eklentilerini eklemeniz yeterli.

Bu listeyi şirketinizin vekil sunucu yöneticisine verebilir ve eğer
isterse daha fazla bilgi için RFC'leri kontrol edebileceğinin
açıklamasını yaparsınız.
</literallayout>
     </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>'bikeshed' de nedir?</para>
    </question>
    <answer>
     <para>
Poul-Henning Kamp'ın freebsd-hackers'a gönderdiği iletiye bakınız:<sbr/><uri xlink:href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING">http://www.freebsd.org/doc/en_US.ISO8859-1/books/faq/misc.html#BIKESHED-PAINTING</uri>
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question>
     <para>`baton' tam olarak nedir?.</para>
    </question>
    <answer>
     <para>
Subversion'ın kaynak kodu boyunca bir çok noktada `baton'a bağ vardır. Bunlar işlevlere bağlam sağlayan <userinput>void *</userinput> veri yapılarıdır. Diğer API'lerde bu daha çok <userinput>void *ctx</userinput> ya da <userinput>void *userdata</userinput> şeklinde geçer. Subversion geliştiricileri, etrafta çok fazla dolandıkları için bu tür veri yapılarına `baton' demeyi seçmişlerdir.
    </para>
    </answer>
   </qandaentry>
   <qandaentry>
    <question xml:id="subversion-sss-wedged-repos">
     <para>Arşiv kesilmiş (`wedged') denerek aslında ne kastediliyor?</para>
    </question>
    <answer>
     <para>
      <variablelist>
       <varlistentry>
        <term>Kesilmiş (`wedged') arşiv</term>
        <listitem>
         <para>
Bir Subversion arşivi, çalışma ve depolama olmak üzere, birbirinden farklı iki iç bölümden oluşur. Kesilmiş bir arşiv, çalışma bölümü herhangi bir nedenden dolayı ulaşılamayan, fakat depo bölümü hala sağlam haldeki arşivdir. Bunun için, kesilmiş bir arşivde veri kaybı olmaz. Fakat arşivin ulaşılabilir kılınması için çalışma bölümünün düzeltilmesi gereklidir. Ayrıntılı bilgi için <link linkend="subversion-sss-stuck-bdb-repos">buraya bakabilirsiniz</link>.
    </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>Zarar görmüş (`corrupted') arşiv</term>
        <listitem>
         <para>
Zarar görmüş bir arşiv ise, bahsedilen depolama bölümünde hasar oluşmuş bir arşivdir ve bu nedenle arşivde belli bir veri kaybı gözlenir.
    </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
     <para>
Eric S. Raymond'un Argo Dosyasındaki (`Jargon File') <link xlink:href="http://catb.org/~esr/jargon/html/W/wedged.html">`wedged' tanımına bakabilirsiniz</link>.
    </para>
    </answer>
   </qandaentry>
  </qandaset>
 </chapter>
</part>
