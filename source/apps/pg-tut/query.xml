<?xml version="1.0" encoding="UTF-8"?>
<!-- ********************************************************************
     $Id: query.xml,v 1.8 2002/12/20 22:46:09 nilgun Exp $
     ******************************************************************** -->

 <chapter id="pgsql-tutorial-sql">
  <title><acronym>SQL</acronym> Dili</title>
   <para>
Bu kısımda basit işlemleri uygulamak için <acronym>SQL</acronym> kullanımına kısaca değineceğiz. Verilecek <acronym>SQL</acronym> bilgisi bir başlangıç niteliği taşımaktadır, kesinlikle tam bir <acronym>SQL</acronym> eğitmeni değildir. <acronym>SQL</acronym> dili üzerine sayısız kitap yazılmıştır, bunlar içinde <ulink url="http://&pgsql-web;/docs/8.0/static/biblio.html#MELT93">Yeni SQL Dilinin Anlaşılması</ulink> ve <ulink url="http://&pgsql-web;/docs/8.0/static/biblio.html#DATE97">SQL Standartları Kılavuzu</ulink>'nu örnek gösterebiliriz. Bazı PostgreSQL dil özelliklerinin standarttan fazlasını içerdiğini bilmenizde yarar var.
   </para><para>
Bu kısımdaki örneklerde, önceki bölümde <userinput>psql</userinput>'i başlatırken kullandığınız, <literal>mydb</literal> isimli veritabanının oluşturmuş olduğunuz varsayılmıştır.
   </para><para>
Bu belgedeki örnekleri ayrıca PostgreSQL kaynak paketinde yer alan <filename>src/tutorial/</filename> dizininde de bulabilirsiniz. Bu dosyaları kullanmaya başlamadan önce dizine girip <userinput>make</userinput> komutunu vermelisiniz:
   </para><para>
<screen>
<prompt>$</prompt> <userinput>cd </userinput><replaceable>....</replaceable><userinput>/src/tutorial</userinput>
<prompt>$</prompt> <userinput>make</userinput>
</screen>
   </para><para>
Böylece, kullanıcı tanımlı işlevlerle türleri içeren C dosyaları derlenmiş ve betikler oluşturulmuş olur. (Bu işlem için GNU <userinput>make</userinput> kullanılmalıdır. Sisteminizdeki ismi farklı, belki de <userinput>gmake</userinput> olabilir.) Eğitmeni şöyle başlatabilirsiniz:
   </para><para>
<screen>
<prompt>$</prompt> <userinput>cd </userinput><replaceable>....</replaceable><userinput>/src/tutorial</userinput>
<prompt>$</prompt> <userinput>psql -s mydb</userinput>
<computeroutput>
...
</computeroutput>

<prompt>mydb=&gt;</prompt> <userinput>\i basics.sql</userinput>
</screen>
   </para><para>
Buradaki <userinput>\i</userinput> komutu, komutları belirtilen dosyadan okur. <literal>-s</literal> seçeneği sizi, her komutu sunucuya göndermeden önce bekleyen tek adımlık kipe sokar. Bu bölümde kullanılmış olan komutları <filename>basics.sql</filename> dosyasında bulabilirsiniz.
   </para>
  <sect1 id="pgsql-tutorial-concepts">
   <title>Kavramlar</title>
   <para>
<productname>PostgreSQL</productname> bir ilişkisel veritabanı yönetim sistemidir (RDBMS - Relational Database Management System). Bunun anlamı, PostgreSQL'in ilişkilerin içerdiği verileri yöneten bir sistem olduğudur. Burada bahsedilen <wordasword>ilişki</wordasword> (relation) aslında <wordasword>tablo</wordasword> karşılığı bir matematik terimidir. Verinin tablolarda saklanması olayı günümüzde gayet olağan gibi görünürse de veritabanlarının organize edilmesi için daha pek çok yol vardır. Unix türevi işletim sistemlerindeki dosya/dizin yapısı hiyerarşik veritabanlarına güzel bir örnektir. Günümüzde daha gelişmiş bir veritabanı türü de nesne yönelimli veritabanlarıdır.
   </para><para>
Her tablo satırlardan oluşur. Ve her <wordasword>satır</wordasword> kendi içinde, belli veri türlerine özel <wordasword>sütun</wordasword>lara ayrılmıştır. Sütunlar her satırda aynı sayıda ve sırada olmasına karşın, SQL aynı şeyi satır sıralaması için garanti etmez (yine de çıktı alırken isteğe bağlı olarak sıralandırılabilirler).
   </para><para>
Tablolar veritabanları halinde gruplanır ve tek bir <productname>PostgreSQL</productname> sunucu süreci tarafından yönetilen veritabanları bir veritabanı <wordasword>küme</wordasword>si oluştururlar.
   </para>
  </sect1><sect1 id="pgsql-tutorial-table">
   <title>Yeni bir Tablonun Oluşturulması</title>
   <para>
Yeni bir tabloyu, tablo ismini ve içerdiği sütün isimlerini veri türleri ile birlikte belirterek oluşturabilirsiniz:
   </para><para>
<programlisting>
CREATE TABLE weather (
    city           varchar(80),
    tmp_lo         int,           -- en düşük sıcaklık
    tmp_hi         int,           -- en yüksek sıcaklık
    prcp           real,          -- yağış miktarı
    date           date
);
</programlisting>
   </para><para>
Bu komut listesini <userinput>psql</userinput> komut satırına aynen buradaki gibi girebilirsiniz (alt satıra geçmek için &lt;enter>'a basmanız yeterli olacaktır). <userinput>psql</userinput> en sonda yer alan noktalı virgülü görene kadar komutun bitmediğini anlayacaktır.
   </para><para>
SQL komutları içinde boşluklar (boşluk karakteri, sekme ve satırsonu karakteri) özgürce kullanılabilir. Yani, yukarıdaki komut listesini siz istediğiniz gibi yazabilirsiniz; hatta hepsini tek bir satıra dahi girebilirsiniz. Yanyana gelen iki tire ("<literal>--</literal>") açıklama satırları için kullanılır. Bu işaretten sonra yazılan her şey o satırın sonuna kadar ihmal edilecektir. SQL komutlarının normalde büyük-küçük harf duyarlılığı yoktur. Duruma bağlı olarak değişkenlerin çift tırnak içine alınması onların büyük-küçük harf duyarlı olduğunu gösterir (Yukarıda bu yöntem kullanılmamıştır).
   </para><para>
<literal>varchar(80)</literal> 80 karakter uzunluğundaki bir dizgeyi tutabilecek bir veri türü belirtir. <literal>int</literal> normal bir tamsayıyı niteler. <literal>real</literal> tek hassasiyetli (single precision) gerçel sayılar için kullanılır. <literal>date</literal> alanı da adından anlaşılacağı üzere tarih saklamak için kullanılır.
   </para><para>
<productname>PostgreSQL</productname> standart <acronym>SQL</acronym> veri türlerinden <literal>int, smallint, real, double, char(<replaceable>N</replaceable>), varchar(<replaceable>N</replaceable>), date, time, timestamp</literal> ve  <literal>interval</literal> ile birlikte diğer genel araç türleriyle zengin bir geometrik tür ailesini destekler. <productname>PostgreSQL</productname> sınırsız sayıda kullanıcı tanımlı veri türleri ile özelleştirilebilir. Dolayısla, tür isimleri <acronym>SQL</acronym> standardındaki özel durumların desteklenmesinin gerektiği yerler dışında sözdizimsel anahtar sözcükler değildir.
   </para><para>
İkinci örnek, şehir isimlerini ve bulundukları coğrafik bölgeleri saklayacaktır:
   </para><para>
<programlisting>
CREATE TABLE cities (
    name            varchar(80),
    location        point
);
</programlisting>
   </para><para>
Buradaki <literal>point</literal>, PostgreSQL'e özel veri türüne bir örnektir.
   </para><para>
Son olarak, eğer bir tabloya artık ihtiyacınız kalmadıysa ya da onu baştan oluşturmak istiyorsanız şu komutu kullanabilirsiniz:
   </para><para>
<synopsis>
DROP TABLE <replaceable>tabloismi</replaceable>;
</synopsis>
   </para>
  </sect1><sect1 id="pgsql-tutorial-populate">
   <title>Tablolara Satırların Girilmesi</title>
   <para>
<userinput>INSERT</userinput> cümlesi tablolara veri girişi için kullanılır:
   </para><para>
<programlisting>
INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');
</programlisting>
   </para><para>
Veri giriş işlemlerinde tüm verilerin açıkça belirtilmesi gerekir. Sabitler sadece basit rakamsal değerler değillerdir, örnekte görüldüğü gibi tek tırnak içine alınıp belirtilmeleri şarttır. <literal>date</literal> türü esnek bir çeşit olduğundan neredeyse girilen tüm tarih çeşitlerini kabul eder. Fakat biz bu belgede belirsizlik yaratmaması açısından bu örnekteki biçimi kullanacağız.
   </para><para>
<literal>point</literal> veri türü için bir koordinat çiftine ihtiyacımız olacak:
   </para><para>
<programlisting>
INSERT INTO sehirler VALUES ('San Francisco', '(-194.0, 53.0)');
</programlisting>
   </para><para>
Çok sayıda sütun olduğunda bilginin hangi sırada girileceğini hatırlamanız zorlaşır. Sütun isimlerinin de belirtilebileceği bir sözdizimi bunu kolaylaştırır:
   </para><para>
<programlisting>
INSERT INTO weather (city, tmp_lo, tmp_hi, prcp, date)
    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');
</programlisting>
   </para><para>
İsterseniz, yukarıda bahsedilen yöntemi kullanarak verileri gireceğiniz sütunların yerlerini değiştirebilir ya da hiç yokmuş gibi farzedebilirsiniz, örneğin yağış miktarını yoksayalım:
   </para><para>
<programlisting>
INSERT INTO weather (date, city, tmp_hi, tmp_lo)
    VALUES ('1994-11-29', 'Hayward', 54, 37);
</programlisting>
   </para><para>
Birçok geliştirici mevcut sütun sırasına göre veri girmektense sıralamayı açıkça belirtmeyi tercih eder.
   </para><para>
Lütfen yukarıdaki komutların hepsini girin ki, ileride üzerinde alıştırma yapabileceğimiz bir kaç verimiz olsun.
   </para><para>
Çok fazla komutu teker teker girmek yerine bunların hepsini tek bir metin dosyasından <userinput>COPY</userinput> cümlesi ile okutabilirsiniz. <userinput>COPY</userinput> cümlesi sırf bu amaç için tasarlandığından <userinput>INSERT</userinput> cümlesine göre daha hızlı çalışmasına karşın, onun kadar esnek değildir. Bir örnek:
   </para><para>
<programlisting>
COPY weather FROM '/home/user/weather.txt';
</programlisting>
   </para><para>
Belirtilen dosya sunucunun erişebileceği bir yerde olmalıdır, istemcinin değil. <userinput>COPY</userinput> cümlesi hakkında daha fazla bilgi için <productname>PostgreSQL</productname> 8.0 belgelerindeki <ulink url="http://&pgsql-web;/docs/8.0/static/sql-copy.html"><userinput>COPY</userinput> cümlesinin açıklamasına</ulink> bakınız.
   </para>
  </sect1><sect1 id="pgsql-tutorial-select">
   <title>Bir Tablonun Sorgulanması</title>
   <para>
Bir tablodan verileri almak için tablo <wordasword>sorgulanır</wordasword>. Bunun için bir <acronym>SQL</acronym> cümlesi olan <userinput>SELECT</userinput> kullanılır. Cümle, bir seçim listesi (istenen sütunları içeren bir liste), bir tablo listesi (verilerin alınacağı tabloların listesi) ve isteğe bağlı bir niteleme (sınırlamaların belirtildiği kısım) içerir. Örneğin, <literal>weather</literal> tablosundaki satırların tamamını almak için şunu yazın:
   </para><para>
<programlisting>SELECT * FROM weather;</programlisting>
   </para><para>
Burada <literal>*</literal>, "tüm sütunlar" anlamına gelen bir kısayoldur.<footnote><para>
<literal>SELECT *</literal> kolay bir sorgulama olarak kullanışlı gibi görünse de, tabloya bir sütun eklemek sonuçları değiştireceğinden uygulamada çoğunlukla kötü bir tarz olarak kabul edilir.  </para></footnote>
   </para><para>
Yani, aynı sonuç böyle de alınacaktır:
   </para><para>
<programlisting>
SELECT city, tmp_lo, tmp_hi, prcp, date FROM weather;
</programlisting>
   </para><para>
Çıktı şöyle olmalıdır:
   </para><para>
<screen>
     city      | tmp_lo | tmp_hi | prcp |    date
---------------+--------+--------+------+------------
 San Francisco |     46 |     50 | 0.25 | 1994-11-27
 San Francisco |     43 |     57 |    0 | 1994-11-29
 Hayward       |     37 |     54 |      | 1994-11-29
(3 rows)
</screen>
   </para><para>
Seçim listesinde sadece sütun isimlerini değil, ifadeleri de kullanabilirsiniz. Örnek:
   </para><para>
<programlisting>SELECT city, (tmp_hi+tmp_lo)/2 AS tmp_avg, date FROM weather;
</programlisting>
   </para><para>
Bunun çıktısı şöyle olacaktır:
   </para><para>
<screen>
     city      | tmp_avg |    date
---------------+---------+------------
 San Francisco |      48 | 1994-11-27
 San Francisco |      50 | 1994-11-29
 Hayward       |      45 | 1994-11-29
(3 rows)
</screen>
   </para><para>
<literal>AS</literal> deyiminin çıktılanacak sütunu yeniden isimlendirmekte nasıl kullanıldığına dikkat edin. (<literal>AS</literal> deyimi isteğe bağlıdır.)
   </para><para>
Bir sorgu, istenen satırların yerini belirtmek üzere bir <literal>WHERE</literal> deyimi eklenerek nitelikli yapılabilir. <literal>WHERE</literal> deyimi bir mantıksal ifade içerir ve sadece mantıksal ifadeyi doğrulayan satırlar döndürülür. Niteleme amacıyla mantıksal işleçlere (<literal>AND</literal>, <literal>OR</literal> ve <literal>NOT</literal>) izin verilir. Örneğin, San Francisco'nun yağışlı olduğu günleri bulalım:
   </para><para>
<programlisting>
SELECT * FROM weather
    WHERE city = 'San Francisco' AND prcp &gt; 0.0;
</programlisting>
   </para><para>
Sonuç:
   </para><para>
<screen>
     city      | tmp_lo | tmp_hi | prcp |    date
---------------+--------+--------+------+------------
 San Francisco |     46 |     50 | 0.25 | 1994-11-27
(1 row)
</screen>
   </para><para>
Sorgu sonucunun sıralanmış olmasını da isteyebilirsiniz:
   </para><para>
<programlisting>
SELECT * FROM weather
    ORDER BY city;
</programlisting>
   </para><para>Sonuç:</para><para>
<screen>
     city      | tmp_lo | tmp_hi | prcp |    date
---------------+--------+--------+------+------------
 Hayward       |     37 |     54 |      | 1994-11-29
 San Francisco |     43 |     57 |    0 | 1994-11-29
 San Francisco |     46 |     50 | 0.25 | 1994-11-27
</screen>
   </para><para>
Bu örnekte, sıralamanın nasıl yapılacağı tam olarak belirtilmemiştir, dolayısıyla hangi San Fransisco satırının önce geleceği belli olmaz. Fakat aşağıdaki sorgu daima bu sıralamayla dönecektir.
   </para><para>
<programlisting>
SELECT * FROM weather
    ORDER BY city, tmp_lo;
</programlisting>
   </para><para>
Bir sorgunun sonucundan yinelenmiş satırların kaldırılmasını isteyebilirsiniz:
   </para><para>
<programlisting>
SELECT DISTINCT city
    FROM weather;
</programlisting>
   </para><para>
<screen>
     city
---------------
 Hayward
 San Francisco
(2 rows)
</screen>
   </para><para>
Burada da yine satırların sırası her sorguda farklı olabilir. Sonucun istediğimiz sırada olmasını <literal>DISTINCT</literal> ve  <literal>ORDER BY</literal> deyimlerini birlikte kullanarak sağlayabilirsiniz<footnote><para>
Bazı veritabanı sistemlerinde ve PostgreSQL'in eski sürümlerinde <literal>DISTINCT</literal> gerçeklenimi sıralamayı özdevimli yaptığından <literal>ORDER BY</literal> gereksizdir. Fakat bunun böyle olması SQL standardının bir zorlaması değildir ve şimdiki <productname>PostgreSQL</productname> <literal>DISTINCT</literal> deyiminin satırları sıralayacağını garanti etmemektedir.</para></footnote>:
   </para><para>
<programlisting>SELECT DISTINCT city
    FROM weather
    ORDER BY city;
</programlisting>
   </para>
  </sect1><sect1 id="pgsql-tutorial-join">
   <title>Tablolar Arası Katılım</title>
   <para>
Buraya kadar, yaptığımız sorgulamalarda her seferinde sadece bir tabloya erişildi. Oysa sorgulamalar aynı andan birden çok tabloya erişebildiği gibi, aynı tabloya birden fazla kez erişerek satırlara daha çeşitli yaptırımlar uygulayabilir. Aynı anda birden fazla satır ya da birden fazla tabloya erişen sorgulara <wordasword>katılımlı sorgu</wordasword> denir. Sözgelimi (daha önce oluşturduğumuz tablolardaki) tüm şehirlerin hava durumlarını ve konumlarını aynı anda listelemek istiyoruz. Bunun için <literal>weather</literal> tablosundaki tüm <literal>city</literal> sütunları ile <literal>cities</literal> tablosundaki tüm <literal>name</literal> sütunlarını karşılaştırıp, aynı olan satır çiftlerini seçmek gerekir.
   </para><note><para>
Bu sadece kavramsal bir modeldir. Katılımlı sorgular, aslında, her olası satır çiftini karşılaştırmaktan biraz daha verimli bir anlamda uygulanır ama bu işlemi kullanıcı görmez.
   </para></note><para>
Yukarıda bahsedilen işlemi şu sorgu ile elde edebiliriz:
   </para><para>
<programlisting>
SELECT *
    FROM weather, cities
    WHERE city = name;
</programlisting>
   </para><para>
<screen>
     city      | tmp_lo | tmp_hi | prcp |    date    |     name      | location
---------------+--------+--------+------+------------+---------------+-----------
 San Francisco |     46 |     50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |     43 |     57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(2 rows)
</screen>
   </para><para>
Çıktıda dikkat edilmesi gereken iki nokta bulunmakta:
   </para><para><itemizedlist><listitem><para>
Haywrad şehri için hiçbir çıktı alınmadı dikkat edildiyse. Bunun nedeni ise <literal>cities</literal>  tablosunda Hayward adlı bir şehir olmaması ve dolayısıyla <literal>JOIN</literal> bu şehri eledi. İleride bunun nasıl düzeltilebileceği üzerinde durulacak.
      </para></listitem><listitem><para>
Bir diğer dikkat çeken nokta ise, şehirlerin adını yazan iki tane sütun olması. Bunun sebebi <literal>weather</literal> ve <literal>cities</literal> tablosunun birleştirilmesidir. Pratikte bu istenmeyen bir sonuçtur. Böyle bir durumda buna neden olan <literal>*</literal> ifadesi yerine açıkça listelenmesini istediğimiz sütunları yazarak bu işi halledebiliriz:
   </para><para>
<programlisting>
SELECT city, tmp_lo, tmp_hi, prcp, date, location
    FROM weather, cities
    WHERE city = name;
</programlisting>
      </para></listitem></itemizedlist>
   </para><formalpara><title>Alıştırma:</title>
    <para>
<literal>WHERE</literal> deyimi kalktığında ortaya çıkan sonucun nedenini bulmaya çalışın.
    </para></formalpara><para>
Tablolardaki tüm sütun isimleri farklı olduğundan çözümleyici hangi ismin hangi tabloya ait olduğunu bulur. Ama bunu daha da açıkça belirtmek isimler aynı olduğunda dahi sorun çıkmasını önler ve tavsiye edilen de budur:
   </para><para>
<programlisting>
SELECT weather.city, weather.tmp_lo, weather.tmp_hi,
       weather.prcp, weather.date, cities.location
    FROM weather, cities
    WHERE cities.name = weather.city;
</programlisting>
   </para><para>
Şimdiye kadar gördüğümüz katılım sorguları ayrıca şu şekilde de yazılabilir:
   </para><para>
<programlisting>
SELECT *
    FROM weather INNER JOIN cities ON (weather.city = cities.name);
</programlisting>
   </para><para>
Bu sözdizimi yukarıdaki örneklerden biri için çok kullanılan bir sözdizimi değildir, ama bundan sonraki konuları anlayabilmek için yardımcı olacağından burada gösterdik.
   </para><para>
Şimdi Hayward kayıtlarına nasıl kavuşacağımızı işleyeceğiz. İstediğimiz şey <literal>weather</literal> tablosu üzerinde tarama yapıp, <literal>cities</literal> tablosunda bunlarla eşleşen satırları bulmak. Eğer <literal>cities</literal> tablosunda herhangi bir eşleşme bulamazsak, o sütun <literal>cities</literal> tablosu alanında boş gözükecek. Bu tür sorgulama işlemleri <wordasword>haricen katılım</wordasword> (outer join) olarak bilinir. (Şimdiye kadar gördüğümüz katılım sorgularında ise hep <wordasword>dahilen katılım</wordasword> (inner join) kullanmıştık.) Komut şöyle görünür:
   </para><para>
<programlisting>
SELECT *
    FROM weather LEFT OUTER JOIN cities ON (weather.city = cities.name);

     city      | tmp_lo | tmp_hi | prcp |    date    |     name      | location
---------------+--------+--------+------+------------+---------------+-----------
 Hayward       |     37 |     54 |      | 1994-11-29 |               |
 San Francisco |     46 |     50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |     43 |     57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(3 rows)
</programlisting>
   </para><para>
Bu sorguya <wordasword>sola haricen katılımlı</wordasword> (left outer join) sorgu denir. Böyle adlandırılmasının sebebi soldaki tablonun tüm satırları en az bir kere listelenirken, sağda yer alan tablonun sadece soldaki tablonun satırlarıyla eşleşen satırlarının listelenmesidir. Bir sol-tablo satırı çıktılanırken sağ-tabloda bu satırla eşleşen bir satır yoksa, sağ-tablonun sütunları boş kalır.
   </para><formalpara><title>Alıştırma:</title>
    <para>
Ayrıca, <wordasword>sağa haricen katılımlı</wordasword> (right outer join) ve <wordasword>iki yönlü haricen katılımlı</wordasword> (full outer join) sorgu türleri de var.  Bunların ne yaptığını da siz bulmayı deneyin.
    </para></formalpara><para>
Ayrıca, bir tabloyu kendine katılımlı olarak da sorgulayabiliriz ve buna  <wordasword>kendine katılımlı</wordasword> sorgu denir. Bir örnek olarak, diğer hava durumu kayıtlarının sıcaklık aralığı içinde kalan hava durumu kayıtlarını bulmak isteyelim. Yani, her <literal>weather</literal> satırının <literal>tmp_lo</literal> ve <literal>tmp_hi</literal> sütununu diğer <literal>weather</literal> satırlarının <literal>tmp_lo</literal> ve <literal>tmp_hi</literal> sütunu ile karşılaştıracağız. Bunu şu sorgu ile yapabiliriz:
   </para><para>
<programlisting>
SELECT W1.city, W1.tmp_lo AS low, W1.tmp_hi AS high,
    W2.city, W2.tmp_lo AS low, W2.tmp_hi AS high
    FROM weather W1, weather W2
    WHERE W1.tmp_lo &lt; W2.tmp_lo
    AND W1.tmp_hi &gt; W2.tmp_hi;

     city      | low | high |     city      | low | high
---------------+-----+------+---------------+-----+------
 San Francisco |  43 |   57 | San Francisco |  46 |   50
 Hayward       |  37 |   54 | San Francisco |  46 |   50
(2 rows)
</programlisting>
   </para><para>
Burada katılımın sol ve sağ taraflarını ayırabilmek için <literal>weather</literal> tablosunu <literal>W1</literal> ve <literal>W2</literal> olarak yeniden isimlendirdik. Ayrıca, bu çeşit isimlendirmeleri aynı şeyleri uzun uzadıya yazmaktan kaçınmak için diğer sorgularda da kullanabilirsiniz. Örnek:
   </para><para>
<programlisting>SELECT *
    FROM weather w, cities c
    WHERE w.city = c.name;
</programlisting>
   </para><para>
Bu tarz kısaltmalarla sıkça karşılaşacaksınız.
   </para>
  </sect1><sect1 id="pgsql-tutorial-agg">
   <title>Ortak Değer İşlevleri</title>
   <para>
Çoğu ilişkisel veritabanı ürünü gibi PostgreSQL'de ortak değer işlevlerini destekler. Bir ortak değer işlevi çok sayıda satırı girdi olarak alır ve bunlardan tek bir sonuç elde eder. Belli bir satır grubu üzerinde işlem yaparak, bunların sayısını bulan <function>count</function>, değerlerinin toplamını bulan <function>sum</function>, değerlerinin ortalamasını hesaplayan <function>avg</function>, en büyük ve en küçük değerleri bulan <function>max</function> ve <function>min</function> işlevleri bunlara birer örnektir.
   </para><para>
Örnek olarak, düşük sıcaklık değerlerinin en yükseğini bulalım:
   </para><para>
<screen>
SELECT max(tmp_lo) FROM weather;
 max
-----
  46
(1 row)
</screen>
   </para><para>
Eğer bu sıcaklığın hangi şehir (veya şehirlerde) ortaya çıktığını bulmak istersek,
   </para><para>
<programlisting>
SELECT city FROM weather WHERE tmp_lo = max(tmp_lo);     <lineannotation>YANLIŞ</lineannotation>
</programlisting>
   </para><para>
bu çalışmaz, çünkü <function>max</function> işlevi <literal>WHERE</literal> deyiminde kullanılamaz. (Böyle bir sınırlamanın olmasının sebebi, <literal>WHERE</literal> deyiminin ortak değeri bulunacak satırların belirlenmesinde kullanılmak zorunda olmasıdır; yani, deyim, işlevden önce değerlendirilmiş olmalıdır.) Bu durumda böyle bir sorunu gidermek için sorgunun yeniden durumlanabilmesini sağlayan aşağıdaki gibi bir <wordasword>altsorgu</wordasword> (subquery) kullanılır:
   </para><para>
<programlisting>
SELECT city FROM weather
    WHERE tmp_lo = (SELECT max(tmp_lo) FROM weather);
</programlisting>
   </para><para>
<screen>
     city
---------------
 San Francisco
(1 row)
</screen>
   </para><para>
Şimdi her şey yolunda. Çünkü ortak değer bulma bir altsorgu ile yapıldıktan sonra sonuç dış sorguda karşılaştırma değeri olarak kullanıldı.
   </para><para>
Ortak değer işlevleri <literal>GROUP BY</literal> deyimi ile kullanıldığında oldukça yararlıdır. Örneğin her şehrin en yüksek düşük sıcaklığını bulmak için şunu yazabiliriz:
   </para><para>
<programlisting>
SELECT city, max(tmp_lo)
    FROM weather
    GROUP BY city;
</programlisting>
   </para><para>Bu bize her şehir için bir değer verecektir:</para><para>
<screen>
     city      | max
---------------+-----
 Hayward       |  37
 San Francisco |  46
(2 rows)
</screen>
   </para><para>
Burada, satırlar şehirlere göre gruplanmakta, her gruptaki satırlar üzerinde <literal>max</literal> işlevi hesaplanmakta ve sonuçlar listelenmektedir. Hesaplamaya dahil olacak satırları <literal>HAVING</literal> deyimini kullanarak gruplayabiliriz:
   </para><para>
<programlisting>
SELECT city, max(tmp_lo)
    FROM weather
    GROUP BY city
    HAVING max(tmp_lo) &lt; 40;
</programlisting>
   </para><para>
<screen>
  city   | max
---------+-----
 Hayward |  37
(1 row)
</screen>
   </para><para>
Sadece <literal>tmp_lo</literal> değeri 40'ın altında olan şehirleri listelelemsi dışında bu cümle de aynı sonucu verir.  Eğer bir de bu işi abartıp sadece "S" ile başlayan şehir isimlerini istersek:
   </para><para>
<programlisting>
SELECT city, max(tmp_lo)
    FROM weather
    WHERE city LIKE 'S%'  <co id="pgsql-co.tutorial-agg-like"/>
    GROUP BY city
    HAVING max(tmp_lo) &lt; 40;
</programlisting>
   </para><para><calloutlist><callout arearefs="pgsql-co.tutorial-agg-like">
     <para>
<literal>LIKE</literal> işleci kalıp eşleştirmesi yapar ve <productname>PostgreSQL</productname> 8.0 belgelerindeki <ulink url="http://&pgsql-web;/docs/8.0/static/functions-matching.html">Kalıp Eşleme</ulink> bölümünde açıklanmıştır.
     </para></callout></calloutlist>
   </para><para>
<acronym>SQL</acronym> dilinde <literal>WHERE</literal> ve <literal>HAVING</literal> deyimlerinin ortak değer işlevleri ile nasıl etkileşime girdiğinin anlaşılması önemlidir. <literal>WHERE</literal> ve <literal>HAVING</literal> deyimleri arasındaki temel fark şudur: <literal>WHERE</literal> satırları, gruplar ve ortak değerler hesaplanmadan önce seçer (ortak değer hesaplamasında kullanılacak satırları seçer), <literal>HAVING</literal> deyimi ise ortak değerler hesaplandıktan ve gruplamalar yapıldıktan sonra işleme sokulur. Sonuç olarak, <literal>WHERE</literal> ifadelerinde (altsorgu dışında) ortak değer bulma işlemleri kullanılmazken, <literal>HAVING</literal> deyimlerinde kaçınılmazdır. (Aslında <literal>HAVING</literal> deyimleri içinde ortak değer işlevleri dışında ifadeler de kullanmanıza izin verilmiştir ama, bu biraz savurganlık olur; böyle bir koşulu <literal>WHERE</literal> deyiminde kullanmak daha verimlidir.)
   </para><para>
Önceki örnekte,  <literal>WHERE</literal> deyiminde bir ortak değer bulma işlemine ihtiyaç duyulmadığından, şehir isimlerine kısıtlama uygulamıştık. Bu, kısıtlamanın <literal>HAVING</literal> ile sağlanmasından daha uygundur; çünkü gruplamanın ve ortak değer hesaplamasının <literal>WHERE</literal> sınamasından geçemeyen satırlar için yapılması gereksizdir.
   </para>
  </sect1><sect1 id="pgsql-tutorial-update">
   <title>Verilerin Güncellenmesi</title>
   <para>
Mevcut satırları <literal>UPDATE</literal> cümlesini kullanarak güncelleyebilirsiniz.  Farzedelim ki, ayın 28'inden sonraki tüm sıcaklıkların 2 derece daha az olması gerektiğini fark ettiniz. Bu güncelleme işlemini şöyle yapabilirsiniz:
   </para><para>
<programlisting>
UPDATE weather
    SET tmp_hi = tmp_hi - 2,  tmp_lo = tmp_lo - 2
    WHERE date &gt; '1994-11-28';
</programlisting>
   </para><para>
Verinin yeni durumuna bakalım:
   </para><para>
<programlisting>
SELECT * FROM weather;

     city      | tmp_lo | tmp_hi | prcp |    date
---------------+--------+--------+------+------------
 San Francisco |     46 |     50 | 0.25 | 1994-11-27
 San Francisco |     41 |     55 |    0 | 1994-11-29
 Hayward       |     35 |     52 |      | 1994-11-29
(3 rows)
</programlisting>
   </para>
  </sect1><sect1 id="pgsql-tutorial-delete">
   <title>Veri Silme</title>
   <para>
Bir tablodan satırları silmek için <literal>DELETE</literal> cümlesini kullanabilirsiniz. Hayward'ın hava durumuyla artık ilgilenmediğinizi varsayalım. Tablodan bu satırları silmek için şunu yazabilirsiniz:
   </para><para>
<programlisting>DELETE FROM weather WHERE city = 'Hayward';
</programlisting>
   </para><para>
Böylece, <literal>weather</literal> tablosundan Hayward ile ilgili kayıtlar silinir.
   </para><para>
<programlisting>SELECT * FROM weather;
</programlisting>
   </para><para>
<screen>
     city      | tmp_lo | tmp_hi | prcp |    date
---------------+--------+--------+------+------------
 San Francisco |     46 |     50 | 0.25 | 1994-11-27
 San Francisco |     41 |     55 |    0 | 1994-11-29
(2 rows)
</screen>
   </para><para>
Özellikle sakınılması gereken şöyle bir sorgulama da var:
   </para><para>
<synopsis>DELETE FROM <replaceable>tabloismi</replaceable>;
</synopsis>
   </para><para>
Bir niteleme olmaksızın, <literal>DELETE</literal> cümlesi belirtilen tablodaki <emphasis>bütün</emphasis> satırları silecek, tabloyu boşaltacaktır. Üstelik, sistem bunu yapmadan önce sizden bir doğrulama da istemeyecektir!
   </para>
  </sect1>

 </chapter>

